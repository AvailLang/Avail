/*
 * FAQ.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "FAQ"
Uses
	"Avail"
Extends
	"Avail" = (
		"whitespace lexer",
		"whole number lexer",
		"keyword lexer",
		"operator lexer",
		"-_",
		"…#")
Entries
	"roots of_x^_+_x+_"
Body

Method "√_" is
[
	n : number
|
	If n < 0 then [Raise an incorrect-argument-type exception];
	oldGuess : double := -1.0;
	guess : double := 1.0;
	While |guess - oldGuess| > 0.0000005 do
	[
		Print: "Guess: " ++ “guess” ++ "\n";
		oldGuess := guess;
		guess := (guess + n ÷ guess) ÷ 2;
	];
	guess
];

Method "roots of_x^_+_x+_" is
[
	a : number,
	two : 2's type,
	b : number,
	c : number
|
	discriminant ::= b^2 - 4 × a × c;
	<(-b - √discriminant) ÷ (2.0 × a), (-b + √discriminant) ÷ (2.0 × a)>
] : <double…|2>;
