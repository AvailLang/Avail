/*
 * Smalltalk Lite Implementation.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Smalltalk Lite Implementation"
Versions
	"Avail-1.6.1"
Uses
	"Avail",
	"Game"
Extends
	"Avail" =
	(
		/* Lexing */
		"whitespace lexer",
		"comment lexer",
		"string token lexer",
		"whole number lexer",
		"keyword lexer",
		"operator lexer",

		/* Statements. */
		"_!;" → "_!.",
		"…",
		"…:=_;" → "…:=_.",

		/* Literals. */
		"true",
		"false",

		/* Control structures. */
		"If|if_then_else_" → "_ifTrue:_ifFalse:_"
	),
	"Game" =
	(
		/* I/O. */
		"Wump the Wumpus reader" → "self wumpTheWumpusReader",
		"Wump the Wumpus reporter" → "self wumpTheWumpusReporter",

		/* Creating a new game. */
		"a game of Wump the Wumpus" → "self new",

		/* Fiber-specific state. */
		"the agent" → "self agent",
		"the first swarm" → "self firstSwarm",
		"the second swarm" → "self secondSwarm",
		"the wumpus" → "self wumpus",

		/* Queries. */
		"_is«alive|dead»!" → "_«isAlive|isDead»!",

		/* Main activities. */
		"Until the game is over,do_" → "[self isOver]whileFalse:_",
		"Welcome" → "self welcome",
		"Look around«,having just entered»?" → "self lookAroundHavingEntered:_",
		"Give_a turn" → "self takeTurn:_",
		"Report cowardice" → "self reportCowardice",
		"Report defeat" → "self reportDefeat",
		"Report victory" → "self reportVictory",
		"Goodbye" → "self goodbye"
	)
Names
	/* Top-level definers. */
	"`!Game class methodsFor:'wumping'`!«…:…§»`|«…§»`|«_!»`!`!",
	"`!Game class methodsFor:'wumping'`!…`|«…§»`|«_!»`!`!",
	"`!Game class methodsFor:'wumping'`!…«_!»`!`!",

	/* Block definers. */
	"(Smalltalk)[]",
	"(Smalltalk)[§«_!»_!]",
	"(Smalltalk)[§`|«…§»`|«_!»_!]",

	/* I/O. */
	"self wumpTheWumpusReader:_",
	"self wumpTheWumpusReporter:_",

	/* Control structures. */
	"self currentGame:_during:_"
Body

/**
 * Declare a {@type "method"}.
 *
 * @method "`!Game class methodsFor:'wumping'`!«…:…§»`|«…§»`|«_!»`!`!"
 * @param "argsPhrase" "list phrase ⇒ <token…|2>+"
 * @param "localsPhrase" "list phrase ⇒ token*"
 * @param "stmtsPhrase" "list phrase ⇒ statement phrase*"
 * @returns "expression as statement phrase"
 */
Public macro "`!Game class methodsFor:'wumping'`!«…:…§»`|«…§»`|«_!»`!`!" is
[
	argsPhrase : list phrase ⇒ <token…|2>+
|
	argsTuple ::= argsPhrase's expressions ?→ (list phrase ⇒ <token…|2>)+;
	_, argPhrase ::= argsTuple's last's expressions
		?→ <literal phrase ⇒ token…|2>;
	argToken ::= argPhrase's token;
	argName ::= argToken's lexeme;
	Require: "parameter" named argName does not shadow;
	argDecl ::= arg «argToken : any»;
	scope map := scope map + argName → argDecl;
],
[
	argsPhrase : list phrase ⇒ <token…|2>+,
	localsPhrase : list phrase ⇒ token*
|
	localsTuple ::= localsPhrase's expressions
		?→ (literal phrase ⇒ token)+;
	localPhrase ::= localsTuple's last;
	localToken ::= localPhrase's token;
	localName ::= localToken's lexeme;
	Require: "local" named localName does not shadow;
	localDecl ::= «localToken : any»;
	scope map := scope map + localName → localDecl;
],
[
	argsPhrase : list phrase ⇒ <token…|2>+,
	localsPhrase : list phrase ⇒ token*,
	stmtsPhrase : list phrase ⇒ statement phrase*
|
	argsTuple ::= argsPhrase's expressions ?→ (list phrase ⇒ <token…|2>)+;
	args, selector ::= left fold <<>, "self "> into argsTuple through
		[
			pairPhrase : list phrase ⇒ <token…|2>,
			partial : <declaration phrase*, string…|2>
		|
			selectorPiecePhrase, argPhrase ::= pairPhrase's expressions
				?→ <literal phrase ⇒ token…|2>;
			<
				partial[1] ++ <scope map[argPhrase's token's lexeme]>,
				partial[2] ++ selectorPiecePhrase's token's lexeme ++ ":_"
			>
		];
	send $"Method_is_«styled by_»" with
	«<
		‘selector’,
		«[
			args ?→ argument phrase*
		|
			select each decl from scope map's values where
				[decl ∈ local variable phrase]
			++ map each lit of stmtsPhrase's expressions
				?→ ((literal phrase ⇒ statement phrase)*) through
					[lit's token's value]
		] : ⊤»,
		<> → list phrase
	>» : ⊤ → statement phrase
];

/**
 * Declare a {@type "method"}.
 *
 * @method "`!Game class methodsFor:'wumping'`!…`|«…§»`|«_!»`!`!"
 * @param "selectorPhrase" "literal phrase ⇒ token"
 * @param "localsPhrase" "list phrase ⇒ token*"
 * @param "stmtsPhrase" "list phrase ⇒ statement phrase*"
 * @returns "expression as statement phrase"
 */
Public macro "`!Game class methodsFor:'wumping'`!…`|«…§»`|«_!»`!`!" is
[
	selectorPhrase : literal phrase ⇒ token,
	localsPhrase : list phrase ⇒ token*
|
	localsTuple ::= localsPhrase's expressions
		?→ (literal phrase ⇒ token)+;
	localPhrase ::= localsTuple's last;
	localToken ::= localPhrase's token;
	localName ::= localToken's lexeme;
	Require: "local" named localName does not shadow;
	localDecl ::= «localToken : any»;
	scope map := scope map + localName → localDecl;
],
[
	selectorPhrase : literal phrase ⇒ token,
	localsPhrase : list phrase ⇒ token*,
	stmtsPhrase : list phrase ⇒ statement phrase*
|
	selector ::= "self " ++ selectorPhrase's token' lexeme;
	send $"Method_is_«styled by_»" with
	«<
		‘selector’,
		«[
			select each decl from scope map's values where
				[decl ∈ local variable phrase]
			++ map each lit of stmtsPhrase's expressions
				?→ ((literal phrase ⇒ statement phrase)*) through
					[lit's token's value]
		] : ⊤»,
		<> → list phrase
	>» : ⊤ → statement phrase
];

/**
 * Declare a {@type "method"}.
 *
 * @method "`!Game class methodsFor:'wumping'`!…«_!»`!`!"
 * @param "selectorPhrase" "literal phrase ⇒ token"
 * @param "stmtsPhrase" "list phrase ⇒ statement phrase*"
 * @returns "expression as statement phrase"
 */
Public macro "`!Game class methodsFor:'wumping'`!…«_!»`!`!" is
[
	selectorPhrase : literal phrase ⇒ token,
	stmtsPhrase : list phrase ⇒ statement phrase*
|
	selector ::= "self " ++ selectorPhrase's token' lexeme;
	send $"Method_is_«styled by_»" with
	«<
		‘selector’,
		«[
			map each lit of stmtsPhrase's expressions
				?→ ((literal phrase ⇒ statement phrase)*) through
					[lit's token's value]
		] : ⊤»,
		<> → list phrase
	>» : ⊤ → statement phrase
];

/**
 * Answer an empty {@type "block phrase"}.
 *
 * @macro "(Smalltalk)[]"
 * @returns "block phrase"
 */
Public macro "(Smalltalk)[]" is
[
	«[<>] : ⊤»
];

/**
 * Answer a {@type "block phrase"}.
 *
 * @macro "[§«_!»_!]"
 * @param "stmtsPhrase" "list phrase ⇒ statement phrase*"
 *        The {@type "statement phrase" statements} that define the {@type
 *        "block phrase" block}'s behavior.
 * @param "lastStmtPhrase" "literal phrase ⇒ phrase"
 *        The last {@type "phrase"}.
 * @returns "block phrase"
 */
Public macro "(Smalltalk)[§«_!»_!]" is
[
	Push scope;
],
[
	stmtsPhrase : list phrase ⇒ statement phrase*,
	lastStmtPhrase : literal phrase ⇒ phrase
|
	Pop scope;
	«[
		map each lit of stmtsPhrase's expressions
			?→ ((literal phrase ⇒ statement phrase)*) through
				[lit's token's value]
		++ <lastStmtPhrase's token's value>
	] : lastStmtPhrase's token's value's semantic type»
];

/**
 * Answer a {@type "block phrase"}.
 *
 * @macro "[§`|«…§»`|«_!»_!]"
 * @param "localsPhrase" "list phrase ⇒ token*"
 *        The {@type "local variable phrase" local variable declarations}.
 * @param "stmtsPhrase" "list phrase ⇒ statement phrase*"
 *        The {@type "statement phrase" statements} that define the {@type
 *        "block phrase" block}'s behavior.
 * @param "lastStmtPhrase" "literal phrase ⇒ phrase"
 *        The last {@type "phrase"}.
 * @returns "block phrase"
 */
Public macro "(Smalltalk)[§`|«…§»`|«_!»_!]" is
[
	Push scope;
],
[
	localsPhrase : list phrase ⇒ token*
|
	localsTuple ::= localsPhrase's expressions
		?→ (literal phrase ⇒ token)+;
	localPhrase ::= localsTuple's last;
	localToken ::= localPhrase's token;
	localName ::= localToken's lexeme;
	Require: "local" named localName does not shadow;
	localDecl ::= «localToken : any»;
	scope map := scope map + localName → localDecl;
],
[
	localsPhrase : list phrase ⇒ token*,
	stmtsPhrase : list phrase ⇒ statement phrase*,
	lastStmtPhrase : literal phrase ⇒ phrase
|
	Pop scope;
	«[
		select each decl from scope map's values where
			[decl ∈ local variable phrase]
		++ map each lit of stmtsPhrase's expressions
			?→ ((literal phrase ⇒ statement phrase)*) through
				[lit's token's value]
		++ <lastStmtPhrase's token's value>
	] : lastStmtPhrase's token's value's semantic type»
];

/**
 * Set the {@param "function"} used to read commands from the player.
 *
 * @method "self wumpTheWumpusReader:_"
 * @param "reader" "any"
 *        This must be a {@type "[]→string"}.
 * @returns "⊤"
 */
Public method "self wumpTheWumpusReader:_" is
[
	reader : any
|
	Wump the Wumpus reader := reader ?→ []→string;
];

/**
 * Set the {@param "function"} used to report information to the player.
 *
 * @method "self wumpTheWumpusReporter:_"
 * @param "reporter" "any"
 *        This must be a {@type "[string]→⊤"}.
 * @returns "⊤"
 */
Public method "self wumpTheWumpusReporter:_" is
[
	reporter : any
|
	Wump the Wumpus reporter := reporter ?→ [string]→⊤;
];

/**
 * Treat {@param "game"} as the {@type "Wump the Wumpus"} game implied by any
 * game-specific methods invoked from within {@param "action"}.
 *
 * @method "Use_as the implied game and do_"
 * @param "game" "any"
 *        The reference game. This must be a {@type "Wump the Wumpus"}.
 * @param "action" "[]→⊤"
 *        The body of code that should use {@param "game"} as the reference
 *        game.
 */
Public method "self currentGame:_during:_" is
[
	game : any,
	action : []→⊤
|
	Use game ?→ Wump the Wumpus as the implied game and do action;
];
