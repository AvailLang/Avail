/*
 * Parser.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Parser"
Versions
	"1.4.0"
Uses
	"Avail",
	"Definers",
	"IO",
	"Scanner"
Names
	"Read and execute the next command"
Body

/**
 * Report that the command parser didn't understand the player's input.
 *
 * @method "Didn't understand"
 */
Private method "Didn't understand" is
[
	Report: "I didn't understand that.\n";
];

/**
 * Report that the command parser didn't expect {@param "badToken"}, but was
 * instead expecting one of {@param "node"}'s viable next tokens.
 *
 * @method "Didn't understand_,expected a child of_"
 * @param "optionalBadToken" "nonempty string?"
 *        If specified, then the unexpected command token.
 * @param "node" "root command node"
 *        A {@type "root command node" node} in the command tree.
 */
Private method "«Didn't understand_,»Expected|expected a child of_" is
[
	optionalBadToken : nonempty string?,
	node : root command node
|
	badToken ::= optionalBadToken[1] else [""];
	goodTokens ::= node's good nodes' keys;
	If goodTokens is empty then [Didn't understand;]
	else
	[
		subs ::= {"NUMBER" → "a number", "STRING" → "a quoted string"};
		sorted ::= quicksort map goodTokens→tuple
			through [s : string | if s ∈ subs then [subs[s]] else [“s”]];
		Report:
			format "‘bad’I expected ‘how many’‘good’.\n"
			with
				bad ::= if badToken is empty
					then [""]
					else [format "Instead of “①”, " with badToken],
				"how many" ::= if |sorted| > 1 then ["one of "] else [""],
				good ::= “sorted” (as disjunctive list with serial comma);
	];
];

/**
 * Read and execute the player's next command. The allowed commands are those
 * declared with {@method "Command_is_"}.
 *
 * @method "Read and execute the next command"
 * @returns {@method "true"} if the command should consume the {@type "agent"}'s
 *          turn, {@method "false"} otherwise. An invalid command should never
 *          consumes the {@type "agent"}'s turn.
 */
Public method "Read and execute the next command" is
[
	$body : boolean;
	/* Read the next command. */
	command ::= next command;
	/* Split the command into tokens for parsing. If parsing fails, then
	 * immediately answer false.
	 */
	tokens ::=
		guard [tokenize command]
		intercept
		[
			e : runaway-string exception
		|
			Report:
				"I didn't understand that, because I expected a quotation mark \
				\|(\") at the end of the quoted string.\n";
			Exit body with false
		];
	/* If no tokens were provided, then immediately answer false. */
	If tokens is empty then
	[
		Report: "Say again?\n";
		Exit body with false
	];
	/* These are the arguments that will be passed to the action (if the
	 * command is valid).
	 */
	args : tuple := <>;
	/* Try to match the command against the command tree. */
	node : root command node := command tree;
	For each commandToken of tokens do
	[
		/* The player's commands should be construed case-insensitively. */
		canonicalToken : nonempty string := lowercase commandToken;
		/* If the token is numeric, then check to see if the special token
		 * "NUMBER" is permitted here. Push the token onto the argument list.
		 */
		If canonicalToken[1] is an Arabic numeral then
		[
			If "NUMBER" ∈ node's next nodes then
			[
				args ++= <canonicalToken→extended integer>;
				canonicalToken := "NUMBER";
			];
		]
		/* If the token is a string, then check to see if the special token
		 * "STRING" is permitted here. Push the token onto the argument list.
		 */
		else if canonicalToken[1] = ¢"\"" then
		[
			If "STRING" ∈ node's next nodes then
			[
				/* Take a slice that doesn't include the quotation marks. */
				args ++= <commandToken[2..|commandToken|-1]>;
				canonicalToken := "STRING";
			];
		];
		/* If no child is associated with the current token, then the
		 * command is invalid. Immediately answer false.
		 */
		If canonicalToken ∉ node's next nodes then
		[
			Didn't understand canonicalToken, expected a child of node;
			Exit body with false
		];
		/* Traverse the link to the next node. */
		node := cast node's next nodes[canonicalToken]
			into [n : command node | n];
	];
	/* The current node must be a command node. */
	commandNode ::= cast node into [n : command node | n];
	/* If the final node does not have an associated action, then the command
	 * is invalid. Immediately answer false.
	 */
	If ↑commandNode's action is unassigned then
	[
		Expected a child of node;
		Exit body with false
	];
	/* The command is syntactically valid. Try to apply the associated
	 * action to the accumulated arguments. If the arguments don't conform to
	 * the parameter types, then the command is not semantically valid.
	 */
	guard [invoke commandNode's action with <args>]
	intercept
	[
		e : incorrect-argument-type exception
	|
		Didn't understand;
		false
	]
] : boolean;
