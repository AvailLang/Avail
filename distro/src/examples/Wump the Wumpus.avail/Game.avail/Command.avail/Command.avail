/*
 * Command.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Command"
Versions
	"1.5.1"
Uses
	"Avail",
	"Cave",
	"Context",
	"Definers",
	"Exploration",
	"Geography",
	"IO",
	"Movable Entities",
	"RNG"
Extends
	"Parser"
Body

/*
 * These are the commands understood by the game.
 */

/* Quit the game. */
Command "quit" is
[
	Report: "Just before you can quit, the wumpus rushes in and eats you!\n";
	Kill the agent;
	false
];

/* Learn how to play. */
Commands "help", "instructions", "?" are
[
	Report: "\
Welcome to WUMP THE WUMPUS, an adaptation of Gregory Yob's 1972-3 classic,
HUNT THE WUMPUS.

While I have some small hope that this game entertains for a few minutes, its
primary value is not in its playing, but in its source code. I hope that the
source code will give aspiring Avail programmers some insight into how to write
a complete program.

In WUMP THE WUMPUS, you are a hunter on a mission to slay the mighty WUMPUS, a
lazy but formidable beast that viciously defends its lair against invaders …
Believe it or not, you are the HERO of this story. To complete your mission,
you have entered the CAVE that is home to the wumpus.

The cave comprises twenty (20) rooms, each of which are connected to three (3)
other rooms. Two of these rooms contain PITS, which you automatically fall into
upon entering the room. The wumpus knows the cave well, and is much too savvy to
fall into a pit.

Also living in the cave are two SWARMS OF SUPER BATS. When you find yourself in
a room with a super bat swarm, then you soon won't be; the bats will carry you
to another room at random, potentially landing you in a nasty situation. Super
bats fly, obviously, so pits do not intimidate them. The bats and the wumpus
have an armistice and avoid each other's company.

If you ever find yourself in a room with the wumpus, then it will eat you up.
So hand-to-hand combat is out of the question. Fortunately you brought a bow and
five (5) CROOKED ARROWS, so named because they somehow navigate the tortuous
geography of the cave. You may fire a crooked arrow through up to five (5)
adjacent rooms in a single shot. If an arrow passes through a super bat swarm,
then they will rouse themselves with unnatural haste and come spirit you off in
anger. If an arrow strikes the wumpus, then it will fell it; if it passes
through an adjacent room, however, then it rouses the wumpus. A roused wumpus
will wander around until it finds the would-be hero or gets tired and goes back
to sleep.

As you explore the cave, sensory information will provide insight into the
contents of adjacent rooms. Always trust your senses.

Should you manage to slay the wumpus, you must also escape alive or your glory
shall never be known. You can only exit the cave whence you entered it.

COMMANDS:

\"look\" --
	Reiterate a description of your surroundings.

\"NUMBER\"
\"go to NUMBER\" --
	Go to the adjacent room with the specified room number. NUMBER should be an
	integer between 1 and 20.

\"wait\" --
	Pass your turn.

\"exit\" --
	Exit the cave; this is only possible from the entrance room.

\"label NUMBER as STRING\" --
	Label the room with the specified room number. NUMBER should be an integer
	between 1 and 20, and need not refer to an adjacent room. STRING should be a
	quoted string, e.g., \"entrance room\". This label will be printed in
	subsequent references to the room (as an aid to navigation).

\"unlabel NUMBER\" --
	Unlabel the room with the specified room number. NUMBER should be an integer
	between 1 and 20, and need not refer to an adjacent room.

\"check quiver\" --
	Ascertain how many crooked arrows you have left.

\"shoot NUMBER\"
\"shoot NUMBER, NUMBER\"
\"shoot NUMBER, NUMBER, NUMBER\"
\"shoot NUMBER, NUMBER, NUMBER, NUMBER\"
\"shoot NUMBER, NUMBER, NUMBER, NUMBER, NUMBER\" --
	Shoot an arrow into the specified one (1) to five (5) rooms. Be sure about
	your trajectory; if any room in the sequence is not actually adjacent to the
	previous room, then the arrow will begin flying wild. It might even come
	back to hit you!

\"show credits\" --
	Display the credits for this text adventure epic. Read: shameless
	promotion.

\"quit\" --
	Quit the game.

If you try hard enough, then you might find other commands that also work -- or
at least don't work in slightly amusing ways.

Hope you enjoy!
";
	false
];

/* Roll credits! */
Commands "credits", "show credits" are
[
	Report: "\
WUMP THE WUMPUS was written in Avail by Todd L. Smith <todd@availlang.org> for
purely pedagogic purposes -- that and a bit of fun, of course!

It is based loosely, but not *so* loosely, on HUNT THE WUMPUS by Gregory Yob. I
think that I first encountered the 1993 Unix C port by Eric S. Raymond sometime
during my college years, probably in 1998. As of 2012.10.17, the source code
could be found here: http://internet.ls-la.net/folklore/wumpus.html

There have been many variants of HUNT THE WUMPUS over the years. I am sad that I
cannot credit all of them.

The source for WUMP THE WUMPUS is freely available; that's sort of the point.
";
	false
];

/* Try a little chutzpah. */
Bad command "win" is
[
	Report: "Ah, if only things were that simple.\n";
	false
];

/* Try being direct about shooting the wumpus. */
Bad command "shoot the wumpus" is
[
	if the wumpus's location = the agent's location then
	[
		Assert: the wumpus is dead;
		Report: "It's still dead.\n";
		↑the agent's count of remaining arrows--;
		Quiver check;
		true
	]
	else
	[
		Report: "Yeah, about that… You'll have to be more specific.\n";
		false
	]
];

Bad commands "where is the wumpus", "where is the wumpus?" are
[
	Report: "Go look for it yourself.\n";
	false
];

/* Identity crisis. */
Bad commands
	"who am i", "who am i?", "what's all this then", "what's all this then?"
are
[
	Report:
		"Your mission, should you choose to accept it: Slay the fearsome \
		\|wumpus with a crooked arrow.\n";
	false
];

/* Look around. */
Commands "look", "look around", "where am i", "where am i?" are
[
	Look around;
	false
];

/* Check your quiver. */
Commands "check quiver", "count arrows", "count crooked arrows" are
[
	Report:
		format "You have “①” crooked arrows remaining.\n"
		with the agent's count of remaining arrows;
	false
];

/* Attempt to exit the cave. */
Action "exiting" is
[
	if the agent's location ∈ entrance room then
	[
		/* The game is over. Resume the checkpoint saved by
		 * "Use_as the implied game and do_".
		 */
		Try again
	]
	else
	[
		Report: "You can't leave the cave from here.\n";
		false
	]
];

Commands "exit", "exit the cave" are exiting;
Commands "leave", "leave the cave" are exiting;

/* Pass your turn. */
Action "waiting" is
[
	Report: "You lollygag.\n";
	true
];

Command "wait", "pass" is waiting;
Bad command "lollygag" is waiting;

/* Attempt to move the agent to an adjacent room. */
Action "moving" is
[
	args : <room id…|1>
|
	id ::= args[1];
	destination ::= the cave[id];
	if destination ∈ the agent's location's adjacent rooms then
	[
		Move the agent to destination;
		true
	]
	else if destination = the agent's location then
	[
		Report: "You can't go where you already are.\n";
		false
	]
	else
	[
		Report: "That room isn't adjacent.\n";
		false
	]
];

Commands "NUMBER", "#NUMBER" are moving;
Commands "go to NUMBER", "go to #NUMBER" are moving;
Commands "move to NUMBER", "move to #NUMBER" are moving;

/* For players coming from interactive fiction, reject attempts to use the
 * cardinal directions.
 */
Action "compass rebuttal" is
[
	nearby ::=
		map each r in the agent's location's adjacent rooms through
		[r's room#];
	choice ::= the RNG's next element of nearby;
	Report:
		format
			"\
			\|The compass directions are not used to navigate the cave.
			\|Instead, maybe try \"go to “id”\" or even just \"“id”\".\n"
		with
			id ::= choice;
	false
];

Bad commands "go north", "go east", "go south", "go west", "go up", "go down"
	are compass rebuttal;
Bad commands "north", "east", "south", "west", "up", "down"
	are compass rebuttal;
Bad commands "n", "e", "s", "w", "u", "d" are compass rebuttal;

/* Wrong game. */
Bad command "go fish" is
[
	ranks ::= map each i in 2 to 10 through [“i” ++ "'s"]
		++ <"aces", "jacks", "queens", "kings">;
	Report:
		format "Sorry, wrong game… But do you have any ‘rank’?\n"
		with rank ::= the RNG's next element of ranks;
	false
];

/* Label a room as an aid to navigation. */
Commands "label NUMBER as STRING", "label #NUMBER as STRING" are
[
	args : <room id, string…|2>
|
	id, name ::= args;
	theRoom ::= the cave[id];
	theRoom's label := name;
	Report:
		format "Done‘helpful’.\n"
		with helpful ::= if name = ""
			then [" (but \"unlabel NUMBER\" is better)"]
			else [""];
	false
];

/* Unlabel a room. */
Commands "unlabel NUMBER", "unlabel #NUMBER" are
[
	args : <room id…|1>
|
	id ::= args[1];
	theRoom ::= the cave[id];
	If theRoom's label = "" then
	[
		Report: "That room is not labeled.\n";
	]
	else
	[
		theRoom's label := "";
		Report: "Done.\n";
	];
	false
];

Action "shooting" is
[
	ids : <room id…|1..5>
|
	if the cave[ids[1]] ∉ the agent's location's adjacent rooms then
	[
		Report: "That room isn't adjacent.\n";
		false
	]
	else
	[
		Report: "You take aim into the tunnel and fire a crooked arrow.\n";
		/* Decrement the number of remaining arrows. */
		↑the agent's count of remaining arrows--;
		/* If the agent is adjacent to the wumpus, then wake it up. */
		If ¬the wumpus is active
			∧ the agent's location ∈ the wumpus's location's adjacent rooms
		then
		[
			Report:
				"\"Gramghh!\" The wumpus is awakened by the loud twang of your \
				\|bow.\n";
			Now the wumpus is active;
		];
		/* This is the path that the arrow has followed so far. The last element
		 * is the arrow's current location.
		 */
		path : room+ := <the agent's location>;
		/* During the first invalid transition, i.e., the first room identifier
		 * specified that is not adjacent to the arrow's current location, the
		 * arrow will start flying wild, randomly moving ahead the remaining
		 * number of tunnels.
		 */
		flyingWild : boolean := false;
		/* The arrow will make |ids| transitions, but not necessarily to the
		 * intended rooms -- only if the player got them right!
		 */
		For each nextId of ids do
		[
			/* Note that the first shot will never fly wild. */
			nextRoom ::=
				If flyingWild
					∨ the cave[nextId] ∉ path's last's adjacent rooms then
				[
					Unless flyingWild then
					[
						flyingWild := true;
						Report:
							"Your keen sense of hearing tells you that your \
							\|arrow is now flying wild. Not good.\n";
					];
					cast path into
					[
						p : <room…|2..>
					|
						/* Don't allow the arrow to travel back along its
						 * path; keep it moving forward.
						 */
						options ::= p's last's adjacent rooms - p[|p|-1];
						the RNG's next element of options
					]
				]
				else
				[
					the cave[nextId]
				];
			Move a crooked arrow to nextRoom;
			path ++= <nextRoom>;
		];
		Quiver check;
		true
	]
];
Commands
	"shoot NUMBER",
	"shoot NUMBER, NUMBER",
	"shoot NUMBER, NUMBER, NUMBER",
	"shoot NUMBER, NUMBER, NUMBER, NUMBER",
	"shoot NUMBER, NUMBER, NUMBER, NUMBER, NUMBER",
	"fire NUMBER",
	"fire NUMBER, NUMBER",
	"fire NUMBER, NUMBER, NUMBER",
	"fire NUMBER, NUMBER, NUMBER, NUMBER",
	"fire NUMBER, NUMBER, NUMBER, NUMBER, NUMBER"
are shooting;
Commands
	"shoot #NUMBER",
	"shoot #NUMBER, #NUMBER",
	"shoot #NUMBER, #NUMBER, #NUMBER",
	"shoot #NUMBER, #NUMBER, #NUMBER, #NUMBER",
	"shoot #NUMBER, #NUMBER, #NUMBER, #NUMBER, #NUMBER",
	"fire #NUMBER",
	"fire #NUMBER, #NUMBER",
	"fire #NUMBER, #NUMBER, #NUMBER",
	"fire #NUMBER, #NUMBER, #NUMBER, #NUMBER",
	"fire #NUMBER, #NUMBER, #NUMBER, #NUMBER, #NUMBER"
are shooting;

/* Isn't it easier to "quit"? */
Bad commands "shoot self", "shoot myself", "shoot me" are
[
	/* Seriously, how do you shoot yourself with a bow? It's not very likely to
	 * kill you, but it's a waste of an arrow.
	 */
	If the RNG's next [1..20] = 1 then
	[
		Report: "Critical hit!\n";
		Kill the agent;
	]
	else
	[
		↑the agent's count of remaining arrows--;
		Report: "Ow. You are bleeding now.\n";
		/* Sometimes the wumpus smells blood. */
		If the wumpus is alive ∧ the RNG's next [1..3] < 3 then
		[
			Report: "*SNIFF* *SNIFF* \"Wumpus smells hero!\"\n";
			Now the wumpus is active;
		];
	];
	Quiver check;
	true
];
