/*
 * Context.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Context"
Versions
	"1.4.0"
Uses
	"Avail",
	"Common"
Names
	/* Context establishment. */
	"Use_as the implied game and do_",

	/* Contextual accessors. */
	"the agent",
	"the cave",
	"the first swarm",
	"the game",
	"the second swarm",
	"the wumpus"
Body

/* Define an atom for the fiber-local implied game. */
"implied game" is a new atom;

/**
 * Treat {@param "game"} as the {@type "Wump the Wumpus"} game implied by any
 * game-specific methods invoked from within {@param "action"}.
 *
 * @method "Use_as the implied game and do_"
 * @param "game" "Wump the Wumpus"
 *        The reference game.
 * @param "action" "[]→⊤"
 *        The body of code that should use {@param "game"} as the reference
 *        game.
 */
Public method "Use_as the implied game and do_" is
[
	game : Wump the Wumpus,
	action : []→⊤
|
	/* Associate the supplied game with the current fiber's property "implied
	 * game". Methods that wish to reference the implied game can read this
	 * property with "_[_]", thus enabling them to simplify their syntax (by
	 * not mentioning an argument). No matter how "action" resolves -- whether
	 * it returns or raises an exception -- clear the "implied game" property
	 * before returning control to the caller.
	 */
	current fiber[implied game] := game;
	Guard [action();]
	ensure [Remove current fiber[implied game];];
] : ⊤;

/* Introduce some simple methods to access the implied game's features. */
Public method "the game" is
	[cast current fiber[implied game] into [game : Wump the Wumpus | game]];
Public method "the cave" is [the game's setting];
Public method "the agent" is [the game's dramatis personae[agent index]];
Public method "the wumpus" is [the game's dramatis personae[wumpus index]];
Public method "the first swarm" is
	[the game's dramatis personae[first swarm index]];
Public method "the second swarm" is
	[the game's dramatis personae[second swarm index]];
