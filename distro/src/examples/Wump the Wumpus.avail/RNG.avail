/*
 * RNG.avail
 * Copyright © 1993-2017, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "RNG"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Avail"
Names
	"seed the RNG«with_»",
	"the RNG"
Body

/**
 * The {@type "pRNG" pseudorandom number generator} that will be used throughout
 * the game.
 */
rng : pRNG;

/**
 * Seed {@method "the RNG"}.
 *
 * @method "seed the RNG«with_»"
 * @param "optionalSeed" "[0..2^32)?"
 *        If specified, then an unsigned 32-bit number that will be used to
 *        seed the pseudorandom number generator. Otherwise, use the number of
 *        milliseconds since the UNIX Epoch.
 */
Public method "seed the RNG«with_»" is
[
	optionalSeed : [0..2^32)?
|
	seed ::= optionalSeed[1] else [milliseconds since the Epoch mod 2^32];
	rng := a Mersenne Twister from seed;
] : ⊤;

/**
 * Answer the {@type "pRNG" pseudorandom number generator}.
 *
 * @method "the RNG"
 * @returns "pRNG"
 *          The global pseudorandom number generator. If it was not previously
 *          {@method "seed the RNG«with_»" seeded}, then seed it using the
 *          number of milliseconds since the UNIX Epoch.
 */
Public method "the RNG" is
[
	If rng is unassigned then
	[
		/* This constructor uses the number of milliseconds since the UNIX
		 * Epoch as a seed.
		 */
		rng := a Mersenne Twister;
	];
	rng
] : pRNG;
