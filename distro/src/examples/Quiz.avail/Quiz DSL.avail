/*
 * Quiz DSL.avail
 * Copyright © 1993-2017, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Quiz DSL"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Avail",
	"Dimensional Analysis" = (-"point", -"p", …)
Extends
	"Avail" =
	(
		"_!;",
		"…$",
		"…#"
	),
	"Dimensional Analysis" = ("__")
Names
	/* Points. */
	"point", "pt",

	/* Defining a quiz. */
	"Quiz_",

	/* Defining a question. */
	"Multiple Choice(_)._«A:_«✔»?»",
	"Short Answer(_)._«A:_»",
	"True«✔»?/False«✔»?(_)._"
Body

"point" ("pt") is a base unit;

"text" is a new field atom;

/**
 * An {@code "answer"} to a {@type "question"}, independent of its correctness.
 *
 * @type "answer"
 * @supertype "object"
 * @field "text" "string"
 *        The text of the answer.
 */
Class "answer" extends object
	with field
		reconstructible text : string;

"weight" is a new field atom;

/**
 * A {@code "question"}.
 *
 * @type "question"
 * @supertype "object"
 * @field "text" "string"
 *        The text of the question.
 * @field "weight" "natural number points"
 *        The weight of the question, in {@type "point" points}.
 */
Class "question" extends object
	with fields
		text : string,
		weight : natural number point;

/**
 * Answer a textual representation of the specified {@type "question"} that
 * includes its kind (multiple-choice, true/false, etc.), weight, and text.
 *
 * @method "“_”"
 * @param "aQuestion" "question"
 *        A {@type "question"}.
 * @returns "string"
 */
Abstract method "“_”" is [question]→string;

/**
 * Is {@param "anAnswer"} a correct answer to {@param "aQuestion"}?
 *
 * @method "_correctly answers_"
 * @param "anAnswer" "answer"
 *        An {@type "answer"}.
 * @param "aQuestion" "question"
 *        A {@type "question"}.
 * @returns "boolean"
 *          {@code "true"} if {@param "anAnswer"} correctly answers {@param
 *          "aQuestion"}, {@code "false"} otherwise.
 */
Private abstract method "_correctly answers_" is [answer, question]→boolean;

"answers" is a new field atom;
"correct answers" is a new field atom;

/**
 * A {@code "multiple-choice question"}.
 *
 * @type "question"
 * @supertype "object"
 * @field "text" "string"
 *        The text of the question.
 * @field "weight" "natural number points"
 *        The weight of the question, in {@type "point" points}.
 * @field "answers" "answer+"
 *        Every supplied {@type "answer"} to the question.
 * @field "correct answers" "{answer…|1..}"
 *        Every correct {@type "answer"} to the question.
 */
Class "multiple-choice question" extends question
	with fields
		answers : answer+,
		correct answers : {answer|1..};

/**
 * Answer a textual representation of the specified {@type
 * "multiple-choice question"} that includes its kind, weight, and text.
 *
 * @method "“_”"
 * @param "aQuestion" "multiple-choice question"
 *        A {@type "multiple-choice question"}.
 * @returns "string"
 */
Method "“_”" is
[
	aQuestion : multiple-choice question
|
	format "Multiple choice. “①”.\n‘②’\n"
	with aQuestion's weight, aQuestion's text
] : string;

/**
 * Is {@param "anAnswer"} a correct answer to {@param "aQuestion"}?
 *
 * @method "_correctly answers_"
 * @param "anAnswer" "answer"
 *        An {@type "answer"}.
 * @param "aQuestion" "multiple-choice question"
 *        A {@type "multiple-choice question"}.
 * @returns "boolean"
 *          {@code "true"} if {@param "anAnswer"} correctly answers {@param
 *          "aQuestion"}, {@code "false"} otherwise.
 */
Private method "_correctly answers_" is
[
	anAnswer : answer,
	aQuestion : multiple-choice question
|
	anAnswer ∈ aQuestion's correct answers
] : boolean;

"title" is a new field atom;
"questions" is a new field atom;

/**
 * A {@code "quiz"}.
 *
 * @type "quiz"
 * @supertype "object"
 * @field "title" "string"
 *        The title of the quiz.
 * @field "questions" "question+"
 *        Every {@type "question"} on the quiz.
 */
Class "quiz" extends object
	with field
		title : string
	with mutable field
		questions : question*;

/**
 * Answer the total weight of the specified {@type "quiz"}.
 *
 * @method "_'s⁇total weight"
 * @param "aQuiz" "quiz"
 *        A {@type "quiz"}.
 * @returns "whole number point"
 *          The total weight of {@param "aQuiz"}, measured in {@type "point"
 *          points}.
 */
Private method "_'s⁇total weight" is
[
	aQuiz : quiz
|
	(cast aQuiz's questions into
	[
		qs : question+
	|
		∑ map each q in qs through [q's weight's extent]
	]
	else [0]) pt
];

mutex ::= a reentrant mutex named "quiz mutex";

/**
 * All registered {@type "quiz" quizzes}, keyed by {@type "module"}.
 *
 * @global "quizzes" "{module→quiz|}"
 */
quizzes : {module→quiz|} := {};

/**
 * Answer the {@type "quiz"} associated with the {@method "current module"}.
 *
 * @method "current quiz"
 * @returns "quiz"
 */
Private method "current quiz" is [quizzes[current module]];

/**
 * Reject the current parse if the {@method "current module"} has not yet
 * defined a {@type "quiz"}.
 *
 * @method "Require:quiz is defined"
 * @returns "⊤"
 */
Private method "Require:quiz is defined" is
[
	If ¬current module ∈ quizzes then
	[
		Reject parse, expected:
			"quiz to be defined \
			\|(but you forgot to send \"Quiz_\" at the beginning)"
	];
];

/**
 * Define a {@type "multiple-choice question"}.
 *
 * @method "Multiple Choice(_)._«A:_«✔»?»"
 * @param "weight" "natural number point"
 *        The weight of the {@type "question"}, in {@type "point" points}.
 * @param "questionText" "nonempty string"
 *        The text of the question.
 * @param "answerTuples" "<<nonempty string, boolean…|2>…|1..>"
 *        A tuple of pairs. The first element of each pair is the text of an
 *        answer and the second element is a {@type "boolean"} which is
 *        {@method "true"} if the answer is considered correct. (The answer is
 *        considered correct iff an asterisk follows it.)
 * @returns "⊤"
 */
Public method "Multiple Choice(_)._«A:_«✔»?»" is
[
	weight : natural number point,
	questionText : nonempty string,
	answerTuples : <<nonempty string, boolean…|2>…|1..>
|
	answers ::= map each t in answerTuples through
		[an answer with text ::= t[1]];
	correctAnswers ::= (map and filter answerTuples by
		[
			t : <nonempty string, boolean…|2>,
			save : [answer]→⊤
		|
			If t[2] then [save(an answer with text ::= t[1]);];
		])→set;
	newQuestion ::= a multiple-choice question with
		text ::= questionText,
		weight ::= weight,
		answers ::= answers,
		correct answers ::= cast correctAnswers into [t : {answer|1..} | t];
	current quiz's questions := current quiz's questions ++ <newQuestion>;
] : ⊤;

/**
 * Reject the current parse if:
 *
 * <ul>
 * <li>The {@method "current module"} has not yet defined a {@type "quiz"}.</li>
 * <li>No {@type "answer" answers} are marked as correct.</li>
 * <li>Multiple {@type "answer" answers} are equal.</li>
 * </ul>
 *
 * @method "Multiple Choice(_)._«A:_«✔»?»"
 * @restricts "natural number point's type"
 * @restricts "nonempty string's type"
 * @restricts "<<nonempty string, boolean…|2>…|>'s type"
 */
Semantic restriction "Multiple Choice(_)._«A:_«✔»?»" is
[
	weight : natural number point's type,
	questionText : nonempty string's type,
	answers : <<nonempty string, boolean…|2>…|>'s type
|
	Require: quiz is defined;
	uniqueAnswers : {string|} := ∅;
	anyCorrect : boolean := false;
	For each index from 1 to ⎣answers⎦ do
	[
		uniqueAnswers := uniqueAnswers + answers[index][1]'s instance;
		If answers[index][2]'s instance then [anyCorrect := true;];
	];
	If |uniqueAnswers| ≠ ⎣answers⎦ then
	[
		Reject parse, expected: "each answer to occur uniquely"
	];
	If ¬anyCorrect then
	[
		Reject parse, expected: "at least one answer to be marked as correct"
	];
	⊤
];

/**
 * The canonical "true" answer.
 *
 * @global "trueAnswer" "answer"
 * @see {@method "True«✔»?/False«✔»?(_)._"}
 */
trueAnswer ::= an answer with text ::= "true";

/**
 * The canonical "false" answer.
 *
 * @global "falseAnswer" "answer"
 * @see {@method "True«✔»?/False«✔»?(_)._"}
 */
falseAnswer ::= an answer with text ::= "false";

/**
 * A {@code "true/false question"}.
 *
 * @type "true/false question"
 * @supertype "question"
 * @field "text" "string"
 *        The text of the question.
 * @field "weight" "natural number points"
 *        The weight of the question, in {@type "point" points}.
 * @field "answers"
 *        "<{an answer with text ::= \"true\", \
 *        \|an answer with text ::= \"false\"}ᵀ…|2>"
 *        Every supplied {@type "answer"} to the question.
 * @field "correct answers"
 *        "{{an answer with text ::= \"true\", \
 *        \|<an answer with text ::= \"false\"}ᵀ|1}"
 *        Every correct {@type "answer"} to the question.
 */
Class "true/false question" extends question
	with fields
		answers : <{trueAnswer, falseAnswer}ᵀ…|2>,
		correct answers : {{trueAnswer, falseAnswer}ᵀ|1};

/**
 * Answer a textual representation of the specified {@type
 * "true/false question"} that includes its kind, weight, and text.
 *
 * @method "“_”"
 * @param "aQuestion" "true/false question"
 *        A {@type "true/false question"}.
 * @returns "string"
 */
Method "“_”" is
[
	aQuestion : true/false question
|
	format "True/false. “①”.\n‘②’\n"
	with aQuestion's weight, aQuestion's text
] : string;

/**
 * Define a {@type "true-false question"}.
 *
 * @method "True«✔»?/False«✔»?(_)._"
 * @param "isTrue" "boolean"
 *        {@method "true"} if the {@type "answer"} is marked as true.
 * @param "isFalse" "boolean"
 *        {@method "true"} if the {@type "answer"} is marked as false.
 * @param "weight" "natural number point"
 *        The weight of the {@type "question"}, in {@type "point" points}.
 * @param "questionText" "nonempty string"
 *        The text of the question.
 * @returns "⊤"
 */
Public method "True«✔»?/False«✔»?(_)._" is
[
	isTrue : boolean,
	isFalse : boolean,
	weight : natural number point,
	questionText : nonempty string
|
	newQuestion ::= a true/false question with
		text ::= questionText,
		weight ::= weight,
		answers ::= <trueAnswer, falseAnswer>,
		correct answers ::= {if isTrue then [trueAnswer] else [falseAnswer]};
	current quiz's questions := current quiz's questions ++ <newQuestion>;
] : ⊤;

/**
 * Reject the current parse if:
 *
 * <ul>
 * <li>The {@method "current module"} has not yet defined a {@type "quiz"}.</li>
 * <li>Both {@type "answer" answers} are marked as correct.</li>
 * <li>Neither {@type "answer" answer} is marked as correct.</li>
 * </ul>
 *
 * @method "True«✔»?/False«✔»?(_)._"
 * @restricts "boolean's type"
 * @restricts "boolean's type"
 * @restricts "natural number point's type"
 * @restricts "nonempty string's type"
 */
Semantic restriction "True«✔»?/False«✔»?(_)._" is
[
	isTrue : boolean's type,
	isFalse : boolean's type,
	weight : natural number point's type,
	questionText : nonempty string's type
|
	Require: quiz is defined;
	Unless isTrue's instance ⊕ isFalse's instance then
	[
		Reject parse, expected:
			format "exactly one correct answer to be marked (but ‘①’)"
			with (if isTrue's instance
				then ["both are marked"]
				else ["neither are marked"])
	];
	⊤
];

/**
 * A {@code "short-answer question"}.
 *
 * @type "short-answer question"
 * @supertype "question"
 * @field "text" "string"
 *        The text of the question.
 * @field "weight" "natural number points"
 *        The weight of the question, in {@type "point" points}.
 * @field "correct answers" "{answer…|1..}"
 *        Every correct {@type "answer"} to the question.
 */
Class "short-answer question" extends question
	with fields
		correct answers : {answer|1..};

/**
 * Answer a textual representation of the specified {@type
 * "short-answer question"} that includes its kind, weight, and text.
 *
 * @method "“_”"
 * @param "aQuestion" "short-answer question"
 *        A {@type "short-answer question"}.
 * @returns "string"
 */
Method "“_”" is
[
	aQuestion : short-answer question
|
	format "Short answer. “①”.\n‘②’\n"
	with aQuestion's weight, aQuestion's text
] : string;

/**
 * Is {@param "anAnswer"} a correct answer to {@param "aQuestion"}?
 *
 * @method "_correctly answers_"
 * @param "anAnswer" "answer"
 *        An {@type "answer"}.
 * @param "aQuestion" "short-answer question"
 *        A {@type "short-answer question"}.
 * @returns "boolean"
 *          {@code "true"} if {@param "anAnswer"} correctly answers {@param
 *          "aQuestion"}, {@code "false"} otherwise.
 */
Private method "_correctly answers_" is
[
	anAnswer : answer,
	aQuestion : short-answer question
|
	(anAnswer's text ::= lowercase trim anAnswer's text)
		∈ map each a in aQuestion's correct answers through
			[a's text ::= lowercase trim a's text]
] : boolean;

/**
 * Define a {@type "short-answer question"}.
 *
 * @method "Short Answer(_)._«A:_»"
 * @param "weight" "natural number point"
 *        The weight of the {@type "question"}, in {@type "point" points}.
 * @param "questionText" "nonempty string"
 *        The text of the question.
 * @param "correctAnswers" "<nonempty string…|1..>"
 *        Every correct answer to the question.
 * @returns "⊤"
 */
Public method "Short Answer(_)._«A:_»" is
[
	weight : natural number point,
	questionText : nonempty string,
	correctAnswers : <nonempty string…|1..>
|
	newQuestion ::= a short-answer question with
		text ::= questionText,
		weight ::= weight,
		correct answers ::= (map each a in correctAnswers through
			[an answer with text ::= a])→set;
	current quiz's questions := current quiz's questions ++ <newQuestion>;
] : ⊤;

/**
 * Reject the current parse if:
 *
 * <ul>
 * <li>The {@method "current module"} has not yet defined a {@type "quiz"}.</li>
 * <li>Multiple {@type "answer" answers} are equal.</li>
 * <li>{@type "answer" Answers} not to begin or end with {@method
 *     "_is whitespace"}.</li>
 * </ul>
 *
 * @method "Short Answer(_)._«A:_»"
 * @restricts "natural number point's type"
 * @restricts "nonempty string's type"
 * @restricts "<<nonempty string, boolean…|2>…|>'s type"
 */
Semantic restriction "Short Answer(_)._«A:_»" is
[
	weight : natural number point's type,
	questionText : nonempty string's type,
	correctAnswers : <nonempty string…|1..>'s type
|
	Require: quiz is defined;
	uniqueAnswers : {string|} := ∅;
	noncanonical : string* := <>;
	For each index from 1 to ⎣correctAnswers⎦ do
	[
		anAnswer ::= correctAnswers[index]'s instance;
		If trim anAnswer ≠ anAnswer then
		[
			noncanonical ++= <anAnswer>;
		];
		uniqueAnswers := uniqueAnswers + anAnswer;
	];
	If ¬noncanonical is empty then
	[
		Reject parse, expected:
			format
				"the following answers not to begin or end with whitespace: ‘①’"
			with “noncanonical” (as simple list)
	];
	If |uniqueAnswers| ≠ ⎣correctAnswers⎦ then
	[
		Reject parse, expected: "each answer to occur uniquely"
	];
	⊤
];

/**
 * A {@code "grade sheet"} records the user's answers.
 *
 * @type "grade sheet"
 * @supertype "object"
 * @field "answers" "{question→answer|}"
 *        The user's {@type "answer" answers} to the {@type "quiz"}, organized
 *        by {@type "question"}.
 */
Class "grade sheet" extends object
	with mutable field
		answers : {question→answer|};

/**
 * Answer the number of correct answers tallied by the {@type "grade sheet"}.
 *
 * @method "_'s⁇correct answers"
 * @param "gradeSheet" "grade sheet"
 *        A {@type "grade sheet"}.
 * @returns "whole number"
 *          The number of correct answers.
 */
Private method "_'s⁇correct answers" is
[
	gradeSheet : grade sheet
|
	count of gradeSheet's answers' bindings where
		[b : <question, answer…|2> | b[2] correctly answers b[1]]
] : whole number;

/**
 * Answer the total score represented by the {@type "grade sheet"}.
 *
 * @method "_'s⁇score"
 * @param "gradeSheet" "grade sheet"
 *        A {@type "grade sheet"}.
 * @returns "whole number point"
 *          The total score.
 */
Private method "_'s⁇score" is
[
	gradeSheet : grade sheet
|
	score : whole number point := 0 pt;
	For each q → a of gradeSheet's answers do
	[
		If a correctly answers q then [score := score + q's weight;];
	];
	score
] : whole number point;

"grades" is a new heritable atom;

/**
 * Set the {@type "grade sheet"} for the {@method "current fiber"}.
 *
 * @method "current grade sheet:=_"
 * @param "gradeSheet" "grade sheet"
 *        A {@type "grade sheet"}.
 * @returns "⊤"
 */
Private method "current grade sheet:=_" is
[
	gradeSheet : grade sheet
|
	current fiber[grades] := gradeSheet;
] : ⊤;

/**
 * Answer the {@type "quiz"} associated with the {@method "current module"}.
 *
 * @method "current quiz"
 * @returns "quiz"
 */
Private method "current grade sheet" is [current fiber[grades]];
Semantic restriction "current grade sheet" is [grade sheet];

/**
 * Record the fact that the user answered {@param "anAnswer"} to question
 * {@param "aQuestion"}.
 *
 * @method "User answered_to_"
 * @param "aQuestion" "question"
 * @param "anAnswer" "answer"
 * @returns "⊤"
 */
Private method "User answered_to_" is
[
	anAnswer : answer,
	aQuestion : question
|
	gradeSheet ::= current grade sheet;
	gradeSheet's answers := gradeSheet's answers + aQuestion→anAnswer;
] : ⊤;

/**
 * Present the specified {@type "question"} to the user. The user should respond
 * appropriately based on the kind of question asked.
 *
 * @method "Present_"
 * @param "aQuestion" "question"
 *        The {@type "question"} to present to the user.
 * @returns "⊤"
 */
Private abstract method "Present_" is [question]→⊤;

/**
 * Present the specified {@type "multiple-choice question"} to the user. The
 * user should respond by inputting a numeral between {@code "1"} and {@code
 * "|aQuestion's answers|"}. If the user provides some other input, then she
 * will be prompted again.
 *
 * @method "Present_"
 * @param "aQuestion" "multiple-choice question"
 *        The {@type "multiple-choice question"} to present to the user.
 * @returns "⊤"
 */
Private method "Present_" is
[
	aQuestion : multiple-choice question
|
	/* Randomize the order in which the answers are presented. */
	choices ::= a pRNG's next shuffling of aQuestion's answers;
	text ::= “aQuestion” ++ concatenate map each a, i in choices through
		[format "“①”)  ‘②’\n" with i, a's text];
	Print: text;
	choice : whole number := 0;
	Do
	[
		Print: "Your answer?  ";
		choice := try [next line from standard input→[1..|choices|]] else [0];
	]
	while choice = 0;
	User answered choices[1 max choice] to aQuestion;
] : ⊤;

/**
 * Present the specified {@type "true/false question"} to the user. The user
 * should respond by inputting, case-insensitively, a "t" (for true) or an "f"
 * (for false). If the user provides some other input, then he will be prompted
 * again.
 *
 * @method "Present_"
 * @param "aQuestion" "true/false question"
 *        The {@type "true/false question"} to present to the user.
 * @returns "⊤"
 */
Private method "Present_" is
[
	aQuestion : true/false question
|
	Print: “aQuestion”;
	choice : string := "";
	Do
	[
		Print: "[T]rue or [F]alse?  ";
		choice := try [lowercase next line from standard input] else [""];
	]
	until choice ∈ {"t", "f"};
	User answered (if choice = "t" then [trueAnswer] else [falseAnswer])
		to aQuestion;
] : ⊤;

/**
 * Present the specified {@type "short-answer question"} to the user. The user
 * should respond by inputting, case-insensitively, the desired response. If the
 * user provides only {@method "_is whitespace" whitespace}, then she will be
 * prompted again.
 *
 * @method "Present_"
 * @param "aQuestion" "short-answer question"
 *        The {@type "short-answer question"} to present to the user.
 * @returns "⊤"
 */
Private method "Present_" is
[
	aQuestion : short-answer question
|
	Print: “aQuestion”;
	shortAnswer : string := "";
	Do
	[
		Print: "Your answer?  ";
		shortAnswer := try [next line from standard input] else [""];
	]
	while trim shortAnswer = "";
	User answered an answer with text ::= shortAnswer to aQuestion;
] : ⊤;

/**
 * Administer the specified {@type "quiz"} to the user. At the end, provide the
 * user feedback about how she did.
 *
 * @method "Administer_"
 * @param "aQuiz" "quiz"
 *        The {@type "quiz"} to administer.
 * @returns "⊤"
 */
Private method "Administer_" is
[
	aQuiz : quiz
|
	current grade sheet := a grade sheet with answers := {};
	Print:
		format "‘①’ ‘②’\n"
		with
			aQuiz's title,
			(0 max 79 - |aQuiz's title|) of ¢=;
	count ::= |aQuiz's questions|;
	For each aQuestion, index of aQuiz's questions do
	[
		Print: format "\n[#“①” of “②”]\n" with index, count;
		Present aQuestion;
	];
	gradeSheet ::= current grade sheet;
	Print:
		format
			"\nSummary ‘⑥’\n\n\
			\|Correct answers: “①” / “②”\n\
			\|Score          : “③” / “④” (“⑤”%)\n"
		with
			gradeSheet's correct answers,
			count,
			gradeSheet's score,
			aQuiz's total weight,
			gradeSheet's score's extent × 100 ÷ aQuiz's total weight's extent,
			79 - |"Summary"| of ¢=;
] : ⊤;

/**
 * Define a {@type "quiz"}. Note that the {@method "current module"} may only
 * define one {@type "quiz"}.
 *
 * @method "Quiz_"
 * @param "title" "nonempty string"
 *         The title of the quiz.
 * @returns "⊤"
 */
Public method "Quiz_" is
[
	title : nonempty string
|
	Lock mutex for
	[
		Assert: ¬current module ∈ quizzes ("This quiz is already defined.");
		newQuiz ::= a quiz with title ::= title, questions := <>;
		quizzes := quizzes + current module→newQuiz;
	];
	/* Define "Take quiz" in the current module. The semantic restriction
	 * ensures that it is named as an entry point.
	 */
	theQuiz ::= current quiz;
	Method "Take quiz" is [Administer theQuiz;];
] : ⊤;

/**
 * Reject an attempt to redefine the {@method "current module"}'s {@type
 * "quiz"}.
 *
 * @method "Quiz_"
 * @restricts "nonempty string's type"
 */
Semantic restriction "Quiz_" is
[
	title : nonempty string's type
|
	Lock mutex for
	[
		If current module ∈ quizzes then
		[
			Reject parse, expected: "quiz not to be redefined"
		];
	];
	If ¬"Take quiz" ∈ current module's entry points then
	[
		Reject parse, expected: "\"Take quiz\" to be declared as an entry point"
	];
	⊤
];
