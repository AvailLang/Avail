/*
 * Leet.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Leet"
Uses
	"Avail"
Extends
	"Avail" = (
		/* Avail's lexers */
		"whitespace lexer",
		"comment lexer",
		"string token lexer",
		"whole number lexer",
		"keyword lexer",
		"operator lexer",

		/* String literal */
		"…$")
Entries
	"_translated"
Body

/* Our simple leetspeak variant just transliterates English. These are the
 * transliteration rules, with the source characters on the left and the
 * replacement characters on the right. Cent sign (¢) plus a character means
 * "that character as an object".
 */
transliterator ::=
{
	¢a → ¢@ ,
	¢e → ¢3 ,
	¢h → ¢# ,
	¢i → ¢! ,
	¢l → ¢1 ,
	¢o → ¢0 ,
	¢s → ¢$ ,
	¢t → ¢+
};

Method "_transliterated" is
[
	ch : character
|
	/* Convert "ch" to lowercase before looking it up in the transliterator.
	 * If lookup succeeds, then "transliterator" answers with the substitute;
	 * otherwise, it answers with the original character.
	 */
	transliterator[lowercase ch] else [ch]
];

Method "_translated" is
[
	source : string
|
	/* Transliterate each character (temporarily named "ch") of "source", left
	 * to right, and then answer the result of putting them all back together in
	 * the same order.
	 */
	map each ch of source through [ch transliterated]
];
