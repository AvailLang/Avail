/*
 * Contexts.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Contexts"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Abstract Types",
	"Avail"
Names
	/* Context. */
	"context",
	"current scene",
	"_'s⁇current scene",
	"_'s⁇current scene:=_",
	"`↑_'s⁇current scene",
	"previous scene",
	"_'s⁇previous scene",
	"_'s⁇previous scene:=_",
	"`↑_'s⁇previous scene",

	/* The implied context. */
	"Use_as the implied context for_",
	"the implied context"
Body

/**
 * The current scene field atom of a {@type "context"}.
 *
 * @global "current scene" "atom"
 */
Public "current scene" is a new field atom;

/**
 * The previous scene field atom of a {@type "context"}.
 *
 * @global "previous scene" "atom"
 */
Public "previous scene" is a new field atom;

/**
 * A context represents the visible state of a game. Many choosable path games
 * do not require any visible state beyond the current {@type "scene"}.
 *
 * @type "context"
 */
Public class "context" extends abstract context
	with mutable field
		public referable current scene : abstract scene,
		public referable previous scene : abstract scene;

/**
 * This is the fiber-local key to which the current {@type "context"} is bound.
 *
 * @global "contextKey"
 */
contextKey ::= new heritable atom named "choosable-path context key";

/**
 * Use the specified {@type "context"} as the implied context within the dynamic
 * scope of the specified {@type "function" action}.
 *
 * @method "Use_as the implied context"
 * @param "aContext" "context"
 * @param "action" "[]→⊤"
 */
Public method "Use_as the implied context for_" is
[
	aContext : context,
	action : []→⊤
|
	current fiber[contextKey] := aContext;
	Guard action ensure [Remove current fiber[contextKey];];
] : ⊤;

/**
 * Answer the implied {@type "context"}.
 *
 * @method "the implied context"
 * @returns "context"
 */
Public method "the implied context" is [current fiber[contextKey]];
