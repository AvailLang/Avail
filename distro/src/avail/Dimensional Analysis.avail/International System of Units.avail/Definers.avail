/*
 * Definers.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Definers"
Versions
	"1.4.0"
Uses
	"Avail",
	"Core" =
	(
		"_+_" → "_+_(Core)",
		"_-_" → "_-_(Core)",
		"_×_" → "_×_(Core)",
		"_÷_" → "_÷_(Core)",
		"_^_" → "_^_(Core)",
		…
	),
	"Types"
Names
	"prefixes",
	"_(_)is an SI base unit",
	"_(_)is an SI derived unit equivalent to_"
Body

/**
 * The table of standard SI scaling prefixes.
 *
 * @global "_prefixes" "<<string, string, double…|3>…|>"
 */
_prefixes ::=
<
	<"yocto", "y",  -24>,
	<"zepto", "z",  -21>,
	<"atto",  "a",  -18>,
	<"femto", "f",  -15>,
	<"pico",  "p",  -12>,
	<"nano",  "n",   -9>,
	<"micro", "µ",   -6>,
	<"milli", "m",   -3>,
	<"centi", "c",   -2>,
	<"deci",  "d",   -1>,
	<"",       "",    0>,
	<"deca",  "da",   1>,
	<"hecto", "h",    2>,
	<"kilo",  "k",    3>,
	<"mega",  "M",    6>,
	<"giga",  "G",    9>,
	<"tera",  "T",   12>,
	<"peta",  "P",   15>,
	<"exa",   "E",   18>,
	<"zetta", "Z",   21>,
	<"yotta", "Y",   24>
>;

Public method "prefixes" is [_prefixes];

/**
 * Construct and answer a scaling function suitable for converting between
 * {@type "SI unit"}s within the same family.
 *
 * @category "Dimensional Analysis"
 * @method "SI scaling function for family_"
 * @param "unitType" "unit's type"
 *        The family.
 * @returns "unit conversion function" The requested function.
 */
Private method "SI scaling function for_" is
[
	unitType : SI unit's type
|
	/* Construct the argument declarations. The first argument is a
	 * dimensioned quantity, the second is the target unit. Both metrics are
	 * SI metrics.
	 */
	quantityType ::= extend SI dimensioned quantity with metric : unitType;
	args ::= <arg «`"quantity"` : quantityType», arg «`"aUnit"` : unitType»>;
	/* Construct the expression to obtain the scaling factor. */
	metricSend ::= send $"_'s⁇metric" with «<«↓args[1]»>» : SI unit;
	minuend ::= send $"_'s⁇scale factor" with «<metricSend>» : integer;
	subtrahend ::= send $"_'s⁇scale factor" with «<«↓args[2]»>» : integer;
	exponent ::= send Foundation $"_-_" with «<minuend, subtrahend>» : integer;
	scaleFactor ::= send $"_^_" with «<‘10’, exponent>» : number;
	/* Construct the expression to obtain the scaled magnitude. */
	extentSend ::= send $"_'s⁇extent" with «<«↓args[1]»>» : number;
	scaled ::= send $"_×_" with «<extentSend, scaleFactor>» : number;
	/* Construct the expression to obtain the resultant SI dimensioned
	 * quantity.
	 */
	juxtapositionSend ::= send $"__"
		with «<scaled, «↓args[2]»>»
		: quantityType;
	/* Construct and answer the requested function. */
	newBlock ::= «[ args | <juxtapositionSend> ] : dimensioned quantity»;
	cast newBlock→function into [t : unit conversion function | t]
] : unit conversion function;

/**
 * Define an SI {@type "base unit"}. This makes available not only the unscaled
 * {@type "base unit"}, but also all prefixed long names and short symbols, as
 * well as {@method "_converted to_" conversions} between them.
 *
 * @category "Dimensional Analysis"
 * @method "_(_)is an SI base unit"
 * @param "name" "string"
 *        The name of the {@type "base unit"}, e.g., meters, seconds, grams.
 * @param "symbol" "string"
 *        A symbol which represents the defined {@type "base unit"}.
 * @returns "⊤"
 */
Public method "_(_)is an SI base unit" is
[
	name : nonempty string,
	symbol : nonempty string
|
	id ::= atom for name;
	def ::= {id → 1};
	unitType ::= extend base unit ∩ SI unit with
		unit map : def's type;
	units ::=
		map prefixes through
		[
			prefix : <string, string, [-24..24]…|3>,
			index : [1..|prefixes|]
		|
			longName ::= prefix[1] ++ name;
			shortName ::= prefix[2] ++ symbol;
			aUnit ::= a unitType with
				unit map ::= def,
				scale factor ::= prefix[3];
			impl ::= «[ <> | <`aUnit` ("") → literal phrase> ]
				: aUnit's type»→function;
			Stable method longName is impl;
			Unless current module has public name longName then
			[
				Export longName as a new name;
			];
			Unless longName = shortName then
			[
				Alias shortName to longName;
				Unless current module has public name shortName then
				[
					Export shortName as a new name;
				];
			];
			Prefer longName for printing aUnit;
			Prefer shortName for printing aUnit in a dimensioned quantity;
			aUnit
		];
	aUnit ::= a unitType with unit map ::= def, scale factor ::= 0;
	Prefer symbol for printing aUnit in a dimensioned quantity;
	scalingFunction ::= SI scaling function for unitType;
	Stable method $"_converted to_" is scalingFunction;
] : ⊤;

Completely seal method "_(_)is an SI base unit";

/**
 * Define an SI {@type "derived unit"}. This makes available not only the
 * unscaled {@type "derived unit"}, but also all prefixed long names and short
 * symbols, as well as {@method "_converted to_" conversions} between them.
 *
 * @category "Dimensional Analysis"
 * @method "_(_)is an SI derived unit equivalent to_"
 * @param "name" "string"
 *        The name of the {@type "derived unit"}, e.g., newtons, pascals.
 * @param "symbol" "string"
 *        A symbol which represents the defined {@type "derived unit"}.
 * @param "referenceUnit" "SI unit"
 *        An equivalent {@type "SI unit"}, usually obtained from a lexical
 *        expression.
 * @returns "⊤"
 */
Public method "_(_)is an SI derived unit equivalent to_" is
[
	name : nonempty string,
	symbol : nonempty string,
	referenceUnit : SI unit
|
	def ::= referenceUnit's unit map;
	baseUnitType ::= cast def
		into [t : {atom→1's type|1} | base unit]
		else [derived unit];
	unitType ::= extend baseUnitType ∩ SI unit with
		unit map : def's type;
	baseScaleFactor ::= referenceUnit's scale factor;
	units ::=
		map prefixes through
		[
			prefix : <string, string, [-24..24]…|3>,
			index : [1..|prefixes|]
		|
			longName ::= prefix[1] ++ name;
			shortName ::= prefix[2] ++ symbol;
			aUnit ::= a unitType with
				unit map ::= def,
				scale factor ::= baseScaleFactor + prefix[3];
			impl ::= «[ <> | <`aUnit` ("")→literal phrase> ]
				: aUnit's type»→function;
			Stable method longName is impl;
			Unless current module has public name longName then
			[
				Export longName as a new name;
			];
			Unless longName = shortName then
			[
				Alias shortName to longName;
				Unless current module has public name shortName then
				[
					Export shortName as a new name;
				];
			];
			Prefer longName for printing aUnit;
			Prefer shortName for printing aUnit in a dimensioned quantity;
			aUnit
		];
	quantityType ::= extend SI dimensioned quantity with metric : unitType;
	Unless $"_converted to_" has definition for <quantityType, unitType> then
	[
		scalingFunction ::= SI scaling function for unitType;
		Stable method $"_converted to_" is scalingFunction;
	];
] : ⊤;

Completely seal method "_(_)is an SI derived unit equivalent to_";

/**
 * Construct and answer a {@type "function"} suitable for converting an {@type
 * "SI unit"} to a {@type "unit"} by merely scaling.
 *
 * @category "Dimensional Analysis"
 * @method "function for scaling from_to_by_using_"
 * @param "a" "SI unit"
 *        The source unit.
 * @param "b" "unit"
 *        The destination unit.
 * @param "scaleFactor" "number"
 *        The scale factor.
 * @param "scaleOperator" "atom"
 *        The scale operator.
 * @returns "function" "unit conversion function"
 */
Private method "function for scaling from_to_by_using_" is
[
	a : SI unit,
	b : unit,
	scaleFactor : number,
	scaleOperator : {$"_×_", $"_÷_"}ᵀ
|
	/* Construct the argument declarations. The first argument is a dimensioned
	 * quantity, the second is the target unit.
	 */
	qA ::= extend SI dimensioned quantity with
		metric : (extend SI unit with unit map : a's unit map's type);
	qB ::= extend dimensioned quantity with metric : (b's type);
	args ::= <arg «`"quantity"` : qA», arg «`"aUnit"` : b's type»>;
	/* Construct the expression to obtain the SI scaling factor. */
	metricSend ::= send $"_'s⁇metric" with «<«↓args[1]»>» : SI unit;
	exponent ::= send $"_'s⁇scale factor" with «<metricSend>» : integer;
	siScaleFactor ::= send $"_^_" with «<‘10’, exponent>» : number;
	/* Construct the expression to obtain the SI scaled magnitude. */
	extentSend ::= send $"_'s⁇extent" with «<«↓args[1]»>» : number;
	siScaled ::= send $"_×_" with «<extentSend, siScaleFactor>» : number;
	/* Construct the expression to obtain the final scaled magnitude. */
	scaled ::= restricted send scaleOperator
		with «<siScaled, ‘scaleFactor’>»
		: number;
	/* Construct the expression to obtain the resultant dimensioned quantity. */
	juxtapositionSend ::= restricted send $"__"
		with «<scaled, «↓args[2]»>»
		: qB;
	/* Construct and answer the requested function. */
	newBlock ::= «[ args | <juxtapositionSend> ] : dimensioned quantity»;
	cast newBlock→function into [t : unit conversion function | t]
] : unit conversion function;

/**
 * Construct and answer a {@type "function"} suitable for converting an
 * arbitrary {@type "unit"} to an {@type "SI unit"} by merely scaling.
 *
 * @category "Dimensional Analysis"
 * @method "function for scaling from_to_by_using_"
 * @param "a" "unit"
 *        The source unit.
 * @param "b" "SI unit"
 *        The destination unit.
 * @param "scaleFactor" "number"
 *        The scale factor.
 * @param "scaleOperator" "atom"
 *        The scale operator.
 * @returns "function" "unit conversion function"
 */
Private method "function for scaling from_to_by_using_" is
[
	a : unit,
	b : SI unit,
	scaleFactor : number,
	scaleOperator : {$"_×_", $"_÷_"}ᵀ
|
	/* Construct the argument declarations. The first argument is a dimensioned
	 * quantity, the second is the target unit.
	 */
	qA ::= extend dimensioned quantity with metric : (a's type);
	qB ::= extend SI dimensioned quantity with
		metric : (extend SI unit with unit map : b's unit map's type);
	args ::=
		<
			arg «`"quantity"` : qA»,
			arg «`"aUnit"` : extend SI unit with unit map : b's unit map's type»
		>;
	/* Construct the expression to obtain the scaled magnitude. */
	extentSend ::= send $"_'s⁇extent" with «<«↓args[1]»>» : number;
	scaled ::= restricted send scaleOperator
		with «<extentSend, ‘scaleFactor’>»
		: number;
	/* Construct the expression to obtain the SI scaling factor. */
	exponent ::= send $"_'s⁇scale factor" with «<«↓args[2]»>» : integer;
	siScaleFactor ::= send $"_^_" with «<‘10’, exponent>» : number;
	/* Construct the expression to obtain the final scaled magnitude. */
	siScaled ::= send $"_÷_" with «<scaled, siScaleFactor>» : number;
	/* Construct the expression to obtain the resultant dimensioned quantity. */
	juxtapositionSend ::= restricted send $"__"
		with «<siScaled, «↓args[2]»>»
		: qB;
	/* Construct and answer the requested function. */
	newBlock ::= «[ args | <juxtapositionSend> ] : dimensioned quantity»;
	cast newBlock→function into [t : unit conversion function | t]
] : unit conversion function;

/**
 * Define {@method "_converted to_" methods} for converting {@type
 * "dimensioned quantity" dimensioned quantities} between two compatible {@type
 * "unit" metrics} that differ only by a multiplicative constant.
 *
 * @category "Dimensional Analysis"
 * @method "Conversion rule:_≍_"
 * @param "a" "SI dimensioned (1's type)"
 *        An {@type "SI dimensioned quantity"} whose extent is {@code 1}.
 * @param "b" "dimensioned quantity"
 *        A {@type "dimensioned quantity"} equivalent to {@param "a"} but
 *        expressed in different {@type "unit"}s.
 * @returns "⊤"
 * @see {@method "_converted to_"}
 */
Method "Conversion rule:_≍_" is
[
	a : SI dimensioned (1's type),
	b : dimensioned quantity
|
	metricA ::= a's metric;
	metricB ::= b's metric;
	scaleFactor ::= b's extent;
	Stable method $"_converted to_" is function for scaling
		from metricA
		to metricB
		by scaleFactor
		using $"_×_";
	Stable method $"_converted to_" is function for scaling
		from metricB
		to metricA
		by scaleFactor
		using $"_÷_";
] : ⊤;

/**
 * Define {@method "_converted to_" methods} for converting {@type
 * "dimensioned quantity" dimensioned quantities} between two compatible {@type
 * "unit" metrics} that differ only by a multiplicative constant.
 *
 * @category "Dimensional Analysis"
 * @method "Conversion rule:_≍_"
 * @param "a" "dimensioned (1's type)"
 *        A {@type "dimensioned quantity"} whose extent is {@code 1}.
 * @param "b" "SI dimensioned quantity"
 *        An {@type "SI dimensioned quantity"} equivalent to {@param "a"} but
 *        expressed in different {@type "unit"}s.
 * @returns "⊤"
 * @see {@method "_converted to_"}
 */
Method "Conversion rule:_≍_" is
[
	a : dimensioned (1's type),
	b : SI dimensioned quantity
|
	metricA ::= a's metric;
	metricB ::= b's metric;
	scaleFactor ::= b's extent;
	Stable method $"_converted to_" is function for scaling
		from metricA
		to metricB
		by scaleFactor
		using $"_×_";
	Stable method $"_converted to_" is function for scaling
		from metricB
		to metricA
		by scaleFactor
		using $"_÷_";
] : ⊤;
