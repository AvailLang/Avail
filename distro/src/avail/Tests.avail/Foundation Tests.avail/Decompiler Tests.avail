/*
 * Decompiler Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Decompiler Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Common"
Names
	"decompiler test suite"
Body

"decompiler test suite" is a new atom;
New test suite decompiler test suite extends foundation test suite;

Method "Check round-trip for_" is
[
	f1 : function
|
	block ::= f1 → block phrase;
	f2 ::= block → function;
	c1 ::= f1's implementation;
	c2 ::= f2's implementation;
	Require: c1's literals = c2's literals;
	Require: c1's nybblecodes = c2's nybblecodes;
];

/* For testing argument permutation at the top level. */
Method "subscript_②of_①" is
[
	t : tuple,
	n : natural number
|
	t[n]
];

/* For testing argument permutation below the top level. */
Method "reverseMap«_②<-_①‡,»" is
[
	pairs : <string, integer…|2>+
|
	/* Don't really bother to build a map. */
	"I like cheese"
];

Test "simple super-cast" in decompiler test suite is [
	Check round-trip for [<50,60>[(2 :: natural number)]];
];

Test "permuted super-cast" in decompiler test suite is [
	Check round-trip for [subscript (2::natural number) of <10,20>];
];

Test "inner super-cast" in decompiler test suite is [
	Check round-trip for [{(5 :: integer), 6, ("7" :: string)}];
];

Test "inner permuted" in decompiler test suite is [
	Check round-trip for [reverseMap 20<-"10", 40<-"30"];
];

Test "inner permuted super-cast" in decompiler test suite is [
	Check round-trip for
	[
		reverseMap
			20<-("10"::string),
			40<-"30",
			(60::integer)<-("50"::string)
	];
];
