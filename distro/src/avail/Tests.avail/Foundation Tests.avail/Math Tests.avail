/*
 * Math Tests.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Math Tests"
Versions
	"Avail-1.6.1"
Uses
	"Common"
Names
	"math test suite"
Body

"math test suite" is a new atom;
New test suite math test suite extends foundation test suite;

Test "integer range bounds" in math test suite is
[
	Require: -∞ = ⌊extended integer⌋;
	Require: ⌊extended integer⌋ is inclusive;
	Require: ∞ = ⌈extended integer⌉;
	Require: ⌈extended integer⌉ is inclusive;
	Require: -∞ = ⌊integer⌋;
	Require: ¬⌊integer⌋ is inclusive;
	Require: ∞ = ⌈integer⌉;
	Require: ¬⌈integer⌉ is inclusive;
	Require: 0 = ⌊whole number⌋;
	Require: ⌊whole number⌋ is inclusive;
	Require: ∞ = ⌈whole number⌉;
	Require: ¬⌈whole number⌉ is inclusive;
	Require: 1 = ⌊natural number⌋;
	Require: ⌊natural number⌋ is inclusive;
	Require: ∞ = ⌈natural number⌉;
	Require: ¬⌈natural number⌉ is inclusive;
	For each i from 1 to 10 do
	[
		For each j from 1 to 10 do
		[
			t1 ::= [i..j];
			t2 ::= [i..j);
			t3 ::= (i..j];
			t4 ::= (i..j);
			If i > j then
			[
				Require: t1 = t2 = t3 = t4 = ⊥;
			]
			else
			[
				Require: i = ⌊t1⌋;
				Require: ⌊t1⌋ is inclusive;
				Require: j = ⌈t1⌉;
				Require: ⌈t1⌉ is inclusive;
				If i = j then [ Require: t2 = t3 = t4 = ⊥; ]
				else
				[
					Require: t2 ≠ ⊥;
					Require: t3 ≠ ⊥;
					Require: i = ⌊t2⌋;
					Require: ⌊t2⌋ is inclusive;
					Require: j - 1 = ⌈t2⌉;
					Require: ⌈t2⌉ is inclusive;
					Require: i + 1 = ⌊t3⌋;
					Require: ⌊t3⌋ is inclusive;
					Require: j = ⌈t3⌉;
					Require: ⌈t3⌉ is inclusive;
					If j - i = 1 then [ Require: t4 = ⊥; ]
					else
					[
						Require: t4 ≠ ⊥;
						Require: i + 1 = ⌊t4⌋;
						Require: ⌊t4⌋ is inclusive;
						Require: j - 1 = ⌈t4⌉;
						Require: ⌈t4⌉ is inclusive;
					];
				];
			];
		];
	];
	Require: ⊥'s genuine lower bound = ∞;
	Require: ⊥'s genuine upper bound = -∞;
];

Test "finite/infinite" in math test suite is
[
	For each i from 1 to 10 do [Require: i is finite;];
	Require: ∞ is infinite;
	Require: -∞ is infinite;
];

Test "comparison" in math test suite is
[
	For each i from 1 to 10 do
	[
		Require: i = i;
		Require: i ≤ i;
		Require: i ≥ i;
		Require: i ≤ i + 1;
		Require: i < i + 1;
		Require: i ≥ i - 1;
		Require: i > i - 1;
		Require: i ≤ ∞;
		Require: i < ∞;
		Require: i ≥ -∞;
		Require: i > -∞;
		Require: i = i = i;
		Require: i - 1 ≤ i - 1 < i = i < i + 1 ≤ i + 1;
		Require: i + 1 ≥ i + 1 > i = i > i - 1 ≥ i - 1;
	];
];

Test "negation" in math test suite is
[
	For each 1 to 10 ++ <∞> do
	[
		i : [1..∞]
	|
		Require: -i ≠ i;
		Require: |-i| = i;
		Require: -(-i) = i;
	];
	Require: -0 = 0;
];

Test "mod" in math test suite is
[
	ref ::= concatenate 3 of (0 to 9);
	For each i from 0 to 29 do
	[
		Require: i mod ∞ = i;
		Require: i mod 10 = ref[i + 1];
	];
];

Test "even/odd" in math test suite is
[
	ref ::= concatenate 10 of <true, false>;
	For each i from 1 to 20 do
	[
		Require: i is odd = ref[i];
		Require: i is even = ¬ref[i];
	];
];

Test "minimum function" in math test suite is
[
	Require: min <1, 2, 3, 4, 5> = 1;
	Require: 1 min 2 min 3 min 4 min 5 = 1;
	Require: min <-1, -2, -3, -4, -5> = -5;
	Require: -1 min -2 min -3 min -4 min -5 = -5;
	Require: min <-∞, ∞> = -∞;
	Require: -∞ min ∞ = -∞;
	Require: min <-5, -7, 10, 31, -6> = -7;
	Require: -5 min -7 min 10 min 31 min -6 = -7;
];

Test "maximum function" in math test suite is
[
	Require: max <1, 2, 3, 4, 5> = 5;
	Require: 1 max 2 max 3 max 4 max 5 = 5;
	Require: max <-1, -2, -3, -4, -5> = -1;
	Require: -1 max -2 max -3 max -4 max -5 = -1;
	Require: max <-∞, ∞> = ∞;
	Require: -∞ max ∞ = ∞;
	Require: max <-5, -7, 10, 31, -6> = 31;
	Require: -5 max -7 max 10 max 31 max -6 = 31;
];

Test "simple exponentiation" in math test suite is
[
	For each i from 1 to 10 do
	[
		Require: i^0 = 1;
		Require: i^1 = i;
		For each j from 2 to 10 do
		[
			Require: ∏ j occurrences of i = i^j;
		];
	];
	Require: 2^16 = 65536;
	Require: 2^32 = 4294967296;
	Require: 2^64 = 18446744073709551616;
	Require: 2^128 = 340282366920938463463374607431768211456;
	Require: 10^100 = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
];

Test "exhaustive exponentiation" in math test suite is
[
	For each <
		<-∞, 0>,     <-∞, 1, -∞>,  <-∞, 2, ∞>,  <-∞, 3,  -∞>,  <-∞, ∞>,
		<-3, 0, 1>,  <-3, 1, -3>,  <-3, 2, 9>,  <-3, 3, -27>,  <-3, ∞>,
		<-2, 0, 1>,  <-2, 1, -2>,  <-2, 2, 4>,  <-2, 3,  -8>,  <-2, ∞>,
		<-1, 0, 1>,  <-1, 1, -1>,  <-1, 2, 1>,  <-1, 3,  -1>,  <-1, ∞>,
		< 0, 0, 1>,  < 0, 1,  0>,  < 0, 2, 0>,  < 0, 3,   0>,  < 0, ∞, 0>,
		< 1, 0, 1>,  < 1, 1,  1>,  < 1, 2, 1>,  < 1, 3,   1>,  < 1, ∞>,
		< 2, 0, 1>,  < 2, 1,  2>,  < 2, 2, 4>,  < 2, 3,   8>,  < 2, ∞, ∞>,
		< 3, 0, 1>,  < 3, 1,  3>,  < 3, 2, 9>,  < 3, 3,  27>,  < 3, ∞, ∞>,
		< ∞, 0>,     < ∞, 1,  ∞>,  < ∞, 2, ∞>,  <∞,  3,   ∞>,  < ∞, ∞, ∞>
	> do [
		t : <extended integer…|2..3>
	|
		power : number;
		Guard
		[
			power := t[1] ^ t[2];
		]
		intercept
		[
			e : arithmetic exception
		|
		];
		If power is unassigned then
		[
			If |t| > 2 then
			[
				Require: |t| = 2 (“t[1]” ++ " ^ " ++ “t[2]”
					++ " was undefined, not " ++ “t[3]”);
			];
		]
		else
		[
			Require: |t| = 3 (“t[1]” ++ " ^ " ++ “t[2]” ++ " was "
				++ “power” ++ ", but should have been undefined");
			Require: t[3] = power (“t[1]” ++ " ^ " ++ “t[2]” ++ " was "
				++ “power” ++ ", but should have been " ++ “t[3..]”);
		];
	];
];

Test "exponentiation restriction" in math test suite is
[
	For each
	<
		<10's type, 2's type, [100..100]>,
		<(-10)'s type, 2's type, [100..100]>,
		<(-10)'s type, 3's type, [-1000..-1000]>,
		<1's type, [0..10], [1..1]>,
		<2's type, [0..10], [1..1024]>,
		<2's type, [5..10], [32..1024]>,
		<(-1)'s type, [5..10], [-1..1]>,
		<(-2)'s type, [5..10], [-512..1024]>,
		<[-1..2], [5..7], [-1..128]>,
		<[-2..1], [5..7], [-128..64]>,
		<[-2..2], [5..7], [-128..128]>,
		<(-∞)'s type, 1's type, [-∞..-∞]>,
		<∞'s type, 3's type, [∞..∞]>,
		<(-∞)'s type, [2..2], [∞..∞]>,
		<(-∞)'s type, [2..4], [-∞..∞]>,
		<(-∞..∞), [0..0], [1..1]>,
		<[-∞..∞], [0..0], [1..1]>,
		<[-∞..∞], [1..1], [-∞..∞]>,
		<[-∞..∞], [2..2], [0..∞]>,
		<[-∞..∞), [2..2], [0..∞]>,
		<(-∞..∞], [2..2], [0..∞]>,
		<[2..∞), [6..8], [64..∞)>,
		<[2..∞], [6..8], [64..∞]>,
		<[3..∞), [2..4], [9..∞)>,
		<[-3..∞), [2..4], [-27..∞)>,
		<[5..∞), whole number, [1..∞)>
	>
	do
	[
		triple : <
			extended integer's type,
			whole number's type,
			extended integer's type…|3>
	|
		Require: triple[1] ^ triple[2] = triple[3];
	];
];

Test "precedence" in math test suite is
[
	Require: 2 × 2 + 1 = 5;
	Require: 2 + 3 × 4 + 5 = 19;
	Require: 1 + 1 - 1 + 1 - 1 + 1 = 2;
	Require: 8 × 2 ÷ 4 = 4;
	Require: 2^8 × 4 - 1 = 1023;
	Require: 2 × (2 + 1) = 6;
	Require: 2^2^3 = 2^8 = 256;
];

Test "bit∧" in math test suite is
[
	Require: 0 bit∧ 0 = 0;
	Require: 0 bit∧ 1 = 0;
	Require: 1 bit∧ 0 = 0;
	Require: 1 bit∧ 1 = 1;
	Require: 15 bit∧ 30 = 14;
	Require: -4 bit∧ 15 = 12;
	Require: -4 bit∧ -16 = -16;
	Require: -4 bit∧ -15 = -16;
	Require: (1<<100) bit∧ (1<<120) = 0;
	Require: (1<<100) bit∧ (1<<120-1) = 1<<100;
	Require:  0b0101010101001010101010000110101101010101101010100101010
		bit∧  0b1001010101010101110010101010101010010100101001010110101
			= 0b0001010101000000100010000010101000010100101000000100000;
	/* Some power-of-two boundary conditions. */
	For each i from 1 to 100 do
	[
		power ::= 1 << i;
		Require: power bit∧ power = power;
		Require: power bit∧ (power - 1) = 0;
		Require: power bit∧ (power + 1) = power;
		Require: (power - 1) bit∧ (power - 1) = (power - 1);
		neg ::= -power;
		Require: neg bit∧ neg = neg;
		Require: neg bit∧ (neg + 1) = neg;
		Require: neg bit∧ (neg - 1) = neg × 2;
		Require: (neg - 1) bit∧ (neg - 1) = neg - 1;
		Require: neg bit∧ power = power;
	];
];

Test "greatest common denominator" in math test suite is
[
	Require: greatest common denominator of 6 and 12 = 6;
	Require: greatest common denominator of 252 and 105 = 21;
	Require: greatest common denominator of 8 and 7 = 1;
];

Test "least common multiple" in math test suite is
[
	Require: least common multiple of 20020 and 15400 = 200200;
	Require: least common multiple of 9 and 10 = 90;
	Require: least common multiple of 6426 and 13680 = 4883760;
];

Test "signed byte encoding" in math test suite is
[
	expected ::= -128 to 127;
	actual ::= map each b in expected through [an integer from b → 1 bytes];
	Require: actual = expected;
];

Test "unsigned byte encoding" in math test suite is
[
	expected ::= 0 to 255;
	actual ::= map each b in expected through
		[an unsigned integer from b → 1 bytes];
	Require: actual = expected;
];

Test "float representation reinterpretation" in math test suite is
[
	floats ::= <
		0.0f, -0.0f, 1.0f, -1.0f, 0.5f, -0.5f,
		1.0e38f, 1.0e-38f,
		0.0f ÷ 0.0f,
		1.0f ÷ 0.0f,
		-1.0f ÷ 0.0f,
		0_1.0_0e0_1f
	>;
	For each f in floats do
	[
		i : [-2^31..2^31) := f reinterpreted as bits;
		f2 : float := i reinterpreted as float;
		Require: f = f2;
	];
	Require: 0.0f reinterpreted as bits = 0x00000000;
	Require: (-0.0f) reinterpreted as bits = 0x80000000 - 2^32;
	Require: 2.0f reinterpreted as bits = 0x40000000;
	Require: (-2.0f) reinterpreted as bits = 0xC0000000 - 2^32;
	Require: 1.0f reinterpreted as bits = 0x3F800000;
	Require: (-1.0f) reinterpreted as bits = 0xBF800000 - 2^32;
	Require: 0_1.0_0e0_1f reinterpreted as bits = 0x41200000;
];

Test "double representation reinterpretation" in math test suite is
[
	doubles ::= <
		0.0, -0.0, 1.0, -1.0, 0.5, -0.5,
		1.0e38, 1.0e-38,
		0.0 ÷ 0.0,
		1.0 ÷ 0.0,
		-1.0 ÷ 0.0,
		0_1.0_0e0_1
	>;
	For each d in doubles do
	[
		i : [-2^63..2^63) := d reinterpreted as bits;
		d2 : double := i reinterpreted as double;
		Require: d = d2;
	];
	Require: 0.0 reinterpreted as bits = 0x0000000000000000;
	Require: (-0.0) reinterpreted as bits = 0x8000000000000000 - 2^64;
	Require: 2.0 reinterpreted as bits = 0x4000000000000000;
	Require: (-2.0) reinterpreted as bits = 0xC000000000000000 - 2^64;
	Require: 1.0 reinterpreted as bits = 0x3FF0000000000000;
	Require: (-1.0) reinterpreted as bits = 0xBFF0000000000000 - 2^64;
	Require: 0_1.0_0e0_1 reinterpreted as bits = 0x4024000000000000;
];

Test "numeric tuple operators" in math test suite is
[
	Require: ∑ <> = 0;
	Require: ∏ <> = 1;
	Require: ∑ <2> = 2;
	Require: ∏ <2> = 2;

	Require: ∑ 1 to 10 = 55;
	Require: ∏ -3 to 3 = 0;
	Require: ∏ ((-3 to 3) - 0) = -36;

	mixedType ::= <1, 2.0f, 2.5>;
	Require: ∑ mixedType = 5.5;
	Require: ∏ mixedType = 5.0;
];

Test "integer square root" in math test suite is
[
	Require: ⌊√0⌋ = 0;
	Require: ⌊√1⌋ = 1;
	Require: ⌊√17⌋ = 4;
	Require: ⌊√2^64⌋ = 2^32;
	Require: ⌊√1111111⌋ = 1054;

	// The corresponding double operation has an error ≥1 for this test
	Require: ⌊√10^30⌋ = 10^15;
];

Test "factorization" in math test suite is
[
	Require: factor 1 = <1>;
	Require: factor 2^10 = 10 occurrences of 2;
	Require: factor 433494437 = <433494437>;
	Require: quicksort factor 865268319203 = <930197, 930199>;
	Require: quicksort factor 16079919820099 = <1997, 1999, 2003, 2011>;
	Require: prime factorization of 15! =
		{2→11, 3→6, 5→3, 7→2, 11→1, 13→1};
];

Test "modular exponent tests" in math test suite is
[
	Require: 110 ^ 45 mod 87 = 74;
	Require: 1001 ^ 1001 mod 123 = 17;
	Require: 30301829 ^ 1 mod (2^63) = 30301829;
	/* Super-cast it to whole number to avoid attempting to fold the leading
	 * part as an invocation of "_^_".
	 */
	Require: (12807421972::whole number) ^ 12345 mod 3201855493 = 0;
];

Test "primality tests" in math test suite is
[
	mersennePrimes ::= <2^13 - 1, 2^31 - 1, 2^61 - 1>;
	mersenneComposites ::= <2^11 - 1, 2^23 - 1, 2^37 - 1>;

	miscPrimes ::= <
		257,
		46649,
		191161,
		433494437,
		1111111111111111111,
		9223372036854775837,
		18446744073709551557, // The last prime of [1..2^64].
		18609811911861098611  // NOT TESTED BY DEFAULT, see below.
	>;
	miscComposites ::= <
		1,
		11!,
		5050505,
		2^4×3^5×179,
		2222222222222222222,
		9223372036854775809,
		5^30
	>;

	// These numbers "fail" the 2-SPRP test (return true, but are composite).
	// Note that not *all* Mersenne composites are strong pseudoprimes base 2,
	// but those of a prime exponent are.
	strongPseudoprimesBaseTwo ::= <
		3277,
		49141,
		314821,
		18446744073709551617  // 2^64 + 1
	> ++ mersenneComposites;


	primes ::= mersennePrimes ++ miscPrimes;
	composites ::= strongPseudoprimesBaseTwo ++ miscComposites;

	For each p in primes do
	[
		Require: p is a strong probable prime to base 2;
		// NOTE: We do not test the primality of numbers beyond 2^64 in this
		// test suite as our naive implementation will take minutes to hours.
		If p ≤ 2^64 then [Require: p is prime;];
	];
	For each c in composites do
	[
		Require: ¬c is prime;
		Require: (c is a strong probable prime to base 2)
			↔ (c ∈ strongPseudoprimesBaseTwo);
	];
];

