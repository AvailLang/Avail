/*
 * Control Structure Tests.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Control Structure Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Common"
Names
	"control structure test suite"
Body

"control structure test suite" is a new atom;
New test suite control structure test suite extends foundation test suite;

Test "continuations" in control structure test suite is
[
	value : integer := 0;
	end : integer := 5;
	action ::= [i : integer | value := value + i; value ≤ end];
	[
		$loop : ⊤;
		If value ≤ end then
		[
			continue ::= action(1);
			If continue then
			[
				Restart loop
			];
		];
	]();
	Require: 6 = value;

	action2 ::= [i : integer | value := value + i; value > end];
	value := 0;
	end := 3;
	[
		$loop : ⊤;
		continue ::= action2(1);
		If continue then [Exit loop] else [Restart loop]
	] : ⊤ ();
	Require: value = 4;

	locate : [⊥,⊥]→boolean := 
	[
		queryValue : integer,
		t : <integer…|3..>
	|
		$find : boolean;
		For each i of t do [If i = queryValue then [Exit find with true];];
		false
	]:boolean;
	Require: locate(5,<1,4,5,7>);
	Require: ¬locate(2,<1,4,5,7>);

	checkFunction : [⊥]→boolean :=
	[
		checkValue : integer
	|
		$check : boolean;
		If checkValue = 2 then [Exit check with true]
		else [Restart check with <2>]
	]:boolean;
	Require: checkFunction(1);	
];

Test "if then else" in control structure test suite is
[
	a ::= if 5 > 6 then [1] else [2];
	Require: a = 2;

	b ::= if 5 < 6 then [3] else [4];
	Require: b = 3;

	c ::= if 5 > 6 then [5] else if [100 < 50] then [6] else [7];
	Require: c = 7;

	d : integer := 0;
	If 5 > 6 then [d:= 8;]; 
	Require: d = 0;

	If 5 > 6 then [d := 9;] else [d := 10;];
	Require: d = 10;

	If 5 < 6 then [d := 11;] else [d := 12;];
	Require: d = 11;

	If 5 > 6 then [d := 13;] else if [100 < 50] then [d := 14;] else [d := 15;];
	Require: d = 15;

	e ::=
		if 5 > 6 then [16] 
		else if [100 < 50] then [17] 
		else if [false] then [18]
		else if [9 > 1000] then [19]
		else [20];
	Require: e = 20;

	f ::=
		if 5 > 6 then [21] 
		else if [100 < 50] then [22] 
		else if [false] then [23]
		else if [9 > 1] then [24]
		else [25];
	Require: f = 24;
];

Test "if then else macro" in control structure test suite is
[
	c ::= if 5 > 6 then [5] else if 100 < 50 then [6] else [7];
	Require: c = 7;

	d : integer := 0;
	If 5 > 6 then [d := 13;] else if 100 < 50 then [d := 14;] else [d := 15;];
	Require: d = 15;

	e ::=
		if 5 > 6 then [16] 
		else if 100 < 50 then [17] 
		else if false then [18]
		else if 9 > 1000 then [19]
		else [20];
	Require: e = 20;

	f ::=
		if 5 > 6 then [21] 
		else if 100 < 50 then [22] 
		else if false then [23]
		else if 9 > 1 then [24]
		else [25];
	Require: f = 24;
	
	g ::=
		if 5 > 6 then [21] 
		else if 100 < 50 then [22] 
		else if false then [23]
		else if 9 > 1 ∧ 10 > 2 + 3 then [24]
		else [25];
	Require: g = 24;
];

Test "unless then else" in control structure test suite is
[
	a ::= unless 5 > 6 then [1] else [2];
	Require: a = 1;

	b ::= unless 5 < 6 then [3] else [4];
	Require: b = 4;

	c ::= unless 5 < 6 then [5] else unless [100 < 50] then [6] else [7];
	Require: c = 6;

	d : integer := 0;
	Unless 5 > 6 then [d:= 8;];
	Require: d = 8;

	Unless 5 > 6 then [d := 9;] else [d := 10;];
	Require: d = 9;

	Unless 5 < 6 then [d := 11;] else [d := 12;];
	Require: d = 12;

	Unless 5 < 6 then [d := 13;] else unless [100 > 50] then [d := 14;] 
		else [d := 15;];
	Require: d = 15;

	e ::=
		unless 5 < 6 then [16] 
		else unless [100 > 50] then [17] 
		else unless [true] then [18]
		else unless [9 < 1000] then [19]
		else [20];
	Require: e = 20;

	f ::=
		unless 5 < 6 then [21]
		else unless [100 > 50] then [22]
		else unless [true] then [23]
		else unless [9 < 1] then [24]
		else [25];
	Require: f = 24;
];

Test "unless then else (macro)" in control structure test suite is
[
	c ::= unless 5 < 6 then [5] else unless 100 < 50 then [6] else [7];
	Require: c = 6;

	d : integer := 0;
	Unless 5 < 6 then [d := 13;] else unless 100 > 50 then [d := 14;] 
		else [d := 15;];
	Require: d = 15;

	e ::=
		unless 5 < 6 then [16] 
		else unless 100 > 50 then [17] 
		else unless true then [18]
		else unless 9 < 1000 then [19]
		else [20];
	Require: e = 20;

	f ::=
		unless 5 < 6 then [21]
		else unless 100 > 50 then [22]
		else unless true then [23]
		else unless 9 < 1 + 3 then [24]
		else [25];
	Require: f = 24;
		
	pred ::= [a : integer | a < 50];
	thenBlock ::= [24];
	q ::=
		unless 5 < 6 then [21]
		else unless 100 > 50 then [22]
		else unless true then [23]
		else unless 9 < 1 + 3 then thenBlock
		else [25];
	Require: q = 24;
];

Test "while loops" in control structure test suite is
[
	a : whole number := 0;
	While [a += 1; a < 5];
	Require: a = 5;

	b : whole number := 0;
	While [b < 6] do [b += 1;];
	Require: b = 6;

	c : whole number := 0;
	d : integer := 8;
	While [c < 10 ∧ d > 0] do [c += 1;] alternate with [d -= 1;];
	Require: d = 0 ∧ c = 9;

	e : integer := 10;
	Do [e -= 1;] while [e ≥ 5];
	Require: e = 4;

	f : integer := 10;
	g : integer := -2;
	Do [f -= 1;] while [f ≥ 3 ∨ g < 12] alternate with [g += 1;];
	Require: f = -5 ∧ g = 12;
];

Test "while loops (macros)" in control structure test suite is
[	
	i : whole number := 0;
	While i < 6 do [i += 1;];
	Require: i = 6;

	j : whole number := 0;
	k : integer := 8;
	While j < 10 ∧ k > 0 do [j += 1;] alternate with [k -= 1;];
	Require: k = 0 ∧ j = 9;

	l : integer := 10;
	Do [l -= 1;] while l ≥ 5;
	Require: l = 4;

	m : integer := 10;
	n : integer := -2;
	Do [m -= 1;] while m ≥ 3 ∨ n < 12 alternate with [n += 1;];
	Require: m = -5 ∧ n = 12;	
];

Test "until loops" in control structure test suite is
[
	e : integer := 0;
	Do [e := e + 2;] until [e ≥ 5];
	Require: e = 6;

	d : integer := 0;
	c : integer := 11;
	Do [d += 2;] until [d ≥ 7 ∧ c < 10] alternate with [c -= 4;];
	Require: d = 8 ∧ c = -1;
	
	a : whole number := 0;
	Until [a += 1; a > 6];
	Require: a = 7;

	b : whole number := 0;
	Until [b > 10] do [b += 5;];
	Require: b = 15;
	
	f : whole number := 0;
	g : integer := 8;
	Until [f > 10 ∧ g ≤ 0] do [f += 10;] alternate with [g -= 1;];
	Require: f = 90 ∧ g = 0;
];

Test "until loops (macro)" in control structure test suite is
[
	h : integer := 0;
	Do [h := h + 2;] until h ≥ 5;
	Require: h = 6;
	
	i : integer := 0;
	j : integer := 11;
	Do [i += 2;] until i ≥ 7 ∧ j < 10 alternate with [j -= 4;];
	Require: i = 8 ∧ j = -1;

	k : whole number := 0;
	Until k > 10 do [k += 5;];
	Require: k = 15;

	l : whole number := 0;
	m : integer := 8;
	Until l > 10 ∧ m ≤ 0 do [l += 10;] alternate with [m -= 1;];
	Require: l = 90 ∧ m = 0;
];

Test "repeat" in control structure test suite is
[
	a : whole number := 0;
	Repeat [a += 2;] 10 times;
	Require: 20 = a;
];

Test "choose from where" in control structure test suite is
[
	enumList ::= enumeration of {¢a,¢b,¢c,¢d,¢e};
	choice1 ::= ¢c;
	result1 : boolean := choose choice1 from enumList where
		¢a is [false],
		¢b is [false],
		¢c is [true],
		¢d is [false],
		¢e is [false];
	Require: result1;

	choice2 ::= ¢e; 
	result2 : boolean := choose choice2 from enumList where
		¢a is [false],
		¢b is [false],
		¢c is [false],
		¢d is [false],
		else [true];
	Require: result2;

	choice3 ::= ¢b;
	result3 : boolean := false;
	Choose choice3 from enumList where
		¢a is [result3 := false;],
		¢b is [result3 := true;],
		¢c is [result3 := false;],
		¢d is [result3 := false;],
		¢e is [result3 := false;];
	Require: result3;

	choice4 ::= ¢a;
	result4 : boolean := false;
	Choose choice4 from enumList where
		¢b is [result4 := false;],
		¢c is [result4 := false;],
		¢d is [result4 := false;],
		¢e is [result4 := false;],
		else [result4 := true;];
	Require: result4;
];

Test "from to do" in control structure test suite is
[
	a : whole number := 0;
	For each n from 1 to 5 do [a := n;];
	Require: 5 = a;

	b : whole number := 0;
	For each n from 1 to 8 by 2 do [b += 1;];
	Require: 4 = b;
];
