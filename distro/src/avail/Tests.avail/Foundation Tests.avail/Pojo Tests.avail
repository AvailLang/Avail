/*
 * Pojo Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Pojo Tests"
Versions
	"1.2.0 DEV 2019-07-09"
Uses
	"Common"
Names
	"pojo test suite"
Body

/* This tests pojos, which are Plain Old Java Objects. */

/* The test suite identifier. */
"pojo test suite" is a new atom;

New test suite pojo test suite extends foundation test suite;

Test "pojo type marshaling identities" in pojo test suite is
[
	Require: "java.lang.Void"<> = ⊤;
	Require: "java.lang.Object"<> = any;
	Require: "java.lang.String"<> = string;
	Require: "java.lang.Boolean"<> = boolean;
	Require: "java.lang.Short"<> = Java short;
	Require: "java.lang.Integer"<> = Java int;
	Require: "java.lang.Long"<> = Java long;
	Require: "java.lang.Character"<> = Java char;
	Require: "java.lang.Float"<> = float;
	Require: "java.lang.Double"<> = double;
];

Test "pojo type relations" in pojo test suite is
[
	Require: "java.util.ArrayList"<any> ⊆ any;
	Require: "java.util.ArrayList"<any> ⊆ "java.util.List"<any>;
	Require: "java.util.ArrayList"<Java int> ⊆ "java.util.List"<any>;
	Require: "java.util.ArrayList"<Java int> ⊆ "java.util.List"<Java int>;
	Require: "java.util.ArrayList"<any> ⊆ "java.util.Collection"<any>;
	Require: "java.util.ArrayList"<Java int> ⊆ "java.util.Collection"<any>;
	Require: "java.util.ArrayList"<Java int> ⊆ "java.util.Collection"<Java int>;

	Require:
		"java.util.List"<any> ∪ "java.util.ArrayList"<any>
			= "java.util.List"<any>;
	Require:
		"java.util.List"<type> ∪ "java.util.ArrayList"<nontype>
			= "java.util.List"<any>;

	Require:
		"java.util.List"<any> ∩ "java.util.ArrayList"<any>
			= "java.util.ArrayList"<any>;
	Require:
		"java.util.List"<type> ∩ "java.util.ArrayList"<nontype>
			= pojo ⊥;
];

Test "pojo constructors" in pojo test suite is
[
	anyConstructor ::= constructor of any<>;
	booleanConstructor ::= constructor of boolean<boolean>;
	byteConstructor ::= constructor of Java byte<Java byte>;
	shortConstructor ::= constructor of Java short<Java short>;
	intConstructor ::= constructor of Java int<Java int>;
	longConstructor ::= constructor of Java long<Java long>;
	floatConstructor ::= constructor of float<float>;
	doubleConstructor ::= constructor of double<double>;
	emptyStringConstructor ::= constructor of string<>;
	copyStringConstructor ::= constructor of string<string>;

	Require: anyConstructor() ≠ anyConstructor();
	Require: booleanConstructor(true) = true;
	Require: booleanConstructor(false) = false;
	For each i in 1 to 10 do [Require: byteConstructor(i) = i;];
	For each i in 128 to 138 do [Require: shortConstructor(i) = i;];
	For each i in 65536 to 65546 do [Require: intConstructor(i) = i;];
	For each i in 2147483649 to 2147483659 do
		[Require: longConstructor(i) = i;];
	Require: floatConstructor(0.0→float) = 0.0→float;
	Require: doubleConstructor(0.0) = 0.0;
	Require: emptyStringConstructor() = "";
	Require: copyStringConstructor("moo") = "moo";
	Require: copyStringConstructor("初めまして") = "初めまして";
];

Test "pojo string list" in pojo test suite is
[
	jListOfString ::= "java.util.List"<string>;
	jArrayListOfString ::= "java.util.ArrayList"<string>;
	listConstructor ::= constructor of jArrayListOfString parameterized by <>;
	listSize ::= method jListOfString."size" <>;
	listAdd ::= method jListOfString."add" <any>;
	listGet ::= method jListOfString."get" <Java int>;

	/* Use these reflection pojos to create and poke a List<String>. */
	list ::= listConstructor();
	Require: listSize(list) = 0;
	added ::= listAdd(list, "cat");
	Require: added = true;
	Require: listSize(list) = 1;
	cat ::= listGet(list, 0);
	Require: cat = "cat";
];