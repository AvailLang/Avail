/*
 * Pojo Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Pojo Tests"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Common"
Names
	"pojo test suite"
Body

/* This tests pojos, which are Plain Old Java Objects. */

/* The test suite identifier. */
"pojo test suite" is a new atom;

New test suite pojo test suite extends foundation test suite;

Test "pojo type marshaling identities" in pojo test suite is
[
	Require: "java.lang.Void"<> = ⊤;
	Require: "java.lang.Object"<> = any;
	Require: "java.lang.String"<> = string;
	Require: "java.lang.Boolean"<> = boolean;
	Require: "java.lang.Short"<> = Java short;
	Require: "java.lang.Integer"<> = Java int;
	Require: "java.lang.Long"<> = Java long;
	Require: "java.lang.Character"<> = Java char;
	Require: "java.lang.Float"<> = float;
	Require: "java.lang.Double"<> = double;
];

Test "nonexistent pojo class" in pojo test suite is
[
	className : string := "no.way.doesnt.exist.NuhUh";
	className<>
]
must raise Java-class-not-available exception;

Test "Avail pojo classes are forbidden" in pojo test suite is
[
	// Try to look up some critical Avail classes.
	For each className in
	<
		"com.avail.descriptor.AvailObject",
		"com.avail.descriptor.Descriptor",
		"com.avail.interpreter.Interpreter"
	>
	do
	[
		Require: [className<>] raises Java-class-not-available exception;
	];
];

Test "pojo type relations" in pojo test suite is
[
	Require: java.util.ArrayList<any> ⊆ any;
	Require: java.util.ArrayList<any> ⊆ java.util.List<any>;
	Require: java.util.ArrayList<Java int> ⊆ java.util.List<any>;
	Require: java.util.ArrayList<Java int> ⊆ java.util.List<Java int>;
	Require: java.util.ArrayList<any> ⊆ java.util.Collection<any>;
	Require: java.util.ArrayList<Java int> ⊆ java.util.Collection<any>;
	Require: java.util.ArrayList<Java int> ⊆ java.util.Collection<Java int>;

	Require:
		java.util.List<any> ∪ java.util.ArrayList<any>
			= java.util.List<any>;
	Require:
		java.util.List<type> ∪ java.util.ArrayList<nontype>
			= java.util.List<any>;

	Require:
		java.util.List<any> ∩ java.util.ArrayList<any>
			= java.util.ArrayList<any>;
	Require:
		java.util.List<type> ∩ java.util.ArrayList<nontype>
			= pojo ⊥;
];

Test "pojo constructors" in pojo test suite is
[
	anyConstructor ::= constructor any ();
	booleanConstructor ::= constructor boolean (boolean);
	byteConstructor ::= constructor Java byte (Java byte);
	shortConstructor ::= constructor Java short (Java short);
	intConstructor ::= constructor Java int (Java int);
	longConstructor ::= constructor Java long (Java long);
	floatConstructor ::= constructor float (float);
	doubleConstructor ::= constructor double (double);
	emptyStringConstructor ::= constructor string ();
	copyStringConstructor ::= constructor string (string);

	Require: anyConstructor() ≠ anyConstructor();
	Require: booleanConstructor(true) = true;
	Require: booleanConstructor(false) = false;
	For each i in 1 to 10 do [Require: byteConstructor(i) = i;];
	For each i in 128 to 138 do [Require: shortConstructor(i) = i;];
	For each i in 65536 to 65546 do [Require: intConstructor(i) = i;];
	For each i in 2147483649 to 2147483659 do
		[Require: longConstructor(i) = i;];
	Require: floatConstructor(0.0→float) = 0.0→float;
	Require: doubleConstructor(0.0) = 0.0;
	Require: emptyStringConstructor() = "";
	Require: copyStringConstructor("moo") = "moo";
	Require: copyStringConstructor("初めまして") = "初めまして";
];

Test "nonexistent pojo constructor" in pojo test suite is
[
	className : string := "java.lang.String";
	class ::= className<>;
	constructor of class parameterized by <⊥>
]
must raise Java-method-not-available exception;

Test "pojo static methods" in pojo test suite is
[
	valueOfIntMethod ::= static method string.valueOf (Java int);
	emptySetMethod ::= static method java.util.Collections.emptySet ();
	emptyListMethod ::= static method java.util.Collections.emptyList ();
	emptyMapMethod ::= static method java.util.Collections.emptyMap ();
	currentTimeMethod ::= static method java.lang.System.currentTimeMillis ();

	For each i in 1 to 100 do [Require: valueOfIntMethod(i) = “i”;];
	Require: emptySetMethod() ∈ java.util.Set<⊥>;
	Require: emptyListMethod() ∈ java.util.List<⊥>;
	Require: emptyMapMethod() ∈ java.util.Map<⊥, ⊥>;
	Require: currentTimeMethod() ∈ Java long;
];

Test "nonexistent pojo static method" in pojo test suite is
[
	className : string := "java.lang.String";
	class ::= className<>;
	static method class."lovesDeliciousBeans" parameterized by <boolean>
]
must raise Java-method-not-available exception;

Test "pojo instance methods" in pojo test suite is
[
	hashMethod ::= method any.hashCode ();
	equalsMethod ::= method any.equals (any);
	intValueMethod ::= method Java int.intValue ();
	doubleValueMethod ::= method Java long.doubleValue ();
	longValueMethod ::= method float.longValue ();
	lengthMethod ::= method string.length ();
	substringMethod ::= method string.substring (Java int, Java int);

	For	each i in 1 to 100 do [Require: hashMethod(i) = i;];
	For	each i in 1 to 100 do [Require: (hashMethod(i)=i) = equalsMethod(i,i);];
	For each i in 1 to 100 do [Require: intValueMethod(i) = i;];
	For each i in 1 to 100 do [Require: doubleValueMethod(i) = i→double;];
	For each i in 1 to 100 do [Require: longValueMethod(i→float) = i;];
	For each x in <"a", "aa", "aaa", "aaaa"> do
		[Require: lengthMethod(x) = |x|;];
	Require: substringMethod("mango", 0, 5) = "mango";
	Require: substringMethod("mango", 1, 4) = "ang";
	Require: substringMethod("mango", 2, 3) = "n";
	Require: substringMethod("mango", 3, 3) = "";

	list ::= java.util.ArrayList<string>;
	listConstructor ::= constructor list ();
	listSize ::= method list.size ();
	listAdd ::= method list.add (any);
	listGet ::= method list.get (Java int);
	listClear ::= method list.clear ();

	items ::= listConstructor();
	Require: listSize(items) = 0;
	For each i in 1 to 10 do [Require: listAdd(items, “i”) = true;];
	Require: listSize(items) = 10;
	For each i in 1 to 10 do [Require: listGet(items, i-1) = “i”;];
	listClear(items);
	Require: listSize(items) = 0;
];

Test "nonexistent pojo instance method" in pojo test suite is
[
	className : string := "java.lang.String";
	class ::= className<>;
	method class."lovesDeliciousBeans" parameterized by <boolean>
]
must raise Java-method-not-available exception;

Test "pojo static fields" in pojo test suite is
[
	Require: ↓static field boolean.TRUE = true;
	Require: ↓static field boolean.FALSE = false;
	For each t of <Java byte, Java short, Java int, Java long, Java char> do
	[
		min ::= static field t.MIN_VALUE;
		max ::= static field t.MAX_VALUE;
		Require: ↓min = ⎣t⎦;
		Require: ↓max = ⎡t⎤;
	];
	For each p of <<float, 4>, <double, 8>> do
	[
		t, b ::= p;
		bytes ::= static field t.BYTES;
		Require: ↓bytes = b;
	];
	Require: ↓static field string.CASE_INSENSITIVE_ORDER
		∈ java.util.Comparator<string>;
	Require: ↓static field java.util.Collections.EMPTY_LIST
		∈ java.util.List<any>;
];

Test "cannot modify static final pojo field" in pojo test suite is
[
	static field boolean.TRUE ?= false;
]
must raise cannot-modify-final-Java-field exception;

Test "pojo instance fields" in pojo test suite is
[
	pointConstructor ::= constructor java.awt.Point (Java int, Java int);

	p ::= pointConstructor(5, 12);
	pX ::= field p.x;
	pY ::= field p.y;
	Require: ↓pX = 5;
	Require: ↓pY = 12;
	pX ?= 37;
	pY ?= 54;
	Require: ↓pX = 37;
	Require: ↓pY = 54;
];

Test "pojo arrays" in pojo test suite is
[
	intArray ::= Java int[];
	ints ::= new Java int[10];

	Require: ||intArray|| = whole number;
	Require: intArray's element type = Java int;
	Require: ints ∈ intArray;
	Require: |ints| = 10;
	For each i in 1 to 10 do [Require: ints[i] = 0;];
	For each i in 1 to 10 do [ints[i] := i;];
	For each i in 1 to 10 do [Require: ints[i] = i;];
	Require: ints→tuple = 1 to 10;
];
