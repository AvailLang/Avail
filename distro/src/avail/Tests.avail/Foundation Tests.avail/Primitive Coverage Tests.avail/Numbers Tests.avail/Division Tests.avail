/*
 * Division Tests.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Division Tests"
Versions
	"Avail-1.6.0"
Uses
	"Primitive Test Common"
Body

Test "Division ok" in primitive numbers test suite is
[
	For each i from 1 to 10 do
	[
		Require: i ÷ 1 = i;
		Require: i ÷ i = 1;
		Require: i ÷ -1 = -i;
		Require: -i ÷ 1 = -i;
		Require: -i ÷ -1 = i;
		Require: i ÷ ∞ = 0;
		For each j from 1 to 10 do [Require: i÷j = j÷i → [i=j];];
	];
	Require: 4 ÷ 2 = 2;
	Require: 81 ÷ 9 = 9;
	Require: 82 ÷ 9 = 9;
	Require: 89 ÷ 9 = 9;
	Require: 90 ÷ 9 = 10;
	Require: 4294967296 ÷ 65536 = 65536;
	Require: 18446744073709551616 ÷ 4294967296 = 4294967296;
	Require: 340282366920938463463374607431768211456 ÷ 18446744073709551616
		= 18446744073709551616;
	Require: 4294967296 ÷ -65536 = -65536;
	Require: 18446744073709551616 ÷ -4294967296 = -4294967296;
	Require: 340282366920938463463374607431768211456 ÷ -18446744073709551616
		= -18446744073709551616;
	Require: -2147483648 ÷ -1 = 2147483648;
	Require: -9223372036854775808 ÷ -1 = 9223372036854775808;
	/* Division should always round towards negative infinity. */
	Require: 4 ÷ 3 = 1;
	Require: -4 ÷ 3 = -2;
	Require: 4 ÷ -3 = -2;
	Require: -4 ÷ -3 = 1;
	Require: 4.0f ÷ 2.0f = 2.0f;
	Require: 4.0 ÷ 2.0 = 2.0;
	Require: 4 ÷ 2.0f = 2.0f;
	Require: 4 ÷ 2.0 = 2.0;
	Require: 4.0f ÷ 2.0 = 2.0;
	Ignore: 4.0f ÷ 0;
	Ignore: 4.0f ÷ 0.0f;
	Ignore: 4.0 ÷ 0.0;
	Ignore: 4.0f ÷ -0.0f;
	Ignore: 4.0 ÷ -0.0;
];

Test "Division fails with cannot-divide-by-zero exception" in primitive numbers test suite is
[
	/* Hide 0 from the compiler. */
	v : extended integer := 0;
	Require: [1 ÷ v] raises cannot-divide-by-zero exception;
	Require: [1 mod v] raises cannot-divide-by-zero exception;
];

Test "Division fails with cannot-divide-infinities exception" in primitive numbers test suite is
[
	/* Hide ∞ from the compiler. */
	v : extended integer := ∞;
	Require: [v ÷ v] raises cannot-divide-infinities exception;
	Require: [v ÷ -v] raises cannot-divide-infinities exception;
	Require: [-v ÷ v] raises cannot-divide-infinities exception;
	Require: [-v ÷ -v] raises cannot-divide-infinities exception;
];

