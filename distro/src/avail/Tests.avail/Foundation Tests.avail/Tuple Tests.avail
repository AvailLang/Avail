/*
 * Tuple Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Tuple Tests"
Versions
	"1.1.0 DEV 2019-05-21"
Uses
	"Common"
Names
	"tuple test suite"
Body

/* The test suite identifier. */
"tuple test suite" is a new atom;

New test suite tuple test suite extends foundation test suite;

Test "tuple cardinality" in tuple test suite is
[
	a ::= <1,2,3,4>;
	Require: |a| = 4;
	Require: |<>| = 0;
	Require: <> is empty = true;
];

Test "tuple concatenation" in tuple test suite is
[
	a ::= <1,2>;
	b ::= <3,4>;
	c ::= <"foo", "bar">;
	Require: a ++ b = <1,2,3,4>;
	Require: a ++ c = <1,2,"foo", "bar">;
	Require: c[1] ++ c[2] = "foobar";
	Require: concatenate c = "foobar";
];

Test "tuple ranges" in tuple test suite is
[
	a ::= <1,2,3,4>;
	Require: a[1..] = <1,2,3,4>;
	Require: a[..3] = <1,2,3>;
	Require: a[2..3] = <2,3>;
];

Test "tuple membership" in tuple test suite is
[
	Require: 2 ∈ <1,2,3>;
	Require: ¬2 ∈ <1,3>;
];

Test "map through" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= map a through [n : natural number | n × 2];
	c ::= map a through [n : natural number, i : natural number | n × i];
	Require: b = <2,4,6,8>;
	Require: c = <1,4,9,16>;
];

Test "map through (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= map each n in a through [n × 2];
	c ::= map each n, i in a through [n × i];
	Require: b = <2,4,6,8>;
	Require: c = <1,4,9,16>;
];

Test "map and filter" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= map and filter a by
	[
		n : natural number,
		accept : [natural number]→⊤
	|
		m ::= n + 2;
		If m mod 2 = 0 then
		[
			accept(m);
		];
	];
	Require: b = <4,6>;
];

Test "any satisfies" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= any of a satisfies [n : natural number | n mod 2 = 0];
	c ::= any of a satisfies [n : natural number | n > 200];
	Require: b = true;
	Require: c = false;
];

Test "any satisfies (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= any n of a satisfies [n mod 2 = 0];
	c ::= any n of a satisfies [n > 200];
	Require: b = true;
	Require: c = false;
];

Test "for each of do" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b : tuple := <>;
	For each of a do [n : natural number | b ++= <n>;];
	Require: b = a;

	c : tuple := <>;
	For each of a do [
		n : natural number,
		index : [1..4]
	|
		c ++= <n>;
		c ++= <index>;

	];
	Require: c = <1,1,2,2,3,3,4,4>;
];

Test "macro for each of do" in tuple test suite is
[
	a ::= <1,2,3,4,5>;
	b : natural number* := <>;
	For each element of a do
	[
	 	If element is even then [b := eject b ++ <element>;];
	];
	Require: b = <2,4>;

	c : natural number* := <>;
	For each element, i of a do
	[
		If element is odd then [
			c ++= <element>;
			c ++= <i>;
		];
	];
	Require: c = <1,1,3,3,5,5>;
];

Test "count of where" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= count of a where [n : natural number | n mod 2 = 0];
	c ::= count of a where [n : natural number | n > 2000];
	Require: b = 2;
	Require: c = 0;
];

Test "count of where (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= count of n in a where [n mod 2 = 0];
	c ::= count of n in a where [n > 2000];
	Require: b = 2;
	Require: c = 0;
];

Test "each of satisfies" in tuple test suite is
[
	a ::= <1,2,3,4>;
	counter : whole number := 0;
	b ::= each of a satisfies
	[
		n : natural number
	|
		counter := counter +1;
		n ≤ 2
	];
	c ::= each of a satisfies [n : natural number | n > 0];
	Require: b = false;
	Require: counter = 3;
	Require: c = true;
];

Test "each of satisfies (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	counter : whole number := 0;
	b ::= each n of a satisfies
	[
		counter := counter +1;
		n ≤ 2
	];
	c ::= each n of a satisfies [n > 0];
	Require: b = false;
	Require: counter = 3;
	Require: c = true;
];

Test "filter by" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= filter a by [n : natural number | n mod 2 = 0];
	c ::= filter a by [n : natural number | n > 2000];
	d ::= filter a by [n : natural number, i : natural number | (n + i) > 5];
	Require: b = <2,4>;
	Require: c = <>;
	Require: d = <3,4>;
];

Test "select each (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= select each n from a where [(n mod 2) = 0];
	c ::= select each n from a where [n > 2000];
	d ::= select each n,i from a where [(n + i) > 5];
	Require: b = <2,4>;
	Require: c = <>;
	Require: d = <3,4>;
];

Test "reject each (macro)" in tuple test suite is
[
	a ::= <1,2,3,4>;
	b ::= reject each n from a where [(n mod 2) ≠ 0];
	c ::= reject each n from a where [n ≤ 2000];
	d ::= reject each n,i from a where [(n + i) ≤ 5];
	Require: b = <2,4>;
	Require: c = <>;
	Require: d = <3,4>;
];

Test "alternative answer via else" in tuple test suite is
[
	a : tuple := <1,2,3,4>;
	Require: a[1] else [5] = 1;
	Require: a[6] else [5] = 5;
	Require: a[1..2] else [<5>] = <1,2>;
	Require: a[1..200] else [<5>] = <5>;
	Require: a[..2] else [<5>] = <1,2>;
	Require: a[..200] else [<5>] = <5>;
	Require: a[1..] else [<5>] = <1,2,3,4>;
	Require: a[200..] else [<5>] = <5>;
];

Test "tuple search" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	b ::= <1,2,3,4,6,2,3>;
	t ::= "The way to the heart is through the stomach";
	Require: all indices of <> in <> = <>;
	Require: all indices of <2> in <> = <>;
	Require: all indices of <2> in a = <2,4>;
	Require: all indices of <> in a = <>;
	Require: all indices of <2,3> in b = <2,6>;
	Require: all indices of "the" in t = <12,33>;
	Require: first index of <> in <> = 0;
	Require: first index of <2> in <> = 0;
	Require: first index of <2> in a = 2;
	Require: first index of <2,1,4> in a = 4;
	Require: last index of a where [n : natural number | n < 5] = 6;
	Require: last index of a where [n : natural number | n > 10] = 0;
	Require: first index of a where [n : natural number | n < 5] = 1;
	Require: first index of a where [n : natural number | n > 10] = 0;
	Require: all indices of a where [n : natural number | n < 2] = <1,5>;
	Require: all indices of a where [n : natural number | n > 20] = <>;
];

Test "tuple search (macros)" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	b ::= <1,2,3,4,6,2,3>;

	Require: last index of n in a where [n < 5] = 6;
	Require: last index of n in a where [n > 10] = 0;
	Require: first index of n in a where [n < 5] = 1;
	Require: first index of n in a where [n > 10] = 0;
	Require: all indices of n in a where [n < 2] = <1,5>;
	Require: all indices of n in a where [n > 20] = <>;
];

Test "subtuple replace" in tuple test suite is
[
	a ::= "purple feet on fire";
	b ::= <1,2,3,4,6,2,3>;
	c ::= "We know the truth; yes, know indeed";
	Require: replace all occurrences of <2,3,4> in <> with <9> = <>;
	Require: replace all occurrences of "\t" in "afb	c" with " " = "afb c";
	Require: replace all occurrences of "feet" in a with "people" =
		"purple people on fire";
	Require: replace all occurrences of "know" in c with "hide" =
		"We hide the truth; yes, hide indeed";
	Require: replace all occurrences of "pickles" in c with "hide" = c;
	Require: replace all occurrences of <2,3> in b with <9,8,7> =
		<1,9,8,7,4,6,9,8,7>;
	Require: replace all occurrences of <2,3> in b with <> = <1,4,6>;
	Require: replace all occurrences of <2,3> in <2> with <> = <2>;
	Require: replace all occurrences of <2,3> in <2,3> with <9> = <9>;
	Require: replace the first occurrence of <2,3,4> in <> with <9> = <>;
	Require: replace the first occurrence of "know" in c with "fabricate" =
		"We fabricate the truth; yes, know indeed";
	Require: replace the first occurrence of <2,3> in b with <9,8,7> =
		<1,9,8,7,4,6,2,3>;
	Require: replace the first occurrence of <2,3> in b with <> = <1,4,6,2,3>;
	Require: replace the first occurrence of <2,3> in <2> with <> = <2>;
	Require: replace the first occurrence of <2,3> in <2,3> with <9> = <9>;
];

Test "drop from tuple" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: drop 4 from a = <1,4,5,6>;
	Require: drop 8 from a = <>;
	Require: drop 0 from a = a;
	Require: drop from a until [n : natural number | n > 3] = <4,5,6>;
	Require: drop from a until [n : natural number | n > 6] = <>;
	Require: drop from a while [n : natural number | n < 3] = <3,2,1,4,5,6>;
	Require: drop from a while [n : natural number | n < 7] = <>;
];

Test "take from tuple" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: take 4 from a = <1,2,3,2>;
	Require: take 8 from a = a;
	Require: take 0 from a = <>;
	Require: take from a until [n : natural number | n > 3] = <1,2,3,2,1>;
	Require: take from a until [n : natural number | n > 6] = a;
	Require: take from a while [n : natural number | n ≤ 2] = <1,2>;
	Require: take from a while [n : natural number | n < 7] = a;
];

Test "drop from tuple (macro)" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: drop 4 from a = <1,4,5,6>;
	Require: drop 8 from a = <>;
	Require: drop 0 from a = a;
	Require: drop n from a until [n > 3] = <4,5,6>;
	Require: drop n from a until [n > 6] = <>;
	Require: drop n from a while [n < 3] = <3,2,1,4,5,6>;
	Require: drop n from a while [n < 7] = <>;
];

Test "take from tuple (macro)" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: take 4 from a = <1,2,3,2>;
	Require: take 8 from a = a;
	Require: take 0 from a = <>;
	Require: take n from a until [n > 3] = <1,2,3,2,1>;
	Require: take n from a until [n > 6] = a;
	Require: take n from a while [n ≤ 2] = <1,2>;
	Require: take n from a while [n < 7] = a;
];

Test "split tuple" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: split a after 3 = <<1,2,3>,<2,1,4,5,6>>;
	Require: split a after 0 = <<>,<1,2,3,2,1,4,5,6>>;
	Require: split a after 8 = <<1,2,3,2,1,4,5,6>,<>>;
	Require: split a before 1 = <<>,<1,2,3,2,1,4,5,6>>;
	Require: split a before 8 = <<1,2,3,2,1,4,5>,<6>>;
	Require: split a before 9 = <<1,2,3,2,1,4,5,6>,<>>;
];

Test "stripe tuple" in tuple test suite is
[
	a ::= <<1,2>,<3,4>,<5,6,7>>;
	Require: stripe a at 2 = <2,4,6>;
];

Test "zip tuple" in tuple test suite is
[
	a ::= <1,2,3>;
	b ::= <4,5,6>;
	c ::= <7,8,9>;
	Require: zip <a,b,c> = <<1,4,7>,<2,5,8>,<3,6,9>>;
	Require: a zip b zip c = <<1,4,7>,<2,5,8>,<3,6,9>>;
	Require: c zip b zip a = <<7,4,1>,<8,5,2>,<9,6,3>>;
];

Test "suffixes and prefixes" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: a starts with <1,2,3>;
	Require: a starts with <1,2,4> = false;
	Require: a ends with <1,4,5,6>;
	Require: a ends with <1,4,5,7> = false;
	Require: a's head = 1;
	Require: a's last = 6;
	Require: a's tail = <2,3,2,1,4,5,6>;
];

Test "slice replacement" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: a[2..4] → <"foo",¢w,∅> = <1,"foo",¢w,∅,1,4,5,6>;
];

Test "fold" in tuple test suite is
[
	Require: left fold <6,3,2> through
	[
		input : integer,
		result : integer
	|
		result ÷ input
	] = 1;

	Require: right fold <2,3,5> through
	[
		input : natural number,
		result : natural number
	|
		result ^ input
	] = 15625;
];

Test "element swap" in tuple test suite is
[
	a ::= <1,2,3,2,1,4,5,6>;
	Require: a[3↔8] = <1,2,6,2,1,4,5,3>;
];

/*Sorting Tests*/

Test "trivial empty merge sort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <>;
	Require: <> = ref;
];

Test "trivial one element merge sort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <18>;
	Require: <18> = ref;
];

Test "small merge sort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <4,6,1>;
	Require: <1,4,6> = ref;
];

Test "deterministic merge- and quicksort should be equal" in tuple test suite is
[
	ref : <natural number…|> := <2,9,5,12,1,8,4,11,7,3,10,6>;
	Require: merge sort ref = quicksort ref;
];

Test "random merge- and quicksort should be equal" in tuple test suite is
[
	rng : pRNG := a pRNG;
	ref : <[-50..50]…|> := <>;

	Repeat
	[
		v ::= rng's next value in [-50..50];
		ref := ref ++ <v>;
	] 100 times;

	Require: merge sort ref = quicksort ref;
];

Test "merge sort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <4,6,1,2,3,20,18,19,17,14,16,15,12,13,5,7,8,9,10,11>;
	Require: <1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20> = ref;
];

Test "small merge sort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <4,6,1> with
		[n : natural number, m : natural number | n ≥ m];
	Require: <6,4,1> = ref;
];

Test "merge sort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> with
		[n : natural number, m : natural number | n ≥ m];
	Require: <20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1> = ref;
];

Test "complex merge sort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort <14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> with
		[
			n : natural number,
			m : natural number
		|
			(n is odd ∧ m is even)
				∨ (n is odd ∧ m is odd ∧ n ≤ m)
				∨ (n is even ∧ m is even ∧ n ≥ m)
		];
	Require: <1,3,5,7,9,11,13,15,17,19,20,18,16,14,12,10,8,6,4,2> = ref;
];

Test "small merge sort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort n, m in <4,6,1> by [n ≥ m];
	Require: <6,4,1> = ref;
];

Test "merge sort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort n, m in
		<14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> by [n ≥ m];
	Require: <20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1> = ref;
];

Test "complex merge sort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := merge sort n, m in
		<14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> by
		[
			(n is odd ∧ m is even)
				∨ (n is odd ∧ m is odd ∧ n ≤ m)
				∨ (n is even ∧ m is even ∧ n ≥ m)
		];
	Require: <1,3,5,7,9,11,13,15,17,19,20,18,16,14,12,10,8,6,4,2> = ref;
];


Test "trivial empty quicksort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <>;
	Require: <> = ref;
];

Test "trivial one element quicksort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <18>;
	Require: <18> = ref;
];

Test "small quicksort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <4,6,1>;
	Require: <1,4,6> = ref;
];

Test "quicksort" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <4,6,1,2,3,20,18,19,17,14,16,15,12,13,5,7,8,9,10,11>;
	Require: <1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20> = ref;
];

Test "small quicksort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <4,6,1> with
		[n : natural number, m : natural number | n ≥ m];
	Require: <6,4,1> = ref;
];

Test "quicksort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> with
		[n : natural number, m : natural number | n ≥ m];
	Require: <20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1> = ref;
];

Test "complex quicksort with" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort <14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> with
		[
			n : natural number,
			m : natural number
		|
			(n is odd ∧ m is even)
				∨ (n is odd ∧ m is odd ∧ n ≤ m)
				∨ (n is even ∧ m is even ∧ n ≥ m)
		];
	Require: <1,3,5,7,9,11,13,15,17,19,20,18,16,14,12,10,8,6,4,2> = ref;
];

Test "small quicksort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort n, m in <4,6,1> by [n ≥ m];
	Require: <6,4,1> = ref;
];

Test "quicksort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort n, m in
		<14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> by [n ≥ m];
	Require: <20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1> = ref;
];

Test "complex quicksort macro" in tuple test suite is
[
	ref : <natural number…|>;
	ref := quicksort n, m in
		<14,4,6,1,2,3,20,18,19,17,16,15,12,13,5,7,8,9,10,11> by
		[
		 	(n is odd ∧ m is even)
		 		∨ (n is odd ∧ m is odd ∧ n ≤ m)
		 		∨ (n is even ∧ m is even ∧ n ≥ m)
		];
	Require: <1,3,5,7,9,11,13,15,17,19,20,18,16,14,12,10,8,6,4,2> = ref;
];

Test "quasi-destructive update" in tuple test suite is
[
	t : <natural number…|> := <1,2,3>;
	n ::= t[2] → 5;
	Require: <1,5,3> = n;
];

Test "quasi-destructive n-ary tuple update" in tuple test suite is
[
	t : <<natural number…|3>…|> := <<1,2,3>,<4,5,6>>;
	n ::= t[1][3] → 7;
	Require: <<1,2,7>,<4,5,6>> = n;
];

Test "quasi-destructive n-ary complex tuple update" in tuple test suite is
[
	t : <<natural number,{string→natural number|1},natural number…|3>…|> :=
		<<1,{"foo"→2},3>,<4,{"boo"→5},6>>;
	n ::= t[1][2]["foo"] → 7;
	Require: <<1,{"foo"→7},3>,<4,{"boo"→5},6>> = n;
];

Test "quasi-destructive n-ary very complex tuple update" in tuple test suite is
[
	t : <<natural number,{string→<string…|2>|1},natural number…|3>…|> :=
		<<1,{"foo"→<"cheese","apples">},3>,<4,{"boo"→<"purple","chariots">},6>>;
	n ::= t[1][2]["foo"][2] → "motor torpedo boat";
	Require: <<1,{"foo"→<"cheese","motor torpedo boat">},3>,
		<4,{"boo"→<"purple","chariots">},6>> = n;
];

Test "integer interval tuple" in tuple test suite is
[
	/*
	 * Create a series of complex small integer interval tuples.
	 */
	For each start from -5 to 5 do
	[
		For each end from -5 to 5 do
		[
			For each delta from -5 to 5 do
			[
				expected : tuple := <>;
				If delta ≠ 0 then
				[
					For each i from start to end by delta do
					[
						expected ++= <i>;
					];
				];
				Guard
				[
					actual ::= start to end by delta;
					Require: actual = expected;
					Require: 0 ≠ delta;
				]
				intercept
				[
					e : incorrect-argument-type exception
				|
					Require: delta = 0;
				];
			];
		];
	];

	/*
	 * Test a delta that results in an actual end value that precedes the
	 * supplied end.
	 */
	Require: 83 to -29 by -17 = <83, 66, 49, 32, 15, -2, -19>;

	/*
	 * Create a simple integer interval tuple that is not small.
	 */
	expected : tuple := <>;
	For each i from 12345678901 to 12345678907 by 2 do [expected ++= <i>;];
	Require: 12345678901 to 12345678907 by 2 = expected;

	/*
	 * Test concatenation of a small and a regular integer interval tuple.
	 */
	tinyTuple ::= 1 to 10 by 1;
	concatOne ::= tinyTuple ++ expected;
	Require: <1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12345678901, 12345678903,
		12345678905, 12345678907> = concatOne;

	/*
	 * Test the edges of small integer interval tuples and regular ones.
	 */
	intMaxInterval ::= 2147483640 to 2147483647 by 1;
	tooBigInterval ::= 2147483648 to 2147483655 by 1;
	concatTwo ::= intMaxInterval ++ tooBigInterval;
	Require: 2147483640 to 2147483655 by 1 = concatTwo;

	/*
	 * Test concatenation of two small integer interval tuples.
	 */
	left ::= 1 to 5 by 1;
	right ::= 6 to 10 by 1;
	concatThree ::= left ++ right;
	Require: 1 to 10 by 1 = concatThree;
];

[
	thisModule ::= current module;
	Private method "this module" is [thisModule];
]();

Test "serialization" in tuple test suite is
[
	$label;
	forCapture : string := "Take me!";
	/* Each line that initializes "expected" tests a distinct range of
	 * serializer functionality.
	 */
	expected ::=
		/* The integers 1 through 10 encode distinctly. */
		/*  1 - 10 */ 1 to 10 ++
		<
			/* 11 .. 255 */
		/* 11 - 12 */ 11, 255,
			/* 256 .. 65535 */
		/* 13 - 14 */ 256, 65535,
			/* -2^31 .. 2^31 - 1 */
		/* 15 - 16 */ -2^31, 2^31 - 1,
			/* Large integers */
		/* 17      */ 2^100,
			/* Special objects */
		/* 18 - 20 */ ∅, ⊤, ⊥,
			/* Special atoms */
		/* 21 - 22 */ true, false,
			/* Latin-1 characters */
		/* 23      */ ¢a,
			/* BMP characters */
		/* 24      */ ¢あ,
			/* Large characters */
		/* 25      */ ¢𝄞,
			/* Floats */
		/* 26      */ 4.0f,
			/* Doubles */
		/* 27      */ 6.0221413e23,
			/* General tuples */
		/* 28      */ <5, "ham sandwich", ∅>,
			/* Byte strings */
		/* 29      */ "Latin-1 string",
			/* BMP strings */
		/* 30      */ "おめでとうございます",
			/* Large strings */
		/* 31      */ "「𝄞は良いですね」と言いました。",
			/* Byte tuples */
		/* 32      */ 50 to 60,
			/* Nybble tuples */
		/* 33      */ 0 to 15,
			/* Sets */
		/* 34      */ 1 to 10→set,
			/* Maps */
		/* 35      */ {1 → "一", 2 → "二", 3 → "三"},
			/* Objects */
		/* 36      */ a bad-argument exception,
			/* Object types */
		/* 37      */ bad-argument exception,
			/* Atoms */
		/* 38      */ tuple test suite,
			/* Function implementations */
		/* 39      */ [x : integer := 5; x]'s implementation,
			/* Clean functions */
		/* 40 - 41 */ [1 + 2], [x : [1..5], y : [6..10] | x + y],
			/* General functions */
		/* 42      */ [forCapture],
			/* Variables */
		/* 43      */ ↑forCapture,
			/* Tokens */
		/* 44      */ `"token"`,
			/* Fiber types */
		/* 45      */ fiber→set,
			/* Function types */
		/* 46      */ […]→float,
			/* Tuple types */
		/* 47 - 48 */ extended integer+, <double, float, nonempty string…|2..6>,
			/* Integer types */
		/* 49 - 50 */ (-∞..8], [8..∞),
			/* Continuation types */
		/* 51      */ $[integer, string]→tuple,
			/* Enumeration types */
		/* 52      */ {1, 2, 3, 5, 8, 13, "cheese"}ᵀ,
			/* Instance types */
		/* 53 - 54 */ 1's type, "fish"'s type,
			/* Instance metatypes */
		/* 55 - 56 */ tuple's type, map's type,
			/* Set types */
		/* 57      */ {character|5..12},
			/* Map types */
		/* 58      */ {whole number → natural number|3..},
			/* Bottom */
		/* 59      */ ⊥
		>;
	bytes ::= serialize expected;
	actual ::= deserialize bytes based on this module;
	Require: |actual| = 1;
	actualTuple ::= actual[1] ?→ tuple;
	Require: |actualTuple| = |expected|;
	failed : natural number* := <>;
	For each index from 1 to |expected| do
	[
		expectedValue ::= expected[index];
		actualValue ::= actualTuple[index];
		/* Function implementations have identity. */
		If expectedValue ∈ function implementation then
		[
			expectedImplementation ::= expectedValue ?→ function implementation;
			actualImplementation ::= actualValue ?→ function implementation;
			If actualImplementation's nybblecodes
				≠ expectedImplementation's nybblecodes then
			[
				failed := eject failed ++ <index>;
			];
		]
		/* Functions have identity. */
		else if expectedValue ∈ function then
		[
			expectedFunction ::= expectedValue ?→ function;
			actualFunction ::= actualValue ?→ function;
			If actualFunction's implementation's nybblecodes
				≠ expectedFunction's implementation's nybblecodes then
			[
				failed := eject failed ++ <index>;
			];
		]
		/* Variables have identity. */
		else if expectedValue ∈ variable then
		[
			expectedVariable ::= expectedValue ?→ ↑string;
			actualVariable ::= expectedValue ?→ ↑string;
			If ↓actualVariable ≠ ↓expectedVariable then
			[
				failed := eject failed ++ <index>;
			];
		]
		/* All other values in the input tuple are identityless. */
		else if actualValue ≠ expectedValue then
		[
			failed := eject failed ++ <index>;
		];
	];
	Require: failed = <> ("serialization failed");
];

Test "destructuring tuple binding" in tuple test suite is
[
	t ::= 1 to 3;
	x, y, z ::= t;
	Require: x = t[1] = 1;
	Require: y = t[2] = 2;
	Require: z = t[3] = 3;
];

Test "tuple appending" in tuple test suite is
[
	/* strongly typed appends */
	a : <1's type, 2's type, 3's type…|3> := <1,2,3>;
	b : <1's type, 2's type, 3's type,4's type…|3..> := a;
	b ++= <4>;
	Require: b = <1,2,3,4>;

	/* strongly typed multiple appends */
	c ::= <"b", 1, -2>;
	d : <string, 1's type, number, any…|3..> := c;
	d ++= <"a">;
	d ++= <5>;
	d ++= <0.1>;
	Require: d = <"b", 1, -2, "a", 5, 0.1>;

	/* byte tuple / integer interval tuple */
	ti1 : tuple := <0, 2, 4, 6, 8, 10, 12, 14, 16, 18>;
	ti2 : tuple := 0 to 18 by 2;
	ti1 := ti1 ++ <20>;
	ti1 ++= <22>;
	ti2 := ti2 ++ <20>;
	ti2 ++= <22>;
	Require: ti1[1..12] = ti2[1..12];

	/* byte tuple / repeated tuple */
	tr1 : tuple := <5, 5, 5, 5, 5, 5, 5, 5, 5, 5>;
	tr2 : tuple := 10 occurrences of 5;
	tr1 := tr1 ++ <5>;
	tr1 ++= <5>;
	tr2 := tr2 ++ <5>;
	tr2 ++= <5>;
	Require: tr1[1..12] = tr2[1..12];

	/* two-byte string */
	s : string := "ĀbcdefghijĐz";
	s ++= "!";
	Require: s = "ĀbcdefghijĐz!";
];

Test "tuple range replacement" in tuple test suite is
[
	t1 ::= <1,2,3,<0,4,<5,5,5,5>,6>,3,7,8>;
	t2 ::= <1,2,3,<0,4,<5,9,9,9,5>,6>,3,7,8>;
	t3 ::= t1[4][3](1..4)→<9,9,9>;
	Require: t3 = t2;
	Require: [t1[4][3](1..5)→<9,9,9>] raises subscript-out-of-bounds exception;
	Require: [t1[4][3](4..1)→<9,9,9>] raises negative-size exception;

	t4 ::= <1,2,3,{"foo"→<4,<5,5,5,5>,6>},7,8>;
	t5 ::= <1,2,3,{"foo"→<4,<5,9,9,5,5>,6>},7,8>;
	t6 ::= t4[4]["foo"][2](1..3)→<9,9>;
	Require: t6 = t5;
	Require: [t4[4]["boo"][2](1..3)→<9,9>] raises key-not-found exception;
	Require: [t4[4](2..4)→<9,9>]
		raises incorrect-argument-type exception;
];

Test "tuple insertion index" in tuple test suite is
[
	less ::= [a : integer, b : integer | a < b];
	lessOrEqual ::= [a : integer, b : integer | a ≤ b];
	/* Make sure comparison isn't called when examining empty tuple. */
	Assert: insertion index of 10 in <>
	 	with [a : integer, b : integer | Shouldn't happen]
	 	= 1;
	For each subtuple in
		<
			<10, <>, 1, 1>,
			<10, <20>, 1, 1>,
			<10, <5>, 2, 2>,
			<10, <10>, 1, 2>,
			<10, <10, 15>, 1, 2>,
			<10, <10, 10>, 1, 3>,
			<10, <5, 5>, 3, 3>,
			<10, <15, 15>, 1, 1>,
			<10, <1, 2, 3, 4, 5, 6, 7, 8, 9>, 10, 10>,
			<10, <1, 2, 3, 4, 5, 6, 7, 8, 9, 10>, 10, 11>,
			<10, <1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11>, 10, 11>,
			<10, <1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>, 10, 11>,
			<0, <1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>, 1, 1>,
			<1, <1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12>, 1, 2>
		>
	do [
		element, aTuple, earliest, latest ::= subtuple;
		calculatedEarliest ::= insertion index of element in aTuple with less;
		Assert: calculatedEarliest = earliest
			("Wrong \"_<_\" insertion point for: "
				++ “subtuple”
				++ ", was "
				++ “calculatedEarliest”
				++ ", should have been "
				++ “earliest”);
		calculatedLatest ::= insertion index of element in aTuple with lessOrEqual;
		Assert: calculatedLatest = latest
			("Wrong \"_≤_\" insertion point for: "
				++ “subtuple”
				++ ", was "
				++ “calculatedLatest”
				++ ", should have been "
				++ “latest”);
	];
];