/*
 * Set Tests.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Set Tests"
Versions
	"1.4.0"
Uses
	"Common"
Names
	"set test suite"
Body

/* The test suite identifier. */
"set test suite" is a new atom;

New test suite set test suite extends foundation test suite;

/* Set Algebra */
Test "set union" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a ∪ b = {1,2,3,4,5,6};
	Require: b ∪ a = {1,2,3,4,5,6};
	Require: a ∪ a = a;
	Require: a ∪ ∅ = a;
];

Test "set intersection" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a ∩ b = {3,4};
	Require: a ∩ a = a;
	Require: b ∩ a = {3,4};
	Require: a ∩ ∅ = ∅;
];

Test "relative complement" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a \ b = {1,2};
	Require: b \ a = {5,6};
	Require: a \ ∅ = a;
	Require: ∅ \ a = ∅;
	Require: a \ a = ∅;
];

Test "symmetric difference" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a Δ b = {1,2,5,6};
	Require: b Δ a = {1,2,5,6};
	Require: a Δ ∅ = a;
	Require: ∅ Δ a = a;
	Require: a Δ a = ∅;
	Require: ∅ Δ ∅ = ∅;
];

Test "set includes element" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a ∋ 3;
	Require: 3 ∈ a;
];

Test "set excludes element" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a ∌ 6;
	Require: 6 ∉ a;
];

Test "set proper subset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {1,2,3,4,5};
	Require: a ⊂ b;
	Require: b ⊃ a;
	Require: ∅ ⊂ a;
	Require: a ⊃ ∅;
];

Test "set not proper subset" in set test suite is
[
	a ::= {1,2,3,4,5};
	b ::= {1,6};
	Require: b ⊄ a;
	Require: a ⊄ a;
	Require: a ⊄ ∅;
	Require: a ⊅ b;
	Require: a ⊅ a;
	Require: ∅ ⊅ a;
];

Test "set is a superset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {1,2,3};
	Require: a ⊇ b;
	Require: a ⊇ a;
	Require: a ⊇ ∅;
	Require: b ⊆ a;
	Require: a ⊆ a;
	Require: ∅ ⊆ a;
];

Test "set is not a superset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a ⊉ b;
	Require: ∅ ⊉ b;
	Require: b ⊈ a;
	Require: a ⊈ ∅;
];

Test "add element to set" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a + 5000 = {1,2,3,4,5000};
	Require: a + "foo" = {1,2,3,4,"foo"};
];

/* Other set method tests*/
Test "set cardinality" in set test suite is
[
	a ::= {1,2,3,4};
	Require: |a| = 4;
	Require: |∅| = 0;
	Require: ∅ is empty = true;
];

Test "map through" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= map a through [n : natural number | n × 2];
	Require: b = {2,4,6,8};
	c ::= map {"one", "two", "three", "four", "five"} through
		[s : string | |s|];
	Require: c = {3, 5, 4};
];

Test "map and filter" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= map and filter a by
	[
		n : natural number,
		accept : [natural number]→⊤
	 |
		m ::= n + 2;
		If m mod 2 = 0 then
		[
			accept(m);
		];
	];
	Require: b = {4,6};
];

Test "any satisfies" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= any of a satisfies [n : natural number | n mod 2 = 0];
	c ::= any of a satisfies [n : natural number | n > 200];
	Require: b = true;
	Require: c = false;
];

Test "any satisfies (macro)" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= any n of a satisfies [n mod 2 = 0];
	c ::= any n of a satisfies [n > 200];
	Require: b = true;
	Require: c = false;
];

Test "for each of do" in set test suite is
[
	a ::= {1,2,3,4};
	b : set := ∅;
	For each of a do
	[
		n : natural number
	 |
		b := b + n;
	];
	Require: b = a;
];

Test "macro for each of do" in set test suite is
[
	a ::= {1,2,3,4};
	b : set := ∅;
	For each element of a do
	[
		b := b + element;
	];
	Require: b = a;
];

Test "count of where" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= count of a where [n : natural number | n mod 2 = 0];
	c ::= count of a where [n : natural number | n > 2000];
	Require: b = 2;
	Require: c = 0;
];

Test "count of where (macros)" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= count of n in a where [n mod 2 = 0];
	c ::= count of n in a where [n > 2000];
	Require: b = 2;
	Require: c = 0;
];

Test "each of satisfies" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= each of a satisfies [n : natural number | n ≤ 2];
	c ::= each of a satisfies [n : natural number | n > 0];
	Require: b = false;
	Require: c = true;
];

Test "each of satisfies (macro)" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= each n of a satisfies [n ≤ 2];
	c ::= each n of a satisfies [n > 0];
	Require: b = false;
	Require: c = true;
];

Test "filter by" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= filter a by [n : natural number | n mod 2 = 0];
	c ::= filter a by [n : natural number | n > 2000];
	Require: b = {2,4};
	Require: c = ∅;
];

Test "select each (macro)" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= select each n from a where [n mod 2 = 0];
	c ::= select each n from a where [n > 2000];
	Require: b = {2,4};
	Require: c = ∅;
];

Test "reject each (macro)" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= reject each n from a where [n mod 2 = 0];
	c ::= reject each n from a where [n > 2000];
	Require: b = {1,3};
	Require: c = {1,2,3,4};
];

Test "no order and no duplicates" in set test suite is
[
	rng : pRNG := a pRNG;

	s : {[-10..10] |} := ∅;
	t : <[-10..10]…|> := <>;

	/* copy a stream of duplicate random numbers into a set and tuple */

	Repeat
	[
		v ::= rng's next value in [-10..10];
		s := s + v;
		t := <v> ++ t;
	] 40 times;

	/* the set s (with no order and no duplicates) is required to be equal to
	 * the set version of tuple t (with order and duplicates)
	 */

	Require: s = t→set;
];
