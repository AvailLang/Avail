/*
 * Observation Tests.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Observation Tests"
Versions
	"1.4.0"
Uses
	"Common"
Names
	"observation test suite"
Body

"observation test suite" is a new atom;
New test suite observation test suite extends foundation test suite;

Test "write reactor" in observation test suite is
[
	x : integer := 0;
	result : integer;
	k ::= new atom named "key";
	ref ::= 901;
	↑x's write reactors += k→[result := ref;];
	Observe [x := ref;];
	Require: x = ref;
	Require: result is assigned;
	Require: result = ref;
];

Test "multiple write reactor" in observation test suite is
[
	x : integer := 0;
	result1 : integer;
	k1 ::= new atom named "key 1";
	ref1 ::= 901;
	↑x's write reactors += k1→[result1 := ref1;];
	result2 : integer;
	k2 ::= new atom named "key 2";
	ref2 ::= 899;
	↑x's write reactors += k2→[result2 := ref2;];
	Observe [x := ref1 + ref2;];
	Require: x = ref1 + ref2;
	Require: result1 is assigned;
	Require: result1 = ref1;
	Require: result2 is assigned;
	Require: result2 = ref2;
];

Test "write reactor fires only once" in observation test suite is
[
	x : integer := 0;
	result : integer;
	k ::= new atom named "key";
	ref ::= 101;
	↑x's write reactors += k→[result := ref;];
	Observe [x := ref;];
	Require: x = ref;
	Require: result is assigned;
	Require: result = ref;
	Clear result;
	Observe [x := ref × 10;];
	Require: x = ref × 10;
	Require: result is unassigned;
];

Test "remove write reactor" in observation test suite is
[
	x : integer := 0;
	result : integer;
	k ::= new atom named "key";
	ref ::= 101;
	↑x's write reactors += k→[result := ref;];
	↑x's write reactors -= k;
	Observe [x := ref;];
	Require: x = ref;
	Require: result is unassigned;
];

Test "observe single variable" in observation test suite is
[
	x : integer := 0;
	result : integer;
	Whenever [x] changes, do
	[
		v : integer
	|
		Require: v = x;
		result := v;
	];
	ref ::= 10101;
	Observe [x := ref;];
	Require: x = ref;
	Require: result is assigned;
	Require: result = ref;
];

Test "observe two variables" in observation test suite is
[
	x : integer := 0;
	y : integer := 0;
	result : integer;
	Whenever [x + y] changes, do
	[
		sum : integer
	|
		Require: sum = x + y;
		result := sum;
	];
	Observe [x := 5;];
	Require: x = 5;
	Require: result is assigned;
	Require: result = 5;
	Clear result;
	Observe [y := 5;];
	Require: y = 5;
	Require: result is assigned;
	Require: result = 10;
	Clear result;
	Observe [x := 10; y := 0;];
	Require: x = 10;
	Require: y = 0;
	Require: result is unassigned;
	Observe [x := 1; y := -1;];
	Require: x = 1;
	Require: y = -1;
	Require: result is assigned;
	Require: result = 0;
];

Test "observe nested functions" in observation test suite is
[
	x : integer := 0;
	y : integer := 0;
	f ::= [x + y];
	g ::= [f()];
	result : integer;
	Whenever [g()] changes, do
	[
		sum : integer
	|
		Require: sum = x + y;
		result := sum;
	];
	Observe [x := 5;];
	Require: x = 5;
	Require: result is assigned;
	Require: result = 5;
	Clear result;
	Observe [y := 5;];
	Require: y = 5;
	Require: result is assigned;
	Require: result = 10;
	Clear result;
	Observe [x := 10; y := 0;];
	Require: x = 10;
	Require: y = 0;
	Require: result is unassigned;
	Observe [x := 1; y := -1;];
	Require: x = 1;
	Require: y = -1;
	Require: result is assigned;
	Require: result = 0;
];

Test "curtailed initial trace" in observation test suite is
[
	n : integer := 1;
	d : integer := 0;
	result : integer;
	Whenever [n ÷ d] changes, do
	[
		q : integer
	|
		result := q;
	];
]
must raise cannot-divide-by-zero exception;

Test "curtailed subsequent trace" in observation test suite is
[
	n : integer := 10;
	d : integer := 2;
	result : integer;
	Whenever [n ÷ d] changes, do
	[
		q : integer
	|
		Require: n ÷ d = q;
		result := q;
	];
	Require: n = 10;
	Require: d = 2;
	Require: result is assigned;
	Require: result = 5;
	Observe [d := 0;];
]
must raise cannot-divide-by-zero exception;

Test "curtailed observe" in observation test suite is
[
	n : integer := 10;
	d : integer := 2;
	result : integer;
	Whenever [n ÷ d] changes, do
	[
		q : integer
	|
		Require: n ÷ d = q;
		result := q;
	];
	Require: n = 10;
	Require: d = 2;
	Require: result is assigned;
	Require: result = 5;
	Observe [d := d ÷ (d - 2);];
]
must raise cannot-divide-by-zero exception;

Test "nested whenevers" in observation test suite is
[
	x : integer;
	Whenever [Whenever [x] changes, do [unused : integer |]; 0] changes,
	do [unused : integer |];
]
must raise illegal-trace-mode exception;

Test "nested observes" in observation test suite is
[
	x : integer;
	Observe [Observe [x := 5;];];
	Require: x = 5;
];

Test "nested whenever[observe]" in observation test suite is
[
	x : integer;
	Whenever [observe [x := 10; x]] changes, do [unused : integer |];
]
must raise illegal-trace-mode exception;

Test "nested observe[whenever]" in observation test suite is
[
	x : integer;
	Observe [Whenever [x] changes, do [unused : integer |];];
]
must raise illegal-trace-mode exception;

Test "implicit observe (assignment)" in observation test suite is
[
	ref ::= 1 to 20;
	t : tuple := <>;
	x : integer := 1;
	Whenever [x] changes, do [v : integer | t ++= <v>;];
	For each i from 1 to |ref| do [x := i;];
	Require: t = ref;
];

Test "implicit observe (_↑?=_)" in observation test suite is
[
	ref ::= 1 to 20;
	t : tuple := <>;
	x : integer := 1;
	Whenever [x] changes, do [v : integer | t ++= <v>;];
	For each i from 1 to |ref| do [x ?= i;];
	Require: t = ref;
];

Test "implicit observe (Clear_↑)" in observation test suite is
[
	ref ::= map each i in 1 to 20 through [i is odd];
	t : tuple := <>;
	x : integer := 1;
	Whenever [x is assigned] changes, do [v : boolean | t ++= <v>;];
	For each i from 1 to |ref| do [If i is odd then [x ?= i;] else [Clear x;];];
	Require: t = ref;
];

