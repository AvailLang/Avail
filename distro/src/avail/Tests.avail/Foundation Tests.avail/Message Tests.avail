/*
 * Message Tests.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Message Tests"
Versions
	"Avail-1.6.1"
Uses
	"Common" =
	(
		"_[_.._]" → "from_②to_③of_①",
		…
	)
Names
	"message test suite"
Body

"message test suite" is a new atom;
New test suite message test suite extends foundation test suite;

Private method "moo_②count_①" is
[
	count : integer,
	moo : string
|
	"Cow says " ++ moo ++ ", " ++ “count” ++ " times\n"
];

Test "top-level permute two arguments" in message test suite is
[
	Require:
		moo "hello" count 5
		= "Cow says hello, 5 times\n";
];

Test "top-level tuple subrange rename" in message test suite is
[
	Require:
		(from 2 to 5 of "catdog")
		= "atdo";
];

Private method "five_⑤,one_①,four_④,two_②,three_③" is
[
	one : 1's type,
	two : 2's type,
	three : 3's type,
	four : 4's type,
	five : 5's type
|
	<one, two, three, four, five>
];

Test "top-level five-way permute" in message test suite is
[
	Require:
		(five 5, one 1, four 4, two 2, three 3)
		= <1,2,3,4,5>;
];

Private method "Triples«_②:_③:_①‡,»" is
[
	triples : <10's type, 20's type, 30's type…|3>+
|
	triples
];

Test "second-level triples" in message test suite is
[
	Require:
		(Triples 20:30:10, 20:30:10)
		= <<10, 20, 30>, <10, 20, 30>>;
];

Private method "_call_" is [ a : number,  b : number  | a × b ];
Private method "_call_" is [ a : number,  b : integer | a + b ];
Private method "_call_" is [ a : integer, b : number  | a - b ];

Test "ambiguous super call" in message test suite is
[
	Require: (3::number) call (4::number) = 12;
	Require: (3::number) call (4::integer) = 7;
	Require: (3::integer) call (4::number) = -1;
	Require:
		[ (1::integer) call (2::integer) ]
			raises ambiguous-method-definition exception;
];

Private method  "_call" is [ a : any | "hello" ] : any;
Private method  "_call" is [ a : number | -a ] : number;
Private method  "_call" is [ a : natural number | a ] : natural number;

Test "typed super call" in message test suite is
[
	r1 : natural number := (4::natural number) call;
	r2 : number := (4::number) call;
	r3 : any := (4::any) call;

	Require: r1 = 4;
	Require: r2 = -4;
	Require: r3 = "hello";
];

Test "suitable stack trace for ambiguous lookup" in message test suite is
[
	callerFunction ::= [
		Ignore: (1::integer) call (2::integer);
		Raise a failed-requirement exception
			with error message ::= "Expected ambiguous lookup"
	];
	Guard callerFunction
	intercept
	[
		e : exception
	|
		stackDump ::= cast e into
		[
			e2 : {stack dump key → continuation} → object type
		|
			e2[stack dump key]
		];
		Require: ↓stackDump's caller's function = callerFunction;

		stackEntryStrings ::= cast e's stack summary into [s : string+ | s];
		Require: "«failed method lookup»" ⊆ stackEntryStrings's last;
	];
];
