/*
 * Abstract Iterators Tests.avail
 * Copyright © 1993-2020, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Abstract Iterators Tests"
Versions
	"1.4.0"
Uses
	"Common"
Names
	"iterators test suite"
Body

Public "iterators test suite" is a new field atom;
New test suite iterators test suite extends data abstractions test suite;

Test "for each of do" in iterators test suite is
[
	a ::= a reader over <1,2,3,4>;
	b : tuple := <>;
	For each of a do [n : natural number | b ++= <n>;];
	Require: b = <1,2,3,4>;
];

Test "macro for each of do" in iterators test suite is
[
	a ::= a reader over <1,2,3,4,5>;
	b : natural number* := <>;
	For each element of a do
	[
		If element is even then [b := b ++ <element>;];
	];
	Require: b = <2,4>;
];

Test "filter by" in iterators test suite is
[
	a ::= a reader over <1,2,3,4>;

	b ::= filter a by [n : natural number | n mod 2 = 0];
	bt : natural number* := <>;
	For each element of b do
	[
		If element is even then [bt := bt ++ <element>;];
	];

	c ::= filter a by [n : natural number | n > 2000];
	ct : natural number* := <>;
	For each element of c do
	[
		If element is even then [ct := ct ++ <element>;];
	];

	Require: bt = <2,4>;
	Require: ct = <>;
];

Test "select each (macro)" in iterators test suite is
[
	a ::= a reader over <1,2,3,4>;
	b ::= take at most ∞ from select each n from a where [n mod 2 = 0];
	c ::= take at most ∞ from select each n from a where [n > 2000];

	Require: b = <2,4>;
	Require: c = <>;
];

Test "reject each (macro)" in iterators test suite is
[
	a ::= a reader over <3,2,3,6>;
	b ::= take at most ∞ from reject each n from a where [n mod 2 = 0];

	d ::= a reader over <3,2,3,6>;
	c ::= take at most ∞ from  reject each n from d where [n > 2000];

	Require: b = <3,3>;
	Require: c = <3,2,3,6>;
];

Test "drain reader" in iterators test suite is
[
	Require: drain a counting reader from 5 to 15 = 5 to 15;
	Require: drain an exhausted reader  = <>;
	Require: drain a reader over "dogfood" = "dogfood";
];
