/*
 * Generators Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Generators Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Iterators Tests",
	"Common"
Names
	"generator test suite"
Body

"generator test suite" is a new atom;
New test suite generator test suite extends iterators test suite;

Test "generator basics" in generator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= generator for
		[
			yield : [[1..10]]→⊤
		|
			For each i from 1 to 10 do [yield(i);];
		];
	For each element of iter do
	[
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "generator raises exception" in generator test suite is
[
	ref ::= map each i in 10 to 1 by -1 through [10 ÷ i];
	index : natural number := 1;
	iter ::= generator for
		[
			yield : [[0..10]]→⊤
		|
			For each i from 10 to 0 by -1 do [yield(10 ÷ i);];
		];
	For each element of iter do
	[
		Require: element = ref[(index++)];
	];
]
must raise cannot-divide-by-zero exception;

Test "generator with multiple yields" in generator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= generator for
		[
			yield : [[1..10]]→⊤
		|
			For each i from 1 to 5 do [yield(i);];
			For each i from 6 to 10 do [yield(i);];
		];
	For each element of iter do
	[
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "generator with no yields" in generator test suite is
[
	iter ::= generator for
		[
			yield : [[1..10]]→⊤
		|
			For each i from 1 to 10 do [/* Do nothing. */];
		];
	Require: iter is exhausted;
];
