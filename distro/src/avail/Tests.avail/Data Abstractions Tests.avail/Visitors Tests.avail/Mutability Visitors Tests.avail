/*
 * Mutability Visitors Tests.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Mutability Visitors Tests"
Versions
	"1.2.0 DEV 2019-07-09"
Uses
	"Abstract Visitors Tests",
	"Common"
Names
	"mutability visitors test suite"
Body

Public "mutability visitors test suite" is a new field atom;
New test suite mutability visitors test suite extends visitors test suite;

Test "is mutable (atom)" in mutability visitors test suite is
[
	Require: ¬(true is mutable);
	Require: ¬(false is mutable);
	Require: mutability visitors test suite is mutable;
	Require: data abstractions test suite is mutable;
	Require: $"mutability" is mutable;
	Require: new atom named "new atom" is mutable;
];

Test "is mutable (character)" in mutability visitors test suite is
[
	For each c in ¢"\(00)" to ¢"\(FF)" do
	[
		Require: ¬c is mutable (format "“①” is mutable" with c);
	];
];

Test "is mutable (continuation)" in mutability visitors test suite is
[
	$body : ⊤;
	Require: body is mutable;
	Require: here is mutable;
];

Test "is mutable (definition)" in mutability visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"`$…$", $"_is mutable">;
	For each a of atoms do
	[
		m ::= method for a;
		defs ::= m's definitions;
		For each def of defs do
		[
			Require: ¬def is mutable;
		];
	];
];

Test "is mutable (fiber)" in mutability visitors test suite is
[
	results ::= map each x of 1 to 10 in parallel through
		[current fiber is mutable];
	Require: results = 10 of true;
];

Test "is mutable (function)" in mutability visitors test suite is
[
	x : integer := 10;
	Require: [↑x] is mutable;
	Require: ¬[4] is mutable;
];

global : string;

Test "is mutable (function implementation)" in mutability visitors test suite is
[
	x : integer := 10;
	Require: ¬[↑x]'s implementation is mutable;
	Require: ¬[4]'s implementation is mutable;
	Require: [global]'s implementation is mutable;
];

Test "is mutable (map)" in mutability visitors test suite is
[
	m ::= map each c, i of ¢"\(00)" to ¢"\(FF)" through [<c, i>]→map;
	o ::= a counting stream from 1 to 10→map;
	Require: ¬m is mutable;
	Require: o is mutable;
];

Test "is mutable (method)" in mutability visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"`$…$", $"_is mutable">;
	For each a of atoms do
	[
		m ::= method for a;
		Require: m is mutable;
	];
];

Test "is mutable (module)" in mutability visitors test suite is
[
	Require: enclosing module is mutable;
];

Test "is mutable (number)" in mutability visitors test suite is
[
	For each x from -1 to 100 do
	[
		Require: ¬x is mutable;
		Require: ¬x→double is mutable;
		Require: ¬x→float is mutable;
	];
	Require: ¬ -∞ is mutable;
	Require: ¬ ∞ is mutable;
	Require: ¬ -0.0 is mutable;
	Require: ¬ -0.0f is mutable;
	Require: ¬ 0.0 ÷ 0.0 is mutable;
	Require: ¬ 0.0f ÷ 0.0f is mutable;
];

Test "is mutable (object)" in mutability visitors test suite is
[
	v ::= a counting stream from 1 to 10;
	i ::= a counting reader from 1 to 10;
	p ::= a pRNG;
	Require: ¬v is mutable;
	Require: i is mutable;
	Require: p is mutable;
];

Test "is mutable (phrase)" in mutability visitors test suite is
[
	$body : ⊤;
	var : string;
	Require: ¬body's function→block phrase is mutable;
	Require: ¬arg «`"x"` : integer» is mutable;
	Require: ¬«`"x"` ::= ‘4’» is mutable;
	Require: ¬«`"x"` : whole number := ‘4’» is mutable;
	Require: ¬«<‘1’, ‘2’, ‘3’>» is mutable;
	Require: ¬«↓arg «`"x"` : integer»» is mutable;
	Require: ¬««↓«`"x"` : whole number»» := ‘0’» is mutable;
	Require: ¬«↑«↓«`"x"` : whole number»»» is mutable;
	Require: ‘↑var’ is mutable;
];

Test "is mutable (set)" in mutability visitors test suite is
[
	var : string;
	Require: ¬1 to 100→set is mutable;
	Require: ¬¢"a" to ¢ "z"→set is mutable;
	Require: ¬{
			"Nerva",
			"Trajan",
			"Hadrian",
			"Antoninus Pius",
			"Marcus Aurelius"
		} is mutable;
	Require: {↑var} is mutable;
	Require: {$"fish"} is mutable;
];

Test "is mutable (tuple)" in mutability visitors test suite is
[
	var : string;
	Require: ¬1 to 100 is mutable;
	Require: ¬¢"a" to ¢ "z" is mutable;
	Require: ¬<
		"Nerva",
		"Trajan",
		"Hadrian",
		"Antoninus Pius",
		"Marcus Aurelius"
	> is mutable;
	Require: <↑var> is mutable;
	Require: <$"fish"> is mutable;
];

Test "is mutable (token)" in mutability visitors test suite is
[
	var : string;
	Require: ¬this token: me is mutable;
	Require: ¬`50` is mutable;
	Require: ¬`"fifty"` is mutable;
	Require: `↑var` is mutable;
];

Test "is mutable (type)" in mutability visitors test suite is
[
	types ::=
		{
			⊤,
			any,
			nontype,
			type,
			atom,
			character,
			continuation,
			definition,
			fiber,
			function,
			function implementation,
			map,
			module,
			number,
			object,
			phrase,
			pojo,
			set,
			token,
			tuple,
			variable
		};
	For each t of types do
	[
		Require: ¬t is mutable;
	];
	Require: ¬1's type is mutable;
	Require: ¬{1, 2, 3}ᵀ is mutable;
	Require: current fiber's type is mutable;
];

Test "is mutable (variable)" in mutability visitors test suite is
[
	s : string;
	i : integer;
	Require: ↑s is mutable;
	Require: ↑i is mutable;
];
