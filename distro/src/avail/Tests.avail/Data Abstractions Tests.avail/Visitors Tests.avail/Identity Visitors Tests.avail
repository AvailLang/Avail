/*
 * Identity Visitors Tests.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Identity Visitors Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Visitors Tests",
	"Common"
Names
	"identity visitors test suite"
Body

Public "identity visitors test suite" is a new field atom;
New test suite identity visitors test suite extends visitors test suite;

Test "has identity (atom)" in identity visitors test suite is
[
	Require: true has identity;
	Require: false has identity;
	Require: identity visitors test suite has identity;
	Require: data abstractions test suite has identity;
	Require: $"identity" has identity;
	Require: new atom named "new atom" has identity;
];

Test "has identity (character)" in identity visitors test suite is
[
	For each c in ¢"\(00)" to ¢"\(FF)" do
	[
		Require: ¬c has identity (format "“①” has identity" with c);
	];
];

Test "has identity (continuation)" in identity visitors test suite is
[
	$body : ⊤;
	Require: ¬body has identity;
	Require: ¬here has identity;
];

Test "has identity (definition)" in identity visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"$…#", $"_has identity">;
	For each a of atoms do
	[
		m ::= method for a;
		defs ::= m's definitions;
		For each def of defs do
		[
			Require: def has identity;
		];
	];
];

Test "has identity (fiber)" in identity visitors test suite is
[
	results ::= map each x of 1 to 10 in parallel through
		[current fiber has identity];
	Require: results = 10 of true;
];

Test "has identity (function)" in identity visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"$…#", $"_has identity">;
	For each a of atoms do
	[
		m ::= method for a;
		defs ::= m's definitions;
		For each def of defs do
		[
			Cast def into
			[
				mdef : method definition
			|
				Require: mdef's function has identity;
			]
			else
			[
				/* Do nothing. */
			];
		];
	];
];

Test "has identity (function implementation)" in identity visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"$…#", $"_has identity">;
	For each a of atoms do
	[
		m ::= method for a;
		defs ::= m's definitions;
		For each def of defs do
		[
			Cast def into
			[
				mdef : method definition
			|
				Require: mdef's function's implementation has identity;
			]
			else
			[
				/* Do nothing. */
			];
		];
	];
];

Test "has identity (map)" in identity visitors test suite is
[
	m ::= map each c, i of ¢"\(00)" to ¢"\(FF)" through [<c, i>]→map;
	o ::= a counting stream from 1 to 10→map;
	Require: ¬m has identity;
	Require: o has identity;
];

Test "has identity (method)" in identity visitors test suite is
[
	atoms ::= <$"_'s⁇definitions", $"method for_", $"$…#", $"_has identity">;
	For each a of atoms do
	[
		m ::= method for a;
		Require: m has identity;
	];
];

Test "has identity (module)" in identity visitors test suite is
[
	Require: enclosing module has identity;
];

Test "has identity (number)" in identity visitors test suite is
[
	For each x from -1 to 100 do
	[
		Require: ¬x has identity;
		Require: ¬x→double has identity;
		Require: ¬x→float has identity;
	];
	Require: ¬ -∞ has identity;
	Require: ¬ ∞ has identity;
	Require: ¬ -0.0 has identity;
	Require: ¬ -0.0f has identity;
	Require: ¬ 0.0 ÷ 0.0 has identity;
	Require: ¬ 0.0f ÷ 0.0f has identity;
];

Test "has identity (object)" in identity visitors test suite is
[
	v ::= a counting stream from 1 to 10;
	i ::= a counting reader from 1 to 10;
	p ::= a pRNG;
	Require: ¬v has identity;
	Require: i has identity;
	Require: p has identity;
];

Test "has identity (phrase)" in identity visitors test suite is
[
	$body : ⊤;
	Require: body's function→block phrase has identity;
	Require: arg «`"x"` : integer» has identity;
	Require: «`"x"` ::= ‘`4`’» has identity;
	Require: «`"x"` : whole number := ‘`4`’» has identity;
	Require: «<‘`1`’, ‘`2`’, ‘`3`’>» has identity;
	Require: «↓arg «`"x"` : integer»» has identity;
	Require: ««↓«`"x"` : whole number»» := ‘`0`’» has identity;
	Require: «↑«↓«`"x"` : whole number»»» has identity;
];

Test "has identity (set)" in identity visitors test suite is
[
	Require: ¬1 to 100→set has identity;
	Require: ¬¢"a" to ¢ "z"→set has identity;
	Require: ¬{
			"Nerva",
			"Trajan",
			"Hadrian",
			"Antoninus Pius",
			"Marcus Aurelius"
		} has identity;
];

Test "has identity (tuple)" in identity visitors test suite is
[
	Require: ¬1 to 100 has identity;
	Require: ¬¢"a" to ¢ "z" has identity;
	Require: ¬<
		"Nerva",
		"Trajan",
		"Hadrian",
		"Antoninus Pius",
		"Marcus Aurelius"
	> has identity;
];

Test "has identity (token)" in identity visitors test suite is
[
	Require: this token: me has identity;
	Require: `50` has identity;
	Require: `"fifty"` has identity;
];

Test "has identity (type)" in identity visitors test suite is
[
	types ::=
		{
			⊤,
			any,
			nontype,
			type,
			atom,
			character,
			continuation,
			definition,
			fiber,
			function,
			function implementation,
			map,
			module,
			number,
			object,
			phrase,
			pojo,
			set,
			token,
			tuple,
			variable
		};
	For each t of types do
	[
		Require: ¬t has identity;
	];
	Require: ¬1's type has identity;
	Require: ¬{1, 2, 3}ᵀ has identity;
	Require: current fiber's type has identity;
];

Test "has identity (variable)" in identity visitors test suite is
[
	s : string;
	i : integer;
	Require: ↑s has identity;
	Require: ↑i has identity;
];
