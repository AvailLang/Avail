/*
 * Types.avail
 * Copyright © 1993-2020, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Types"
Versions
	"1.4.0"
Uses
	"Avail"
Names
	/* Hypertext. */
	"hypertext element",
		"hypertext tag",
		"hypertext attributes",
		"hypertext subelements",
		"hypertext void flag",
	"_'s⁇tag",
	"_'s⁇attributes",
	"_'s⁇subelements",
	"_is void",

	/* Hypertext rendering. */
	"_rendered",                  /* synonym for "“_”" */
	"“_”(cdata)",
	"“_”(«fully»?escaped cdata)",

	/* Character data (CDATA) escaping. */
	"_«fully»?escaped"
Body

Public "hypertext tag" is a new field atom;
Public "hypertext attributes" is a new field atom;
Public "hypertext subelements" is a new field atom;
Public "hypertext void flag" is a new field atom;

/**
 * A {@type "hypertext element"} represents an HTML element.
 *
 * @type "hypertext element"
 * @category "Hypertext"
 * @supertype "object"
 * @field "hypertext tag" "nonempty string"
 * @field "hypertext attributes" "{nonempty string→any|}"
 * @field "hypertext subelements" "any*"
 * @field "hypertext void flag" "boolean"
 */
Public class "hypertext element" extends object
	with field
		public hypertext tag : nonempty string ("_'s⁇tag"),
		public hypertext attributes : {nonempty string→any|} ("_'s⁇attributes"),
		public hypertext subelements : any* ("_'s⁇subelements"),
		public hypertext void flag : boolean ("_is void");

/**
 * Answer a hypertext escaped variant of the argument.
 *
 * @method "_«fully»?escaped"
 * @category "Hypertext"
 * @param "fullyEscaped" "boolean"
 *        If {@method "true"}, then entity encode all non-ASCII characters;
 *        otherwise, only escape ampersands, angle brackets, and control
 *        characters.
 * @param "s" "string"
 * @returns "string"
 */
Public stable method "_«fully»?escaped" is
[
	s : string,
	fullyEscaped : boolean
|
	t : string := replace all occurrences of "&" in s with "&amp;";
	t := replace all occurrences of "<" in t with "&lt;";
	t := replace all occurrences of ">" in t with "&gt;";
	[
		t0 : string := "";
		For each c of t do
		[
			If c is a control character ∨ (fullyEscaped ∧ ¬c is ASCII) then
			[
				hex ::= “c's code point → 4 bytes” (hex);
				trimmed ::= drop x from hex while [x = ¢0];
				t0 ++= "&#x" ++ trimmed ++ ";";
			]
			else
			[
				t0 ++= <c>;
			];
		];
		t := t0;
	]();
	t
];

/**
 * Recursively render the specified {@type "hypertext element"} as hypertext.
 *
 * @method "_rendered"
 * @category "Hypertext"
 * @param "elem" "hypertext element"
 * @returns "nonempty string"
 */
Public forward method "_rendered" is [hypertext element]→nonempty string;

Public method "_rendered" is
[
	elem : hypertext element
|
	s : nonempty string := "<" ++ elem's tag;
	For each attr → value of elem's attributes do
	[
		s ++=
			" "
			++ attr
			++ "="
			++ “cast value into [v : string | v] else [“value”]”;
	];
	s ++= ">";
	For each sub of elem's subelements do
	[
		s ++=
			cast sub into
			[e : hypertext element | e rendered],
			[t : string | t escaped];
	];
	s ++ "</" ++ elem's tag ++ ">"
] : nonempty string;

Public method "_rendered" is
[
	elem : (extend hypertext element with hypertext void flag : true's type)
|
	s : nonempty string := "<" ++ elem's tag;
	For each attr → value of elem's attributes do
	[
		s ++=
			" "
			++ attr
			++ "="
			++ “cast value into [v : string | v] else [“value”]”;
	];
	s ++ "/>"
] : nonempty string;

Method "“_”" is [elem : hypertext element | elem rendered];

"escape cdata" is a new field atom;
"fully escape cdata" is a new field atom;
"cdata accumulator" is a new field atom;

/**
 * A {@type "hypertext cdata visitor"} accumulates all character data (CDATA)
 * recursively from a {@type "hypertext element"}.
 *
 * @type "hypertext cdata visitor"
 * @category "Hypertext"
 * @supertype "visitor"
 * @field "escape cdata" "boolean"
 *        If {@method "true"}, then escape CDATA prior to accumulation;
 *        otherwise, accumulate the original unescaped CDATA.
 * @field "fully escape cdata" "boolean"
 *        If {@method "true"}, then fully escape CDATA prior to accumulation;
 *        if {@field "escape cdata"} is {@method "true"}, then escape CDATA
 *        prior to accumulation; otherwise, accumulate the original unescaped
 *        CDATA.
 * @field "cdata accumulator" "string"
 *        The accumulator for CDATA.
 */
Class "hypertext cdata visitor" extends visitor
	with field
		escape cdata : boolean ("_should escape cdata"),
		fully escape cdata : boolean ("_should fully escape cdata")
	with mutable field
		referable cdata accumulator : string (
			accessor "_'s⁇cdata",
			mutator "_'s⁇cdata:=_",
			referrer "`↑_'s⁇cdata");

Method "After visiting_upon_" is
[
	v : hypertext cdata visitor,
	elem : hypertext element
|
	/* No adjustment of the accumulator is necessary. */
];

Method "After visiting_upon_" is
[
	v : hypertext cdata visitor,
	cdata : string
|
	↑v's cdata ++= cdata;
];

Method "After visiting_upon_" is
[
	v : (extend hypertext cdata visitor with escape cdata : true's type),
	cdata : string
|
	↑v's cdata ++= cdata escaped;
];

Method "After visiting_upon_" is
[
	v : (extend hypertext cdata visitor with
			escape cdata : true's type,
			fully escape cdata : true's type),
	cdata : string
|
	↑v's cdata ++= cdata fully escaped;
];

/**
 * Answer the subelements of the specified {@type "hypertext element"}.
 *
 * @method "_'s⁇subelements for cdata visitation"
 * @category "Hypertext"
 * @param "elem" "any"
 *        A {@type "hypertext element"} or {@type "string" character data}.
 * @returns "tuple"
 */
Private abstract method "_'s⁇subelements for cdata visitation" is [any]→tuple;

Private method "_'s⁇subelements for cdata visitation" is
[
	elem : hypertext element
|
	elem's subelements
];

Private method "_'s⁇subelements for cdata visitation" is
[
	cdata : string
|
	<>
];

/**
 * Recursively render the specified {@type "hypertext element"} as character
 * data (CDATA) only, stripping away hypertext tags and structure.
 *
 * @method "“_”(cdata)"
 * @category "Hypertext"
 * @param "elem" "hypertext element"
 * @returns "string"
 */
Public method "“_”(cdata)" is
[
	elem : hypertext element
|
	v ::= a hypertext cdata visitor with
		escape cdata ::= false,
		fully escape cdata ::= false,
		cdata accumulator := "";
	Visit v
		upon elem
		deconstructed by [sub : any | sub's subelements for cdata visitation];
	v's cdata
];

/**
 * Recursively render the specified {@type "hypertext element"} as escaped
 * character data (CDATA) only, stripping away hypertext tags and structure.
 *
 * @method "“_”(«fully»?escaped cdata)"
 * @category "Hypertext"
 * @param "elem" "hypertext element"
 * @param "fullyEscaped" "boolean"
 *        If {@method "true"}, then entity encode all non-ASCII characters;
 *        otherwise, only escape ampersands, angle brackets, and control
 *        characters.
 * @returns "string"
 */
Public method "“_”(«fully»?escaped cdata)" is
[
	elem : hypertext element,
	fullyEscaped : boolean
|
	v ::= a hypertext cdata visitor with
		escape cdata ::= true,
		fully escape cdata ::= fullyEscaped,
		cdata accumulator := "";
	Visit v
		upon elem
		deconstructed by [sub : any | sub's subelements for cdata visitation];
	v's cdata
];
