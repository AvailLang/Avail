/*
 * Late Math.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Late Math"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Math"
Uses
	"Bootstrap",
	"Casts",
	"Characters",
	"Control Structures" =
	(
		-"Cast_into_",
		-"Cast|cast_into_else_",
		…
	),
	"Definers",
	"Early Assertions",
	"Early Conditionals",
	"Early Functions",
	"Early Logic",
	"Early Sets",
	"Early Tuples",
	"Enumeration Support",
	"Exceptions",
	"Literals",
	"Objects",
	"Sets",
	"Strings",
	"Tuples",
	"Types",
	"Variables"
Names
	"a double from integer=_,fraction=_,exponent=_",
	"_→_bytes",
	"an integer from_",
	"an unsigned integer from_",
	"low_bits of_",
	"_(decimal)",

	/* Compound assignment. */
	"_↑+=_", "_+=_",
	"_↑-=_", "_-=_",
	"_↑×=_", "_×=_",
	"_↑÷=_", "_÷=_"
Body

cannotRaiseZeroToZero ::= "either base or exponent not to be 0";
cannotRaiseInfinityToZero ::= "base not to be ±∞ or exponent not to be 0";
cannotRaiseNegativeToInfinity ::=
	"base not to be negative or exponent not to be ±∞";

/* The definitions of `_^_` are recursive, so forward declare them here. */
Abstract method "_^_" is [extended integer, [0..∞]]→extended integer;
Forward method "_^_" is [extended integer, whole number]→extended integer;
Forward method "_^_" is [extended integer, [∞..∞]]→{0, ∞}ᵀ;
Forward method "_^_" is [float, whole number]→float;
Forward method "_^_" is [double, whole number]→double;

/**
 * Compute and answer the result of exponentiating {@param "base"} by {@param
 * "exponent"}.
 *
 * @method "_^_"
 * @param "base" "number"
 * @param "exponent" "number"
 * @returns "number"
 *          The result of raising {@param "base"} to the {@param "exponent"}
 *          power.
 * @category "Mathematics" "Numbers"
 */
Method "_^_" is
[
	base : number,
	exponent : number
|
	/* Uses the identity: a^b = exp(ln(a^b)) = exp(b*ln(a)). */
	Euler's number ^ (exponent × ln (base→double))
] : number;

/**
 * Construct and answer a function that affects type promotions for the various
 * numeric types. This function is intended for use by semantic restrictions
 * of exponentiation.
 *
 * @method "exponentiation type promotion function for_"
 * @param "operator" "[number, number]→number"
 *        A function that performs exponentiation and answers the result.
 * @returns "[number's type, number's type]→number's type"
 *          A function that handles type promotions for exponentiation.
 */
Private method "exponentiation type promotion function for_" is
[
	operator : [number, number]→number
|
	[
		a : number's type,
		b : number's type
	|
		if |a| = 1 ∧ |b| = 1 then
		[
			/* The exact values are known statically. Calculate it exactly. */
			(invoke operator with <a's instance, b's instance>)'s type
		]
		else
		[
			if a ⊆ double ∨ b ⊆ double then
			[
				/* At least one is known to be double, which forces the result
				 * to be a double.
				 */
				double
			]
			else
			[
				if a = number ∨ b = number then
				[
					/* Neither is known to be a double, and at least one is as
					 * weak as a number.  The weak one might be a double at run
					 * time, so we can't limit the output type any more.
					 */
					number
				]
				else
				[
					/* Neither one is as weak as number. */
					if a ⊆ float ∨ b ⊆ float then
					[
						/* Either {float,float} or {float,int}, which each
						 * produce a float.
						 */
						float
					]
					else
					[
						if a ⊆ extended integer ∧ b ⊆ [0..∞]
						then [extended integer]
						else [number]
					]
				]
			]
		]
	]
];

/**
 * Establish type promotion rules for exponentiation. Also handle instance
 * types.
 *
 * @method "_^_"
 * @restricts "number"
 * @restricts "number"
 */
Semantic restriction "_^_" is exponentiation type promotion function for
[
	a : number,
	b : number
|
	If b = 0 then
	[
		If a = 0 then
		[
			Reject parse, expected: cannotRaiseZeroToZero
		];
		If a ∈ {-∞, ∞} then
		[
			Reject parse, expected: cannotRaiseInfinityToZero
		];
	];
	If a ∈ extended integer then
	[
		If a < 0 ∧ b ∈ {-∞, ∞} then
		[
			Reject parse, expected: cannotRaiseNegativeToInfinity
		];
	];
	a ^ b
];

Method "_^_" is
[
	base : extended integer,
	exponent : [∞..∞]
|
	/* Forbid [-∞..-1]^∞ and 1^∞.  For all other n, n^∞=∞. */
	If base < 0 ∨ base = 1 then [Raise an arithmetic exception];
	if base = 0 then [0] else [∞]
] : {0, ∞}ᵀ;

Forward method "_recursive^_"
	is [extended integer, whole number]→extended integer;

Method "_^_" is
[
	base : extended integer,
	exponent : whole number
|
	/* Forbid -∞^0, and ∞^0.  Use 0^0=1, since this identity is *practical*,
	 * especially when the exponent is expected to be an integer, such as in
	 * power series.
	 *
	 * Use the identities: b^(2x) = (b^2)^x; and: b^(2x+1) = (b^2)^x*b.
	 */
	if exponent = 0 then
	[
		If base ∈ {∞, -∞} then
		[
			Raise an arithmetic exception
		];
		1
	]
	else
	[
		intermediate ::= (base × base) recursive^ (exponent ÷ 2);
		if exponent is odd then [ intermediate × base ] else [ intermediate ]
	]
] : extended integer;

/**
 * Compute and answer the result of exponentiating {@param "base"} by {@param
 * "exponent"}. Do not complain about indeterminate values, under the assumption
 * that those are dealt with by the actual {@param "_^_"} method.
 *
 * @method "_recursive^_"
 * @param "base" "extended integer"
 * @param "exponent" "whole number"
 * @returns "extended integer"
 *          The result of raising {@param "base"} to the {@param "exponent"}
 *          power.
 * @category "Mathematics" "Numbers"
 */
Private method "_recursive^_" is
[
	base : extended integer,
	exponent : whole number
|
	if exponent = 0 then
	[
		1
	]
	else
	[
		intermediate ::= (base × base) recursive^ (exponent ÷ 2);
		if exponent is odd then [ intermediate × base ] else [ intermediate ]
	]
] : extended integer;

Method "_^_" is
[
	base : float,
	exponent : whole number
|
	/*  Uses the identities: b^(2x) = (b^2)^x; and: b^(2x+1) = (b^2)^x*b. */
	if exponent = 0 then [1.0f]
	else
	[
		intermediate ::= (base × base) ^ (exponent ÷ 2);
		if exponent is odd then [ intermediate × base ] else [ intermediate ]
	]
] : float;

Method "_^_" is
[
	base : double,
	exponent : whole number
|
	/*  Uses the identities: b^(2x) = (b^2)^x; and: b^(2x+1) = (b^2)^x*b. */
	if exponent = 0 then
	[
		1.0
	]
	else
	[
		intermediate ::= (base × base) ^ (exponent ÷ 2);
		if exponent is odd then [ intermediate × base ] else [ intermediate ]
	]
] : double;

/**
 * Support exponentiation of ranges of integral arguments.  This could be useful
 * for semantic restrictions in clients that compose things with exponentiation.
 *
 * @method "_^_"
 * @param "base" "extended integer's type"
 * @param "power" "whole number's type"
 * @returns "extended integer's type"
 * @category "Mathematics" "Numbers"
 */
Method "_^_" is
[
	base : extended integer's type,
	power : whole number's type
|
	interestingBases ::= {
		⎣base⎦,
		⎣base⎦ + 1,
		-2,
		-1,
		0,
		1,
		2,
		⎡base⎤ - 1,
		⎡base⎤
	} → tuple;
	interestingPowers ::= {
		⎣power⎦,
		⎣power⎦ + 1,
		2,
		3,
		⎡power⎤ - 1 max 0,
		⎡power⎤
	} → tuple;
	augmentedBase ::= [⎣base⎦ .. ⎡base⎤];
	augmentedPower ::= [⎣power⎦ .. ⎡power⎤];
	range : extended integer's type := ⊥;
	openLimits : extended integer's type := ⊥;
	For each interestingBase of interestingBases do
	[
		If interestingBase ∈ augmentedBase then
		[
			baseInclusive ::= interestingBase ∈ base;
			For each interestingPower of interestingPowers do
			[
				If interestingPower ∈ augmentedPower then
				[
					Guard
					[
						value : extended integer :=
							interestingBase ^ interestingPower;
						If baseInclusive ∧ interestingPower ∈ power then
						[
							range := range ∪ [value..value];
						]
						else
						[
							openLimits := openLimits ∪ [value..value];
						];
					]
					intercept
					[
						suppressed : exception
					|
						/* This particular combination would fail at runtime
						 * anyhow, so it doesn't contribute to the type.
						 */
					];
				];
			];
		];
	];
	if range = ⊥ then [(⎣openLimits⎦..⎡openLimits⎤)]
	else if -∞ ∈ openLimits ∧ ∞ ∈ openLimits then [range ∪ integer]
	else if -∞ ∈ openLimits then [range ∪ (-∞..⎡range⎤)]
	else if ∞ ∈ openLimits then [range ∪ (⎣range⎦..∞)]
	else [range]
] : extended integer's type;

/**
 * Restrict integral exponentiation, in particular when the power is a whole
 * number.
 *
 * @method "_^_"
 * @restricts "extended integer's type"
 * @restricts "whole number's type"
 */
Semantic restriction "_^_" is
[
	base : extended integer's type,
	power : whole number's type
|
	base ^ power
];

/**
 * Calculate the logarithm of the specified number to the specified base, using
 * {@type "double"}s for intermediate values.
 *
 * @method "log_of_"
 * @param "b" "integer"
 *        The logarithm base to use.
 * @param "n" "integer"
 *        The number whose logarithm should be computed.
 * @returns "double"
 *          The logarithm of {@param "n"} to base {@param "b"}.
 * @category "Mathematics" "Numbers"
 */
Stable method "log_of_" is
[
	b : natural number,
	n : extended integer
|
	log b→double of n→double
] : double;

Stable method "log_of_" is
[
	b : natural number,
	n : ∞'s type
|
	∞→double
] : double;

Stable method "log_of_" is
[
	b : natural number,
	n : nonpositive integer
|
	Raise a cannot-compute-logarithm-of-nonpositive-number exception
] : ⊥;

/**
 * Increment the variable by {@param "delta"}.
 *
 * @method "_↑+=_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "variable"
 *        A numeric variable.
 * @param "delta" "number"
 *        The amount by which to increment {@param "var"}.
 * @returns "⊤"
 * @raises "cannot-add-unlike-infinities exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 */
Public method "_↑+=_" is
[
	var : read number/write ⊥,
	delta : number
|
	var ?= eject var + delta;
] : ⊤;

Alias "_+=_" to "_↑+=_";

/**
 * Decrement the variable by {@param "delta"}.
 *
 * @method "_↑-=_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "variable"
 *        A numeric variable.
 * @param "delta" "number"
 *        The amount by which to decrement {@param "var"}.
 * @returns "⊤"
 * @raises "cannot-subtract-like-infinities exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 */
Public method "_↑-=_" is
[
	var : read number/write ⊥,
	delta : number
|
	var ?= eject var - delta;
] : ⊤;

Alias "_-=_" to "_↑-=_";

/**
 * Multiply the variable by {@param "multiplier"}.
 *
 * @method "_↑×=_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "variable"
 *        A numeric variable.
 * @param "multiplier" "number"
 *        The amount by which to multiply {@param "var"}.
 * @returns "⊤"
 * @raises "cannot-multiply-zero-and-infinity exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 */
Public method "_↑×=_" is
[
	var : read number/write ⊥,
	multiplier : number
|
	var ?= eject var × multiplier;
] : ⊤;

Alias "_×=_" to "_↑×=_";

/**
 * Divide the variable by {@param "divisor"}.
 *
 * @method "_↑÷=_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "variable"
 *        A numeric variable.
 * @param "divisor" "number"
 *        The amount by which to divide {@param "var"}.
 * @returns "⊤"
 * @raises "cannot-divide-by-zero exception"
 * @raises "cannot-divide-infinities exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 */
Public method "_↑÷=_" is
[
	var : read number/write ⊥,
	divisor : number
|
	var ?= eject var ÷ divisor;
] : ⊤;

Alias "_÷=_" to "_↑÷=_";

Private method "compound arithmetic semantic restriction" is
[
	[
		var : (read number/write ⊥)'s type,
		delta : number's type
	|
		If ¬var's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		⊤
	]
];

Semantic restriction "_↑+=_" is compound arithmetic semantic restriction;
Semantic restriction "_↑-=_" is compound arithmetic semantic restriction;
Semantic restriction "_↑×=_" is compound arithmetic semantic restriction;
Semantic restriction "_↑÷=_" is compound arithmetic semantic restriction;

Grammatical restriction
{
	"_↑+=_", "_+=_",
	"_↑-=_", "_-=_",
	"_↑×=_", "_×=_",
	"_↑÷=_", "_÷=_"
} is <{"`↑_↑"}, ∅>;

/**
 * Return the N low order bits of this number.  All bits beyond the Nth will be
 * zero, so the result is always positive.
 *
 * @method "low_bits of_"
 * @param "bits" "whole number"
 *        The number of low-order bits to extract.
 * @param "anInteger" "integer"
 *        The {@type "integer"} to encode. It must not overflow the specified
 *        number of bits.
 * @returns "whole number"
 * @category "Mathematics" "Numbers" "Bits"
 */
Public stable method "low_bits of_" is
[
	bits : whole number,
	anInteger : integer
|
	anInteger bit∧ ((1 << bits) - 1)
] : whole number;

/**
 * Narrow this operation by analyzing the ranges of values.
 *
 * @method "low_bits of_"
 * @restricts "whole number's type"
 * @restricts "integer's type"
 */
Semantic restriction "low_bits of_" is
[
	bitsType : whole number's type,
	integerType : integer's type
|
	max ::= cast ⎡bitsType⎤
		into [maxBits : whole number | (1 << maxBits) - 1] else [∞];
	if ⎣integerType⎦ < 0 then
	[
		/* It includes negatives, so let's assume pretty much any result is
		 * possible.
		 */
		[0 .. max + 1)
	]
	else if max = ∞ then
	[
		/* Number of output bits may be arbitrarily large. */
		integerType
	]
	else if ⎡integerType⎤ ≤ max then
	[
		/* It falls within the range, so no truncation can happen. */
		integerType
	]
	else
	[
		[0 .. max)
	]
];

/**
 * Render a 2's complement integer as bytes in network byte order (Big Endian).
 *
 * @method "_→_bytes"
 * @param "anInteger" "integer"
 *        The {@type "integer"} to encode. It must not overflow the specified
 *        number of bits, although for signed/unsigned convenience it may range
 *        from -2^(b-1) to 2^b-1.  For example, if 1 byte is requested,
 *        anInteger may be anywhere from -128 to 255.
 * @param "byteCount" "whole number"
 *        The number of bytes to output.
 * @returns "byte*"
 * @category "Mathematics" "Numbers" "Bits"
 */
Public stable method "_→_bytes" is
[
	anInteger : integer,
	byteCount : whole number
|
	bytes : byte* := <>;
	residue : integer := anInteger;
	Repeat
	[
		bytes := <residue bit∧ 255> ++ eject bytes;
		residue := eject residue >> 8;
	] byteCount times;
	Assert: residue ∈ {0, -1} ("anInteger to be constrained by byteCount");
	bytes
] : byte*;

Semantic restriction "_→_bytes" is
[
	anInteger : integer's type,
	byteCount : whole number's type
|
	<<>, byte…|byteCount>
];

/**
 * Compose an {@type "integer"} from the specified {@type "tuple"} of {@type
 * "byte"}s.
 *
 * @method "an integer from_"
 * @param "bytes" "byte+"
 *        A {@type "tuple"} that represents an encoding of a signed 2's
 *        complement integer, in network byte order.
 * @returns "integer"
 * @category "Numbers" "Bits"
 */
Public stable method "an integer from_" is
[
	bytes : byte+
|
	value : integer := -(bytes[1] >> 7);
	For each b of bytes do [value := (eject value << 8) bit∨ b;];
	value
] : integer;

Semantic restriction "an integer from_" is
[
	bytesType : byte+'s type
|
	bits ::= ⎡bytesType⎤ × 8 - 1;
	[-2^bits .. 2^bits)
];

/**
 * Compose an {@type "integer"} from the specified {@type "tuple"} of {@type
 * "byte"}s.
 *
 * @method "an unsigned integer from_"
 * @param "bytes" "byte+"
 *        A {@type "tuple"} that represents an encoding of an unsigned 2's
 *        complement integer, in network byte order.
 * @returns "whole number"
 * @category "Numbers" "Bits"
 */
Public stable method "an unsigned integer from_" is
[
	bytes : byte+
|
	value : whole number := 0;
	For each b of bytes do [value := (eject value << 8) + b;];
	value
] : whole number;

Semantic restriction "an unsigned integer from_" is
[
	bytesType : byte+'s type
|
	bits ::= ⎡bytesType⎤ × 8;
	[0 .. 2^bits)
];

/**
 * Answer a {@type "double"} from the following components.
 *
 * @method "a double from integer=_,fraction=_,exponent=_"
 * @param "integerPart" "Arbaic numeral*"
 * @param "fractionalPart" "Arabic numeral*"
 * @param "exponent" "integer"
 * @returns "double"
 * @category "Numbers" "Integers" "Conversions" "Stringification"
 */
Public stable method "a double from integer=_,fraction=_,exponent=_" is
[
	integerPart : Arabic numeral*,
	fractionalPart : Arabic numeral*,
	exponent : integer
|
	contributionFromInteger ::=
		if integerPart is empty
		then [0.0]
		else [integerPart (base 10) × 10^exponent];
	contributionFromFraction ::=
		if fractionalPart is empty
		then [0.0]
		else
		[
			fractionalPart (base 10) → double
				× 10^(exponent - |fractionalPart|)
		];
	contributionFromInteger + contributionFromFraction
] : double;

/**
 * Convert the specified string, in simple decimal notation, to a {@type
 * "double"}.
 *
 * @method "_(decimal)"
 * @param "digits" "string"
 * @returns "double"
 * @category "Numbers" "Integers" "Conversions" "Stringification"
 */
Public stable method "_(decimal)" is
[
	digits : string
|
	/* Note that the fractional part includes a leading period. */
	integerPart, fractionalPart ::=
		split digits before [c : character | c = ¢.];
	a double from
		integer=integerPart ?→ Arabic numeral*,
		fraction=fractionalPart[2..] ?→ Arabic numeral*,
		exponent=0
] : double;
