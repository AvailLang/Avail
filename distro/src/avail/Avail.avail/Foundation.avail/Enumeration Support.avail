/*
 * Enumeration Support.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Enumeration Support"
Versions
	"1.1.0 DEV 2019-05-21"
Extends
	"Early Enumeration Support"
Uses
	"Bootstrap",
	"Early Assertions",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Literals",
	"Early Logic",
	"Early Math"
Names
	"{_}ᵀ",
	"{«_‡,»}ᵀ"
Body

/**
 * Strengthen enumerations. When the argument has literal force, then it is
 * possible to produce the exact enumeration type.
 *
 * @method "enumeration of_"
 * @restricts "set meta"
 */
Semantic restriction "enumeration of_" is
[
	setType : set meta
|
	if |setType| = ∞ then
	[
		if ⎣||setType||⎦ = ⎡||setType||⎤
			∧ |setType's element type| = ⎣||setType||⎦
			∧ ¬setType's element type ⊆ type
		then
		[
			(enumeration of setType's element type's instances)'s type
		]
		else
		[
			type
		]
	]
	else
	[
		instances ::= setType's instances→tuple;
		union : set := ∅;
		From 1 to |instances| do
		[
			index : natural number
		|
			union := union ∪ cast instances[index] into [t : set | t];
			true
		];
		(enumeration of union)'s type
	]
];

/**
 * Ensure that literal enumerations are able to produce the unique type of their
 * membership set.
 *
 * @method "_'s⁇instances"
 * @restricts "type's type"
 */
Semantic restriction "_'s⁇instances" is
[
	meta : type's type
|
	Assert: |meta| ≠ ∞;
	if |meta| = 0 then [∅'s type]
	else
	[
		/* It looks like |meta| > 1 is possible, but actually it isn't
		 * because we are dealing with metatypes here.
		 */
		Assert: |meta| = 1;
		enum ::= cast meta's instance into [t : any's type | t] else [any];
		bound ::= cast |enum| + 1 into [t : [1..∞] | t];
		{enum|[0..bound)}
	]
];

/**
 * Improve the bounds on metatypes.
 *
 * @method "_'s⁇instance"
 * @restricts "type's type"
 */
Semantic restriction "_'s⁇instance" is
[
	aMeta : type's type
|
	cast aMeta's instance into [t : type | t]
];

/**
 * Construct and answer an enumeration whose instances are the lexically
 * specified values.
 *
 * @method "{«_‡,»}ᵀ"
 * @param "instances" "<nontype…|>"
 *        The instances of the resultant type.
 * @returns "type"
 *          The requested enumeration.
 * @category "Enumerations" "Constructors"
 */
Public method "{«_‡,»}ᵀ" is
[
	instances : <<>, nontype…|whole number>
|
	enumeration of instances→set
] : type;

/**
 * @method "{«_‡,»}ᵀ"
 * @restricts "<<>, nontype…|whole number>'s type"
 */
Semantic restriction "{«_‡,»}ᵀ" is
[
	instances : <<>, nontype…|whole number>'s type
|
	if |instances| = 1 then
	[
		(enumeration of instances's instance→set)'s type
	]
	else
	[
		union : type := ⊥;
		From 1 to ⎣||instances||⎦ do
		[
			index : natural number
		|
			union := union ∪ instances[index];
			true
		];
		union's type
	]
];

/**
 * Answer the precise instance type of the supplied type. This is the most
 * specific possible type that describes the argument.
 *
 * @method "{_}ᵀ"
 * @param "aType" "type"
 *        An arbitrary type.
 * @returns "type"
 *        The precise instance type of the supplied type.
 * @category "Primitives" "Enumerations" "Types" "Constructors"
 */
Public method "{_}ᵀ" is
[
	aType : type
|
	Primitive Type;
] : type;

/**
 * @method "{_}ᵀ"
 * @restricts "type's type"
 */
Semantic restriction "{_}ᵀ" is
[
	meta : type's type
|
	Primitive Type;
] : type;
