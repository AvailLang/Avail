/*
 * Functions.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Functions"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Early Functions"
Uses
	"Bootstrap",
	"Control Structures",
	"Early Assertions",
	"Early Conditionals",
	"Early Definers",
	"Early Logic",
	"Enumeration Support",
	"Literals",
	"Math",
	"Phrases",
	"Tuples",
	"Types",
	"Variables"
Names
	"unsafe sender of_returning_",
	"_(««_»?«`_»?‡,»)",
	"_(_,`…)",
	"_(`…,_)"
Body

Method "“_”" is
[
	t : function meta
|
	s : string := "[";
	params ::= t's parameters' type;
	If params = ⊥ then [s := eject s ++ "…";]
	else
	[
		index : natural number := 1;
		While index ≤ ⎣params⎦
		do
		[
			s := eject s ++ “t[index]”;
			index := eject index + 1;
		]
		alternate with [s := eject s ++ ", ";];
	];
	s := eject s ++ "]→" ++ “t's return type”;
	s
];

invokeAtom ::= atom for "Invoke|invoke_with_";

/**
 * Help to convert an expression like f(a,_,_,d,_) into one like:
 *   invoke [f2 : function, a2 : any, d2 : any |
 *       [b : any, c : any, e : any | f2(a2,b,c,d2,e)]]
 *   with <f, a, d>
 *
 * @method "_partial evaluator with_"
 * @param "originalFunctionPhrase" "expression phrase ⇒ function"
 *        The expression providing the function to ultimately invoke.
 * @param "providedExpressions" "(expression phrase ⇒ any)?*"
 *        A tuple of optional argument expressions.  Where an argument is
 *        present, the value is captured in a variable in a function that
 *        lexically encloses the function to be produced.  Where an argument is
 *        absent, produce a corresponding parameter in the resulting function.
 *        The produced function, when invoked with the missing arguments, will
 *        invoke the original function with both the new and the captured
 *        arguments.
 * @returns "expression phrase ⇒ function"
 *          An expression which, when evaluated, will produce a function which,
 *          when itself is invoked with the missing arguments, will invoke the
 *          original function.
 * @category "Bootstrap" "Function Application"
 */
Private method "_partial evaluator with_" is
[
	originalFunctionPhrase : expression phrase ⇒ function,
	providedExpressions : (expression phrase ⇒ any)?*
|
	originalFunctionType ::= originalFunctionPhrase's semantic type;
	paramTypes ::= originalFunctionType's parameters' type;
	Assert: ⎣paramTypes⎦ = ⎡paramTypes⎤;
	Assert: ⎣paramTypes⎦ = |providedExpressions|;
	functionItselfParam ::= arg «`"theFunction"` : originalFunctionType»;
	innerParams : argument phrase* := <>;
	outerParams : argument phrase* := <functionItselfParam>;
	allParamUses : variable use phrase* := <>;
	outerInvokeArgs : (expression phrase ⇒ any)* := <originalFunctionPhrase>;
	For each optionalExpr, index of providedExpressions do
	[
		param ::= arg «`"arg" ++ “index”` : paramTypes[index]»;
		paramUse ::= «↓param»;
		allParamUses ++= <paramUse>;
		If optionalExpr = <> then
		[
			innerParams ++= <param>;
		]
		else
		[
			outerParams ++= <param>;
			outerInvokeArgs ++= <optionalExpr[1]>;
		];
	];
	innerFunction ::=
		«[innerParams |
			<
				restricted send invokeAtom with
				«<
					«↓functionItselfParam»,
					allParamUses → list phrase
				>» : originalFunctionType's return type
			>
		] : originalFunctionType's return type»;
	outerFunction ::=
		«[outerParams |
			<innerFunction>
		] : innerFunction's semantic type»;
	restricted send invokeAtom with
	«<
		outerFunction,
		outerInvokeArgs → list phrase
	>» : innerFunction's semantic type
];

/**
 * Convert a function of N arguments into a function of M arguments, where
 * 0 < M < N.  The N - M arguments are provided in a function invocation pattern
 * reminiscent of "_(«_‡,»)", but the unspecified M arguments are literal
 * underscores.  For example, g ::= f(_,20,_) produces a two-argument function g
 * from the three-argument function f.  When g is subsequently invoked with two
 * arguments such as g(10,30), it will invoke f as though it had been invoked as
 * f(10,20,30).  This is a generalization of currying as found in functional
 * languages.
 *
 * In particular, convert an expression like f(a,_,_,d,_) into one like:
 *   invoke [f2 : function, a2 : any, d2 : any |
 *       [b : any, c : any, e : any | f2(a2,b,c,d2,e)]]
 *   with <f, a, d>
 *
 * @method "_(««_»?«`_»?‡,»)"
 * @param "originalFunction" "expression phrase ⇒ function"
 *        An expression producing the function to ultimately invoke.
 * @param "pairs" "list phrase ⇒ (<any?, boolean…|2>*)"
 *        The arguments and place-holder underscores.  Either the first element
 *        must produce a size one tuple and the second element a literal
 *        producing false, or the first element must produce the empty tuple and
 *        the second element true. At least one of the pairs must be the former
 *        and at least one the latter, otherwise the useless form f(_,_,_) would
 *        be allowed, and the form f(5,6,7) would be confused with actual
 *        function invocation.
 * @returns "expression phrase ⇒ function"
 *          An expression producing a function that takes some arguments
 *          destined for the original function and returns another function that
 *          takes the remainder of the arguments and invokes the original
 *          function.
 * @category "Function Application"
 */
Public macro "_(««_»?«`_»?‡,»)" is
[
	originalFunction : expression phrase ⇒ function,
	pairs : list phrase ⇒ (<any?, boolean…|2>*)
|
	pairExprs ::= cast pairs' expressions into
		[x : (list phrase ⇒ <any?, boolean…|2>)* | x];
	providedExprs ::= map each pairExpr of pairExprs through
	[
		twoExprs ::= cast pairExpr's expressions into
			[x : <list phrase⇒(any?), literal phrase⇒boolean…|2> | x];
		twoExprs[1]'s expressions
	];
	originalFunction partial evaluator with providedExprs
] : expression phrase ⇒ function;

/**
 * @method "_(««_»?«`_»?‡,»)"
 * @restricts "function's type"
 * @restricts "<any?, boolean…|2>*'s type"
 */
Semantic restriction "_(««_»?«`_»?‡,»)" is
[
	originalFunction : function's type,
	pairs : <any?, boolean…|2>*'s type
|
	Assert: ⎣pairs⎦ = ⎡pairs⎤ (
		"Need a definite number of arguments and underscores");
	paramTypes ::= originalFunction's parameters' type;
	If paramTypes = ⊥ ∨ ⎣paramTypes⎦ ≠ ⎡paramTypes⎤ then
	[
		Reject parse, expected:
			"function for partial application to have \
			\|a statically known number of arguments"
	];
	If ⎣paramTypes⎦ ≠ ⎣pairs⎦ then
	[
		Reject parse, expected:
			"agreement between number of supplied arguments and function \
			\|parameters (for partial application)"
	];

	pairTypes ::= pairs[1..⎣pairs⎦];
	argumentTypes : <any's type…|> := <>;
	For each pairType, index of pairTypes do
	[
		underscoreType ::= pairType[2];
		If underscoreType = true's type then
		[
			If ¬ ||pairType[1]|| ⊆ [0..0] then
			[
				Reject parse, expected:
					"either no argument or no underscore for partial \
					\|function application, index " ++ “index” ++
					".  The arguments were:\n" ++ “pairTypes” ++ "."
			];
			argumentType ::= originalFunction[index];
			argumentTypes := eject argumentTypes ++ <argumentType>;
		]
		else if underscoreType = false's type then
		[
			If ¬ ||pairType[1]|| ⊆ [1..1] then
			[
				Reject parse, expected:
					"either an argument or an underscore for partial \
					\|function application, at index " ++ “index” ++
					".  The arguments were:\n" ++ “pairTypes” ++ "."
			];
			valueType ::= pairType[1][1];
			If ¬ valueType ⊆ originalFunction[index] then
			[
				Reject parse, expected:
					"type of argument #" ++ “index” ++
					" to be a subtype of " ++ “originalFunction[index]” ++
					", not of type " ++ “valueType”
			];
		]
		else
		[
			Reject parse, expected:
				"statically determined presence or absence of an underscore"
		];
	];
	If |argumentTypes| = 0 then
	[
		Reject parse, expected:
			"at least one underscore for partial function application"
	];
	If |argumentTypes| = |pairTypes| then
	[
		Reject parse, expected:
			"at least one argument value for partial function application"
	];
	function accepting argumentTypes
		and returning (originalFunction's return type)
];

/**
 * Partially evaluate a function, providing the first argument.  Produce a
 * function which takes the remaining arguments and evaluates the original
 * function with the first argument combined with the remaining arguments.
 *
 * @method "_(_,`…)"
 * @param "originalFunction" "expression phrase ⇒ function"
 *        An expression that produces the function to ultimately invoke.
 * @param "firstValue" "expression phrase ⇒ any"
 *        The first argument to supply to the function.
 * @returns "function"
 *    A function that takes the remaining N-1 arguments and invokes the original
 *    function.
 * @category "Function Application"
 */
Public macro "_(_,`…)" is [
	originalFunction : expression phrase ⇒ function,
	firstValueExpr : expression phrase ⇒ any
|
	functionType ::= originalFunction's semantic type;
	argTypes ::= functionType's parameters' type;
	Assert: ⎣argTypes⎦ = ⎡argTypes⎤;
	argCount ::= cast ⎣argTypes⎦ into [n : natural number | n];
	originalFunction partial evaluator
		with <<firstValueExpr>> ++ argCount - 1 occurrences of <>
];

/**
 * @method "_(_,`…)"
 * @restricts "function's type"
 * @restricts "any's type"
 */
Semantic restriction "_(_,`…)" is
[
	originalFunction : function's type,
	firstValue : any's type
|
	argumentsType ::= originalFunction's parameters' type;
	If ⎣argumentsType⎦ ≠ ⎡argumentsType⎤ then
	[
		Reject parse, expected:
			"function to take a definite number of arguments"
	];
	If ⎣argumentsType⎦ < 2 then
	[
		Reject parse, expected:
			"function for partial evaluation to take at least two arguments"
	];
	If ¬ firstValue ⊆ argumentsType[1] then
	[
		Reject parse, expected:
			"first argument (" ++ “firstValue” ++ ") to agree with function's \
			\|first parameter (" ++ “argumentsType[1]” ++ ")"
	];
	function accepting argumentsType[2..]
		and returning (originalFunction's return type)
] : function's type;

/**
 * Partially evaluate a function, providing the last argument.  Produce a
 * function which takes the remaining arguments and evaluates the original
 * function with remaining argumenst combined with the last argument.
 *
 * @method "_(`…,_)"
 * @param "originalFunction" "expression phrase ⇒ function"
 *        An expression that produces the function to ultimately invoke.
 * @param "lastValue" "expression phrase ⇒ any"
 *        The last argument to supply to the function.
 * @returns "function"
 *    A function that takes the leading N-1 arguments and invokes the original
 *    function.
 * @category "Function Application"
 */
Public macro "_(`…,_)" is [
	originalFunction : expression phrase ⇒ function,
	lastValueExpr : expression phrase ⇒ any
|
	functionType ::= originalFunction's semantic type;
	argTypes ::= functionType's parameters' type;
	Assert: ⎣argTypes⎦ = ⎡argTypes⎤;
	argCount ::= cast ⎣argTypes⎦ into [n : natural number | n];
	originalFunction partial evaluator
		with (argCount - 1 occurrences of <>) ++ <<lastValueExpr>>
];

/**
 * @method "_(`…,_)"
 * @restricts "function's type"
 * @restricts "any's type"
 */
Semantic restriction "_(`…,_)" is
[
	originalFunction : function's type,
	lastValue : any's type
|
	argumentsType ::= originalFunction's parameters' type;
	If ⎣argumentsType⎦ ≠ ⎡argumentsType⎤ then
	[
		Reject parse, expected:
			"function to take a definite number of arguments"
	];
	If ⎣argumentsType⎦ < 2 then
	[
		Reject parse, expected:
			"function for partial evaluation to take at least two arguments"
	];
	argumentsCount ::= cast ⎣argumentsType⎦ into [n : [2..∞) | n];
	If ¬ lastValue ⊆ argumentsType[argumentsCount] then
	[
		Reject parse, expected:
			"last argument (" ++ “lastValue” ++ ") to agree with function's \
			\|last parameter (" ++ “argumentsType[argumentsCount]” ++ ")"
	];
	function accepting argumentsType[..argumentsCount - 1]
		and returning (originalFunction's return type)
] : function's type;

/**
 * Answer a {@type "function"} that sends the specified message when applied.
 * If the function is applied to inappropriate arguments (at runtime), then an
 * appropriate {@type "exception"} is raised.
 *
 * @method "unsafe sender of_returning_"
 * @param "methodName" "atom"
 *        The name of the {@type "method"} to invoke unsafely.
 * @param "returnType" "type"
 *        The expected return type of the {@type "method"}.
 * @returns "function"
 *          The requested {@type "function"}.
 * @category "Function Implementations" "Atoms"
 */
Public method "unsafe sender of_returning_" is
[
	methodName : atom,
	returnType : type
|
	argCount ::= |message methodName's name's parameters|;
	args ::= map each index in 1 to argCount through
		[arg «`"x" ++ “index”` : any»];
	uses ::= map each a in args through [«↓a»];
	send ::= send methodName with uses→list phrase : returnType;
	block ::= «[args | <send>] : returnType»;
	block→function
] : function;

Semantic restriction "unsafe sender of_returning_" is
[
	methodName : atom's type,
	returnType : type's type
|
	if |methodName| = 1 then
	[
		args ::= |message methodName's instance's name's parameters| of ⊥;
		function accepting args and returning (returnType's instance)
	]
	else [[…]→(returnType's instance)]
];

