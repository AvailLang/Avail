/*
 * Assertions.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Assertions"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Bootstrap",
	"Definers",
	"Functions",
	"Early Conditionals",
	"Exceptions",
	"Literals",
	"Macro Support",
	"Objects",
	"Phrases",
	"Types"
Names
	"Assert:_",
	"Assert:_(_)",
	"Shouldn't happen",
	"Shouldn't happen(_)",
	"assertion-failed exception"
Body

/**
 * An assertion-failed exception indicates that {@method "Assert:_"} or
 * {@method "Assert:_(_)"} was invoked with a false predicate.
 *
 * @type "assertion-failed exception"
 * @supertype "exception"
 * @category "Assertions" "Exceptions"
 */
Public explicit class "assertion-failed exception" extends exception;

/**
 * If the argument is {@code false}, then raise an {@type "assertion-failed
 * exception"}.
 *
 * @method "Assert:_"
 * @param "predicate" "boolean"
 *        A predicate.
 * @returns "⊤"
 * @raises "assertion-failed exception"
 *         If {@param "predicate"} is {@code false}.
 * @category "Assertions"
 */
Public method "Assert:_" is
[
	predicate : boolean
|
	/* No implementation required. */
] : ⊤;

Public method "Assert:_" is
[
	predicate : false's type
|
	Raise an assertion-failed exception
] : ⊥;

/**
 * @method "Assert:_"
 * @restricts "false's type's type"
 */
Semantic restriction "Assert:_" is
[
	contradiction : false's type's type
|
	Reject parse, expected:
		"an assertion that could ever be true \
		\|(use \"Shouldn't happen\" instead)"
];

Private method "Assert:__" is
[
	predicate : boolean,
	message : []→string
|
	/* No implementation required. */
] : ⊤;

Private method "Assert:__" is
[
	predicate : false's type,
	message : []→string
|
	Raise an assertion-failed exception ∩ descriptive exception
		with error message ::= message()
] : ⊥;

/**
 * If {@param "predicate"} evaluates to {@method "false"}, then raise a {@type
 * "descriptive exception" descriptive} {@type "assertion-failed
 * exception"} that includes an {@param "message" error message} produced by the
 * specified {@type "string"} {@type "expression phrase" expression}.
 *
 * @macro "Assert:_(_)"
 * @param "predicate" "expression phrase ⇒ boolean"
 *        A predicate.
 * @param "message" "expression phrase ⇒ string"
 *        An {@type "expression phrase" expression} that produces an error
 *        message. It is only evaluated if {@param "predicate"} is {@method
 *        "false"}.
 * @returns "send phrase ⇒ ⊤"
 * @category "Assertions"
 */
Public macro "Assert:_(_)" is
[
	predicate : expression phrase ⇒ boolean,
	message : expression phrase ⇒ string
|
	If predicate's semantic type = false's type then
	[
		Reject parse, expected:
			"an assertion that could ever be true \
			\|(use \"Shouldn't happen(_)\" instead)"
	];
	send $"Assert:__" with
		«<
			predicate,
			«[<message>] : message's semantic type»
		>» : ⊤
];

/**
 * Declare that the code path that called this method should never be executed.
 * It results in an assertion failure.
 *
 * @method "Shouldn't happen"
 * @returns "⊥"
 * @raises "assertion-failed exception"
 *         Always.
 * @category "Assertions"
 */
Public method "Shouldn't happen" is
[
	Raise an assertion-failed exception ∩ descriptive exception
		with error message ::= "This should not be possible."
] : ⊥;

/**
 * Declare that the code path that called this method should never be executed.
 * It results in an assertion failure.
 *
 * @method "Shouldn't happen(_)"
 * @param "message" "string"
 *        The error message.
 * @returns "⊥"
 * @raises "assertion-failed exception"
 *         Always.
 * @category "Assertions"
 */
Public method "Shouldn't happen(_)" is
[
	message : string
|
	Raise an assertion-failed exception ∩ descriptive exception
		with error message ::= message
] : ⊥;
