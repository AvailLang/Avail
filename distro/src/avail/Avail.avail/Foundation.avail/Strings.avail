/*
 * Strings.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Strings"
Versions
	"Avail-1.6.0"
Uses
	"Atoms",
	"Bootstrap",
	"Characters",
	"Control Structures",
	"Definers",
	"Early Conditionals",
	"Early Functions",
	"Enumeration Support",
	"Error Codes",
	"Literals",
	"Logic",
	"Maps",
	"Macro Support",
	"Math",
	"Sets",
	"Tuples",
	"Types",
	"Variables"
Names
	/* English language. */
	"(A`|An)“_”«else_»",
	"(The)“_”«else_»",
	"(a`|an)“_”«else_»",
	"(the)“_”«else_»",

	/* Formatting lists. */
	"“_”«else_»(as list partitioned by_)",
	"“_”«else_»(as simple list)",
	"“_”«else_»(as«conjunctive|disjunctive»!list)",
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)",

	/* Conversions. */
	"_(base_)",
	"_→string",

	/* Hexadecimal. */
	"hexadecimal character",
	"“_”(hex)",

	/* UUIDs. */
	"UUID string",
	"“_”(UUID)",
	"_→UUID",

	/* Trimming. */
	"trim_",

	/* Code points. */
	"_→code points",

	/* Avail message metacharacter rejection. */
	"_contains Avail message⁇metacharacters",
	"Require:_contains no Avail message⁇metacharacters",

	/* Avail message metacharacter escaping. */
	"_with Avail message⁇metacharacters escaped"
Body

/* Code point constants needed by `_(base_)`. */
baseAlphabetTuple ::=
	"0123456789\
	\|ABCDEFGHIJKLMNOPQRSTUVWXYZ\
	\|abcdefghijklmnopqrstuvwxyz";
baseAlphabets ::=
	map each base in 2 to 36 through
	[
		baseAlphabetTuple[..base]
		++ baseAlphabetTuple[37..36 max (36 + base - 10)] → set
	];
cp_0 ::= ¢0's code point;
cp_9 ::= ¢9's code point;
cp_a ::= ¢a's code point;
cp_z ::= ¢z's code point;
cp_A ::= ¢A's code point;
cp_Z ::= ¢Z's code point;

/**
 * Convert the specified string to an extended integer.
 *
 * @method "_(base_)"
 * @param "digits" "string"
 *        A string of digits, chosen from the alphabet ¢0 .. ¢9 ∪ ¢A .. ¢Z ∪ ¢a
 *        .. ¢z.
 * @param "base" "[2..36]"
 *        The base for `digits`. This determines which symbols of the alphabet
 *        are valid, e.g., when `base = 16` then the valid symbols are ¢0 .. ¢9
 *        ∪ ¢A .. ¢F ∪ ¢a .. ¢f.
 * @returns "extended integer"
 *          An extended integer.
 * @category "Numbers" "Integers" "Conversions" "Stringification"
 */
Public stable method "_(base_)" is
[
	digits : string,
	base : [2..36]
|
	fail ::= [early failure function(invalid-argument code)];
	If digits is empty then fail;
	realDigits : string := digits;
	multiplier : {-1, 1}ᵀ := 1;
	If digits[1] = ¢- then
	[
		If |digits| = 1 then fail;
		realDigits := digits[2..];
		multiplier := -1;
	];
	baseAlphabet ::= baseAlphabets[base-1];
	answer ::=
		if realDigits[1] = ¢∞ then [∞]
		else
		[
			partial : whole number := 0;
			For each digit of realDigits do
			[
				If ¬digit ∈ baseAlphabet then fail;
				cp ::= cast digit's code point into [t : [cp_0..cp_z] | t];
				value ::=
					if cp_0 ≤ cp ≤ cp_9 then [cp - cp_0]
					else if cp_a ≤ cp ≤ cp_z then [cp - cp_a + 10]
					else if cp_A ≤ cp ≤ cp_Z then [cp - cp_A + 10]
					else fail;
				strongValue ::= cast value into [t : [0..36) | t];
				partial := eject partial × base + strongValue;
			];
			partial
		];
	answer × multiplier
] : extended integer;

/**
 * Convert the specified integer to a string in the requested radix.  Allow up
 * radix 36, using upper-case ASCII letters for digits ten or higher.  Negative
 * numbers are preceded by a "-".  Only the value zero (0) can start with a zero
 * digit ("0").
 *
 * @method "_(base_)"
 * @param "n" "integer"
 *        The integer to convert to a string.
 * @param "base" "[2..36]"
 *        The base for the output string. This determines which characters may
 *        occur as digits in the output.
 * @returns "string"
 *          A string representation of the given integer n, in the given radix.
 * @category "Numbers" "Integers" "Conversions" "Stringification"
 */
Public stable method "_(base_)" is
[
	n : integer,
	base : [2..36]
|
	if n = 0 then
	[
		"0"
	]
	else
	[
		out : string := "";
		residue : whole number := |n|;
		While residue > 0 do
		[
			out := <baseAlphabetTuple[residue mod base + 1]> ++ eject out;
			/* Note: truncating division */
			residue := residue ÷ base;
		];
		if n < 0 then ["-" ++ out] else [out]
	]
] : string;

Semantic restriction "_(base_)" is
[
	n : integer's type,
	base : [2..36]'s type
|
	alphabet ::= (baseAlphabetTuple[1..⌈base⌉] → set)'s type's element type;
	if (⌊n⌋ ≠ -∞ ∧ ⌈n⌉ ≠ ∞) then
	[
		/* The magnitudes have known bounds.  Bound the string length. */
		values : {extended integer|} := ∅;
		hasNeg ::= ⌊n⌋ < 0;
		If hasNeg then
		[
			values := values ∪ {⌊n ∩ (-∞..-1]⌋, ⌈n ∩ (-∞..-1]⌉};
		];
		hasPos ::= ⌈n⌉ ≥ 0;
		If hasPos then
		[
			values := values ∪ {⌊n ∩ [0..∞)⌋, ⌈n ∩ [0..∞)⌉};
		];
		strings : {string|} := ∅;
		For each value in values do
		[
			cast value into [v : integer |
				strings := strings ∪ {v(base ⌊base⌋), v(base ⌈base⌉)};];
		];
		stringType ::= strings' type's element type;
		sizeRange ::= ||stringType||;
		firstChar : character's type := ⊥;
		If hasNeg then [firstChar := firstChar ∪ {¢-}ᵀ;];
		If hasPos then [firstChar := firstChar ∪ alphabet;];
		<firstChar, alphabet…|⌊sizeRange⌋..⌈sizeRange⌉>
	]
	else if n ⊆ [0..∞) then
	[
		/* Unbounded, but all positive. */
		alphabet+
	]
	else if n ⊆ (-∞..-1] then
	[
		/* Unbounded, but all negative. */
		<{¢-}ᵀ, alphabet…|1..>
	]
	else
	[
		/* Unbounded, positive and negative. */
		<alphabet ∪ {¢-}ᵀ, alphabet… |1..>
	]
];

/**
 * Convert the specified string to an integer.
 *
 * @method "_→_"
 * @param "str" "string"
 *        A string of base-10 digits.
 * @returns "integer"
 * @category "Numbers" "Integers" "Conversions" "Stringification"
 */
Method "_→_" is
[
	str : string,
	range : extended integer's type
|
	fail ::= [early failure function(invalid-argument code)];
	If |str| > 1 ∧ str[1] = ¢0 then fail;
	n ::= str (base 10);
	if n ∈ range then [n] else fail
] : extended integer;

Semantic restriction "_→_" is
[
	str : string's type,
	range : extended integer's type's type
|
	range's instance
];

/**
 * Compare two strings lexicographically by Unicode code point.
 *
 * @method "_≤_"
 * @param "s1" "string"
 * @param "s2" "string"
 * @returns "boolean"
 *          {@method "true"} if {@param "s1"} collates before {@param "s2"},
 *          {@method "false"} otherwise.
 * @category "Strings" "Relations"
 */
Method "_≤_" is
[
	s1 : string,
	s2 : string
|
	$body : boolean;
	For each index from 1 to |s1| min |s2| do
	[
		cp1 ::= s1[index]'s code point;
		cp2 ::= s2[index]'s code point;
		Exit body with true if cp1 < cp2;
		Exit body with false if cp1 > cp2;
	];
	|s1| ≤ |s2|
] : boolean;

/**
 * Compare two strings lexicographically by Unicode code point.
 *
 * @method "_<_"
 * @param "s1" "string"
 * @param "s2" "string"
 * @returns "boolean"
 *          {@method "true"} if {@param "s1"} collates strictly before
 *          {@param "s2"}, {@method "false"} otherwise.
 * @category "Strings" "Relations"
 */
Method "_<_" is
[
	s1 : string,
	s2 : string
|
	s1 ≤ s2 ∧ s1 ≠ s2
] : boolean;

/**
 * Quicksort a tuple of strings in ascending order.
 *
 * @method "quicksort_"
 * @param "strings" "string*" The {@type "tuple"} of strings to sort
 * @returns "string*" A sorted {@type "tuple"} of strings
 * @category "Strings" "Sorting"
 */
Method "quicksort_" is
[
	strings : string*
|
	quicksort a, b in strings by [a ≤ b]
] : string*;

/**
 * Merge sort a tuple of strings in ascending order.
 *
 * @method "merge sort_"
 * @param "strings" "string*" The {@type "tuple"} of strings to sort
 * @returns "string*" A sorted {@type "tuple"} of strings
 * @category "Strings" "Sorting"
 */
Method "merge sort_" is
[
	strings : string*
|
	merge sort a, b in strings by [a ≤ b]
] : string*;

/**
 * Stringify the argument.
 *
 * @method "“_”"
 * @param "aTuple" "tuple"
 * @returns "string"
 * @category "Tuples" "Stringification"
 */
Method "“_”" is
[
	aTuple : tuple
|
	if aTuple ∈ string then
	[
		cast primitive description of aTuple into [t : <character…|2..> | t]
	]
	else
	[
		Assert: ¬aTuple is empty;
		s : string := "<";
		index : natural number := 1;
		Do
		[
			elem ::= aTuple[index];
			s := eject s ++ “elem”;
			index++;
		]
		while index ≤ |aTuple|
		alternate with [s := eject s ++ ", ";];
		s := eject s ++ ">";
		s
	]
] : string;

/**
 * Answer a textual rendition of {@param "aTuple"} as a comma-separated list
 * without enclosing angle brackets.
 *
 * @method "“_”«else_»(as simple list)"
 * @param "aTuple" "tuple"
 *        An arbitrary tuple.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the tuple is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Tuples" "Stringification"
 */
Public method "“_”«else_»(as simple list)" is
[
	aTuple : tuple,
	optionalEmptyText : ([]→string)?
|
	if aTuple is empty then [optionalEmptyText[1] else [["(empty)"]]()]
	else
	[
		s : string := "";
		index : natural number := 1;
		Do
		[
			elem ::= aTuple[index];
			s := eject s ++ cast elem into [t : string | t] else [“elem”];
			index++;
		]
		while index ≤ |aTuple|
		alternate with [s := eject s ++ ", ";];
		s
	]
] : string;

/**
 * Describe a code point that's either the start or end of a range, or a single
 * value.
 *
 * @param c The ({@code character}) to describe.
 */
Private method "range element string for_" is
[
	c : character
|
	m ::= {
		¢" " → " ",
		¢"-" → "\\(2D)",
		¢"[" → "\\(5B)",
		¢"]" → "\\(5D)",
		¢"\n" → "\\n",
		¢"\r" → "\\r",
		¢"\t" → "\\t",
		¢"\\" → "\\\\",
		¢"\"" → "\\\""
	};
	m[c] else [
		if (c's character type name ∈ {
			"combining spacing mark",
			"control",
			"enclosing mark",
			"format",
			"non-spacing mark",
			"paragraph separator",
			"private use",
			"space separator",
			"surrogate",
			"unassigned"}) then
		[
			"\\(" ++ c's code point (base 16) ++ ")"
		]
		else
		[
			<c>
		]
	]
];

/**
 * Stringify the argument, which is the general case of a set.
 *
 * @method "“_”"
 * @param "aSet" "set"
 * @returns "string"
 * @category "Sets" "Stringification"
 */
Method "“_”" is
[
	aSet : set
|
	Assert: ¬aSet is empty;
	aTuple ::= aSet→tuple;
	s : string := "{";
	index : natural number := 1;
	Do
	[
		elem ::= aTuple[index];
		s := eject s ++ “elem”;
		index++;
	]
	while index ≤ |aTuple|
	alternate with [s := eject s ++ ", ";];
	eject s ++ "}"
] : string;

/**
 * Stringify the argument, which is the empty set.
 *
 * @method "“_”"
 * @param "aSet" "set"
 * @returns "string"
 * @category "Sets" "Stringification"
 */
Method "“_”" is
[
	aSet : ∅'s type
|
	"∅"
] : string;

/**
 * Stringify the argument, which is a set of characters.
 *
 * @method "“_”"
 * @param "aSet" "set"
 * @returns "string"
 * @category "Sets" "Stringification"
 */
Method "“_”" is
[
	aSet : {character|}
|
	index : natural number := 1;
	out : string := "¢[";
	unorderedString ::= map each c of aSet→tuple through [c's code point];
	sorted ::= quicksort unorderedString;
	size ::= |sorted|;
	position : natural number := 1;
	Do
	[
		runStart ::= sorted[(position++)];
		runEnd : code point := runStart;
		While
		[
			position ≤ size ∧ sorted[position] = runEnd + 1
		]
		do
		[
			position++;
			runEnd++;
		];
		out ++= range element string for runStart → character;
		If runEnd ≠ runStart then
		[
			/* Skip the dash if the start and end are consecutive. */
			If runEnd ≠ runStart + 1 then
			[
				out ++= "-";
			];
			out ++= range element string for runEnd → character;
		];
	]
	while position ≤ size;
	out ++ "]"
] : string;

/**
 * Answer a textual rendition of {@param "aSet"} as a comma-separated list
 * without enclosing curly brackets.
 *
 * @method "“_”«else_»(as simple list)"
 * @param "aSet" "set"
 *        An arbitrary set.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the set is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Sets" "Stringification"
 */
Public method "“_”«else_»(as simple list)" is
[
	aSet : set,
	optionalEmptyText : ([]→string)?
|
	emptyText ::= optionalEmptyText[1] else [["(empty)"]]();
	“aSet→tuple” else [emptyText] (as simple list)
] : string;

/**
 * Stringify the argument.
 *
 * @method "“_”"
 * @param "aMap" "map"
 * @returns "string"
 * @category "Maps" "Stringification"
 */
Method "“_”" is
[
	aMap : map
|
	s : string := "{";
	index : natural number := 1;
	bindings ::= aMap's bindings;
	While index ≤ |bindings| do
	[
		key, value ::= bindings[index];
		s := eject s ++ “key”;
		s := eject s ++ "→" ++ “value”;
		index++;
	]
	alternate with [s := eject s ++ ", ";];
	s := eject s ++ "}";
	s
] : string;

/**
 * Answer a textual rendition of {@param "aTuple"} as a list. Use the serial
 * comma, i.e., when {@param "aTuple"} contains three or more elements, then
 * precede each element except for the first with a comma, but output either
 * {@code "and"} or {@code "or"} before the final element.
 *
 * @method
 *    "“_”«else_»\
 *    \|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
 * @param "aTuple" "tuple"
 *        An arbitrary tuple.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the tuple is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "mode" "[1..2]"
 *        If the mode is {@code 1}, then output the word {@code "and"} before
 *        the final element of a multi-element tuple. If the mode is {@code 2},
 *        then output the word {@code "or"} before the final element of a
 *        multi-element tuple.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Tuples" "Stringification"
 */
Public abstract method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is [tuple, ([]→string)?, [1..2]]→string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aTuple : <⊥…|0>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	optionalEmptyText[1] else [["(empty)"]]()
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aTuple : <any…|1>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	elem ::= aTuple[1];
	cast elem into [t : string | t] else [“elem”]
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aTuple : <any…|2>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	s1 ::= cast aTuple[1] into [t : string | t] else [“aTuple[1]”];
	s2 ::= cast aTuple[2] into [t : string | t] else [“aTuple[2]”];
	s1 ++ <" and ", " or ">[mode] ++ s2
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aTuple : <any…|3..>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	s : string := "";
	For each index from 1 to |aTuple| - 1 do
	[
		tx ::= cast aTuple[index] into [t : string | t] else [“aTuple[index]”];
		s := eject s ++ tx ++ ", ";
	];
	last ::= aTuple's last;
	tx ::= cast last into [t : string | t] else [“last”];
	s := eject s ++ <"and ", "or ">[mode] ++ tx;
	s
] : string;

/**
 * Answer a textual rendition of {@param "aTuple"} as a list. Use the serial
 * comma, i.e., when {@param "aTuple"} contains three or more elements, then
 * precede each element except for the first with a comma, but output either
 * {@code "and"} or {@code "or"} before the final element.
 *
 * @method "“_”«else_»(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
 * @param "aTuple" "tuple"
 *        An arbitrary tuple.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the tuple is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "mode" "[1..2]"
 *        If the mode is {@code 1}, then output the word {@code "and"} before
 *        the final element of a multi-element tuple. If the mode is {@code 2},
 *        then output the word {@code "or"} before the final element of a
 *        multi-element tuple.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Sets" "Stringification"
 */
Abstract method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is [set, ([]→string)?, [1..2]]→string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aSet : {⊥|0},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	optionalEmptyText[1] else [["(empty)"]]()
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aSet : {any|1},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	elem ::= aTuple[1];
	cast elem into [t : string | t] else [“elem”]
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aSet : {any|2},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	s1 ::= cast aTuple[1] into [t : string | t] else [“aTuple[1]”];
	s2 ::= cast aTuple[2] into [t : string | t] else [“aTuple[2]”];
	s1 ++ <" and ", " or ">[mode] ++ s2
] : string;

Method
	"“_”«else_»\
	\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
is
[
	aSet : {any|3..},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	s : string := "";
	For each index from 1 to |aTuple| - 1 do
	[
		tx ::= cast aTuple[index] into [t : string | t] else [“aTuple[index]”];
		s := eject s ++ tx ++ ", ";
	];
	last ::= aTuple's last;
	tx ::= cast last into [t : string | t] else [“last”];
	s := eject s ++ <"and ", "or ">[mode] ++ tx;
	s
] : string;

/**
 * Answer a textual rendition of {@param "aTuple"} as a list. Elements are
 * separated by commas, except that the last two elements are separated by
 * the appropriate connective conjunction. No comma will occur before the
 * connective conjunction, i.e., do not use the serial comma.
 *
 * @method "“_”«else_»(as«conjunctive|disjunctive»!list)"
 * @param "aTuple" "tuple"
 *        An arbitrary tuple.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the tuple is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "mode" "[1..2]"
 *        If the mode is {@code 1}, then output the word {@code "and"} before
 *        the final element of a multi-element tuple. If the mode is {@code 2},
 *        then output the word {@code "or"} before the final element of a
 *        multi-element tuple.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Tuples" "Stringification"
 */
Public abstract method "“_”«else_»(as«conjunctive|disjunctive»!list)"
	is [tuple, ([]→string)?, [1..2]]→string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aTuple : <⊥…|0>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	optionalEmptyText[1] else [["(empty)"]]()
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aTuple : <any…|1>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	elem ::= aTuple[1];
	cast elem into [t : string | t] else [“elem”]
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aTuple : <any…|2>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	s1 ::= cast aTuple[1] into [t : string | t] else [“aTuple[1]”];
	s2 ::= cast aTuple[2] into [t : string | t] else [“aTuple[2]”];
	s1 ++ <" and ", " or ">[mode] ++ s2
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aTuple : <any…|3..>,
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	s : string := "";
	For each index from 1 to |aTuple| - 2 do
	[
		tx ::= cast aTuple[index] into [t : string | t] else [“aTuple[index]”];
		s := eject s ++ tx ++ ", ";
	];
	nextLast ::= aTuple[|aTuple| - 1];
	tx : string := cast nextLast into [t : string | t] else [“nextLast”];
	s := eject s ++ tx;
	last ::= aTuple's last;
	tx := cast last into [t : string | t] else [“last”];
	s := eject s ++ <" and ", " or ">[mode] ++ tx;
	s
] : string;

/**
 * Answer a textual rendition of {@param "aSet"} as a list. Elements are
 * separated by commas, except that the last two elements are separated by
 * the appropriate connective conjunction. No comma will occur before the
 * connective conjunction, i.e., do not use the serial comma.
 *
 * @method "“_”«else_»(as«conjunctive|disjunctive»!list)"
 * @param "aSet" "set"
 *        An arbitrary set.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the set is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "mode" "[1..2]"
 *        If the mode is {@code 1}, then output the word {@code "and"} before
 *        the final element of a multi-element tuple. If the mode is {@code 2},
 *        then output the word {@code "or"} before the final element of a
 *        multi-element tuple.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Sets" "Stringification"
 */
Abstract method "“_”«else_»(as«conjunctive|disjunctive»!list)"
	is [set, ([]→string)?, [1..2]]→string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aSet : {⊥|0},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	optionalEmptyText[1] else [["(empty)"]]()
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aSet : {any|1},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	elem ::= aTuple[1];
	cast elem into [t : string | t] else [“elem”]
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aSet : {any|2},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	s1 ::= cast aTuple[1] into [t : string | t] else [“aTuple[1]”];
	s2 ::= cast aTuple[2] into [t : string | t] else [“aTuple[2]”];
	s1 ++ <" and ", " or ">[mode] ++ s2
] : string;

Method "“_”«else_»(as«conjunctive|disjunctive»!list)" is
[
	aSet : {any|3..},
	optionalEmptyText : ([]→string)?,
	mode : [1..2]
|
	aTuple ::= aSet→tuple;
	s : string := "";
	For each index from 1 to |aTuple| - 2 do
	[
		tx ::= cast aTuple[index] into [t : string | t] else [“aTuple[index]”];
		s := eject s ++ tx ++ ", ";
	];
	nextLast ::= aTuple[|aTuple| - 1];
	tx : string := cast nextLast into [t : string | t] else [“nextLast”];
	s := eject s ++ tx;
	last ::= aTuple's last;
	tx := cast last into [t : string | t] else [“last”];
	s := eject s ++ <" and ", " or ">[mode] ++ tx;
	s
] : string;

/**
 * Answer a textual rendition of {@param "aTuple"} as a list. Elements are
 * separated by {@param "separator"}.
 *
 * @method "“_”«else_»(as list partitioned by_)"
 * @param "aTuple" "tuple"
 *        An arbitrary tuple.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the tuple is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "separator" "string"
 *        The text that should separate renditions of the elements of {@param
 *        "aTuple"}.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Tuples" "Stringification"
 */
Method "“_”«else_»(as list partitioned by_)" is
[
	aTuple : tuple,
	optionalEmptyText : ([]→string)?,
	separator : string
|
	if aTuple is empty then [optionalEmptyText[1] else [["(empty)"]]()]
	else
	[
		s : string := "";
		i : natural number := 1;
		Do
		[
			tx ::= cast aTuple[i] into [t : string | t] else [“aTuple[i]”];
			s := eject s ++ tx;
			i++;
		]
		while i ≤ |aTuple| alternate with [s := eject s ++ separator;];
		s
	]
] : string;

/**
 * Answer a textual rendition of {@param "aSet"} as a list. Elements are
 * separated by {@param "separator"}.
 *
 * @method "“_”«else_»(as list partitioned by_)"
 * @param "aSet" "set"
 *        An arbitrary set.
 * @param "optionalEmptyText" "([]→string)?"
 *        If specified, then the function to apply if the set is empty. If not
 *        specified, then {@code ["(empty)"]} will be used.
 * @param "separator" "string"
 *        The text that should separate renditions of the elements of {@param
 *        "aSet"}.
 * @returns "string"
 *          The requested textual rendition.
 * @category "Sets" "Stringification"
 */
Method "“_”«else_»(as list partitioned by_)" is
[
	aSet : set,
	optionalEmptyText : ([]→string)?,
	separator : string
|
	emptyText ::= optionalEmptyText[1] else [["(empty)"]];
	“aSet→tuple” else emptyText (as list partitioned by separator)
] : string;

vowels ::=
	("aàáâãäåāăąǎǟǡǻȁȃȧḁạảấầẩẫậắằẳẵặ"
	++ "AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶÅ"
	++ "eèéêëēĕėęěȅȇȩḕḗḙḛḝẹẻẽếềểễệ"
	++ "EÈÉÊËĒĔĖĘĚȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆ"
	++ "iìíîïĩīĭįıǐȉȋḭḯỉị"
	++ "IÌÍÎÏĨĪĬĮİǏȈȊḬḮỈỊ"
	++ "oòóôõöōŏőơǒǫǭȍȏȫȭȯȱṍṏṑṓọỏốồổỗộ"
	++ "OÒÓÔÕÖŌŎŐƠǑǪǬȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚ"
	++ "uùúûüũūŭůűųưǔǖǘǚǜȕȗṳṵṷṹṻụủứừửữự"
	++ "UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖṲṴṶṸṺỤỦỨỪỬỮỰ")→set;

/**
 * Answer a rendition of {@param "value"} that begins with the appropriate
 * indefinite article. If {@param "value"} is a string, then it will not be
 * quoted.
 *
 * @method "(a`|an)“_”«else_»"
 * @param "value" "any"
 * @param "optionalMissingText" "string?"
 *        If specified, then the text that will be displayed if {@param "value"}
 *        or its rendering via {@method "“_”"} is an empty string. If not
 *        specified, then {@code "(nothing)"} will be used if necessary.
 * @returns "string"
 * @category "Tuples" "Stringification"
 */
Public method "(a`|an)“_”«else_»" is
[
	value : any,
	optionalMissingText : string?
|
	missingText ::= optionalMissingText[1] else ["(nothing)"];
	s ::= cast value into [t : string | t] else [“value”];
	if s is empty then [missingText]
	else [if s[1] ∈ vowels then ["an "] else ["a "] ++ s]
] : string;

/**
 * Answer a rendition of {@param "value"} that begins with the appropriate
 * uppercased indefinite article. If {@param "value"} is a string, then it will
 * not be quoted.
 *
 * @method "(A`|An)“_”«else_»"
 * @param "value" "any"
 * @param "optionalMissingText" "string?"
 *        If specified, then the text that will be displayed if {@param "value"}
 *        or its rendering via {@method "“_”"} is an empty string. If not
 *        specified, then {@code "(nothing)"} will be used if necessary.
 * @returns "string"
 * @category "Tuples" "Stringification"
 */
Public method "(A`|An)“_”«else_»" is
[
	value : any,
	optionalMissingText : string?
|
	missingText ::= optionalMissingText[1] else ["(nothing)"];
	s ::= cast value into [t : string | t] else [“value”];
	if s is empty then [missingText]
	else [if s[1] ∈ vowels then ["An "] else ["A "] ++ s]
] : string;

/**
 * Answer a rendition of {@param "value"} that begins with the appropriate
 * definite article. If {@param "value"} is a string, then it will not be
 * quoted.
 *
 * @method "(the)“_”«else_»"
 * @param "value" "any"
 * @param "optionalMissingText" "string?"
 *        If specified, then the text that will be displayed if {@param "value"}
 *        or its rendering via {@method "“_”"} is an empty string. If not
 *        specified, then {@code "(nothing)"} will be used if necessary.
 * @returns "string"
 * @category "Tuples" "Stringification"
 */
Public method "(the)“_”«else_»" is
[
	value : any,
	optionalMissingText : string?
|
	missingText ::= optionalMissingText[1] else ["(nothing)"];
	s ::= cast value into [t : string | t] else [“value”];
	if s is empty then [missingText]
	else ["the " ++ s]
] : string;

/**
 * Answer a rendition of {@param "value"} that begins with the appropriate
 * uppercased definite article. If {@param "value"} is a string, then it will
 * not be quoted.
 *
 * @method "(The)“_”«else_»"
 * @param "value" "any"
 * @param "optionalMissingText" "string?"
 *        If specified, then the text that will be displayed if {@param "value"}
 *        or its rendering via {@method "“_”"} is an empty string. If not
 *        specified, then {@code "(nothing)"} will be used if necessary.
 * @returns "string"
 * @category "Tuples" "Stringification"
 */
Public method "(The)“_”«else_»" is
[
	value : any,
	optionalMissingText : string?
|
	missingText ::= optionalMissingText[1] else ["(nothing)"];
	s ::= cast value into [t : string | t] else [“value”];
	if s is empty then [missingText]
	else ["The " ++ s]
] : string;

/**
 * Print object types more neatly.
 *
 * @method "“_”"
 * @param "anObjectType" "object's type"
 * @returns "string"
 * @category "Objects" "Types" "Stringification"
 */
Method "“_”" is
[
	anObjectType : object's type
|
	“anObjectType's names” else [primitive description of anObjectType]
		(as list partitioned by " ∩ ")
] : string;

/**
 * Print object types more neatly.
 *
 * @method "“_”"
 * @param "anObject" "object"
 * @returns "string"
 * @category "Objects" "Stringification"
 */
Method "“_”" is
[
	anObject : object
|
	(a|an) ““anObject's type's names” else [primitive description of anObject]
		(as list partitioned by " ∩ ")”
] : string;

/**
 * Answer a variant of {@param "s"} such that all leading and trailing {@method
 * "_is whitespace" whitespace} has been removed.
 *
 * @method "trim_"
 * @param "s" "string"
 * @returns "string"
 * @category "Tuples" "Strings" "Transformers"
 */
Public stable method "trim_" is
[
	s : string
|
	start ::= 1 max first index of c in s where [¬c is whitespace];
	end ::= last index of c in s where [¬c is whitespace];
	s[start..end]
] : string;

/**
 * Answer a transformation of {@param "aTuple"} such that every constituent
 * {@type "code point"} is replaced with its corresponding {@type "character"},
 * preserving order.
 *
 * @method "_→string"
 * @param "aTuple" "code point*"
 * @returns "string"
 * @category "Tuples" "Strings" "Transformers"
 */
Public stable method "_→string" is
[
	aTuple : code point*
|
	map each c in aTuple through [c→character]
] : string;

/**
 * Render the supplied {@type "tuple"} of {@type "byte"}s as a hexadecimal
 * textual representation.
 *
 * @category "Strings"
 * @method "“_”(hex)"
 * @param "bytes" "byte*"
 * @returns "string"
 * @category "Tuples" "Strings" "Transformers"
 */
Public stable method "“_”(hex)" is
[
	bytes : byte*
|
	s : string := "";
	For each index from 1 to |bytes| do
	[
		high ::= (bytes[index] >> 4) bit∧ 15;
		low ::= bytes[index] bit∧ 15;
		s := eject s ++ <baseAlphabetTuple[high+1], baseAlphabetTuple[low+1]>;
	];
	s
] : string;

Semantic restriction "“_”(hex)" is
[
	bytes : byte*'s type
|
	<<>, character… | [⌊bytes⌋ × 2 .. ⌈bytes⌉ × 2 + 1)>
];

hexChar ::= enumeration of ¢0 to ¢9 ++ ¢A to ¢F → set;

Public macro "hexadecimal character" is [‘hexChar’];

uuidString ::=
	<
		hexChar, hexChar, hexChar, hexChar,
			hexChar, hexChar, hexChar, hexChar,
		{¢-}ᵀ,
		hexChar, hexChar, hexChar, hexChar,
		{¢-}ᵀ,
		hexChar, hexChar, hexChar, hexChar,
		{¢-}ᵀ,
		hexChar, hexChar, hexChar, hexChar,
		{¢-}ᵀ,
		hexChar…
	|36>;

/**
 * A {@type "UUID string"} is a standard 36-character hexadecimal rendition of a
 * {@type "UUID"}.
 *
 * @type "UUID string"
 * @alias "<character…|36>"
 */
Public macro "UUID string" is [‘uuidString’];

/**
 * Render the supplied {@type "UUID"} as a hexadecimal textual representation.
 *
 * @method "“_”(UUID)"
 * @param "uuid" "UUID"
 * @returns "nonempty string"
 * @category "Tuples" "Strings" "Transformers"
 */
Public stable method "“_”(UUID)" is
[
	uuid : UUID
|
	hex ::= “uuid” (hex);
	hex[1..8]
		++ "-"
		++ (hex[9..12])
		++ "-"
		++ (hex[13..16])
		++ "-"
		++ (hex[17..20])
		++ "-"
		++ (hex[21..32])
] : nonempty string;

Semantic restriction "“_”(UUID)" is [uuid : UUID's type | UUID string];

hexToValue ::= map each c, i of baseAlphabetTuple[1..16] through [<c, i-1>]→map;

/**
 * Convert the supplied {@type "UUID string"} to a {@type "UUID"}.
 *
 * @method "_→UUID"
 * @param "s" "UUID string"
 * @returns "UUID"
 */
Public stable method "_→UUID" is
[
	s : UUID string
|
	hex ::= concatenate <s[1..8], s[10..13], s[15..18], s[20..23], s[25..36]>;
	uuid : UUID := 16 of 0;
	For each index from 1 to 16 do
	[
		hexIndex ::= ((index - 1) << 1) + 1;
		highChar ::= hex[hexIndex];
		lowChar ::= hex[hexIndex + 1];
		high ::= (hexToValue[highChar] bit∧ 15) << 4;
		low ::= hexToValue[lowChar] bit∧ 15;
		b ::= cast high bit∨ low into [b : byte | b];
		uuid := uuid[index] → b;
	];
	uuid
];

/**
 * Convert {@param "s"} to a {@type "tuple"} of code points, preserving the
 * original order.
 *
 * @method "_→code points"
 * @param "s" "string"
 * @returns "code point*"
 * @category "Tuples" "Strings" "Transformers"
 */
Public stable method "_→code points" is
[
	s : string
|
	map each c of s through [c's code point]
];

Semantic restriction "_→code points" is
[
	s : string's type
|
	<<>, code point… | ||s||>
];

/**
 * Does the specified {@type "string"} contains any {@type
 * "Avail message⁇metacharacter" Avail message metacharacters}?
 *
 * @method "_contains Avail message⁇metacharacters"
 * @param "s" "string"
 * @returns "boolean"
 *          {@method "true"} if {@param "s"} contains any {@type
 *          "Avail message⁇metacharacter" Avail message metacharacters},
 *          {@method "false"} otherwise.
 * @category "Tuples" "Strings" "Queries"
 */
Public method "_contains Avail message⁇metacharacters" is
[
	s : string
|
	any c of s satisfies [c is an Avail metacharacter]
];

/**
 * Reject the current parse if the specified {@type "string"} {@method
 * "_contains Avail message⁇metacharacters" contains} any {@type
 * "Avail message⁇metacharacter" Avail message metacharacters}.
 *
 * @method "Require:_contains no Avail message⁇metacharacters"
 * @param "s" "string"
 * @returns "⊤"
 * @category "Tuples" "Strings"
 */
Public method "Require:_contains no Avail message⁇metacharacters" is
[
	s : string
|
	metachars ::= select each c from s where [c is an Avail metacharacter];
	If ¬metachars is empty then
	[
		Reject parse, expected:
			"string " ++ “s” ++ " not to contain Avail message metacharacters, \
				\|but the following included characters are Avail message \
        		\|metacharacters: " ++ “metachars” (as simple list)
	];
];

/**
 * Reject the current parse unless the specified {@type "string"} is statically
 * known and {@method "_contains Avail message⁇metacharacters" contains} no
 * {@type "Avail message⁇metacharacter" Avail message metacharacters}.
 *
 * @method "Require:_contains no Avail message⁇metacharacters"
 * @param "s" "string"
 * @returns "⊤"
 * @category "Tuples" "Strings"
 */
Public method "Require:_contains no Avail message⁇metacharacters" is
[
	sT : string's type
|
	If |sT| ≠ 1 then
	[
		Reject parse, expected:
			"string that forbids Avail message metacharacters to be \
			\|statically known"
	];
	Require: sT's instance contains no Avail metacharacters;
];

/**
 * Answer a variant of the specified {@type "string"} whose {@type
 * "Avail message⁇metacharacter" Avail message metacharacters} are properly
 * escaped with grave accents.
 *
 * @method "_with Avail message⁇metacharacters escaped"
 * @param "s" "string"
 * @returns "string"
 * @category "Strings" "Escaping"
 */
Public method "_with Avail message⁇metacharacters escaped" is
[
	s : string
|
	t : string := "";
	For each c of s do
	[
		If c is an Avail metacharacter then [t ++= "`";];
		t ++= <c>;
	];
	t
];
