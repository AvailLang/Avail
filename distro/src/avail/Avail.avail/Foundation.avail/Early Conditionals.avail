/*
 * Early Conditionals.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Conditionals"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Bootstrap",
	"Very Early Definers"
Names
	"If_then_",
	"If|if_then_else_"
Body


/**
 * Declare the one-branch conditional evaluation method that does nothing.  It
 * will be overridden for a true first argument.
 * 
 * @method "If_then_"
 * @param "predicate" "boolean"
 *        The boolean that will be tested.
 * @param "trueFunction" "nullary procedure"
 *        What to execute if the predicate is true, which it isn't.
 * @returns "⊤"
 * @category "Conditionals"
 */
Method "If_then_" is
[
	predicate : boolean,
	trueFunction : nullary procedure
|
	/* Do nothing. */
] : ⊤;

/**
 * Define the one-branch conditional evaluation method for a true condition.
 * 
 * @method "If_then_"
 * @param "predicate" "boolean"
 *        The boolean, which in this case is true.
 * @param "trueFunction" "nullary procedure"
 *        What to execute if the predicate is true, which it is.
 * @returns "⊤"
 * @category "Conditionals"
 */
Method "If_then_" is
[
	predicate : true's type,
	trueFunction : nullary procedure
|
	Primitive ShortCircuitHelper;
] : ⊤;


/**
 * Declare the default two-branch conditional evaluation method.  This one runs
 * the false function, so there must be an override for the true case.  Note
 * that the semantic restrictions are defined in a downstream module, so until
 * that point, the conditional method will be top-valued and can only be used as
 * a statement.
 * 
 * @method "If|if_then_else_"
 * @param "predicate" "boolean"
 *        The boolean value, which is false for this method definition, assuming
 *        the true case is handled in an override.
 * @param "trueFunction" "nullary procedure"
 *        What to invoke if the predicate is true, which it isn't.
 * @param "falseFunction" "nullary procedure"
 *        What to invoke if the predicate is false, which it is.
 * @returns "⊤"
 * @category "Conditionals"
 */
Method "If|if_then_else_" is
[
	predicate : boolean,
	trueFunction : nullary procedure,
	falseFunction : nullary procedure
|
	Primitive IfFalseThenElse;
] : ⊤;

/**
 * Define the two-branch conditional evaluation method for a true condition.
 * 
 * @method "If|if_then_else_"
 * @param "predicate" "true's type"
 *        The boolean value, which is true for this method definition.
 * @param "trueFunction" "nullary procedure"
 *        What to invoke if the predicate is true, which it is.
 * @param "falseFunction" "nullary procedure"
 *        What to invoke if the predicate is false, which it is not.
 * @returns "⊤"
 * @category "Conditionals"
 */
Method "If|if_then_else_" is
[
	predicate : true's type,
	trueFunction : nullary procedure,
	falseFunction : nullary procedure
|
	Primitive IfTrueThenElse;
] : ⊤;
