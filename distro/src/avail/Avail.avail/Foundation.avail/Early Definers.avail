/*
 * Early Definers.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Definers"
Versions
	"1.4.0"
Extends
	"Very Early Definers"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Literals"
Names
	"Private abstract method_is_",
	"Private forward method_is_",
	"Private method_is_",
	"Private macro_is«_,»_",
	"Public abstract method_is_",
	"Public forward method_is_",
	"Public method_is_",
	"Public macro_is«_,»_",
	"Require:_is public",
	"Require:_is private"
Body

Method "_'⁇s instance" is
[
	t : any's type
|
	Assert: |t| = 1 ("Expected single instance type");
	t's instances→tuple[1]
];

Semantic restriction "_'⁇s instance" is
[
	tt : any's type's type
|
	result : any's type;
	Cast tt's instance into [t : any's type | result := t;] else [];
	result
];

/**
 * Reject the current parse is the argument is not included in the current
 * module's "Names" section. Do nothing if the name is not specifically known.
 *
 * @method "Require:_is public"
 * @param "nameType" "string's type"
 *        The type of the name.
 * @returns "⊤"
 * @category "Assertions" "Types"
 */
Method "Require:_is public" is
[
	nameType : string's type
|
	If |nameType| = 1 then
	[
		methodName ::= nameType's instance;
		If current module has public name methodName then
		[
			/* This is the happy path: do nothing. */
		]
		else
		[
			Invoke
			[
				name : string
			|
				messageTuple ::= concatenate <
					"public name \"",
					name,
					"\" to be included in the module's \"Names\" section">;
				Invoke
				[
					messageString : string
				|
					Immediately reject parse, expected: messageString
				]
				with <messageTuple>;
			]
			with <methodName>;
		];
	];
] : ⊤;

/**
 * Reject the current parse is the argument is not included in the current
 * module's "Names" section. Do nothing if the name is not specifically known.
 *
 * @method "Require:_is public"
 * @param "nameType" "atom's type"
 *        The type of the name.
 * @returns "⊤"
 * @category "Assertions" "Types"
 */
Method "Require:_is public" is
[
	nameType : atom's type
|
	If |nameType| = 1 then
	[
		methodAtom ::= nameType's instance;
		Invoke
		[
			anAtom : atom
		|
			methodName ::= anAtom's name;
			If current module has public name methodName then
			[
				/* This is the happy path: do nothing. */
			]
			else
			[
				Invoke
				[
					name : string
				|
					messageTuple ::= concatenate <
						"public name \"",
						name,
						"\" to be included in the module's \"Names\" section">;
					Invoke
					[
						messageString : string
					|
						Immediately reject parse, expected: messageString
					]
					with <messageTuple>;
				]
				with <methodName>;
			];
		]
		with <methodAtom>;
	];
] : ⊤;

/**
 * Reject the current parse is the argument is included in the current module's
 * "Names" section. Do nothing if the name is not specifically known.
 *
 * @method "Require:_is private"
 * @param "nameType" "string's type"
 *        The type of the name.
 * @returns "⊤"
 * @category "Assertions" "Types"
 */
Method "Require:_is private" is
[
	nameType : string's type
|
	If |nameType| = 1 then
	[
		methodName ::= nameType's instance;
		If current module has public name methodName then
		[
			Invoke
			[
				name : string
			|
				messageTuple ::= concatenate <
					"private name \"",
					name,
					"\" not to be included in the module's \"Names\" section">;
				Invoke
				[
					messageString : string
				|
					Immediately reject parse, expected: messageString
				]
				with <messageTuple>;
			]
			with <methodName>;
		]
		else
		[
			/* This is the happy path: do nothing. */
		];
	];
] : ⊤;

/**
 * Reject the current parse is the argument is included in the current module's
 * "Names" section. Do nothing if the name is not specifically known.
 *
 * @method "Require:_is private"
 * @param "nameType" "atom's type"
 *        The type of the name.
 * @returns "⊤"
 * @category "Assertions" "Types"
 */
Method "Require:_is private" is
[
	nameType : atom's type
|
	If |nameType| = 1 then
	[
		methodAtom ::= nameType's instance;
		Invoke
		[
			anAtom : atom
		|
			methodName ::= anAtom's name;
			If current module has public name methodName then
			[
				Invoke
				[
					name : string
				|
					messageTuple ::= concatenate <
						"private name \"",
						name,
						"\" not to be included in the module's \"Names\" \
						\|section">;
					Invoke
					[
						messageString : string
					|
						Immediately reject parse, expected: messageString
					]
					with <messageTuple>;
				]
				with <methodName>;
			]
			else
			[
				/* This is the happy path: do nothing. */
			];
		]
		with <methodAtom>;
	];
] : ⊤;

/**
 * Declare a new public abstract method with the specified name and signature. A
 * concrete implementation is one whose parameter types and return type are
 * strictly more specific than the corresponding types of the abstract
 * signature. The semantic restriction ensures that the method is named in the
 * current module's "Names" section. This should not be used to extend existing
 * methods.
 *
 * @method "Public abstract method_is_"
 * @param "methodName" "string"
 *        The name of the abstract method to declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Public abstract method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive AbstractMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Public abstract method_is_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Public abstract method_is_" is
[
	nameType : string's type,
	functionMeta : function meta's type
|
	Require: nameType is public;
	⊤
];

/**
 * Declare a new public abstract method with the specified name and signature. A
 * concrete implementation is one whose parameter types and return type are
 * strictly more specific than the corresponding types of the abstract
 * signature. The semantic restriction ensures that the method is named in the
 * current module's "Names" section. This should not be used to extend existing
 * methods.
 *
 * @method "Public abstract method_is_"
 * @param "methodName" "atom"
 *        The atom that uniquely names the abstract method to declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Public abstract method_is_" is
[
	methodName : atom,
	aFunctionType : function meta
|
	Primitive AbstractMethodDeclarationForAtom (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Public abstract method_is_"
 * @restricts "atom's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Public abstract method_is_" is
[
	nameType : atom's type,
	functionMeta : function meta's type
|
	Require: nameType is public;
	⊤
];

/**
 * Declare the intention to locally define a public method with the specified
 * name and signature. If no such method is defined before compilation of the
 * containing module completes, then the compiler will emit an appropriate error
 * message.
 *
 * Recursive methods must be forward declared. Mutually recursive methods must
 * forward declare all but the lexically first participant in the recursion.
 *
 * @method "Public forward method_is_"
 * @param "methodName" "string"
 *        The name of the method to forward declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Public forward method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive ForwardMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Public forward method_is_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Public forward method_is_" is
[
	nameType : string's type,
	functionMeta : function meta's type
|
	Require: nameType is public;
	⊤
];

/**
 * Define a new public method. The semantic restriction ensures that the method
 * is named in the current module's "Names" section. This should not be used to
 * extend existing methods.
 *
 * @method "Public method_is_"
 * @param "methodName" "string"
 *        The name of the new method.
 * @param "function" "function"
 *        The original implementation of the method.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Public method_is_" is
[
	methodName : string,
	function : function
|
	Primitive SimpleMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Public method_is_"
 * @restricts "string's type"
 * @restricts "function meta"
 */
Semantic restriction "Public method_is_" is
[
	nameType : string's type,
	functionType : function meta
|
	Require: nameType is public;
	⊤
];

/**
 * Define a new public method. The semantic restriction ensures that the method
 * is named in the current module's "Names" section. This should not be used to
 * extend existing methods.
 *
 * @method "Public method_is_"
 * @param "methodName" "atom"
 *        The atom that uniquely names the new method.
 * @param "function" "function"
 *        The original implementation of the method.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Public method_is_" is
[
	methodName : atom,
	function : function
|
	Primitive MethodDeclarationFromAtom (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Public method_is_"
 * @restricts "atom's type"
 * @restricts "function meta"
 */
Semantic restriction "Public method_is_" is
[
	nameType : atom's type,
	functionType : function meta
|
	Require: nameType is public;
	⊤
];

/**
 * Declare a new private abstract method with the specified name and signature.
 * A concrete implementation is one whose parameter types and return type are
 * strictly more specific than the corresponding types of the abstract
 * signature. The semantic restriction ensures that the method is not named in
 * the current module's "Names" section. This should not be used to extend
 * existing methods.
 *
 * @method "Private abstract method_is_"
 * @param "methodName" "string"
 *        The name of the abstract method to declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Private abstract method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive AbstractMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Private abstract method_is_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Private abstract method_is_" is
[
	nameType : string's type,
	functionMeta : function meta's type
|
	Require: nameType is private;
	⊤
];

/**
 * Declare a new private abstract method with the specified name and signature.
 * A concrete implementation is one whose parameter types and return type are
 * strictly more specific than the corresponding types of the abstract
 * signature. The semantic restriction ensures that the method is not named in
 * the current module's "Names" section. This should not be used to extend
 * existing methods.
 *
 * @method "Private abstract method_is_"
 * @param "methodName" "atom"
 *        The atom that uniquely names the abstract method to declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Private abstract method_is_" is
[
	methodName : atom,
	aFunctionType : function meta
|
	Primitive AbstractMethodDeclarationForAtom (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Private abstract method_is_"
 * @restricts "atom's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Private abstract method_is_" is
[
	nameType : atom's type,
	functionMeta : function meta's type
|
	Require: nameType is private;
	⊤
];

/**
 * Declare the intention to locally define a private method with the specified
 * name and signature. If no such method is defined before compilation of the
 * containing module completes, then the compiler will emit an appropriate error
 * message.
 *
 * Recursive methods must be forward declared. Mutually recursive methods must
 * forward declare all but the lexically first participant in the recursion.
 *
 * @method "Private forward method_is_"
 * @param "methodName" "string"
 *        The name of the method to forward declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Private forward method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive ForwardMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is introduced by the module's "Names" section.
 *
 * @method "Private forward method_is_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Private forward method_is_" is
[
	nameType : string's type,
	functionMeta : function meta's type
|
	Require: nameType is private;
	⊤
];

/**
 * Define a new private method. The semantic restriction ensures that the method
 * is not named in the module's "Names" section. This should not be used to
 * extend existing methods.
 *
 * @method "Private method_is_"
 * @param "methodName" "string"
 *        The name of the new method.
 * @param "function" "function"
 *        The original implementation of the method.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Private method_is_" is
[
	methodName : string,
	function : function
|
	Primitive SimpleMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is not introduced by the module's "Names" section.
 *
 * @method "Private method_is_"
 * @restricts "string's type"
 * @restricts "function meta"
 */
Semantic restriction "Private method_is_" is
[
	nameType : string's type,
	functionType : function meta
|
	Require: nameType is private;
	⊤
];

/**
 * Define a new private method. The semantic restriction ensures that the method
 * is not named in the module's "Names" section. This should not be used to
 * extend existing methods.
 *
 * @method "Private method_is_"
 * @param "methodName" "atom"
 *        The atom that uniquely names the new method.
 * @param "function" "function"
 *        The original implementation of the method.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Public method "Private method_is_" is
[
	methodName : atom,
	function : function
|
	Primitive MethodDeclarationFromAtom (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new method is not introduced by the module's "Names" section.
 *
 * @method "Private method_is_"
 * @restricts "atom's type"
 * @restricts "function meta"
 */
Semantic restriction "Private method_is_" is
[
	nameType : atom's type,
	functionType : function meta
|
	Require: nameType is private;
	⊤
];

/**
 * Define the indicated grammatical restrictions. Each element {@code "e"} of
 * {@param "exclusions"}, itself a set of method names, corresponds to an
 * argument position {@code "n"} of {@param "methodName"}. The compiler rejects
 * parses of source text that invoke methods named in {@code "e"} when they
 * occur grammatically at argument position {@code "n"} of an invocation of the
 * method named by {@param "methodName"}.
 *
 * Note that "argument position" corresponds to a blank, not to a top-level
 * repeating sequence (indicated by guillemet notation).
 *
 * @method "Grammatical restriction_is_"
 * @param "methodsName" "string"
 *        The name of the method which should be restricted.
 * @param "exclusions" "tuple of set of string"
 *        A tuple of sets of method names. The method names in the {@code
 *        "n"}-th set are restricted from occurring grammatically at the {@code
 *        "n"}-th argument position of any invocation of the method named by
 *        {@param "methodName"}.
 * @returns "⊤"
 * @category "Declarations" "Methods"
 */
Method "Grammatical restriction_is_" is
[
	methodName : string,
	exclusions : tuple of set of string
|
	Invoke
	[
		methodsToRestrict : nonempty set of string
	|
		Grammatical restriction methodsToRestrict is exclusions;
	]
	with <{methodName}>;
] : ⊤;

/**
 * Define the indicated grammatical restrictions. Each element `e` of
 * `exclusions`, itself a set of method names, corresponds to an argument
 * position `n` of `methodName`. The compiler rejects parses of source text that
 * invoke methods named in `e` when they occur grammatically at argument
 * position `n` of an invocation of the method named by `methodName`.
 *
 * Note that "argument position" corresponds to a blank, not to a top-level
 * repeating sequence (indicated by guillemet notation).
 *
 * @method "Grammatical restriction_is_"
 * @param "methodsName" "atom"
 *        The name of the method which should be restricted.
 * @param "exclusions" "tuple of set of string"
 *        A tuple of sets of method names. The method names in the `n`-th set
 *        are restricted from occurring grammatically at the `n`-th argument
 *        position of any invocation of the method named by `methodName`.
 * @returns "⊤"
 * @category "Declarations" "Methods"
 */
Method "Grammatical restriction_is_" is
[
	methodName : atom,
	exclusions : tuple of set of atom
|
	Invoke
	[
		methodsToRestrict : nonempty set of atom
	|
		Grammatical restriction methodsToRestrict is exclusions;
	]
	with <{methodName}>;
] : ⊤;

/**
 * Define a new public macro. The semantic restriction ensures that the method
 * is named in the current module's "Names" section. This should not be used to
 * extend existing macros.
 *
 * @method "Public macro_i«_,»s_"
 * @param "macroName" "string"
 *        The name of the the new macro.
 * @param "prefixFunctions" "function*"
 *        The prefix functions associated with this macro.
 * @param "body" "macro function"
 *        The original implementation of the macro.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Public macro_is«_,»_" is
[
	macroName : string,
	prefixFunctions : tuple of function,
	body : macro function
|
	Primitive SimpleMacroDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new macro is introduced by the module's "Names" section.
 *
 * @method "Public macro_is«_,»_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Public macro_is«_,»_" is
[
	macroNameType : string's type,
	prefixFunctionsType : tuple of function's type,
	bodyType : macro function's type
|
	Require: macroNameType is public;
	⊤
];

/**
 * Define a new private macro. The semantic restriction ensures that the method
 * is not named in the current module's "Names" section. This should not be used
 * to extend existing macros.
 *
 * @method "Private macro_is«_,»_"
 * @param "macroName" "string"
 *        The name of the new macro.
 * @param "prefixFunctions" "function*"
 *        The prefix functions associated with this macro.
 * @param "body" "macro function"
 *        The original implementation of the macro.
 * @returns "⊤"
 * @category "Primitives" "Declarations" "Methods"
 */
Method "Private macro_is«_,»_" is
[
	macroName : string,
	prefixFunctions : tuple of function,
	body : macro function
|
	Primitive SimpleMacroDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Ensure that the new macro is not introduced by the module's "Names" section.
 *
 * @method "Private macro_is«_,»_"
 * @restricts "string's type"
 * @restricts "function meta's type"
 */
Semantic restriction "Private macro_is«_,»_" is
[
	macroNameType : string's type,
	prefixFunctionsType : tuple of function's type,
	bodyType : macro function's type
|
	Require: macroNameType is private;
	⊤
];
