/*
 * Casts.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Casts"
Versions
	"Avail-1.6.1"
Uses
	"Assertions",
	"Atoms",
	"Bootstrap",
	"Control Structures" =
	(
		"For each…from_to_§do_",
		"If|if_then_«else if_then_»«else_»?",
		"Repeat__times",
		"(_)",
		"_`?→_†"
	),
	"Definers",
	"Early Conditionals",
	"Enumeration Support",
	"Exceptions",
	"Format",
	"Functions",
	"Literals",
	"Logic",
	"Math",
	"Objects",
	"Tuples",
	"Types",
	"Variables"
Names
	/* Inline cast notation. */
	"_`?→_†else_",

	/* Casts. */
	"Cast|cast each of_into_",
	"Cast|cast each of_into_else_",
	"Cast|cast_into_",
	"Cast|cast_into«_‡,»«else_»",

	/* Exception types. */
	"bad-cast exception",
	"bad-multiway-cast exception"
Body

"source type" is a new field atom;
"destination type" is a new field atom;

/**
 * {@method "Cast|cast_into«_‡,»«else_»"} raises a bad-multiway-cast exception
 * when no default case has been supplied and none of the cast functions accept
 * the supplied value.
 *
 * @type "bad-multiway-cast exception"
 * @supertype "exception"
 * @category "Casts" "Exceptions"
 */
Public class "bad-multiway-cast exception" extends exception
	with field
		source type : type;

/**
 * {@method "Cast|cast_into_"} raises a bad-cast exception when the specified
 * function does not accept the supplied value.
 *
 * @type "bad-cast exception"
 * @supertype "bad-multiway-cast exception"
 * @category "Casts" "Exceptions"
 */
Public class "bad-cast exception" extends bad-multiway-cast exception
	with field
		destination type : type;

/**
 * If the function {@param "accept"} accepts {@param "value"} as an argument
 * (based on its runtime type), then invoke {@param "accept"} with {@param
 * "value"}. Otherwise, raise a {@type "bad-cast exception"}.
 *
 * @method "Cast|cast_into_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "[⊥]→⊤"
 *        The function to invoke if {@param "value"} is an instance of the its
 *        parameter type.
 * @returns "any"
 * 		The result of {@param "accept"}.
 * @raises "bad-cast exception"
 *         If {@param "value"} is not an instance of {@param "accept"}'s
 *         parameter type.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast_into_" is
[
	value : any,
	accept : [⊥]→⊤
|
	Primitive CastInto (failureCode : natural number);
	Raise a bad-cast exception with
		source type ::= value's type,
		destination type ::= accept's type[1]
] : ⊤
styled by conditional styler;

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast_into_"
 * @restricts "any's type"
 * @restricts "([⊥]→⊤)'s type"
 */
Semantic restriction "Cast|cast_into_" is
[
	valueType : any's type,
	acceptType : ([⊥]→⊤)'s type
|
	targetType ::= acceptType[1];
	If valueType ⊆ targetType then
	[
		Reject parse, expected:
			format "a necessary cast expression, but “①” is a subtype of “②”"
			with valueType, acceptType[1]
	];
	If valueType ∩ targetType = ⊥ then
	[
		Reject parse, expected:
			format "an allowed cast expression, but “①” and “②” are disjoint"
			with valueType, acceptType[1]
	];
	acceptType's return type
];

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast_into_"
 * @restricts "any's type"
 * @restricts "([⊥]→⊤)'s type"
 * @restricts "([]→⊤)'s type"
 */
Semantic restriction "Cast|cast_into_else_" is
[
	valueType : any's type,
	acceptType : ([⊥]→⊤)'s type,
	elseType : ([]→⊤)'s type
|
	targetType ::= acceptType[1];
	If valueType ⊆ targetType then
	[
		Reject parse, expected:
			format "a necessary cast expression, but “①” is a subtype of “②”"
			with valueType, targetType
	];
	If valueType ∩ targetType = ⊥ then
	[
		Reject parse, expected:
			format "an allowed cast expression, but “①” and “②” are disjoint"
			with valueType, targetType
	];
	(acceptType's return type) ∪ (elseType's return type)
];

/**
 * Invoke the first function of {@param "caseTuple"} that accepts {@param
 * "value"}. If no such function is specified, then invoke {@param "else"}. If
 * {@param "else"} is not specified, then raise a {@type
 * "bad-multiway-cast exception"}.
 *
 * @method "Cast|cast_into«_‡,»«else_»"
 * @param "value" "any"
 *        An arbitrary value.
 * @param "caseTuple" "<[⊥]→⊤…|2..>"
 *        A tuple of arity-1 functions. The first of these able to accept
 *        {@param "value"} will be applied to it.
 * @param "else" "([]→⊤)?"
 *        An optional arity-0 function. If provided, then it will be invoked iff
 *        no function of {@param "caseTuple"} is able to accept {@param
 *        "value"}.
 * @returns "⊤"
 *          The result of whatever function is applied.
 * @raises "bad-multiway-cast exception"
 *         If no {@param "else"} function was supplied and no function of
 *         {@param "caseTuple"} was able to accept {@param "value"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast_into«_‡,»«else_»" is
[
	value : any,
	caseTuple : <[⊥]→⊤…|2..>,
	else : ([]→⊤)?
|
	block ::= [
		index : natural number
	|
		$body : [⊥]→⊤;
		pastEnd ::= |caseTuple| < index;
		Exit body
			with
				[
					v : any
				|
					(else[1] else
						[
							Raise a bad-multiway-cast exception with
								source type ::= v's type
						]
					)();
				]
			if pastEnd;
		typeMatches ::= value ∈ caseTuple[index]'s type[1];
		Exit body with caseTuple[index] if typeMatches;
		Restart body with <index + 1>
	](1);
	invoke block with <value>;
] : ⊤
styled by conditional styler;

/**
 * Strengthen the return type so the method may be used as a value-producing
 * expression. If any case is unnecessary or invalid, then reject the current
 * parse.
 *
 * @method "Cast|cast_into«_‡,»«else_»"
 * @restricts "any meta"
 * @restricts "<[⊥]→⊤…|2..>'s type"
 * @restricts "([]→⊤)?'s type"
 */
Semantic restriction "Cast|cast_into«_‡,»«else_»" is
[
	valueType : any meta,
	caseTuple : <[⊥]→⊤…|2..>'s type,
	else : ([]→⊤)?'s type
|
	acceptSize ::= relevant |caseTuple|;
	union : type := ⊥;
	For each index from 1 to acceptSize do
	[
		functionType ::= caseTuple[index];
		If valueType ⊆ functionType[1] then
		[
			Reject parse, expected:
				"a necessary cast expression, but "
				++ “valueType”
				++ " is a subtype of "
				++ “functionType[1]”
		];
		If valueType ∩ (functionType[1]) = ⊥ then
		[
			Reject parse, expected:
				"an allowed cast expression, but "
				++ “valueType”
				++ " is not a supertype of "
				++ “functionType[1]”
		];
		union := eject union ∪ functionType's return type;
	];
	If ⌊else⌋ = 1 then
	[
		union := eject union ∪ else[1]'s return type;
	];
	union
];

/**
 * If the function {@param "accept"} accepts each element of {@param "values"},
 * respectively, as an argument (based on its runtime type), then invoke {@param
 * "accept"} with {@param "values"}. Otherwise, raise a {@type "bad-cast
 * exception"}.
 *
 * @method "Cast|cast each of_into_"
 * @param "values" "tuple"
 *        A tuple.
 * @param "accept" "function"
 *        The function to invoke if each element of {@param "values"} is a
 *        subtype of the corresponding parameter type.
 * @returns "any"
 * 		The result of {@param "accept"}.
 * @raises "bad-cast exception"
 *         If any element of {@param "values"} is not an instance of the
 *         corresponding parameter type of {@param "accept"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast each of_into_" is
[
	values : tuple,
	accept : function
|
	valueTypes ::= map each t in values through [t's type];
	sig ::= accept's type's parameters' type;
	limit ::= ⌈sig⌉ ?→ natural number;
	paramTypes ::= map each t in 1 to limit through [sig[t]];
	Assert: |valueTypes| = |paramTypes|;
	zipped ::= valueTypes zip paramTypes;
	ok ::= each t of zipped satisfies [t[1] ⊆ t[2]];
	if ok then [invoke accept with values;]
	else
	[
		Raise a bad-cast exception with
			source type ::= valueTypes' type,
			destination type ::= paramTypes' type
	];
]
styled by conditional styler;

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast each of_into_"
 * @restricts "any's type"
 * @restricts "function's type"
 */
Semantic restriction "Cast|cast each of_into_" is
[
	valuesType : tuple meta,
	acceptType : function meta
|
	If ⌊valuesType⌋ ≠ ⌈valuesType⌉ then
	[
		Reject parse, expected:
			"number of inputs to be known exactly"
	];
	paramsType ::= acceptType's parameters' type;
	If ⌊paramsType⌋ ≠ ⌈paramsType⌉ then
	[
		Reject parse, expected:
			"function signature to be known exactly"
	];
	If ⌊valuesType⌋ ≠ ⌊paramsType⌋ then
	[
		Reject parse, expected:
			"number of inputs to match number of function parameters"
	];
	For each index from 1 to ⌊valuesType⌋ do
	[
		valueType ::= valuesType[index];
		paramType ::= paramsType[index];
		If valueType ⊆ paramType then
		[
			Reject parse, expected:
				format
					"a necessary cast expression, but “①” is a subtype of “②”"
				with valueType, paramType
		];
		If ¬paramType ⊆ valueType then
		[
			Reject parse, expected:
				format
					"an allowed cast expression, but “①” is not a supertype \
					\|of “②”"
				with valueType, paramType
		];
	];
	acceptType's return type
];

/**
 * If the function {@param "accept"} accepts each element of {@param "values"},
 * respectively, as an argument (based on its runtime type), then invoke {@param
 * "accept"} with {@param "values"}. Otherwise, apply {@param "reject"}.
 *
 * @method "Cast|cast each of_into_else_"
 * @param "values" "tuple"
 *        A tuple.
 * @param "accept" "function"
 *        The function to invoke if each element of {@param "values"} is a
 *        subtype of the corresponding parameter type.
 * @param "reject" "[]→⊤"
 *        The function to invoke if any element of {@param "values"} is not a
 *        subtype of the corresponding parameter type of {@param "accept"}.
 * @returns "any"
 *          The result of {@param "accept"} or {@param "reject"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast each of_into_else_" is
[
	values : tuple,
	accept : function,
	reject : []→⊤
|
	valueTypes ::= map each t in values through [t's type];
	sig ::= accept's type's parameters' type;
	limit ::= cast ⌈sig⌉ into [t : natural number | t];
	paramTypes ::= map each t in 1 to limit through [sig[t]];
	Assert: |valueTypes| = |paramTypes|;
	zipped ::= valueTypes zip paramTypes;
	ok ::= each t of zipped satisfies [t[1] ⊆ t[2]];
	if ok then [invoke accept with values;]
	else reject;
]
styled by conditional styler;

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast each of_into_else_"
 * @restricts "any's type"
 * @restricts "function's type"
 * @restricts "([]→⊤)'s type"
 */
Semantic restriction "Cast|cast each of_into_else_" is
[
	valuesType : tuple meta,
	acceptType : function meta,
	rejectType : ([]→⊤)'s type
|
	If ⌊valuesType⌋ ≠ ⌈valuesType⌉ then
	[
		Reject parse, expected:
			"number of inputs to be known exactly"
	];
	paramsType ::= acceptType's parameters' type;
	If ⌊paramsType⌋ ≠ ⌈paramsType⌉ then
	[
		Reject parse, expected:
			"function signature to be known exactly"
	];
	If ⌊valuesType⌋ ≠ ⌊paramsType⌋ then
	[
		Reject parse, expected:
			"number of inputs to match number of function parameters"
	];
	For each index from 1 to ⌊valuesType⌋ do
	[
		valueType ::= valuesType[index];
		paramType ::= paramsType[index];
		If valueType ⊆ paramType then
		[
			Reject parse, expected:
				format
					"a necessary cast expression, \
					\|but “①” is a subtype of “②”"
				with valueType, paramType
		];
		If ¬paramType ⊆ valueType then
		[
			Reject parse, expected:
				format
					"an allowed cast expression, but “①” is not \
					\|a supertype of “②”"
				with valueType, paramType
		];
	];
	acceptType's return type ∪ rejectType's return type
];

/**
 * Cast the value into the specified <em>statically evaluated</em> type.  If the
 * value at runtime does not comply with this type, return the result of
 * evaluating the zero-argument elseFunction.
 *
 * @method "_`?→_†else_"
 * @param "value" "any"
 *        The value whose type is to be strengthened.
 * @param "strongerType" "type"
 *        Evaluated at compile time to produce the strengthened type of this
 *        call.
 * @param "elseFunction" "[]→any"
 *        The function to invoke if the value is not of the specified stronger
 *        type.
 * @returns "any"
 *          Restricted to the strongerType, or the result of evaluating the
 *          elseFunction.
 * @category "Casts"
 */
Public method "_`?→_†else_" is
[
	value : any,
	strongerType : type,
	elseFunction : []→any
|
	if value ∈ strongerType then [value] else elseFunction
]
styled by conditional styler;

/**
 * Cast the value into the specified <em>statically evaluated</em> type.  If the
 * value at runtime does not comply with this type, return instead the result of
 * evaluating the zero-argument elseFunction.
 *
 * The value's static type and the provided type must have a non-⊥ intersection.
 * Additionally, the value's static type must not already be sufficiently strong
 * by being a subtype of the provided type.  The resulting type of the call site
 * is the union of the else function's return type and the intersection of the
 * value's static type and the provided strengthening type.  Note that this
 * means it is acceptable for the else function to produce a value that is not
 * in compliance with the specified strengthening type.  This has value when the
 * goal is to type check, strengthen, and alternatively run arbitrary code for
 * side-effect and return an otherwise out-of-band sentinel, which was
 * specifically excluded in the type check.
 *
 * @method "_`?→_†"
 * @restricts "valueType" "any's type"
 *        The static type of the expression whose type is to be strengthened.
 * @restricts "strongerMeta" "type's type"
 *        Evaluated at compile time to produce the strengthened type of this
 *        call.  The actual type is passed at runtime, but the metatype is what
 *        gets provided to this semantic restriction.
 * @restricts "elseFunctionType" "([]→any)'s type"
 *        What to do in case the value being tested does not comply with the
 *        strengthening type.  The result of running this function will be used
 *        as the call site's resulting value.
 */
Semantic restriction "_`?→_†else_" is
[
	valueType : any's type,
	strongerMeta : type's type,
	elseFunctionType : ([]→any)'s type
|
	strongerType ::= strongerMeta's instance;
	elseType ::= elseFunctionType's return type;
	If valueType ∩ strongerType = ⊥ then
	[
		Reject parse, expected:
			format
				"the cast's strengthened type to be related to the input, \
				\|instead of “①”, “②”"
			with valueType, strongerType
	];
	If valueType ⊆ strongerType then
	[
		Reject parse, expected:
			format
				"a necessary cast expression, but “①” is already a \
				\|subtype of “②”"
			with valueType, strongerType
	];
	(valueType ∩ strongerType) ∪ elseType
];
