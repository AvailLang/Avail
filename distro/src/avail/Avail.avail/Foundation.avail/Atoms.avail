/*
 * Atoms.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Atoms"
Versions
	"Avail-1.6.0"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Literals",
	"Early Logic",
	"Early Variables",
	"Phrases"
Extends
	"Collections" = ("_[_]else_")
Names
	"«Public»?_is a new⁇heritable«fiber-local»⁇atom",
	"«Public»?_is a|an new⁇field⁇atom"
Body

/**
 * Alias {@param "newName"} to {@param "oldName"}. This has the same effect
 * as import renaming, but behaves dynamically.
 *
 * @category "Primitives"
 * @method "Alias_to_"
 * @param "newName" "string"
 *        A {@type "string"} that represents the alias.
 * @param "oldName" "string"
 *        A {@type "string"} that represents the original name.
 * @returns "⊤"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "special-atom exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group-or-ellipsis exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "cannot-define-during-compilation exception"
 * @raises "loading-is-over exception"
 */
Method "Alias_to_" is
[
	newName : string,
	oldName : string
|
	Alias newName to atom for oldName;
];

/**
 * Answer the value associated with the property {@param "key"} of {@param
 * "anAtom"}. If no such property exists, then answer the result of applying
 * {@param "else"}.
 *
 * @method "_[_]else_"
 * @param "anAtom" "atom"
 *        An atom.
 * @param "key" "atom"
 *        The property key.
 * @param "else" "[]→any"
 *        The function to apply if {@param "key"} is not a property of {@param
 *        "anAtom"}.
 * @returns "any"
 *        Either the requested property value or the result of applying
 *          {@param "else"}.
 * @category "Atoms" "Queries"
 */
Method "_[_]else_" is
[
	anAtom : atom,
	key : atom,
	else : function accepting <> and returning any
|
	if key ∈ anAtom
	then [anAtom[key]]
	else else
] : any;

/**
 * Define a method named {@param "atomName"} that answers the eponymously
 * referenced atom in the module currently undergoing compilation. If this name
 * already refers to an atom in scope, i.e., either one 1) imported through the
 * "Uses" or "Extends" sections of the current module's header, 2) introduced by
 * the "Names" section of the current module's header, or 3) introduced by
 * dynamic publication, then answer this atom. Otherwise, privately introduce a
 * new atom.
 *
 * @method "«Public»?_is a|an new⁇field⁇atom"
 * @param "atomName" "string"
 *        The name by which this atom is known locally.
 * @returns "⊤"
 * @category "Atoms" "Declarations"
 */
Public method "«Public»?_is a|an new⁇field⁇atom" is
[
	isPublic : boolean,
	atomName : string
|
	theAtom ::= atom for atomName;
	Macro atomName is [`theAtom`(atomName) → literal phrase];
	Semantic restriction atomName is [theAtom's type];
] : ⊤;

/**
 * @method "«Public»?_is a|an new⁇field⁇atom"
 * @restricts "boolean's type"
 * @restricts "string's type"
 */
Semantic restriction "«Public»?_is a|an new⁇field⁇atom" is
[
	publicType : boolean's type,
	nameType : string's type
|
	public ::= publicType's instance;
	If public ∧ |nameType| ≠ 1 then
	[
		Reject parse, expected:
			"public modifier to be provided only when the atom name \
			\|is statically known"
	];
	If |nameType| = 1 then
	[
		name ::= nameType's instance;
		If |message name's parameters| ≠ 0 then
		[
			t : tuple := concatenate <
				"\"",
				name,
				"\" not to specify any parameters">;
			s : string;
			s ?= t;
			Reject parse, expected: s
		];
		If public ∧ ¬current module has public name name then
		[
			t : tuple := concatenate <
				"\"",
				name,
				"\" to be included in the module's \"Names\" section">;
			s : string;
			s ?= t;
			Reject parse, expected: s
		];
	];
	⊤
];

/**
 * Define a method named {@param "atomName"} that answers a new atom suitable
 * for use as a heritable fiber environment key.
 *
 * @method "«Public»?_is a new⁇heritable«fiber-local»⁇atom"
 * @param "atomName" "string"
 *        The atom's name, provided primarily for debugging purposes.
 * @returns "⊤"
 * @category "Atoms" "Declarations"
 */
Public method "«Public»?_is a new⁇heritable«fiber-local»⁇atom" is
[
	isPublic : boolean,
	atomName : string
|
	theAtom ::= new heritable fiber-local atom named atomName;
	Macro atomName is [`theAtom`(atomName) → literal phrase];
	Semantic restriction atomName is [theAtom's type];
] : ⊤;

/**
 * @method "«Public»?_is a new⁇heritable«fiber-local»⁇atom"
 * @restricts "boolean's type"
 * @restricts "string's type"
 */
Semantic restriction "«Public»?_is a new⁇heritable«fiber-local»⁇atom" is
[
	publicType : boolean's type,
	nameType : string's type
|
	public ::= publicType's instance;
	If public ∧ |nameType| ≠ 1 then
	[
		Reject parse, expected:
			"public modifier to be provided only when the atom name \
			\|is statically known"
	];
	If |nameType| = 1 then
	[
		name ::= nameType's instance;
		If |message name's parameters| ≠ 0 then
		[
			t : tuple := concatenate <
				"\"",
				name,
				"\" not to specify any parameters">;
			s : string;
			s ?= t;
			Reject parse, expected: s
		];
		If public ∧ ¬current module has public name name then
		[
			t : tuple := concatenate <
				"\"",
				name,
				"\" to be included in the module's \"Names\" section">;
			s : string;
			s ?= t;
			Reject parse, expected: s
		];
	];
	⊤
];
