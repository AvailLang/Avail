/*
 * Variables.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Variables"
Versions
	"1.4.0"
Extends
	"Early Variables"
Uses
	"Atoms",
	"Bootstrap",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Logic",
	"Early Macro Support",
	"Early Math",
	"Early Variables",
	"Enumeration Support",
	"Literals",
	"Phrases"
Names
	/* Dynamic variable creation. */
	"(↓new`↑_:=_)",
	"(↓new`↑_`?=_)",

	/* Increment/decrement. */
	"_↑++", "_++",
	"++_↑", "++_",
	"(_↑++)", "(_++)",
	"(++_↑)", "(++_)",
	"_↑--", "_--",
	"--_↑", "--_",
	"(_↑--)", "(_--)",
	"(--_↑)", "(--_)",

	/* Variable assignment. */
	"_is unassigned",
	"_↑is assigned", "_is assigned",
	"↓_else_",

	/* Destructuring tuple assignment. */
	"«…‡,»::=_;"
Body

Semantic restriction "_'s⁇read type" is
[
	varMeta : variable's type's type
|
	varMeta's instance's read type's type
];

/**
 * Although we can't restrict the type precisely because of the invariant
 * nature of this type relation and the conservativeness of metacovariance,
 * we can still restrict just the read type of the result.  This is sometimes
 * enough.
 *
 * @method "`↑_"
 * @restricts "any meta's type"
 */
Semantic restriction "`↑_" is
[
	contentMeta : any meta's type
|
	readType ::= contentMeta's instance;
	(read readType/write ⊥)'s type
] : variable meta's type;

/**
 * Although we can't restrict the type precisely because of the invariant
 * nature of this type relation and the conservativeness of metacovariance,
 * we can still restrict just the read type of the result.  This is sometimes
 * enough.
 *
 * @method "read_/write_"
 * @restricts "any meta's type"
 * @restricts "any meta's type"
 */
Semantic restriction "read_/write_" is
[
	readMeta : any meta's type,
	writeMeta : any meta's type
|
	readType ::= readMeta's instance;
	/* Ignore the writeType, since we can't ensure contravariance here. */
	(read readType/write ⊥)'s type
] : variable meta's type;

/**
 * @method "↓_"
 * @restricts "variable meta"
 */
Semantic restriction "↓_" is
[
	varType : variable meta
|
	varType's read type
];

Alias "_is unassigned" to "_↑is unassigned";

/**
 * Does the specified variable contain a value?
 *
 * @method "_↑is assigned"
 * @alias "_is assigned"
 * @category "Variables"
 * @param "var" "variable"
 * @returns "boolean"
 *    {@method "true"} if the variable contains a value, {@method "false"}
 *    otherwise.
 */
Public method "_↑is assigned" is [var : variable | ¬var is unassigned];
Alias "_is assigned" to "_↑is assigned";

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 *
 * @method "Swap_and_"
 * @restricts "variable meta"
 * @restricts "variable meta"
 */
Semantic restriction "Swap_↑and_↑" is
[
	typeA : variable meta,
	typeB : variable meta
|
	if typeA's read type ⊆ typeB's write type
		∧ typeB's read type ⊆ typeB's write type
	then [⊤]
	else
	[
		Reject parse, expected:
			"variable's read/write types to be cross-compatible"
	]
];


/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new`↑_:=_)"
 * @category "Variables"
 * @param "containmentType" "any meta"
 *         The containment type.
 * @param "initialValue" "any"
 *        The initial value.
 * @returns "variable"
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new`↑_:=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	var ?= initialValue;
	var
] : variable;

/**
 * Reject the current parse if the variable type does not accept the initial
 * value.
 *
 * @method "(↓new`↑_:=_)"
 * @restricts "any meta's type"
 * @restricts "any meta"
 */
Semantic restriction "(↓new`↑_:=_)" is
[
	containmentMeta : any meta's type,
	valueType : any meta
|
	If ¬valueType's type ⊆ containmentMeta then
	[
		messageTuple ::= concatenate <
			"containment type (",
			“containmentMeta”,
			" to support initial value (",
			“valueType”,
			")">;
		Reject parse, expected: cast messageTuple into [t : string | t]
	];
	⊤
];

/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new`↑_`?=_)"
 * @category "Variables"
 * @param "containmentType" "any meta"
 * @param "initialValue" "any"
 * @returns "variable"
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new`↑_`?=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	var ?= initialValue;
	var
] : variable;

Private method "increment/decrement semantic restriction" is
[
	[
		varType : (read number/write ⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		⊤
	]
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 *
 * @method "_↑++"
 * @alias "_++"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_↑++" is
[
	var : read number/write ⊥
|
	var ?= eject var + 1;
] : ⊤;

Alias "_++" to "_↑++";

/**
 * The autoincrement statement should accept only numeric variables.
 *
 * @method "_↑++"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "_↑++" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, increment the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 *
 * @method "(_↑++)"
 * @alias "(_++)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the increment.
 */
Public method "(_↑++)" is
[
	var : read number/write ⊥
|
	value ::= eject var;
	var ?= value + 1;
	value
] : ⊤;

Alias "(_++)" to "(_↑++)";

/**
 * Since the increment happens after the value is queried, then simply answer
 * the read type of the variable.
 *
 * @method "(_↑++)"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "(_↑++)" is
[
	varType : (read number/write ⊥)'s type
|
	If ¬varType's write type ⊆ number then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	varType's read type
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 *
 * @method "++_↑"
 * @alias "++_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "++_↑" is
[
	var : read number/write ⊥
|
	var ?= eject var + 1;
] : ⊤;

Alias "++_" to "++_↑";

/**
 * The autoincrement statement should accept only numeric variables.
 *
 * @method "++_↑"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "++_↑" is increment/decrement semantic restriction;

/**
 * Increment the specified value and answer its new value.
 *
 * @method "(++_↑)"
 * @alias "(++_)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument after the increment.
 */
Public method "(++_↑)" is
[
	var : read number/write ⊥
|
	var ?= eject var + 1;
	↓var
];

Alias "(++_)" to "(++_↑)";

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by one.
 *
 * @method "(++_↑)"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "(++_↑)" is
[
	varType : (read number/write ⊥)'s type
|
	If ¬varType's write type ⊆ number then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [t : extended integer meta | t];
		lower ::= ⎣readRange⎦ + 1;
		upper ::= ⎡readRange⎤ + 1;
		integer range
			from lower (inclusive = ⎣readRange⎦ is inclusive)
			to upper (inclusive = ⎡readRange⎤ is inclusive)
	]
	else
	[
		readType
	]
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 *
 * @method "_↑--"
 * @alias "_--"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_↑--" is
[
	var : read number/write ⊥
|
	var ?= eject var - 1;
] : ⊤;

Alias "_--" to "_↑--";

/**
 * The auto-decrement statement should accept only numeric variables.
 *
 * @method "_↑--"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "_↑--" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, decrement the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 *
 * @method "(_↑--)"
 * @alias "(_--)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the decrement.
 */
Public method "(_↑--)" is
[
	var : read number/write ⊥
|
	value ::= eject var;
	var ?= value - 1;
	value
];

Alias "(_--)" to "(_↑--)";

/**
 * Since the decrement happens after the value is queried, then simply answer
 * the read type of the variable.
 *
 * @method "(_↑--)"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "(_↑--)" is
[
	varType : (read number/write ⊥)'s type
|
	If ¬varType's write type ⊆ number then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	varType's read type
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 *
 * @method "--_↑"
 * @alias "--_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "--_↑" is
[
	var : read number/write ⊥
|
	var ?= eject var - 1;
] : ⊤;

Alias "--_" to "--_↑";

/**
 * The autodecrement statement should accept only numeric variables.
 *
 * @method "--_↑"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "--_↑" is increment/decrement semantic restriction;

/**
 * Decrement the specified value and answer its new value.
 *
 * @method "(--_↑)"
 * @alias "(--_)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "read number/write ⊥"
 *        A numeric variable.
 * @returns "number"
 *           The value of the argument after the decrement.
 */
Public method "(--_↑)" is
[
	var : read number/write ⊥
|
	var ?= eject var - 1;
	↓var
];

Alias "(--_)" to "(--_↑)";

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by negative
 * one.
 *
 * @method "(--_↑)"
 * @restricts "(read number/write ⊥)'s type"
 */
Semantic restriction "(--_↑)" is
[
	varType : (read number/write ⊥)'s type
|
	If ¬varType's write type ⊆ number then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [t : extended integer meta | t];
		lower ::= ⎣readRange⎦ - 1;
		upper ::= ⎡readRange⎤ - 1;
		integer range
			from lower (inclusive = ⎣readRange⎦ is inclusive)
			to upper (inclusive = ⎡readRange⎤ is inclusive)
	]
	else
	[
		readType
	]
];

/* Disallow the variable increment/decrement operations from appearing as the
 * argument to parentheses.
 */
Invoke
[
	parens ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	forbid ::=
		cast
			<
				"_↑++", "++_↑", "(_↑++)", "(++_↑)",
				"_↑--", "--_↑", "(_↑--)", "(--_↑)",
				"_++", "++_", "(_++)", "(++_)",
				"_--", "--_", "(_--)", "(--_)"
			>→set
		into [ t : {string|whole number} | t ];
	Grammatical restriction parens is <forbid>;
]
with <>;

/**
 * If {@param "var"} is assigned, then answer its contents. Otherwise, apply
 * {@param "else"} and answer its result.
 *
 * @method "↓_else_"
 * @category "Variables"
 * @param "var" "variable"
 *        A {@type "variable"}.
 * @param "else" "[]→any"
 *        A function that is applied only if {@param "var"} is unassigned.
 * @returns "any"
 *          Either the content of {@param "var"} or the result of applying
 *          {@param "else"}.
 */
Public method "↓_else_" is
[
	var : variable,
	else : function accepting <> and returning any
|
	if var is assigned then [↓var] else else
] : any;

/**
 * @method "↓_else_"
 * @restricts "variable meta"
 * @restricts "(function accepting <> and returning any)'s type"
 */
Semantic restriction "↓_else_" is
[
	varType : variable meta,
	else : (function accepting <> and returning any)'s type
|
	varType's read type ∪ else's return type
];

/**
 * Destructure a {@type "tuple"} into a {@type "sequence"} of {@method
 * "`«_::=_`»" constant bindings} that correspond to the first N elements of the
 * tuple, where N is the size of the {@type "tuple"} denoted by {@param
 * "namesPhrase"}.
 *
 * @macro "«…‡,»::=_;"
 * @param "namesPhrase" "list phrase ⇒ <<>, token…|[2..∞)>"
 *        A {@type "list phrase"} that evaluates to the {@type "tuple"} of
 *        {@type "token"}s corresponding to the names of the local constants
 *        into which {@param "tuplePhrase"} will be destructured.
 * @param "tuplePhrase" "expression phrase ⇒ tuple"
 *        An {@type "expression phrase"} that yields to {@type "tuple"} to be
 *        destructured. This phrase is evaluated only once (not once per
 *        binding).
 * @returns "sequence phrase"
 * @category "Variables"
 */
Public macro "«…‡,»::=_;" is
[
	namesPhrase : list phrase ⇒ <<>, token…|[2..∞)>,
	tuplePhrase : expression phrase ⇒ tuple
|
	namePhrases ::= namesPhrase's expressions;
	nameTokens : tuple := <>;
	From 1 to |namePhrases| do
	[
		index : natural number
	|
		namePhrase ::=
			cast namePhrases[index] into [t : literal phrase ⇒ token | t];
		nameToken ::= namePhrase's token;
		name ::= nameToken's lexeme;
		Require: "local constant" named name does not shadow;
		nameTokens := concatenate <eject nameTokens, <nameToken>>;
		true
	];
	If |nameTokens| ≠ |nameTokens→set| then
	[
		Reject parse, expected:
			"local constants in destructuring tuple binding to \
			\|have distinct names"
	];
	tupleType ::= tuplePhrase's semantic type;
	If |nameTokens| > ⎣tupleType⎦ then
	[
		Reject parse, expected:
			"local constants in destructuring tuple binding not to exceed the
			\|minimum size of the source tuple"
	];
	strongNameTokens ::=
		cast nameTokens into [t : <<>, token…|natural number> | t];
	/* Give the temporary tuple binding an untypable name, so that the
	 * programmer can't refer to it. It doesn't matter if subsequent operations
	 * shadow it.
	 */
	tupleBinding ::= «`"temp tuple"`("temp tuple") ::= tuplePhrase»;
	bindings : tuple := <tupleBinding>;
	From 1 to |strongNameTokens| do
	[
		index : natural number
	|
		nameToken ::= strongNameTokens[index];
		at ::= restricted send $"_[_]"
			with «<«↓tupleBinding», ‘index’>»
			: tupleType[index];
		binding ::= «nameToken ::= at»;
		bindings := concatenate <eject bindings, <binding>>;
		true
	];
	strongBindings ::=
		cast bindings into [t : <<>, declaration phrase…|natural number> | t];
	/* Now add them all to the scope. */
	From 2 to |strongBindings| do
	[
		index : natural number
	|
		declaration ::= strongBindings[index];
		name ::= declaration's token's lexeme;
		scope map := cast scope map + name→declaration
			into [t : {nonempty string → declaration phrase|whole number} | t];
		true
	];
	seq «strongBindings»
];

/**
 * Destructure a {@type "tuple meta" tuple type} into a {@type "sequence"} of
 * {@method "`«_::=_`»" constant bindings} that correspond to the first N
 * elements of the tuple type, where N is the size of the {@type "tuple"}
 * denoted by {@param "namesPhrase"}.
 *
 * @macro "«…‡,»::=_;"
 * @param "namesPhrase" "list phrase ⇒ <<>, token…|[2..∞)>"
 *        A {@type "list phrase"} that evaluates to the {@type "tuple"} of
 *        {@type "token"}s corresponding to the names of the local constants
 *        into which {@param "tupleTypePhrase"} will be destructured.
 * @param "tupleTypePhrase" "expression phrase ⇒ tuple"
 *        An {@type "expression phrase"} that yields to {@type "tuple"} to be
 *        destructured. This phrase is evaluated only once (not once per
 *        binding).
 * @returns "sequence phrase"
 */
Public macro "«…‡,»::=_;" is
[
	namesPhrase : list phrase ⇒ <<>, token…|[2..∞)>,
	tupleTypePhrase : expression phrase ⇒ tuple meta
|
	namePhrases ::= namesPhrase's expressions;
	nameTokens : tuple := <>;
	From 1 to |namePhrases| do
	[
		index : natural number
	|
		namePhrase ::=
			cast namePhrases[index] into [t : literal phrase ⇒ token | t];
		nameToken ::= namePhrase's token;
		name ::= nameToken's lexeme;
		Require: "local constant" named name does not shadow;
		nameTokens := concatenate <eject nameTokens, <nameToken>>;
		true
	];
	If |nameTokens| ≠ |nameTokens→set| then
	[
		Reject parse, expected:
			"local constants in destructuring tuple binding to \
			\|have distinct names"
	];
	tupleType ::= tupleTypePhrase's semantic type's instance;
	If |nameTokens| > ⎣tupleType⎦ then
	[
		Reject parse, expected:
			"local constants in destructuring tuple type binding not to exceed \"
			\|the minimum size of the source tuple"
	];
	strongNameTokens ::=
		cast nameTokens into [t : <<>, token…|natural number> | t];
	/* Give the temporary tuple binding an untypeable name, so that the
	 * programmer can't refer to it. It doesn't matter if subsequent operations
	 * shadow it.
	 */
	tupleTypeBinding ::=
		«`"temp tuple type"`("temp tuple type") ::= tupleTypePhrase»;
	bindings : tuple := <tupleTypeBinding>;
	From 1 to |strongNameTokens| do
	[
		index : natural number
	|
		nameToken ::= strongNameTokens[index];
		at ::= restricted send $"_[_]"
			with «<«↓tupleTypeBinding», ‘index’>»
			: (tupleType[index]'s type);
		binding ::= «nameToken ::= at»;
		bindings := concatenate <eject bindings, <binding>>;
		true
	];
	strongBindings ::=
		cast bindings into [t : <<>, declaration phrase…|natural number> | t];
	/* Now add them all to the scope. */
	From 2 to |strongBindings| do
	[
		index : natural number
	|
		declaration ::= strongBindings[index];
		name ::= declaration's token's lexeme;
		scope map := cast scope map + name→declaration
			into [t : {nonempty string → declaration phrase|whole number} | t];
		true
	];
	seq «strongBindings»
];

/* This is always invalid, so we might as well forbid it early. */
Grammatical restriction {"`↑_↑"} is <{"`↑_↑"}>;

/*
 * Don't allow explicit quoting to compose with unquoted operators.
 */

Grammatical restriction
{
	"Clear_↑",
	"eject_↑",
	"_↑++",
	"++_↑",
	"(_↑++)",
	"(++_↑)",
	"_↑--",
	"--_↑",
	"(_↑--)",
	"(--_↑)",
	"_↑is assigned",
	"_↑is unassigned",

	"Clear_",
	"eject_",
	"_++",
	"++_",
	"(_++)",
	"(++_)",
	"_--",
	"--_",
	"(_--)",
	"(--_)",
	"_is assigned",
	"_is unassigned"
} is <{"`↑_↑"}>;

Grammatical restriction {"Swap_↑and_↑", "Swap_and_"} is <{"`↑_↑"}, {"`↑_↑"}>;
Grammatical restriction
{
	"atomically read_↑and store_",
	"atomically read_↑and add_",
	"_↑`?=_",
	"_↑`?=_'s⁇initialization",

	"atomically read_and store_",
	"atomically read_and add_",
	"_`?=_",
	"_`?=_'s⁇initialization"
} is <{"`↑_↑"}, ∅>;

Grammatical restriction
{
	"atomically compare_↑to_and,⁇if equal,⁇store_",
	"atomically compare_to_and,⁇if equal,⁇store_"
}
is <{"`↑_↑"}, ∅, ∅>;
