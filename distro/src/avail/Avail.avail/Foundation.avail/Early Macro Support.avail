/*
 * Early Macro Support.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Macro Support"
Versions
	"1.1.0 DEV 2019-05-21"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Literals",
	"Very Early Definers"
Names
	/* Access to the parse map. */
	"parse map",
	"parse map:=_",

	/* Access to the bootstrap scope map. */
	"Pop scope",
	"Push scope",
	"scope map",
	"scope map:=_",

	/* Access to the constituent tokens. */
	"constituent tokens",
	"static tokens",

	/* Shadowing. */
	"Require:_named_does not shadow",

	/* Private for "Macro Support". */
	"private concatenate_"
Body

/**
 * Answer the current parse map. This is available only to macro definitions and
 * their prefix functions.
 *
 * @method "parse map"
 * @returns "{atom→any|}"
 * @category "Macros"
 */
Method "parse map" is
[
	current fiber[parse map key]
];

Semantic restriction "parse map" is
[
	{atom → any | whole number}
];

/**
 * Set the current parse map. This is available only to macro definitions and
 * their prefix functions.
 *
 * @method "parse map:=_"
 * @param "aMap" "{atom→any|}"
 * @returns "⊤"
 * @category "Macros"
 */
Method "parse map:=_" is
[
	aMap : {atom → any | whole number}
|
	current fiber[parse map key] := aMap;
];

/**
 * Answer the current scope map. This is available only to macro definitions and
 * their prefix functions.
 *
 * @method "scope map"
 * @returns "{nonempty string→declaration phrase|}"
 * @category "Macros"
 */
Method "scope map" is
[
	parse map[scope map key]
];

Semantic restriction "scope map" is
[
	{nonempty string → declaration phrase | whole number}
];

/**
 * Set the current scope map. This is available only to macro definitions and
 * their prefix functions.
 *
 * @method "scope map:=_"
 * @param "aMap" "{atom→any|}"
 * @returns "⊤"
 * @category "Macros"
 */
Method "scope map:=_" is
[
	aMap : {nonempty string → declaration phrase | whole number}
|
	parseMap ::= parse map + scope map key → aMap;
	current fiber[parse map key] := parseMap;
];

Method "_strengthened to tuple" is
[
	value : any
|
	value
];

Semantic restriction "_strengthened to tuple" is
[
	value : any's type
|
	tuple
];

Method "_strengthened to tuple of tuple" is
[
	value : any
|
	value
];

Semantic restriction "_strengthened to tuple of tuple" is
[
	value : any's type
|
	<<>, tuple… | whole number>
];

Method "_strengthened to whole number" is
[
	value : any
|
	value
];

Semantic restriction "_strengthened to whole number" is
[
	value : any's type
|
	whole number
];

/**
 * Push the current scope map onto the scope stack. This is available only to
 * macro definitions and their prefix functions.
 *
 * @method "Push scope"
 * @returns "⊤"
 * @category "Macros"
 */
Method "Push scope" is
[
	newStack : tuple;
	If scope stack key ∈ parse map then
	[
		oldStack ::= parse map[scope stack key] strengthened to tuple;
		pair ::= <oldStack, <scope map>> strengthened to tuple of tuple;
		newStack := concatenate pair;
	]
	else
	[
		newStack := <scope map>;
	];
	parseMap ::= parse map + scope stack key → newStack;
	current fiber[parse map key] := parseMap;
];

/**
 * Pop a scope from the scope stack, making it be the current scope map. This is
 * available only to macro definitions and their prefix functions.
 *
 * @method "Pop scope"
 * @returns "⊤"
 * @category "Macros"
 */
Method "Pop scope" is
[
	oldStack ::= parse map[scope stack key] strengthened to tuple;
	limit ::= |oldStack| - 1 strengthened to whole number;
	newStack ::= oldStack[1..limit];
	parseMap ::= parse map + scope stack key → newStack;
	current fiber[parse map key] := parseMap;
];

/**
 * Answer the constituent tokens that comprise message parts of the current
 * macro send. This is available only to macro definitions and their prefix
 * functions.
 *
 * @method "static tokens"
 * @returns "token+"
 * @category "Macros"
 */
Method "static tokens" is
[
	parse map[static tokens key]
];

Semantic restriction "static tokens" is
[
	<<>, token… | natural number>
];

/**
 * Answer all tokens that comprise the current macro send. This is available
 * only to macro definitions and their prefix functions.
 *
 * @method "constituent tokens"
 * @returns "token+"
 * @category "Macros"
 */
Method "constituent tokens" is
[
	parse map[all tokens key]
];

Semantic restriction "constituent tokens" is
[
	<<>, token… | natural number>
];

Method "private concatenate_" is
[
	tupleOfTuples : tuple of tuple
|
	Primitive ConcatenateTuples;
] : tuple;

Semantic restriction "private concatenate_" is
[
	tupleOfTuples : tuple of tuple's type
|
	nonempty string
];

/**
 * Require that the proposed variable name does not shadow another local name.
 * Reject the current parse if it does. This method is intended to be invoked
 * only as a consequence of running a macro.
 *
 * @method "Require:_named_does not shadow"
 * @param "varRole" "nonempty string"
 *        A short description of the role of the proposed variable, e.g.,
 *        "constant", "loop variable", etc.
 * @param "varName" "nonempty string"
 *        The proposed name of the new local.
 * @returns "⊤"
 * @category "Macros"
 */
Method "Require:_named_does not shadow" is
[
	varRole : nonempty string,
	varName : nonempty string
|
	If varName ∈ scope map then
	[
		Reject parse, expected:
			private concatenate
			<
				varRole,
				" ",
				varName,
				" to have a name that doesn't shadow another local declaration"
			>
	];
] : ⊤;
