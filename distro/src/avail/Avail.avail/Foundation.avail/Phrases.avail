/*
 * Phrases.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Phrases"
Versions
	"Avail-1.6.0"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Enumeration Support",
	"Early Literals",
	"Early Macro Support",
	"Early Variables"
Names
	"Evaluate|evaluate_",
	"this token:…",
	"_compiled",
	"‘_’",
	"``_``(_)",
	"``_``",
	"`«<«_‡,»>`»",
	"`«[_`|_]:_`»",
	"`«[_]:_`»",
	"⟦§_!⟧",
	"⦊§_⦉",
	"_token",
	"_'s⁇classifier"
Body

/**
 * Make "_'s type" bind more tightly than phrase type construction.
 *
 * @method "_⇒_"
 * @returns "⊤"
 */
Invoke
[
	exclusions ::= cast {"_'s⁇type"} into [t : {string|natural number} | t];
	Grammatical restriction "_⇒_" is <∅, exclusions>;
]
with <>;

Semantic restriction "_'s⁇value" is
[
	tokenType : literal token's type
|
	tokenType's value type
];

/**
 * Construct and answer a literal token without specifying positional
 * information.
 *
 * @method "``_``(_)"
 * @param "value" "any"
 *        Any value, irrespective of whether an Avail compiler would be able to
 *        directly construct such a literal.
 * @param "lexeme" "string"
 *        The lexical representation of the literal token.
 * @returns "literal token"
 *        A literal token that embeds the argument.
 * @category "Phrases" "Constructors"
 */
Public method "``_``(_)" is
[
	value : any,
	lexeme : string
|
	`value` (lexeme) @ 0:0
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 *
 * @method "``_``(_)"
 * @restricts "any meta"
 */
Semantic restriction "``_``(_)" is
[
	value : any meta,
	lexeme : string's type
|
	literal token ⇒ value
];

/**
 * Construct and answer a (synthetic) literal token whose artificial source text
 * is the description of the value.
 *
 * @method "``_``"
 * @param "value" "any"
 *        Any value, irrespective of whether an Avail compiler would be able to
 *        construct such a literal.
 * @returns "literal token"
 *        A literal token that embeds the argument.
 * @category "Phrases" "Constructors"
 */
Public method "``_``" is
[
	value : any
|
	`value` (“value”)
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 *
 * @method "``_``"
 * @restricts "any meta"
 */
Semantic restriction "``_``" is
[
	value : any meta
|
	literal token ⇒ value
];

/**
 * Answer a {@type "token"} {@type "type"} for the specified {@param
 * "classifier"}.
 *
 * @method "_token"
 * @param "classifier"
 *        "enumeration of {end of file, keyword, operator, comment, whitespace}"
 *        A {@type "atom" classifier} that specifies the lexical role of the
 *        {@type "token"}s that are instances of the requested type.
 * @returns "token's type"
 *          The requested {@type "token"} {@type "type"}.
 */
Public method "_token" is
[
	classifier : enumeration of
		{end of file, keyword, operator, comment, whitespace}
|
	Primitive CreateTokenType;
] : token's type;

/**
 * Strengthen token building to covary with the classifier.
 *
 * @method "_(_)@_:_"
 * @restricts "classifier's type"
 * @restricts "lexeme's type"
 * @restricts "position's type"
 * @restricts "line's type"
 */
Semantic restriction "_(_)@_:_" is
[
	classifier : enumeration of
		{end of file, keyword, operator, comment, whitespace}'s type,
	lexeme : string's type,
	position : whole number's type,
	line : whole number's type
|
	if |classifier| = 1 then
	[
		classifier's instance token
	]
	else [⊤]
];

/**
 * Answer the {@type "atom"} that classifies the specified {@type "token"}.
 *
 * @method "_'s⁇classifier"
 * @param "aToken" "token"
 * @returns "enumeration of {end of file, keyword, literal, operator, comment, whitespace}"
 */
Public method "_'s⁇classifier" is
[
	aToken : token
|
	Primitive TokenClassifier;
] : enumeration of {end of file, keyword, literal, operator, comment, whitespace};

/**
 * Strengthen literal <em>phrase</em> building to covary with the type of object
 * inside the passed literal token.
 *
 * @method "_→literal phrase"
 * @restricts "literal token's type"
 */
Semantic restriction "_→literal phrase" is
[
	aLiteralToken : literal token's type
|
	literal phrase ⇒ (aLiteralToken's value type)
];

/**
 * Answer a {@type "literal phrase"} for the specified value.
 *
 * @method "‘_’"
 * @param "value" "any"
 * @returns "literal phrase ⇒ any"
 * @category "Phrases"
 */
Public method "‘_’" is
[
	value : any
|
	`value` (“value”)→literal phrase
];

Semantic restriction "‘_’" is
[
	valueType : any's type
|
	literal phrase ⇒ valueType
];

/**
 * Construct and answer a variable use expression from the specified
 * declaration.
 *
 * @method "`«↓_`»"
 * @param "decl" "declaration phrase"
 *        The declaration that introduced the referenced entity.
 * @returns "variable use phrase"
 *          A variable use expression.
 * @category "Phrases" "Constructors"
 */
Method "`«↓_`»" is
[
	decl : declaration phrase
|
	«↓decl» (`decl's token's lexeme`)
] : variable use phrase;

/**
 * Construct and answer a list phrase from the specified tuple.
 *
 * @method "`«<«_‡,»>`»"
 * @param "aTuple" "<<>, expression phrase⇒any…|whole number>"
 *        A tuple of expressions.
 * @returns "list phrase"
 *          The requested list.
 * @category "Phrases" "Constructors"
 */
Public method "`«<«_‡,»>`»" is
[
	aTuple : <<>, expression phrase⇒any…|whole number>
|
	aTuple → list phrase
] : list phrase;

Semantic restriction "`«<«_‡,»>`»" is
[
	tTuple : <<>, expression phrase⇒any…|whole number>'s type
|
	leadingTypesSize ::= |tTuple's leading types|;
	defaultTypeIndex ::= leadingTypesSize + 1;
	semanticTypes : tuple of any meta := <>;
	From 1 to defaultTypeIndex do
	[
		i : natural number
	|
		phraseType ::= tTuple[i] ?→ phrase meta;
		semanticType ::= phraseType's semantic type;
		semanticTypes :=
			concatenate <semanticTypes, <semanticType>> ?→ tuple of any meta;
		true
	];
	defaultType ::= semanticTypes[defaultTypeIndex] ?→ any meta;
	leadingSemanticTypes ::=
		semanticTypes[1..leadingTypesSize] ?→ tuple of any meta;
	list phrase ⇒ <leadingSemanticTypes, defaultType… | ||tTuple||>
];

/**
 * Construct and answer a block from the specified argument declarations,
 * statements, and return type.
 *
 * @method "`«[_`|_]:_`»"
 * @param "args" "<<>, argument phrase…|whole number>"
 *        A tuple of argument declarations.
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>,
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		args
	|
		Primitive ""
		statements
	] : returnType ^ ∅»
] : block phrase;

/**
 * @method "`«[_`|_]:_`»"
 * @restricts "<<>, argument phrase…|whole number>'s type"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>'s type,
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase ⇒ ([…]→returnType's instance)
];

/**
 * Construct and answer an arity-0 block from the specified statements and
 * return type.
 *
 * @method "`«[_]:_`»"
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		<>
	|
		Primitive ""
		statements
	] : returnType ^ ∅»
];

/**
 * @method "`«[_]:_`»"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase ⇒ ([…]→returnType's instance)
];

/**
 * @method "send_with_:_"
 * @restricts "atom's type"
 * @restricts "list phrase's type"
 * @restricts "type's type"
 */
Semantic restriction "send_with_:_" is
[
	aMethod : atom's type,
	arguments : list phrase's type,
	returnType : type's type
|
	/*
	 * Phrases have identity, so it isn't safe to strengthen more than this.
	 */
	send phrase ⇒ returnType's instance
];

Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type
|
	expressionType's semantic type's type
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrase's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type
|
	if |blockType| = 1 then
	[
		if blockType's instance ∈ type then [function meta]
		else [blockType's instance's semantic type]
	]
	else
	[
		function meta
	]
];

/**
 * An expression phrase's type's semantic type is always a value's type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "expression phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type's type
|
	any meta
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type's type
|
	function meta
];

/**
 * A list type's semantic type is always a tuple of values.
 *
 * @method "_'s⁇semantic type"
 * @restricts "list phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	listType : list phrase's type's type
|
	tuple meta
];

/**
 * The function type of a function generated from a block is the same as the
 * block's semantic type.
 *
 * @method "_→function"
 * @restricts "block phrase's type"
 */
Semantic restriction "_→function" is
[
	blockType : block phrase's type
|
	blockType's semantic type
];

/**
 * Answer the actual token that occurs in the source text at the indicated
 * position.
 *
 * @method "this token:…"
 * @param "t" "token"
 *        A token actually occurring at the invocation site in the source.
 * @returns "token"
 * @category "Phrases" "Tokens"
 */
Public method "this token:…" is
[
	t : token
|
	t
] : token;

Semantic restriction "_'s⁇expressions" is
[
	listType : list phrase's type
|
	semanticType ::= listType's semantic type;
	upper ::= |semanticType's leading types| + 1;
	leadingTypes : tuple := <>;
	From 1 to upper do
	[
		index : natural number
	|
		leadingTypes := concatenate
			<leadingTypes, <expression phrase ⇒ semanticType[index]>>;
		true
	];
	strongLeadingTypes ::=
		cast leadingTypes
		into [t : <<>, any meta… | whole number> | t];
	defaultType ::= strongLeadingTypes[upper] ?→ any meta;
	<strongLeadingTypes, defaultType… | ||semanticType||>
];

Semantic restriction "_'s⁇token" is
[
	literalType : literal phrase's type
|
	literal token ⇒ (literalType's semantic type)
];

/**
 * Construct a {@type "function"} to evaluate the specified {@type "phrase"}.
 *
 * @method "_compiled"
 * @param "aPhrase" "phrase"
 * @returns "[…]→⊤"
 * @category "Phrases"
 */
Public method "_compiled" is
[
	aPhrase : phrase
|
	«[<> | <aPhrase>] : aPhrase's semantic type» → function
] : function;

Semantic restriction "_compiled" is
[
	phraseType : phrase's type
|
	function accepting <> and returning phraseType's semantic type
];

/**
 * Evaluate the specified {@type "phrase"} to produce its value.
 *
 * @method "Evaluate|evaluate_"
 * @param "aPhrase" "phrase"
 * @returns "⊤"
 * @category "Phrases"
 */
Public method "Evaluate|evaluate_" is
[
	aPhrase : phrase
|
	Invoke aPhrase compiled with <>;
] : ⊤;

Semantic restriction "Evaluate|evaluate_" is
[
	phraseType : phrase's type
|
	phraseType's semantic type
];

Semantic restriction "bootstrap restricted send_with_:_" is
[
	messageType : atom's type,
	argsType : list phrase's type,
	basicReturnMeta : type's type
|
	send phrase ⇒ basicReturnMeta's instance
];

Method "“_”" is
[
	lit : literal token ⇒ any
|
	“lit's value”
];

Method "“_”" is
[
	lit : literal phrase ⇒ any
|
	“lit's token”
];


/**
 * A local helper for bootstrapping.  This will also be defined publicly in a
 * downstream module.
 */
Macro "$…#" is
[
	tokenPhrase : literal phrase ⇒ (literal token ⇒ string)
|
	s ::= tokenPhrase's token's value's value;
	a ::= atom for s;
	`a` → literal phrase
] : literal phrase ⇒ atom;



/**
 * Transform phrases into expressions that build those phrases, but with any
 * marker phrases replaced by the marker values... which must also be phrases.
 */
Abstract method "T(_)" is
	function accepting <phrase> and returning (phrase ⇒ phrase);

/**
 * First, define a transformation for phrase *types*.
 */
Method "T(_)" is
[
	pT : phrase's type
|
	if pT ⊆ marker phrase then
	[
		expression phrase ⇒ (expression phrase ⇒ (pT's semantic type))
	]
	else
	[
		/* It may contain marker phrases deep inside, so keep just the basic
		 * kind and the yield type.
		 */
		expression phrase ⇒ pT
	]
];

Semantic restriction "T(_)" is
[
	pT : phrase's type
|
	T(pT)
];

/**
 * Because iteration is still awkward at this point in the bootstrap, define
 * transformation on a tuple of phrases as a convenience.
 */
Method "T(_)" is
[
	phrases : phrase tuple
|
	copy : <<>, phrase ⇒ phrase…|whole number> := <>;
	From 1 to |phrases| do
	[
		i : natural number
	|
		p : phrase;
		p ?= phrases[i];
		copy ?= concatenate <eject copy, <T(p)>>;
		true
	];
	copy
];

Semantic restriction "T(_)" is
[
	phrasesT : phrase tuple's type
|
	sizes ::= ||phrasesT||;
	leading ::= phrasesT's leading types;
	default ::= phrasesT's default type ?→ (phrase's type);
	leadingCopy : <<>, (phrase ⇒ phrase)'s type…|whole number> := <>;
	From 1 to |leading| do
	[
		i : natural number
	|
		p ::= leading[i] ?→ (phrase's type);
		leadingCopy ?= concatenate <eject leadingCopy, <T(p)>>;
		true
	];
	defaultCopy ::= T(default);
	<leadingCopy, defaultCopy…|sizes>
		?→ <<>, phrase ⇒ phrase…|whole number>'s type
];

Method "T(_)" is
[
	p : assignment phrase
|
	send $"`«_:=_`»"
		with <T(p's target), T(p's value)> → list phrase
		: assignment phrase
];

Method "T(_)" is
[
	p : block phrase
|
	send $"`«[_`|Primitive__]:_^_`»"
		with <
			T(p's arguments) → list phrase,
			`p's primitive name` → literal phrase,
			T(p's statements) → list phrase,
			`p's return type` → literal phrase,
			`p's declared exceptions` → literal phrase
		> → list phrase
		: block phrase
];

Method "T(_)" is
[
	p : expression as statement phrase
|
	send $"_→statement phrase"
		with <
			T(p's expression)
		> → list phrase
		: expression as statement phrase
];

Method "T(_)" is
[
	p : first of sequence phrase
|
	send $"first-of-seq`«_`»"
		with <
			T(p's statements) → list phrase
		> → list phrase
		: first of sequence phrase
];

Method "T(_)" is
[
	p : list phrase
|
	send $"_→list phrase"
		with <
			T(p's expressions) → list phrase
		> → list phrase
		: list phrase
];

Method "T(_)" is
[
	p : literal phrase
|
	`p`(“p”) → literal phrase
];

Method "T(_)" is
[
	p : permuted list phrase
|
	permutation ::= p's permutation;
	send $"_permuted by_"
		with <
			T(p's list),
			(`permutation`(“permutation”) → literal phrase)
		> → list phrase
		: permuted list phrase
];

Method "T(_)" is
[
	p : variable reference phrase
|
	send $"`«↑_`»"
		with <
			T(«↓p»)
		> → list phrase
		: variable reference phrase
];

Method "T(_)" is
[
	p : send phrase
|
	send $"send_with_:_"
		with <
			`p's bundle's atom` → literal phrase,
			T(p's arguments),
			`p's return type` → literal phrase
		> → list phrase
		: send phrase
];

Method "T(_)" is
[
	p : sequence phrase
|
	send $"seq`«_`»"
		with <
			T(p's statements) → list phrase
		> → list phrase
		: sequence phrase
];

Method "T(_)" is
[
	p : super cast phrase
|
	send $"`«supercast(_::_)`»"
		with <
			T(p's expression),
			`p's lookup type` → literal phrase
		> → list phrase
		: super cast phrase
];

Method "T(_)" is
[
	p : variable use phrase
|
	send $"`«↓_`»(_)"
		with <
			T(p's declaration),
			`p's token` → literal phrase
		> → list phrase
		: variable use phrase
];

Method "T(_)" is
[
	p : marker phrase
|
	/*
	 * The general semantic restriction on T(_) will ensure the marker value is
	 * itself a phrase with appropriate yield type.
	 */
	p's value ?→ (phrase ⇒ phrase)
];

/**
 * An atom whose presence in the fiber's parsing client data indicates that
 * "⦊§_⦉" unquoting may be used to back-quote a subexpression.  The value
 * associated with this key is the entire scope stack that was removed from the
 * fiber variable when quoted parsing began (via "⟦§_!⟧"), and should be
 * restored during parsing of back-quoted expressions (at which time this entry
 * should also be removed from the fiber variable).
 */
Method "parsing quoted phrase" is [$"parsing quoted phrase"];

/**
 * Take an arbitrary phrase as the argument.  Before parsing it, move the scope
 * stack into the {@code "parsing quoted phrase"} parsing variable  in the
 * fiber's parsing client data, while also emptying the scope stack.  This is an
 * indication that unquoting via "⦊§_⦉" may occur, which produces a marker
 * phrase. After parsing, recursively convert the literal phrase into a
 * back-quoted phrase-building expression, with the markers' values, which must
 * themselves be ordinary phrases, substituted in place of the markers.
 */
Macro "⟦§_!⟧" is
[
	/* Allow embedded "⦊§_⦉" unquoting to produce marker phrases herein. */
	If parsing quoted phrase ∈ scope map then
	[
		Reject parse strongly, expected:
			"Invocations of \"quoted phrase`«§_`»\" not to be nested."
	];
	/*
	 * Capture the scope so that unquoted sections can use local variables
	 * defined outside the quoted phrase.
	 */
	scope ::= parse map + parsing quoted phrase → scope map;
	parse map := scope ?→ {atom → any | whole number};
	/*
	 * Hide the current scope, since the unquoted portion *must not* have access
	 * to local variables.
	 */
	scope map := empty map;
],
[
	originalPhrase : literal phrase ⇒ (phrase ⇒ ⊤)
|
	/*
	 * Transform the phrase into a phrase that will generate the original
	 * phrase, but with each marker replaced by its unquoted expression.
	 */
	result ::= T(originalPhrase's token's value);
	/*
	 * Now restore the scope map and remove the saved scope information from
	 * the "parsing quoted phrase" key.
	 */
	scope map := parse map[parsing quoted phrase]
		?→ {nonempty string → declaration phrase | whole number};
	parse map := parse map - parsing quoted phrase
		?→ {atom → any | whole number};
	result
];

/**
 * The unquoting macro.  This may occur any number of times within the argument
 * of the "⟦§_!⟧" quoting macro.  The quoting macro converts its argument phrase
 * into a phrase-building phrase, but any parts that were within unquotes are
 * treated as expressions that can be directly embedded (to produce the final
 * subphrases).  The unquote macro converts its argument into marker phrase
 * whose value is the argument phrase itself, and the quoting macro recursively
 * scans and transforms such markers.
 *
 * Quoted regions are parsed with no scope initially available, but the unquoted
 * regions have the same scope as just outside the quoted region.
 */
Macro "⦊§_⦉" is
[
	/*
	 * We're at the section marker (§).  Restore the scope that was removed and
	 * stashed when parsing reached the section marker in {@code "⟦§_!⟧"}.
	 * Quietly fail if such an entry wasn't stashed.
	 */
	Unless parsing quoted phrase ∈ parse map then
	[
		Reject parse strongly, expected:
			"The unquote (\"⦊§_⦉\") macro to occur only inside \
				\|a quoted (\"⟦§_!⟧\") phrase."
	];
	Unless scope map = empty map then
	[
		Reject parse strongly, expected:
			"The scope inside a quoted (\"⟦§_!⟧\") phrase to be empty."
	];
	/*
	 * Restore the scope map just within the unquoted section, so it can
	 * reference local variables.
	 */
	scope map := parse map[parsing quoted phrase]
		?→ {nonempty string → declaration phrase | whole number};
	/*
	 * Remove the indicator that it's inside a quoted phrase, since we're now in
	 * an unquoted portion.
	 */
	parse map := parse map - parsing quoted phrase
		?→ {atom → any | whole number};
],
[
	p : phrase ⇒ phrase
|
	yield ::= (p's semantic type) ?→ phrase's type;
	valueType ::= yield's semantic type;
	result ::= «marker phrase p ⇒ valueType»;
	/*
	 * To continue with the quoted expression, remove the scope again and add
	 * it to the "parsing quoted phrase" key.
	 */
	scope ::= parse map + parsing quoted phrase → scope map;
	parse map := scope ?→ {atom → any | whole number};
	scope map := empty map;
	result
];


/*
 * This is an example of usage of the quoting and unquoting operations.
 *
 *  generator ::= [y : integer |
 *      yLit ::= `y` → literal phrase;
 *      ⟦10 + ⦊yLit⦉⟧];
 *
 * The third line uses quoting to produce a send of "_+_", where the first
 * argument phrase is simply the literal phrase 10, and the second argument is
 * whatever yLit produces, which in this case will be the literal phrase
 * produced on the previous line.  Note that the quoted expression could be
 * arbitrarily complex, including message sends, literals, blocks, declarations,
 * or any other kinds of phrases.  It's parsed via a '_!' message part, so the
 * phrase can yield ⊤ or ⊥ without any special effort.
 *
 * Invoking generator(44) will produce a send phrase of "_+_" with two literal
 * arguments, the literal 10 and the literal 44.  If a macro body were to answer
 * the phrase returned from generator(44), invoking that macro in some code
 * would cause that send of "_+_" with 10 and 44 to be embedded at that point in
 * place of the macro call, and executing the resulting code would produce the
 * integer 55.
 */
