/*
 * Phrases.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Phrases"
Versions
	"Avail-1.6.0"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Literals",
	"Early Macro Support",
	"Early Variables"
Names
	"Evaluate|evaluate_",
	"restricted send_with_:_",
	"this token:…",
	"_compiled",
	"‘_’",
	"``_``(_)",
	"``_``",
	"`«<«_‡,»>`»",
	"`«[_`|_]:_`»",
	"`«[_]:_`»",
	"⟦§_!⟧",
	"⦊§_⦉",
	"_token",
	"_'s⁇classifier"
Body

/**
 * Some macros have to create a sequence of statements and wrap that in a
 * sequence-as-expression phrase.  If that expression ends up being used as a
 * expression, the "_!;" bootstrap macro won't allow such an expression to be
 * the content of a send-as-statement.  So here we overload "_!;" to take
 * a sequence-as-expression, but simply extract the sequence from it (a sequence
 * can be treated as a statement).
 */
Macro "_!;" is
[
	seqAsExprInLiteral : literal phrase ⇒ sequence-as-expression phrase
|
	seqAsExpr ::= seqAsExprInLiteral's token's value
		?→ sequence-as-expression phrase;
	seqAsExpr's sequence
];


/**
 * Make "_'s type" bind more tightly than phrase type construction.  Also
 * other similar methods.
 *
 * @method "_'s⁇type"
 * @returns "⊤"
 */
Grammatical restriction
	{
		"_'s⁇type",
		"_'s⁇value type",
		"_'s⁇instance",
		"_'s⁇semantic type",
		"_'s⁇return type"
	} ?→ {string|natural number}
	is <{"_⇒_"} ?→ {string|natural number}>;

/**
 * "_⇒_" should bind right-to-left.
 */
Grammatical restriction "_⇒_" is <{"_⇒_"} ?→ {string|natural number}, ∅>;

Semantic restriction "_'s⁇value" is
[
	tokenType : literal token's type
|
	tokenType's value type
];

/**
 * Construct and answer a literal token without specifying positional
 * information.
 *
 * @method "``_``(_)"
 * @param "value" "any"
 *        Any value, irrespective of whether an Avail compiler would be able to
 *        directly construct such a literal.
 * @param "lexeme" "string"
 *        The lexical representation of the literal token.
 * @returns "literal token"
 *        A literal token that embeds the argument.
 * @category "Phrases" "Constructors"
 */
Public method "``_``(_)" is
[
	value : any,
	lexeme : string
|
	`value` (lexeme) @ 0:0
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 *
 * @method "``_``(_)"
 * @restricts "any meta"
 */
Semantic restriction "``_``(_)" is
[
	value : any meta,
	lexeme : string's type
|
	literal token ⇒ value
];

/**
 * Construct and answer a (synthetic) literal token whose artificial source text
 * is the description of the value.
 *
 * @method "``_``"
 * @param "value" "any"
 *        Any value, irrespective of whether an Avail compiler would be able to
 *        construct such a literal.
 * @returns "literal token"
 *        A literal token that embeds the argument.
 * @category "Phrases" "Constructors"
 */
Public method "``_``" is
[
	value : any
|
	`value` (“value”)
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 *
 * @method "``_``"
 * @restricts "any meta"
 */
Semantic restriction "``_``" is
[
	value : any meta
|
	literal token ⇒ value
];

/**
 * Answer a {@type "token"} {@type "type"} for the specified {@param
 * "classifier"}.
 *
 * @method "_token"
 * @param "classifier"
 *        "enumeration of {end of file, keyword, operator, comment, whitespace}"
 *        A {@type "atom" classifier} that specifies the lexical role of the
 *        {@type "token"}s that are instances of the requested type.
 * @returns "token's type"
 *          The requested {@type "token"} {@type "type"}.
 */
Public method "_token" is
[
	classifier : enumeration of
		{end of file, keyword, operator, comment, whitespace}
|
	Primitive CreateTokenType;
] : token's type;

/**
 * Strengthen token building to covary with the classifier.
 *
 * @method "_(_)@_:_"
 * @restricts "classifier's type"
 * @restricts "lexeme's type"
 * @restricts "position's type"
 * @restricts "line's type"
 */
Semantic restriction "_(_)@_:_" is
[
	classifier : enumeration of
		{end of file, keyword, operator, comment, whitespace}'s type,
	lexeme : string's type,
	position : whole number's type,
	line : whole number's type
|
	if |classifier| = 1 then
	[
		classifier's instance token
	]
	else [⊤]
];

/**
 * Answer the {@type "atom"} that classifies the specified {@type "token"}.
 *
 * @method "_'s⁇classifier"
 * @param "aToken" "token"
 * @returns "enumeration of {end of file, keyword, literal, operator, comment, whitespace}"
 */
Public method "_'s⁇classifier" is
[
	aToken : token
|
	Primitive TokenClassifier;
] : enumeration of {end of file, keyword, literal, operator, comment, whitespace};

/**
 * Strengthen literal <em>phrase</em> building to covary with the type of object
 * inside the passed literal token.
 *
 * @method "_→literal phrase"
 * @restricts "literal token's type"
 */
Semantic restriction "_→literal phrase" is
[
	aLiteralToken : literal token's type
|
	literal phrase ⇒ aLiteralToken's value type
];

/**
 * Answer a {@type "literal phrase"} for the specified value.
 *
 * @method "‘_’"
 * @param "value" "any"
 * @returns "literal phrase ⇒ any"
 * @category "Phrases"
 */
Public method "‘_’" is
[
	value : any
|
	`value` (“value”)→literal phrase
];

Semantic restriction "‘_’" is
[
	valueType : any's type
|
	literal phrase ⇒ valueType
];

/**
 * Construct and answer a variable use expression from the specified
 * declaration.
 *
 * @method "`«↓_`»"
 * @param "decl" "declaration phrase"
 *        The declaration that introduced the referenced entity.
 * @returns "variable use phrase"
 *          A variable use expression.
 * @category "Phrases" "Constructors"
 */
Method "`«↓_`»" is
[
	decl : declaration phrase
|
	«↓decl» (keyword(decl's token's lexeme)@0:0)
] : variable use phrase;

/**
 * Construct and answer a list phrase from the specified tuple of expressions.
 *
 * @method "`«<«_‡,»>`»"
 * @param "aTuple" "<<>, expression phrase⇒any…|whole number>"
 *        A tuple of expressions.
 * @returns "list phrase"
 *          The requested list.
 * @category "Phrases" "Constructors"
 */
Public method "`«<«_‡,»>`»" is
[
	aTuple : <<>, expression phrase⇒any…|whole number>
|
	aTuple → list phrase
] : list phrase;

Semantic restriction "`«<«_‡,»>`»" is
[
	tTuple : <<>, expression phrase⇒any…|whole number>'s type
|
	leadingTypesSize ::= |tTuple's leading types|;
	defaultTypeIndex ::= leadingTypesSize + 1;
	semanticTypes : tuple of any meta := <>;
	From 1 to defaultTypeIndex do
	[
		i : natural number
	|
		phraseType ::= tTuple[i] ?→ phrase meta;
		semanticType ::= phraseType's semantic type;
		semanticTypes :=
			concatenate <semanticTypes, <semanticType>> ?→ tuple of any meta;
		true
	];
	defaultType ::= semanticTypes[defaultTypeIndex] ?→ any meta;
	leadingSemanticTypes ::=
		semanticTypes[1..leadingTypesSize] ?→ tuple of any meta;
	list phrase ⇒ <leadingSemanticTypes, defaultType… | ||tTuple||>
];

/**
 * Construct and answer a block from the specified argument declarations,
 * statements, and return type.
 *
 * @method "`«[_`|_]:_`»"
 * @param "args" "<<>, argument phrase…|whole number>"
 *        A tuple of argument declarations.
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>,
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		args
	|
		Primitive ""
		statements
	] : returnType ^ ∅»
] : block phrase;

/**
 * @method "`«[_`|_]:_`»"
 * @restricts "<<>, argument phrase…|whole number>'s type"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>'s type,
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase ⇒ […]→returnType's instance
];

/**
 * Construct and answer an arity-0 block from the specified statements and
 * return type.
 *
 * @method "`«[_]:_`»"
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		<>
	|
		Primitive ""
		statements
	] : returnType ^ ∅»
];

/**
 * @method "`«[_]:_`»"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase ⇒ […]→returnType's instance
];

/**
 * @method "send_with_:_"
 * @restricts "atom's type"
 * @restricts "list phrase's type"
 * @restricts "type's type"
 */
Semantic restriction "send_with_:_" is
[
	aMethod : atom's type,
	arguments : list phrase's type,
	returnType : type's type
|
	/*
	 * Phrases have identity, so it isn't safe to strengthen more than this.
	 */
	send phrase ⇒ returnType's instance
];

/**
 * Create a send phrase from the supplied message name (atom), list phrase of
 * arguments, and return type.  Strengthen the return type based on the
 * applicable method definitions.  Also launch a fiber for each applicable
 * semantic restriction and strengthen the return type with their eventual
 * results.
 *
 * If any semantic restrictions reject parsing, reject it again immediately in
 * the current fiber.  This ignores unwind blocks, so don't export this
 * mechanism past Exceptions, where a safer form is created.
 *
 * @method "restricted send_with_:_"
 * @param "message" "atom"
 *        The atom that names the method to be invoked by the send phrase.
 * @param "args" "list phrase"
 *        The list phrase of phrases that are supplied as arguments of the send
 *        phrase.
 * @param "basicReturnType" "type"
 *        The return type of the send phrase, prior to strengthening by
 *        applicable method definitions and semantic restrictions.
 * @returns "send phrase⇒⊤"
 *        The strengthened send phrase.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group-or-ellipsis exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Public method "restricted send_with_:_" is
[
	message : atom,
	args : list phrase,
	basicReturnType : type
|
	pair ::= restricted report and send message with args : basicReturnType;
	optionalPhrase ::= pair[1] ?→ tuple;
	If optionalPhrase = <> then
	[
		Reject parse strongly, expected: (pair[2] ?→ string)
	];
	optionalPhrase[1] ?→ send phrase
] : send phrase;

/**
 * Restrict the resulting send node to have a yield type at least as strong as
 * the supplied yield type constraint.
 */
Semantic restriction "restricted send_with_:_" is
[
	messageType : atom's type,
	argsType : list phrase's type,
	basicReturnMeta : type's type
|
	send phrase ⇒ basicReturnMeta's instance
];

Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type
|
	expressionType's semantic type's type
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrase's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type
|
	if |blockType| = 1 then
	[
		if blockType's instance ∈ type then [function meta]
		else [blockType's instance's semantic type]
	]
	else
	[
		function meta
	]
];

/**
 * An expression phrase's type's semantic type is always a value's type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "expression phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type's type
|
	any meta
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type's type
|
	function meta
];

/**
 * A list type's semantic type is always a tuple of values.
 *
 * @method "_'s⁇semantic type"
 * @restricts "list phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	listType : list phrase's type's type
|
	tuple meta
];

/**
 * The function type of a function generated from a block is the same as the
 * block's semantic type.
 *
 * @method "_→function"
 * @restricts "block phrase's type"
 */
Semantic restriction "_→function" is
[
	blockType : block phrase's type
|
	blockType's semantic type
];

/**
 * Answer the actual token that occurs in the source text at the indicated
 * position.
 *
 * @method "this token:…"
 * @param "t" "token"
 *        A token actually occurring at the invocation site in the source.
 * @returns "token"
 * @category "Phrases" "Tokens"
 */
Public method "this token:…" is
[
	t : token
|
	t
] : token;

Semantic restriction "_'s⁇expressions" is
[
	listType : list phrase's type
|
	semanticType ::= listType's semantic type;
	upper ::= |semanticType's leading types| + 1;
	leadingTypes : tuple := <>;
	From 1 to upper do
	[
		index : natural number
	|
		leadingTypes := concatenate
			<leadingTypes, <expression phrase ⇒ semanticType[index]>>;
		true
	];
	strongLeadingTypes ::=
		cast leadingTypes
		into [t : <<>, any meta… | whole number> | t];
	defaultType ::= strongLeadingTypes[upper] ?→ any meta;
	<strongLeadingTypes, defaultType… | ||semanticType||>
];

Semantic restriction "_'s⁇token" is
[
	literalType : literal phrase's type
|
	literal token ⇒ literalType's semantic type
];

/**
 * Construct a {@type "function"} to evaluate the specified {@type "phrase"}.
 *
 * @method "_compiled"
 * @param "aPhrase" "phrase"
 * @returns "[…]→⊤"
 * @category "Phrases"
 */
Public method "_compiled" is
[
	aPhrase : phrase
|
	«[<> | <aPhrase>] : aPhrase's semantic type» → function
] : function;

Semantic restriction "_compiled" is
[
	phraseType : phrase's type
|
	function accepting <> and returning phraseType's semantic type
];

/**
 * Evaluate the specified {@type "phrase"} to produce its value.
 *
 * @method "Evaluate|evaluate_"
 * @param "aPhrase" "phrase"
 * @returns "⊤"
 * @category "Phrases"
 */
Public method "Evaluate|evaluate_" is
[
	aPhrase : phrase
|
	Invoke aPhrase compiled with <>;
] : ⊤;

Semantic restriction "Evaluate|evaluate_" is
[
	phraseType : phrase's type
|
	phraseType's semantic type
];

Semantic restriction "bootstrap restricted send_with_:_" is
[
	messageType : atom's type,
	argsType : list phrase's type,
	basicReturnMeta : type's type
|
	send phrase ⇒ basicReturnMeta's instance
];

Method "“_”" is
[
	lit : literal token ⇒ any
|
	“lit's value”
];

Method "“_”" is
[
	lit : literal phrase ⇒ any
|
	“lit's token”
];


/**
 * A local helper for bootstrapping.  This will also be defined publicly in a
 * downstream module.
 */
Macro "$…#" is
[
	tokenPhrase : literal phrase ⇒ literal token ⇒ string
|
	s ::= tokenPhrase's token's value's value;
	a ::= atom for s;
	`a` → literal phrase
] : literal phrase ⇒ atom;


/**
 * The type of the declarations map, which maps from declarations in the
 * original phrase to local constant declarations that will hold the substitutes
 * for those originals.
 */
declarationsMapType ::=
	{declaration phrase → declaration phrase|whole number};

/**
 * Transform phrases into expressions that build those phrases, but with any
 * marker phrases replaced by the marker values... which must also be phrases.
 */
Abstract method "T(_,_)" is
	function accepting <phrase, ↑declarationsMapType>
	and returning (phrase ⇒ phrase);

/**
 * First, define a one-argument transformation for phrase *types*.
 */
Method "T'(_)" is
[
	pT : phrase's type
|
	if pT ⊆ marker phrase then
	[
		expression phrase ⇒ expression phrase ⇒ pT's semantic type
	]
	else
	[
		/* It may contain marker phrases deep inside, so keep just the basic
		 * kind and the yield type.
		 */
		expression phrase ⇒ pT
	]
];

Semantic restriction "T(_,_)" is
[
	pT : phrase's type,
	decls : (↑declarationsMapType)'s type
|
	T'(pT)
];

/**
 * Because iteration is still awkward at this point in the bootstrap, define
 * transformation on a tuple of phrases as a convenience.
 */
Method "T*(_,_)" is
[
	phrases : phrase tuple,
	decls : ↑declarationsMapType
|
	copy : <<>, phrase ⇒ phrase…|whole number> := <>;
	From 1 to |phrases| do
	[
		i : natural number
	|
		p : phrase;
		p ?= phrases[i];
		copy ?= concatenate <eject copy, <T(p, decls)>>;
		true
	];
	copy
];

Semantic restriction "T*(_,_)" is
[
	phrasesT : phrase tuple's type,
	decls : (↑declarationsMapType)'s type
|
	sizes ::= ||phrasesT||;
	leading ::= phrasesT's leading types;
	default ::= phrasesT's default type ?→ (phrase's type);
	leadingCopy : <<>, (phrase ⇒ phrase)'s type…|whole number> := <>;
	From 1 to |leading| do
	[
		i : natural number
	|
		p ::= leading[i] ?→ (phrase's type);
		leadingCopy ?= concatenate <eject leadingCopy, <T'(p)>>;
		true
	];
	defaultCopy ::= T'(default);
	<leadingCopy, defaultCopy…|sizes>
		?→ <<>, phrase ⇒ phrase…|whole number>'s type
];

Method "T(_,_)" is
[
	p : assignment phrase,
	decls : ↑declarationsMapType
|
	restricted send $"`«_:=_`»"
		with <T(p's target, decls), T(p's value, decls)> → list phrase
		: assignment phrase
];

Method "T(_,_)" is
[
	p : block phrase,
	decls : ↑declarationsMapType
|
	restricted send $"`«[_`|Primitive__]:_^_`»"
		with <
			T*(p's arguments, decls) → list phrase,
			`p's primitive name` → literal phrase,
			T*(p's statements, decls) → list phrase,
			`p's return type` → literal phrase,
			`p's declared exceptions` → literal phrase
		> → list phrase
		: block phrase
];

/**
 * Construct but do not register a copy of the given declaration phrase.  The
 * declarations map is only provided for transforming any initialization
 * expressions.  Type expressions aren't updated, because they already ran to
 * produce the type.
 *
 * By default, don't copy the declaration at all.
 */
Method "new Tdecl(_,_)" is
[
	p : declaration phrase,
	decls : ↑declarationsMapType
|
	`p` → literal phrase
] : expression phrase ⇒ declaration phrase;

Method "new Tdecl(_,_)" is
[
	p : local variable phrase,
	decls : ↑declarationsMapType
|
	if p has initializing expression then
	[
		restricted send $"`«_:_:=_`»"
			with <
				`p's token` → literal phrase,
				`p's declared type` → literal phrase,
				T(p's initializing expression, decls)
			> → list phrase
			: local variable phrase
	]
	else
	[
		`p` → literal phrase
	]
] : expression phrase ⇒ local variable phrase;

Method "new Tdecl(_,_)" is
[
	p : local constant phrase,
	decls : ↑declarationsMapType
|
	restricted send $"`«_::=_`»"
		with <
			`p's token` → literal phrase,
			T(p's initializing expression, decls)
		> → list phrase
		: local constant phrase
] : expression phrase ⇒ local constant phrase;

Method "T(_,_)" is
[
	p : declaration phrase,
	decls : ↑declarationsMapType
|
	strongMap ::= ↓decls ?→ declarationsMapType;
	Assert: p ∈ strongMap = false;
	declGen : expression phrase ⇒ declaration phrase;
	declGen := new Tdecl(p, decls);
	/*
	 * declGen now holds a phrase that generates a declaration.
	 * Declare a local constant 'x' to hold this phrase, so that variable
	 * uses later in the quoted expression will be able to refer to this
	 * exact declaration with a variable-use of 'x'.  Give it a similar name
	 * to the declaration that it will later generate.
	 */
	declName ::= concatenate <p's token's lexeme, "_decl"> ?→ string;
	constHoldingDecl ::= «keyword(declName)@0:0 ::= declGen»;
	constUse ::= «↓constHoldingDecl»(p's token);
	decls ?= strongMap + p → constHoldingDecl;
	sequence-as-expression«
		seq«
			<
				constHoldingDecl,
				constUse
			>
		»
	» ?→ sequence-as-expression phrase ⇒ statement phrase
] : expression phrase ⇒ statement phrase;

Method "T(_,_)" is
[
	p : expression as statement phrase,
	decls : ↑declarationsMapType
|
	restricted send $"_→statement phrase"
		with <
			T(p's expression, decls)
		> → list phrase
		: expression as statement phrase
];

Method "T(_,_)" is
[
	p : first of sequence phrase,
	decls : ↑declarationsMapType
|
	restricted send $"first-of-seq`«_`»"
		with <
			T*(p's statements, decls) → list phrase
		> → list phrase
		: first of sequence phrase
];

Method "T(_,_)" is
[
	p : list phrase,
	decls : ↑declarationsMapType
|
	restricted send $"_→list phrase"
		with <
			T*(p's expressions, decls) → list phrase
		> → list phrase
		: list phrase
];

Method "T(_,_)" is
[
	p : literal phrase,
	decls : ↑declarationsMapType
|
	`p`(“p”) → literal phrase
];

Method "T(_,_)" is
[
	p : permuted list phrase,
	decls : ↑declarationsMapType
|
	permutation ::= p's permutation;
	restricted send $"_permuted by_"
		with <
			T(p's list, decls),
			(`permutation`(“permutation”) → literal phrase)
		> → list phrase
		: permuted list phrase
];

Method "T(_,_)" is
[
	p : variable reference phrase,
	decls : ↑declarationsMapType
|
	restricted send $"`«↑_`»"
		with <
			T(«↓p», decls)
		> → list phrase
		: variable reference phrase
];

Method "T(_,_)" is
[
	p : send phrase,
	decls : ↑declarationsMapType
|
	restricted send $"restricted send_with_:_"
		with <
			`p's bundle's atom` → literal phrase,
			T(p's arguments, decls),
			`p's return type` → literal phrase
		> → list phrase
		: send phrase
];

Method "T(_,_)" is
[
	p : sequence phrase,
	decls : ↑declarationsMapType
|
	restricted send $"seq`«_`»"
		with <
			T*(p's statements, decls) → list phrase
		> → list phrase
		: sequence phrase
];

Method "T(_,_)" is
[
	p : super cast phrase,
	decls : ↑declarationsMapType
|
	restricted send $"`«supercast(_::_)`»"
		with <
			T(p's expression, decls),
			`p's lookup type` → literal phrase
		> → list phrase
		: super cast phrase
];

/**
 * Transform a variable use phrase.  It's a use of some declaration D.  We've
 * already transformed the declaration into a constant declaration D' that holds
 * (an equivalent of) the declaration D as its value.  So return a phrase that
 * extracts the D equivalent from D' (via a variable use of D'), then creates a
 * variable use phrase to mimic the variable use phrase we're transforming.
 */
Method "T(_,_)" is
[
	p : variable use phrase,
	decls : ↑declarationsMapType
|
	strongMap ::= (↓decls) ?→ declarationsMapType;
	constDecl ::= strongMap[p's declaration] ?→ local constant phrase;
	getDecl ::= «↓constDecl»(constDecl's token);
	restricted send $"`«↓_`»(_)"
		with <
			getDecl,
			`p's token` → literal phrase
		> → list phrase
		: variable use phrase ⇒ p's semantic type
];

Method "T(_,_)" is
[
	p : marker phrase,
	decls : ↑declarationsMapType
|
	/*
	 * The general semantic restriction on T(_) will ensure the marker value is
	 * itself a phrase with appropriate yield type.
	 */
	p's value ?→ (phrase ⇒ phrase)
];

/**
 * An atom whose presence in the fiber's parsing client data indicates that
 * "⦊§_⦉" unquoting may be used to back-quote a subexpression.  The value
 * associated with this key is the entire scope stack that was removed from the
 * fiber variable when quoted parsing began (via "⟦§_!⟧"), and should be
 * restored during parsing of back-quoted expressions (at which time this entry
 * should also be removed from the fiber variable).
 */
Method "scope outside quote" is [$"scope outside quote"];

/**
 * An atom whose presence in the fiber's parsing client data indicates that
 * "⦊§_⦉" unquoting is currently in use, inside a "⟦§_!⟧" quoted section.  The
 * value associated with this key is the entire scope stack that was active when
 * the unquoting macro was encountered.  Completion of the unquoted macro should
 * remove this atom entirely from the fiber's parsing client data.
 */
Method "scope outside unquote" is [$"scope outside unquote"];

/**
 * Take an arbitrary phrase as the argument.  Before parsing it, move the scope
 * stack into the {@code "scope outside quote"} parsing variable  in the
 * fiber's parsing client data, while also emptying the scope stack.  This is an
 * indication that unquoting via "⦊§_⦉" may occur, which produces a marker
 * phrase. After parsing, recursively convert the literal phrase into a
 * back-quoted phrase-building expression, with the markers' values, which must
 * themselves be ordinary phrases, substituted in place of the markers.
 */
Macro "⟦§_!⟧" is
[
	/* Allow embedded "⦊§_⦉" unquoting to produce marker phrases herein. */
	If scope outside quote ∈ scope map then
	[
		Reject parse strongly, expected:
			"Invocations of the quote (\"⟦§_!⟧\") macro not to be nested."
	];
	/*
	 * Capture the scope so that unquoted sections can use local variables
	 * defined outside the quoted phrase.
	 */
	scope ::= parse map + scope outside quote → scope map;
	parse map := scope ?→ {atom → any | whole number};
	/*
	 * Hide the current scope, since the unquoted portion *must not* have access
	 * to local variables.
	 */
	scope map := empty map;
],
[
	originalPhrase : literal phrase ⇒ phrase ⇒ ⊤
|
	declsMap : declarationsMapType := empty map;
	/*
	 * Transform the phrase into a phrase that will generate the original
	 * phrase, but with each marker replaced by its unquoted expression.
	 */
	result ::= T(
		originalPhrase's token's value,
		↑declsMap);
	/*
	 * Now restore the scope map and remove the saved scope information from the
	 * "scope outside quote" key.
	 */
	scope map := parse map[scope outside quote]
		?→ {nonempty string → declaration phrase | whole number};
	parse map := parse map - scope outside quote
		?→ {atom → any | whole number};
	result
];

/**
 * The unquoting macro.  This may occur any number of times within the argument
 * of the "⟦§_!⟧" quoting macro.  The quoting macro converts its argument phrase
 * into a phrase-building phrase, but any parts that were within unquotes are
 * treated as expressions that can be directly embedded (to produce the final
 * subphrases).  The unquote macro converts its argument into marker phrase
 * whose value is the argument phrase itself, and the quoting macro recursively
 * scans and transforms such markers.
 *
 * Quoted regions are parsed with no scope initially available, but the unquoted
 * regions have the same scope as just outside the quoted region.
 */
Macro "⦊§_⦉" is
[
	/*
	 * We're at the section marker (§).  Restore the scope that was removed and
	 * stashed when parsing reached the section marker in {@code "⟦§_!⟧"}.
	 * Quietly fail if such an entry wasn't stashed.
	 */
	Unless scope outside quote ∈ parse map then
	[
		Reject parse strongly, expected:
			"The unquote (\"⦊§_⦉\") macro to occur only inside \
				\|a quoted (\"⟦§_!⟧\") phrase."
	];
	If scope outside unquote ∈ scope map then
	[
		Reject parse strongly, expected:
			"Invocations of the unquote (\"⦊§_⦉\") macro not to be nested."
	];
	/*
	 * The quoted phrase can have introduced scope entries, which must be saved
	 * here and restored at the end of unquoting.  This also serves to indicate
	 * we're inside an unquote.
	 */
	parse map := parse map + scope outside unquote → scope map
		?→ {atom → any | whole number};
	/*
	 * Restore the scope map just within the unquoted section, so it can
	 * reference local variables from outside the *quote*.
	 */
	scope map := parse map[scope outside quote]
		?→ {nonempty string → declaration phrase | whole number};
],
[
	p : phrase ⇒ phrase
|
	yield ::= (p's semantic type) ?→ phrase's type;
	valueType ::= yield's semantic type;
	result ::= «marker phrase p ⇒ valueType»;
	/*
	 * To continue parsing the outer quoted expression, we must remove the
	 * "scope outside unquote" and make it the active scope map.
	 */
	scope map := parse map[scope outside unquote]
		?→ {nonempty string → declaration phrase | whole number};
	parse map := parse map - scope outside unquote
		?→ {atom → any | whole number};
	result
];


/*
 * This is an example of usage of the quoting and unquoting operations.
 *
 *
 *  1:  Macro "incrementer by_†" is
 *  2:  [
 *  3:      t : literal phrase ⇒ integer
 *  4:  |
 *  5:      ⟦
 *  6:          [y : integer | y + ⦊t⦉]
 *  7:      ⟧
 *  8:  ];
 *  9:
 * 10:  Print: “incrementer by 5”;
 * 11:  Print: "\n";
 * 12:  Print: “Invoke incrementer by 3 with <5>”;
 * 13:  Print: "\n";
 *
 * First, a macro is defined for creating incrementer functions.  The amount to
 * increment by must be specified as a literal phrase, ensuring the quantity is
 * known at compile time.
 *
 * Line 5 begins a ⟦⟧ quoted section, which ends on line 7.  Line 6 is a regular
 * block expression, other than the unquoted portion ⦊t⦉.  The unquoted part is
 * evaluated when encountered, which produces a phrase to use in place of the
 * unquoted part of the surrounding quoted expression.  That phrase is wrapped
 * inside a marker phrase, to be processed later.  When the quoted section has
 * been fully parsed, it is transformed from a phrase (potentially containing
 * marker phrases inside it) into a phrase that *yields* another phrase.  This
 * recursive transformation plugs in the values of the previously constructed
 * marker phrases (the markers' values are phrases).  The result of the entire
 * quoted expression is a phrase that produces a phrase similar to what was in
 * quotes.  This occurred inside a macro body (lines 2-8), which is expected to
 * return a phrase to use in place of an invocation of that macro.
 *
 * When "incrementer by_†" is called on line 10, it produces a block phrase with
 * the compile-time-fixed constant 5 plugged in as the right operand of the
 * addition operation inside the block's sole statement.
 *
 * On line 12, it statically creates an incrementer block with 3 as the
 * increment, then at runtime invokes it with the argument 5 (producing 8).
 */
