/*
 * Early Variables.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Variables"
Versions
	"1.4.0"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Definers",
	"Early Enumeration Support",
	"Early Literals"
Names
	"Clear_↑",
	"Swap_↑and_↑",
	"atomically compare_↑to_and,⁇if equal,⁇store_",
	"atomically read_↑and store_",
	"atomically read_↑and add_",
	"eject_↑",
	"unsafely atomically read_↑and store_",
	"unsafely atomically compare_↑to_and,⁇if equal,⁇store_",
	"_↑`?=_",
	"_↑`?=_'s⁇initialization",
	"`↑_↑",

	"Clear_",
	"Swap_and_",
	"atomically compare_to_and,⁇if equal,⁇store_",
	"atomically read_and store_",
	"atomically read_and add_",
	"eject_",
	"unsafely atomically read_and store_",
	"unsafely atomically compare_to_and,⁇if equal,⁇store_",
	"_`?=_",
	"_`?=_'s⁇initialization",

	/* These are bootstrapping methods, and should not leak out of
	 * Foundation.
	 */
	"implicit observe function",
	"implicit observe function:=_"
Body

/**
 * Answer a reference to the supplied {@type "variable"}. The quotation is done
 * automatically by the Avail compiler.
 *
 * @method "`↑_↑"
 * @category "Variables"
 * @param "var" "variable"
 *        The variable.
 * @returns "variable"
 *          The argument, {@param "var"}.
 */
Method "`↑_↑" is
[
	var : variable
|
	var
] : variable;

/**
 * Strengthen the type to the actual type of the variable.
 *
 * @method "`↑_↑"
 * @restricts "variable's type"
 */
Semantic restriction "`↑_↑" is
[
	varType : variable meta
|
	varType
];

Method "observe function" is
[
	function accepting <[…]→⊤, tuple> and returning ⊤
];

/**
 * The function that should be invoked whenever a variable with write reactors
 * is written when write tracing is not enabled.
 *
 * @global "implicitObserveFunction" "[[…]→⊤, <any…|>]→⊤"
 */
implicitObserveFunction : observe function;

Public method "implicit observe function" is [implicitObserveFunction];

/**
 * Set the function that should be invoked whenever a variable with write
 * reactors is written when write tracing is not enabled.
 *
 * @method "implicit observe function:=_"
 * @param "aFunction" "[[…]→⊤, <any…|>]→⊤"
 * @returns "⊤"
 */
Public method "implicit observe function:=_" is
[
	f : observe function
|
	/* Tell the VM about the implicit observe function. */
	Invoke
		[
			g : observe function
		|
			Primitive SetImplicitObserveFunction;
		] : ⊤
	with <f>;
	/* Record the implicit observe function for primitive failures. */
	implicitObserveFunction := f;
] : ⊤;

/* Provide a bootstrap definition of the implicit observe function that crashes
 * whenever the implicit observe function is invoked. We don't need to arrange
 * to reset this behavior on unload, since it wouldn't help to do so.
 */
implicit observe function :=
	[
		f : […]→⊤,
		args : tuple
	|
		Crash: <f, args>
	] : ⊤;

variableFailureFunction ::=
	[
		failureCode : natural number,
		f : […]→⊤,
		args : tuple
	|
		If failureCode = observed-variable-written-while-untraced code then
		[
			Invoke implicitObserveFunction with <f, args>;
		]
		else
		[
			Invoke early failure function with <failureCode>;
		];
	] : ⊤;

/**
 * Store {@param "value"} into the specified variable.
 *
 * @category "Primitives" "Variables" "Mutators"
 * @method "_↑`?=_"
 * @param "var" "variable"
 *        A variable.
 * @param "value" "any"
 *        The value that should be stored into {@param "var"}.
 * @returns "⊤"
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable,
			value : any
		|
			Primitive SetValue (failureCode : enumeration of {
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			Invoke variableFailureFunction with <failureCode, f, <var, value>>;
		] : ⊤;
	Public method "_↑`?=_" is f;
	Alias "_`?=_" to atom for "_↑`?=_";
]
with <>;

/**
 * Clear the specified variable. This resets it to the unassigned state.
 *
 * @category "Primitives" "Variables" "Mutators"
 * @method "Clear_↑"
 * @param "var" "variable"
 *        A variable.
 * @returns "⊤"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable
		|
			Primitive ClearValue (failureCode : enumeration of {
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			Invoke variableFailureFunction with <failureCode, f, <var>>;
		] : ⊤;
	Public method "Clear_↑" is f;
	Alias "Clear_" to atom for "Clear_↑";
]
with <>;

/**
 * Exchange the contents of the two variables. This is more efficient than
 * using an intermediate variable, and permits additional optimizations by the
 * virtual machine.
 *
 * @category "Primitives" "Variables" "Mutators"
 * @method "Swap_↑and_↑"
 * @param "arg1" "variable"
 *        A variable.
 * @param "arg2" "variable"
 *        A variable.
 * @returns "⊤"
 * @raises "cannot-swap-contents-of-differently-typed-variables exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var1 : variable,
			var2 : variable
		|
			Primitive Swap (failureCode : enumeration of {
				cannot-swap-contents-of-differently-typed-variables code,
				observed-variable-written-while-untraced code});
			Invoke variableFailureFunction with <failureCode, f, <var1, var2>>;
		] : ⊤;
	Public method "Swap_↑and_↑" is f;
	Alias "Swap_and_" to atom for "Swap_↑and_↑";
]
with <>;

/**
 * Invoke {@param "f"} with {@param "args"}.
 *
 * @method "invoke_with_expecting_"
 * @param "f" "function"
 * @param "args" "tuple"
 * @param "expectedType" "type"
 * @returns "⊤"
 *          The result of applying {@param "f"} to {@param "args"}.
 */
Private method "invoke_with_expecting_" is
[
	f : function,
	args : tuple,
	expectedType : type
|
	Invoke f with args;
] : ⊤;

/**
 * Strengthen the function application to the expected type.
 *
 * @method "invoke_with_expecting_"
 * @restricts "function's type"
 * @restricts "tuple's type"
 * @restricts "type"
 */
Semantic restriction "invoke_with_expecting_" is
[
	f : function meta,
	args : tuple meta,
	expectedType : type
|
	theType : type;
	theType ?= expectedType's instance;
	theType
];

/**
 * Eject and answer the contents of the specified variable. The variable is
 * in the unassigned state after the primitive completes.
 *
 * @category "Primitives" "Variables" "Queries" "Mutators"
 * @method "eject_↑"
 * @param "var" "variable"
 *        A variable.
 * @returns "any"
 *    The value ejected from the variable.
 * @raises "cannot-read-unassigned-variable exception"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable
		|
			Primitive GetClearing (failureCode : enumeration of {
				cannot-read-unassigned-variable code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var>>
			expecting any
		] : any;
	Public method "eject_↑" is f;
	Alias "eject_" to atom for "eject_↑";
]
with <>;

/**
 * @method "eject_"
 * @restricts "variable meta"
 */
Semantic restriction "eject_↑" is
[
	varType : variable meta
|
	varType's read type
];

/**
 * Atomically read the value of {@param "var"} and store {@param "newValue"}.
 *
 * @category "Primitives" "Variables" "Queries" "Mutators" "Synchronization"
 * @method "atomically read_↑and store_"
 * @param "var" "variable"
 *        A variable.
 * @param "newValue" "any"
 *        The new value to store into {@param "var"}.
 * @returns "any"
 *    The value originally stored in {@param "var"}.
 * @raises "cannot-read-unassigned-variable exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable,
			newValue : any
		|
			Primitive AtomicGetAndSet (failureCode : enumeration of {
				cannot-read-unassigned-variable code,
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, newValue>>
			expecting any
		] : any;
	Public method "atomically read_↑and store_" is f;
	Alias "atomically read_and store_" to atom for "atomically read_↑and store_";
]
with <>;

/**
 * Atomically read the value of {@param "var"}, compare it to {@param
 * "reference"}, and, if they are discovered to be equal, store {@param
 * "newValue"}.
 *
 * @category "Primitives" "Variables" "Queries" "Mutators" "Synchronization"
 * @method "atomically compare_↑to_and,⁇if equal,⁇store_"
 * @param "var" "variable"
 *        A variable.
 * @param "reference" "any"
 *        The value against which the content of {@param "var"} should be
 *        compared.
 * @param "newValue" "any"
 *        The new value to conditionally store into {@param "var"}.
 * @returns "boolean"
 *    {@method "true"} if the operation succeeded and {@param "newValue"} was
 *    stored into {@param "var"}, {@method "false"} otherwise.
 * @raises "cannot-read-unassigned-variable exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable,
			reference : any,
			newValue : any
		|
			Primitive AtomicCompareAndSwap (failureCode : enumeration of {
				cannot-read-unassigned-variable code,
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, reference, newValue>>
			expecting boolean
		] : boolean;
	Public method "atomically compare_↑to_and,⁇if equal,⁇store_" is f;
	Alias "atomically compare_to_and,⁇if equal,⁇store_"
		to atom for "atomically compare_↑to_and,⁇if equal,⁇store_";
]
with <>;

/**
 * Atomically compute the sum of the value stored in {@param "var"} and {@param
 * "addend"}, and store the sum back into {@param "var"}.
 *
 * @category "Primitives" "Variables" "Queries" "Mutators" "Synchronization"
 * @method "atomically read_↑and add_"
 * @param "var" "readable extended integer variable"
 *        A variable containing the augend.
 * @param "addend" "extended integer"
 *        The addend.
 * @returns "[-∞..∞]"
 *    The augend, i.e., the value originally stored in {@param "var"}.
 * @raises "cannot-add-unlike-infinities exception"
 * @raises "cannot-read-unassigned-variable exception"
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "cannot-overwrite-write-once-variable exception"
 * @raises "Java-marshaling-failed exception"
 * @raises "cannot-modify-final-Java-field exception"
 */
Invoke
[
	f : function;
	f :=
		[
			var : readable extended integer variable,
			addend : extended integer
		|
			Primitive AtomicFetchAndAdd (failureCode : enumeration of {
				cannot-add-unlike-infinities code,
				cannot-read-unassigned-variable code,
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, addend>>
			expecting extended integer
		] : extended integer;
	Public method "atomically read_↑and add_" is f;
	Alias "atomically read_and add_" to atom for "atomically read_↑and add_";
]
with <>;

/**
 * If the specified declaration has an initialization expression, then store it
 * into {@param "var"}.
 *
 * @category "Primitives" "Variables" "Phrases" "Queries" "Mutators"
 * @method "_↑`?=_'s⁇initialization"
 * @param "var" "write-only variable"
 *        A variable.
 * @param "aDeclaration" "declaration phrase"
 *        A declaration.
 * @returns "boolean"
 *    {@method "true"} if {@param "aDeclaration"} has an initialization
 *    expression and it was written into {@param "var"}, {@method "false"}
 *    otherwise.
 */
Invoke
[
	f : function;
	f :=
		[
			var : write-only variable,
			aDeclaration : declaration phrase
		|
			Primitive DeclarationInitializingExpression
				(failureCode : enumeration of {
					cannot-store-incorrectly-typed-value code,
					observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, aDeclaration>>
			expecting boolean
		] : boolean;
	Public method "_↑`?=_'s⁇initialization" is f;
	Alias "_`?=_'s⁇initialization" to atom for "_↑`?=_'s⁇initialization";
]
with <>;

/**
 * Atomically read the value of {@param "var"} and store {@param "newValue"}.
 * No semantic restriction for this operation exists to ensure that the
 * assignment is possible, so it is suitable for generic use.
 *
 * @method "unsafely atomically read_↑and store_"
 * @param "var" "variable"
 *        A variable.
 * @param "newValue" "any"
 *        The new value to store into {@param "var"}.
 * @returns "any"
 *          The value originally stored in {@param "var"}.
 * @category "Synchronization" "Primitives" "Variables" "Queries" "Mutators"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable,
			newValue : any
		|
			Primitive AtomicGetAndSet (failureCode : enumeration of {
				cannot-read-unassigned-variable code,
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, newValue>>
			expecting any
		] : any;
	Public method "unsafely atomically read_↑and store_" is f;
	Alias "unsafely atomically read_and store_"
		to atom for "unsafely atomically read_↑and store_";
]
with <>;

/**
 * Atomically read the value of {@param "var"}, compare it to {@param
 * "reference"}, and, if they are discovered to be equal, store {@param
 * "newValue"} into {@param "var"}. No semantic restriction for this operation
 * exists to ensure that the assignment is possible, so it is suitable for
 * generic use.
 *
 * @method "unsafely atomically compare_↑to_and,⁇if equal,⁇store_"
 * @param "var" "variable"
 *        A variable.
 * @param "reference" "any"
 *        The value against which the content of {@param "var"} should be
 *        compared.
 * @param "newValue" "any"
 *        The new value to store into {@param "var"}.
 * @returns "boolean"
 *          {@method "true"} if the operation succeeded and {@param "newValue"}
 *          was stored into {@param "var"}, {@method "false"} otherwise.
 * @category "Synchronization" "Primitives" "Variables" "Queries" "Mutators"
 */
Invoke
[
	f : function;
	f :=
		[
			var : variable,
			reference : any,
			newValue : any
		|
			Primitive AtomicCompareAndSwap (failureCode : enumeration of {
				cannot-read-unassigned-variable code,
				cannot-store-incorrectly-typed-value code,
				cannot-overwrite-write-once-variable code,
				Java-marshaling-failed code,
				cannot-modify-final-Java-field code,
				observed-variable-written-while-untraced code});
			invoke variableFailureFunction
			with <failureCode, f, <var, reference, newValue>>
			expecting boolean
		] : boolean;
	Public method "unsafely atomically compare_↑to_and,⁇if equal,⁇store_" is f;
	Alias "unsafely atomically compare_to_and,⁇if equal,⁇store_"
		to atom for "unsafely atomically compare_↑to_and,⁇if equal,⁇store_";
]
with <>;
