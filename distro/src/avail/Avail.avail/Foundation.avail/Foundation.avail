/*
 * Foundation.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Foundation"
Versions
	"Avail-1.6.0"
Uses
	"Late Atoms" = ("Brand all visible atoms as hailing from Foundation")
Extends
	"Assertions" =
	(
		"Assert:_",
		"Assert:_(_)",
		"Shouldn't happen",
		"Shouldn't happen(_)",
		"assertion-failed exception"
	),
	"Backtracking" =
	(
		"Backtracking fence_",
		"Try again",
		"all values of_",
		"backtracking fence_",
		"first try",
		"first«_»?value|values of_",
		"no-backtracking-fence exception",
		"no-checkpoint exception",
		"trial element of_",
		"trial`#of_"
	),
	"Bootstrap" =
	(
		/* Core Avail Syntax */
		"whitespace lexer",
		"comment lexer",
		"string token lexer",
		"whole number lexer",
		"keyword lexer",
		"operator lexer",
		"\
			\|[§\
				\|««…:_†§‡,»`|»?\
				\|«Primitive…«(…:_†)»?;§»?\
				\|«$…«:_†»?;§»?\
				\|«_!§»\
				\|«_!»?\
			\|]§\
			\|«:_†»?\
			\|«^«_†‡,»»?",
		"…:_†;",
		"…::=_;",
		"…:_†:=_;",
		"…:=_;",
		"…",
		"_!;",
		"(_::_†)",
		"…#",

		/* Methods */
		"Abstract method_is_",
		"After the current module is unloaded,⁇do_",
		"Alias_to_",
		"Attempt to join_",
		"Breakpoint",
		"Cast|cast_into_else_",
		"Close module_",
		"Copy macros from_to_",
		"Exit_if_",
		"Exit_with_if_",
		"Euler's number",
		"Forward method_is_",
		"Grammatical restriction_is_",
		"In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_",
		"in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_",
		"Invoke|invoke_with_",
		"Invoke_with_,⁇forked at priority_",
		"Lexer_when_is_",
		"Macro_is«_,»_",
		"Mark for_character|characters of read ahead",
		"Park current fiber",
		"Print:_",
		"Error:_",
		"Export_as a new name",
		"Java null",
		"Remove_[_]",
		"Remove current fiber[_]",
		"Reset to mark",
		"Restart_",
		"Restart_with_",
		"Request termination of_",
		"Seal method_at_",
		"Seal method|methods_at existing definitions",
		"Semantic restriction_is_",
		"Set name of function implementation_to_",
		"Sleep for_millisecond|milliseconds",
		"Terminate current fiber",
		"Unpark_",
		"VM error codes",
		"Yield current fiber",
		"abstract definition",
		"any",
		"argument phrase",
		"arg`«_:_`»",
		"assignment phrase",
		"atom",
		"atom for_",
		"all atoms for_",
		"block phrase",
		"boolean",
		"byte",
		"character",
		"code point",
		"comment",
		"concatenate_",
		"constructor of_,⁇parameterized by_",
		"constructor of_,⁇parameterized by_" → "constructor_(«_‡,»)",
		"continuation",
		"current fiber",
		"current fiber can reject a parse",
		"current fiber[_]",
		"current fiber[_]:=_",
		"current module",
		"current module's exported names",
		"current module's visible names",
		"declaration phrase",
		"definition",
		"double",
		"end of file",
		"enumeration of_",
		"exception",
		"explicit subclassing key",
		"expression as statement phrase",
		"expression phrase",
		"extended integer",
		"false",
		"fiber",
		"fiber→_",
		"field map",
		"field type map",
		"first of sequence phrase",
		"float",
		"forward definition",
		"function",
		"function accepting_and returning_",
		"function from_and_",
		"function implementation",
		"function returning any",
		"high-precision timer value",
		"integer",
		"integer range from_(inclusive=_)to_(inclusive=_)",
		"invoke_with_,⁇forked at priority_",
		"keyword",
		"label phrase",
		"lexer filter function",
		"lexer body function",
		"list phrase",
		"literal",
		"literal phrase",
		"literal token",
		"literal token⇒_",
		"ln_",
		"local constant phrase",
		"local variable phrase",
		"macro definition",
		"macro function",
		"map",
		"message bundle",
		"message bundle tree",
		"message_contains groups",
		"method",
		"method definition",
		"method exists named_",
		"method for_",
		"method definition of_for_",
		"method_._,⁇parameterized by_",
		"milliseconds since the Epoch",
		"module",
		"module constant phrase",
		"module variable phrase",
		"natural number",
		"new anonymous module importing_",
		"new atom named_",
		"new_[_]",
		"new_applying_",
		"new⁇heritable«fiber-local»⁇atom named_",
		"new`↑_",
		"new`↑_initialized to_",
		"next character",
		"nonempty string",
		"nontype",
		"number",
		"nybble",
		"object",
		"operator",
		"permuted list phrase",
		"phrase",
		"pojo",
		"pojo array",
		"pojo exception",
		"pojo failure function",
		"pojo self",
		"pojo self type",
		"pojo⊥",
		"primfail`«_:_`»",
		"primitive description of_",
		"primitive failure reason phrase",
		"read_/write_",
		"semantic restrictions for_given_",
		"send phrase",
		"send_with_:_",
		"sequence phrase",
		"seq`«_`»",
		"set",
		"stack dump key",
		"statement phrase",
		"static method_._,⁇parameterized by_",
		"string",
		"super cast phrase",
		"termination requested",
		"token",
		"true",
		"tuple",
		"type",
		"variable",
		"variable reference phrase",
		"variable use phrase",
		"whitespace",
		"whole number",
		"∅",
		"∞",
		"⊤",
		"⊥",
		"-∞",
		"$_",
		"$_@pc=_stack=_[_]caller=_",
		"<_,_`…`|_>",
		"[`…]→_",
		"_(_)@_:_",
		"``_``(_)@_:_",
		"`|_'s⁇local variables`|",
		"`|_'s⁇outer variables`|",
		"`|_'s⁇parameters`|",
		"`|_`|",
		"`|`|_`|`|",
		"`|message_'s⁇parameters`|",
		"`«$_:_`»",
		"`«(_:=_)`»",
		"`«[_`|Primitive__]:_^_`»",
		"`«supercast(_::_)`»",
		"`«_::=_`»",
		"`«_:=_`»",
		"`«_:_:=_`»",
		"`«_:_`»",
		"`«`↑_`»",
		"`«↓_`»",
		"`«↓_`»(_)",
		"{_`|_}",
		"{_→_`|_}",
		"`↑_",
		"↓_",
		"∪_",
		"∪_[_.._]",
		"⌈_⌉",
		"⌊_⌋",
		"_bit∧_",
		"_bit∨_",
		"_bit⊕_",
		"_has definition for_",
		"_has public name_",
		"_has result",
		"_has terminated",
		"_is a primitive",
		"_is open for side effects",
		"_is special",
		"_↑is unassigned",
		"_mod_",
		"_occurrences⁇of_",
		"_parameterized by_",
		"_permuted by_",
		"_reinterpreted as bits",
		"_reinterpreted as float",
		"_reinterpreted as double",
		"_reversed",
		"_to_by_",
		"_'s⁇arguments",
		"_'s⁇arity",
		"_'s⁇atom",
		"_'s⁇bindings",
		"_'s⁇caller",
		"_'s⁇character type number",
		"_'s⁇code point",
		"_'s⁇declaration",
		"_'s⁇declared exceptions",
		"_'s⁇declared type",
		"_'s⁇default type",
		"_'s⁇definitions",
		"_'s⁇element type",
		"_'s⁇element|member type",
		"_'s⁇entry points",
		"_'s⁇expression",
		"_'s⁇expressions",
		"_'s⁇function",
		"_'s⁇function type",
		"_'s⁇genuine lower bound",
		"_'s⁇genuine upper bound",
		"_'s⁇hash",
		"_'s⁇implementation",
		"_'s⁇instances",
		"_'s⁇issuing module",
		"_'s⁇key type",
		"_'s⁇keys",
		"_'s⁇leading types",
		"_'s⁇lexeme",
		"_'s⁇line number",
		"_'s⁇list",
		"_'s⁇literals",
		"_'s⁇maximum stack depth",
		"_'s⁇method",
		"_'s⁇name",
		"_'s⁇name:=_",
		"_'s⁇names",
		"_'s⁇nybblecodes",
		"_'s⁇outer variables",
		"_'s⁇parameters'type",
		"_'s⁇permutation",
		"_'s⁇priority",
		"_'s⁇priority:=_",
		"_'s⁇program counter",
		"_'s⁇public names",
		"_'s⁇read type",
		"_'s⁇result",
		"_'s⁇result type",
		"_'s⁇return type",
		"_'s⁇semantic type",
		"_'s⁇stack",
		"_'s⁇stack pointer",
		"_'s⁇starting position",
		"_'s⁇statements",
		"_'s⁇target",
		"_'s⁇token",
		"_'s⁇tokens",
		"_'s⁇type",
		"_'s⁇value",
		"_'s⁇value type",
		"_'s⁇values",
		"_'s⁇write type",
		"_++_",
		"_+_",
		"_+_→_",
		"_-_",
		"_-=_",
		"_<<_",
		"_<<_keeping_bits",
		"_<_",
		"_>>_",
		"_=_",
		"_[_.._]",
		"_[_.._]→_",
		"_[_↔_]",
		"_[_]",
		"_[_]:=_",
		"_[_]:=_" → "_↑[_]:=_",
		"_«[_]»→_",
		"_«[_]»[_.._]→_",
		"_[_]→_",
		"_\\_",
		"_^_",
		"_×_",
		"_÷_",
		"_→JSON",
		"_→block phrase",
		"_→character",
		"_→double",
		"_→extended integer",
		"_→float",
		"_→function",
		"_→list phrase",
		"_→literal phrase",
		"_→map",
		"_→object",
		"_→object type",
		"_→set",
		"_→statement phrase",
		"_→tuple",
		"_⇒_",
		"_∈current fiber",
		"_∈_",
		"_∩_",
		"_∪_",
		"_≤_",
		"_⊆_",
		"_⨉_^_",

		/* And now the error codes. */
		"I/O-error code",
		"Java-class-not-available code",
		"Java-field-not-available code",
		"Java-field-reference-is-ambiguous code",
		"Java-marshaling-failed code",
		"Java-method-not-available code",
		"Java-method-reference-is-ambiguous code",
		"abstract-method-definition code",
		"alternative-must-not-contain-arguments code",
		"ambiguous-method-definition code",
		"ambiguous-name code",
		"atom-already-exists code",
		"block-is-invalid code",
		"block-compilation-failed code",
		"block-contains-invalid-statements code",
		"block-must-not-contain-outers code",
		"cannot-add-unlike-infinities code",
		"cannot-convert-not-a-number-to-integer code",
		"cannot-divide-by-zero code",
		"cannot-divide-infinities code",
		"cannot-subtract-like-infinities code",
		"cannot-mark-handler-frame code",
		"cannot-modify-final-Java-field code",
		"cannot-multiply-zero-and-infinity code",
		"cannot-read-unassigned-variable code",
		"cannot-store-incorrectly-typed-value code",
		"cannot-swap-contents-of-differently-typed-variables code",
		"case-insensitive-expression-canonization code",
		"continuation-expected-stronger-type code",
		"declaration-kind-does-not-support-assignment code",
		"declaration-kind-does-not-support-reference code",
		"directory-not-empty code",
		"double-question-mark-must-follow-a-token-or-simple-group code",
		"exceeds-VM-limit code",
		"exclamation-mark-must-follow-an-alternation-group code",
		"expected-operator-after-backquote code",
		"fiber-cannot-join-itself code",
		"fiber-produced-incorrectly-typed-result code",
		"fiber-result-unavailable code",
		"file-exists code",
		"forward-method-definition code",
		"handler-sentinel code",
		"illegal-option code",
		"illegal-trace-mode code",
		"incorrect-argument-type code",
		"incorrect-number-of-arguments code",
		"incorrect-type-for-boolean-group code",
		"incorrect-type-for-complex-group code",
		"incorrect-type-for-counting-group code",
		"incorrect-type-for-group code",
		"incorrect-type-for-numbered-choice code",
		"incorrect-use-of-double-dagger code",
		"invalid-handle code",
		"invalid-path code",
		"invalid-primitive-name code",
		"invalid-special-object-number code",
		"key-not-found code",
		"loading-is-over code",
		"lookup macro_with phrases_",
		"macro-argument-must-be-a-phrase code",
		"macro-must-return-a-phrase code",
		"macro-prefix-function-argument-must-be-a-phrase code",
		"method-is-sealed code",
		"method-name-is-not-canonical code",
		"method-return-type-not-as-forward-declared code",
		"module-is-closed code",
		"negative-size code",
		"no-external-process code",
		"no-file code",
		"no-handler-frame code",
		"no-method code",
		"no-method-definition code",
		"no-such-fiber-variable code",
		"not-an-enumeration code",
		"not-open-for-read code",
		"not-open-for-write code",
		"octothorp-must-follow-a-simple-group-or-ellipsis code",
		"operation-not-supported code",
		"partial-success code",
		"permission-denied code",
		"pojo-type-is-abstract code",
		"question-mark-must-follow-a-simple-group code",
		"redefined-with-same-argument-types code",
		"result-disagreed-with-expected-type code",
		"result-type-should-covary-with-arguments code",
		"sequence-contains-invalid-statements code",
		"special-atom code",
		"subscript-out-of-bounds code",
		"too-large-to-represent code",
		"type-restriction-must-accept-only-types code",
		"unbalanced-guillemets code",
		"untimely-parse-rejection code",
		"unwind-sentinel code",
		"vertical-bar-must-separate-tokens-or-simple-groups code",
		"wrong-outers code"
	),
	"Casts" =
	(
		"_`?→_†else_",
		"Cast|cast each of_into_",
		"Cast|cast each of_into_else_",
		"Cast|cast_into_",
		"Cast|cast_into«_‡,»«else_»",
		"bad-cast exception",
		"bad-multiway-cast exception"
	),
	"Categories",
	"Characters" =
	(
		"Arabic numeral",
		"Avail message⁇metacharacter",
		"capitalize_",
		"uppercase_",
		"lowercase_",
		"titlecase_",
		"_is ASCII",
		"_is a letter",
		"_is a control character",
		"_is an Arabic numeral",
		"_is an Avail message⁇metacharacter",
		"_is uppercase",
		"_is lowercase",
		"_is titlecase",
		"_is whitespace",
		"_is line terminator",
		"_is punctuation start",
		"_is punctuation end",
		"_'s⁇character category",
		"_'s⁇character type name",
		"punctuation end for_",
		"punctuation start for_"
	),
	"Collections" =
	(
		"For each of⁇_do_",
		"For each…in|of_§do_",
		"Require:_accepts_",
		"any of_satisfies_",
		"any…in|of_§satisfies_",
		"count of_where_",
		"count of…from|in|of_§where_",
		"each of_satisfies_",
		"each…in|of_§satisfies_",
		"filter_by_",
		"reject each…from_§where_",
		"reject each…,…from_§where_",
		"select each…from_§where_",
		"group each…in|of_§by_",
		"group_by_",
		"map and filter_by_",
		"map_through_",
		"map each…in|of_§through_",
		"only_",
		"_is empty",
		"_[_]else_",
		"_∉_"
	),
	"Concurrency" =
	(
		"Cancel_",
		"For each of⁇_in parallel«_-way»do_",
		"For each…in|of_§in parallel«_-way»do_",
		"For each…,…in|of_§in parallel«_-way»do_",
		"For each…→…in|of_§in parallel«_-way»do_",
		"Fork_",
		"In_millisecond|milliseconds,⁇fork_",
		"Store a runner of_work units into_,\
			\|⁇store a waiter into_,\
			\|⁇store an exception into_",
		"current fiber[_]else_",
		"filter_in parallel«_-way»by_",
		"fork_",
		"future",
		"future of_",
		"injector from_to_by_doing_in parallel_-way",
		"in_millisecond|milliseconds,⁇fork_",
		"map and filter_in parallel«_-way»by_",
		"map_in parallel«_-way»through_",
		"map each…in|of_§in parallel«_-way»through_",
		"map each…,…in|of_§in parallel«_-way»through_",
		"map each…→…in|of_§in parallel«_-way»through_",
		"reject each…from_§in parallel«_-way»where_",
		"reject each…,…from_§in parallel«_-way»where_",
		"reject each…→…from_§in parallel«_-way»where_",
		"select each…from_§in parallel«_-way»where_",
		"select each…,…from_§in parallel«_-way»where_",
		"select each…→…from_§in parallel«_-way»where_",
		"the future of_",
		"worker exception"
	),
	"Control Structures" =
	(
		"Choose|choose_from_where«_is_‡,»«,else_»",
		"Do_until_",
		"Do_until_alternate with_",
		"Do_while_",
		"Do_while_alternate with_",
		"Exit_",
		"Exit_with_",
		"For each…from_to_§do_",
		"For each…from_to_by_§do_",
		"From_to_by_do_",
		"From_to_do_",
		"If|if_then_«else if_then_»«else_»?",
		"If|if__«else|;|]»#",
		"Ignore:_",
		"Repeat_",
		"Repeat__times",
		"Require:_accepts subscripts from_to_by_",
		"Require:_'s⁇keeper is valid",
		"Unless|unless_then_«else unless_then_»«else_»?",
		"Until_",
		"Until_do_",
		"Until_do_alternate with_",
		"While_",
		"While_do_",
		"While_do_alternate with_",
		"here",
		"(_)",
		"((_))",
		"_`?→_†"
	),
	"Early Conditionals" =
	(
		"If_then_",
		"If|if_then_else_",
		"Unless|unless_then_else_",
		"Unless_then_"
	),
	"Early Literals" =
	(
		"“_”"
	),
	"Enumeration Support" =
	(
		"{_}ᵀ",
		"{«_‡,»}ᵀ",
		"_'s⁇instance"
	),
	"Error Codes" =
	(
		"empty-format-variable code",
		"format-variable-interpolation-failed code",
		"invalid-argument code",
		"invalid-format-metacharacter-escape code",
		"invalid-format-metacharacter-use code",
		"invalid-format-variable code",
		"missing-format-variable-binding code",
		"object-instantiation-contains-duplicates code",
		"object-instantiation-did-not-produce-instance code",
		"object-type-extension-contains-duplicates code",
		"object-type-extension-did-not-produce-subtype code",
		"runaway-format-variable code"
	),
	"Exceptions" =
	(
		"Accept parse",
		"Current fiber's unhandled exception handler is_",
		"Guard|guard_«intercept_»«ensure_»",
		"Honor a termination request",
		"Java exception",
		"Java-class-not-available exception",
		"Java-field-not-available exception",
		"Java-field-reference-is-ambiguous exception",
		"Java-marshaling-failed exception",
		"Java-method-not-available exception",
		"Java-method-reference-is-ambiguous exception",
		"Raise_",
		"Unwind fiber and run_",
		"a Java exception caused by_",
		"abstract-method-definition exception",
		"alternative-must-not-contain-arguments exception",
		"ambiguous-method-definition exception",
		"ambiguous-name exception",
		"an exception for_",
		"arithmetic exception",
		"atom-already-exists exception",
		"bad-argument exception",
		"bad-format exception",
		"bad-message exception",
		"bad-phrase exception",
		"bad-primitive exception",
		"bad-yield-type exception",
		"block-compilation-failed exception",
		"block-contains-invalid-statements exception",
		"block-is-invalid exception",
		"block-must-not-contain-outers exception",
		"cannot-add-unlike-infinities exception",
		"cannot-compute-logarithm-for-nonpositive-base exception",
		"cannot-compute-logarithm-of-nonpositive-number exception",
		"cannot-convert-not-a-number-to-integer exception",
		"cannot-create-continuation-for-infallible-primitive-function exception",
		"cannot-define-during-compilation exception",
		"cannot-divide-by-zero exception",
		"cannot-divide-infinities exception",
		"cannot-mark-handler-frame exception",
		"cannot-modify-final-Java-field exception",
		"cannot-multiply-zero-and-infinity exception",
		"cannot-overwrite-write-once-variable exception",
		"cannot-read-unassigned-variable exception",
		"cannot-store-incorrectly-typed-value exception",
		"cannot-subtract-like-infinities exception",
		"cannot-swap-contents-of-differently-typed-variables exception",
		"cascade exception",
		"cascade_",
		"case-insensitive-expression-canonization exception",
		"causal exception",
		"code-generation exception",
		"continuation-expected-stronger-type exception",
		"current fiber's unhandled exception handler",
		"declaration-kind-does-not-support-assignment exception",
		"declaration-kind-does-not-support-reference exception",
		"definition exception",
		"descriptive exception",
		"deserialization-failed exception",
		"descriptive_",
		"directory-not-empty exception",
		"double-question-mark-must-follow-a-token-or-simple-group exception",
		"element-access exception",
		"empty-format-variable exception",
		"error message",
		"exclamation-mark-must-follow-an-alternation-group exception",
		"exceeds-VM-limit exception",
		"expected-operator-after-backquote exception",
		"fiber-cannot-join-itself exception",
		"fiber-is-terminated exception",
		"fiber-produced-incorrectly-typed-result exception",
		"fiber-result-unavailable exception",
		"file-exists exception",
		"format-variable-interpolation-failed exception",
		"forward-method-definition exception",
		"function-disagrees-with-primitive-restriction exception",
		"general-I/O exception",
		"handler-sentinel exception",
		"I/O exception",
		"illegal-option exception",
		"illegal-trace-mode exception",
		"inconsistent-argument-reordering exception",
		"incorrect-argument-type exception",
		"incorrect-continuation-stack-size exception",
		"incorrect-number-of-arguments exception",
		"incorrect-type-for-boolean-group exception",
		"incorrect-type-for-complex-group exception",
		"incorrect-type-for-counting-group exception",
		"incorrect-type-for-group exception",
		"incorrect-type-for-numbered-choice exception",
		"incorrect-use-of-double-dagger exception",
		"instantiation exception",
		"invalid-argument exception",
		"invalid-format-metacharacter-escape exception",
		"invalid-format-metacharacter-use exception",
		"invalid-format-variable exception",
		"invalid-handle exception",
		"invalid-path exception",
		"invalid-primitive-name exception",
		"invocation exception",
		"key-not-found exception",
		"loading-is-over exception",
		"local-type-literal-is-not-a-type exception",
		"macro-argument-must-be-a-phrase exception",
		"macro-must-return-a-phrase exception",
		"macro-prefix-function-argument-must-be-a-phrase exception",
		"macro-prefix-function-index-out-of-bounds exception",
		"macro-prefix-functions-must-return-top exception",
		"method-is-sealed exception",
		"method-name-is-not-canonical exception",
		"method-return-type-not-as-forward-declared exception",
		"missing-format-variable-binding exception",
		"module-is-closed exception",
		"negative-size exception",
		"no-external-process exception",
		"no-file exception",
		"no-handler-frame exception",
		"no-method exception",
		"no-method-definition exception",
		"no-special-object exception",
		"no-such-field exception",
		"no-such-fiber-variable exception",
		"not-an-enumeration exception",
		"not-evaluating-macro exception",
		"not-open-for-read exception",
		"not-open-for-write exception",
		"object-instantiation-contains-duplicates exception",
		"object-instantiation-did-not-produce-instance exception",
		"object-type-extension-contains-duplicates exception",
		"object-type-extension-did-not-produce-subtype exception",
		"observed-variable-written-while-untraced exception",
		"octothorp-must-follow-a-simple-group-or-ellipsis exception",
		"operation-not-supported exception",
		"outer-type-literal-is-not-a-type exception",
		"partial-success exception",
		"permission-denied exception",
		"pojo-type-is-abstract exception",
		"primitive-fallibility-disagrees-with-failure-variable exception",
		"question-mark-must-follow-a-simple-group exception",
		"redefined-with-same-argument-types exception",
		"restricted send_with_:_",
		"result-disagreed-with-expected-type exception",
		"result-type-should-covary-with-arguments exception",
		"runaway-format-variable exception",
		"security exception",
		"sequence-contains-invalid-statements exception",
		"serialization-failed exception",
		"system exception",
		"special-atom exception",
		"subscript-out-of-bounds exception",
		"supercast-expression-must-not-also-be-a-supercast exception",
		"supercast-expression-type-must-not-be-top-or-bottom exception",
		"supercast-must-be-strict-supertype-of-expression-type exception",
		"termination-requested exception",
		"too-large-to-represent exception",
		"trace exception",
		"try_else_",
		"type-restriction-must-accept-only-types exception",
		"unbalanced-guillemets exception",
		"unsupported-operation exception",
		"untimely-parse-acceptance exception",
		"untimely-parse-rejection exception",
		"unwind-sentinel exception",
		"up-arrow-must-follow-argument exception",
		"variable-use exception",
		"vertical-bar-must-separate-tokens-or-simple-groups exception",
		"wrong-outers exception",
		"_caused by_",
		"_'s⁇causal exception",
		"_'s⁇error code",
		"_'s⁇error message",
		"_'s⁇error name",
		"_'s⁇stack summary",
		"_'s⁇throwable",
		"“_”(stack summary)",
		"“_”(frames_of stack summary«,⁇renumbered starting at_»)",
		"“_”(frames_of stack summary«,⁇renumbered starting at_»,⁇cascaded)"
	),
	"Format" =
	(
		"format_with unchecked_",
		"format_with_",
		"format_with«…!::=_‡,»",
		"format_with«_‡,»",
		"partially format_with_",
		"partially format_with«…::=_‡,»"
	),
	"Function Implementations" =
	(
		"L1 call",
		"L1 close",
		"L1 disassembly of_",
		"L1 duplicate",
		"L1 get literal",
		"L1 get local",
		"L1 get local clearing",
		"L1 get outer",
		"L1 get outer clearing",
		"L1 instruction",
		"L1 make tuple",
		"L1 operand",
		"L1 operation",
		"L1 operations for_",
		"L1 permute",
		"L1 push label",
		"L1 push last local",
		"L1 push last outer",
		"L1 push literal",
		"L1 push local",
		"L1 push outer",
		"L1 pop",
		"L1 raw disassembly of_",
		"L1 set literal",
		"L1 set local",
		"L1 set outer",
		"L1 super call",
		"_instruction",
		"_'s⁇nybblecoded operation[_]",
		"_'s⁇nybblecoded operand[_]",
		"`|_'s⁇operands`|",
		"“_”(L1 instructions)",
		"“_”(L1 operation short name)"
	),
	"Functions" =
	(
		"unsafe sender of_returning_",
		"_(«_‡,»)",
		"_(««_»?«`_»?‡,»)",
		"_(_,`…)",
		"_(`…,_)"
	),
	"Late Atoms" =
	(
		"«Public»?_is a new⁇heritable«fiber-local»⁇atom",
		"«Public»?_is a|an new⁇field⁇atom",
		"all atoms for_where_",
		"atom for_where_",
		"_hails from Foundation",
		"Foundation atom for_",
		"Foundation$…",
		"Foundation$…#",
		"_[_]else_"
	),
	"Late Definers" =
	(
		"Method_is stable at_«compute with_»?",
		"Method_is_",
		"Private abstract method_is_",
		"Private forward method_is_",
		"Private macro_is«_,»_",
		"Private method_is_",
		"Private stable abstract method_is_",
		"Private stable forward method_is_",
		"Private stable method_is_",
		"Public abstract method_is_",
		"Public forward method_is_",
		"Public macro_is«_,»_",
		"Public method_is_",
		"Public stable abstract method_is_",
		"Public stable forward method_is_",
		"Public stable method_is_",
		"Public read-only variable_is_",
		"Public read-only variable_↑is_",
		"Public variable_is_",
		"Public variable_↑is_",
		"Require:_is canonical",
		"Require:_is private",
		"Require:_is public",
		"Require:_is unambiguous",
		"Stable abstract method_is_",
		"Stable forward method_is_",
		"Stable method_is_"
	),
	"Late Math" =
	(
		"a double from integer=_,fraction=_,exponent=_",
		"an integer from_",
		"an unsigned integer from_",
		"factor_",
		"greatest common denominator of_and_",
		"least common multiple of_and_",
		"log_of_",
		"low_bits of_",
		"max_",
		"min_",
		"negative integer",
		"nonpositive integer",
		"prime factorization of_",
		"type promotion function for_",
		"-_",
		"[_.._]",
		"[_.._)",
		"(_.._]",
		"(_.._)",
		"⌈_⌉is inclusive",
		"⌊_⌋is inclusive",
		"⌊√_⌋",
		"π",
		"_is a perfect square",
		"_is a strong probable prime to base_",
		"_is even",
		"_is finite",
		"_is infinite",
		"_is odd",
		"_is prime",
		"_(decimal)",
		"_②>_①",
		"_②≥_①",
		"_↑+=_", "_+=_",
		"_↑-=_", "_-=_",
		"_↑×=_", "_×=_",
		"_↑÷=_", "_÷=_",
		"_→_bytes",
		"_^_mod_",
		"«_‡max»",
		"«_‡min»",
		"«_‡«=|≤|<»!»",
		"«_‡«=|≥|>»!»",
		"comparison chain semantic restriction function"
	),
	"Late Restrictions" =
	(
	),
	"Lexers" =
	(
		"end of line comment lexer",
		"explicit radix integer lexer",
		"binary integer lexer",
		"octal integer lexer",
		"hexadecimal integer lexer",
		"floating point number lexer",
		"raw string lexer",
		"character set lexer"
	),
	"Literals" =
	(
		"enclosing module",
		"<«_‡,»>",
		"{«_‡,»}",
		"{«_→_‡,»}",
		"$…",
		"$…#",
		"¢…!"
	),
	"Logic" =
	(
		"¬_",
		"¬_=_",
		"¬_≠_",
		"_∧_",
		"_∨_",
		"_≠_",
		"«_‡=»",
		"_⊕_",
		"_`↑_",
		"_↓_",
		"_→_",
		"_←_",
		"_↔_",
		"_↛_",
		"_↚_"
	),
	"Macro Support" =
	(
		"Declare loop variable_as_",
		"Push scope",
		"Pop scope",
		"Require:_named_does not shadow",
		"constituent tokens",
		"static tokens",
		"parse map",
		"parse map:=_",
		"scope map",
		"scope map:=_",
		"strengthen_for call of_using_",
		"Undeclare_"
	),
	"Maps" =
	(
		"any…→…in|of_§satisfies_",
		"counts for_",
		"count of…→…from|in|of_§where_",
		"duplication map for_",
		"each…→…in|of_§satisfies_",
		"environment map",
		"reject each…→…from_§where_",
		"select each…→…from_§where_",
		"For each…→…in|of_§do_",
		"integrate_and_with_",
		"integrate«_‡,and⁇»with_",
		"map each…→…in|of_§through_",
		"${…}«else_»",
		"${…#}«else_»"
	),
	"Methods" =
	(
		"_is«not»?implemented at_"
	),
	"Objects" =
	(
		"a|an_«with«_«:»?:=_‡,»»",
		"extend_with«_:_‡,»",
		"«Public»?«Explicit|explicit»?\
			\|Class|class_extends_\
			\|«with immutable⁇field|fields««public»?«reconstructible»?_:_«(accessor⁇_)»‡,»»\
			\|«with mutable field|fields««public»?«shared»?«referable»?«read-only»?\
				\|_:_«(««accessor|mutator|referrer»!_‡,»)»‡,»»\
			\|«with reconstructor|reconstructors««public»?(«_‡,»)‡,»»",
		"_as_«with«_::=_‡,»»"
	),
	"Observing" =
	(
		"Observe|observe_",
		"Whenever_changes,⁇do_",
		"write reactor",
		"_'s⁇write reactors+=_→_",
		"_'s⁇write reactors-=_"
	),
	"Phrases" =
	(
		"Evaluate|evaluate_",
		"this token:…",
		"_compiled",
		"‘_’",
		"``_``(_)",
		"``_``",
		"`«<«_‡,»>`»",
		"`«[_`|_]:_`»",
		"`«[_]:_`»",
		"⟦§_!⟧",
		"⦊§_⦉",
		"_token",
		"_'s⁇classifier"
	),
	"Pojos" =
	(
		"Java byte",
		"Java char",
		"Java int",
		"Java long",
		"Java short",
		"field_._",
		"field_.…",
		"method_.…parameterized by_",
		"method_.…parameterized by_" → "method_.…(«_‡,»)",
		"static field_._",
		"static field_.…",
		"static method_.…parameterized by_",
		"static method_.…parameterized by_" → "static method_.…(«_‡,»)",
		"_[]",
		"_<«_‡,»>",
		"«…‡.»«<«_‡,»>»?"
	),
	"Security" =
	(
		"Completely seal method_"
	),
	"Sets" =
	(
		"_Δ_",
		"_∋_",
		"_⊂_",
		"_⊇_",
		"_⊉_",
		"_⊃_",
		"_∌_",
		"_⊄_",
		"_⊅_",
		"any_",
		"any_else_"
	),
	"Strings" =
	(
		"Require:_contains no Avail message⁇metacharacters",
		"UUID string",
		"hexadecimal character",
		"trim_",
		"(A`|An)“_”«else_»",
		"(The)“_”«else_»",
		"(a`|an)“_”«else_»",
		"(the)“_”«else_»",
		"_contains Avail message⁇metacharacters",
		"_with Avail message⁇metacharacters escaped",
		"_(base_)",
		"_→UUID",
		"_→code points",
		"_→string",
		"“_”(hex)",
		"“_”(UUID)",
		"“_”«else_»(as list partitioned by_)",
		"“_”«else_»(as simple list)",
		"“_”«else_»(as«conjunctive|disjunctive»!list)",
		"“_”«else_»\
		\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
	),
	"Synchronization" =
	(
		"Atomically update_using_",
		"Atomically update_↑using_",
		"Await_",
		"Await__time|times",
		"Join_",
		"Join_,then honor a termination request",
		"Lock|lock_for_",
		"Park current fiber,then honor a termination request",
		"Signal_",
		"Signal__time|times",
		"Signal_if satisfied",
		"a condition of_such that_",
		"a monitor«named_»",
		"a non-reentrant mutex«named_»",
		"a reentrant mutex«named_»",
		"a semaphore«named_»with_«out of_»permit|permits",
		"binary semaphore",
		"cannot-await-condition exception",
		"cannot-exceed-maximum-permits exception",
		"cannot-signal-condition exception",
		"condition",
		"condition-unsatisfied exception",
		"condition exception",
		"counting semaphore",
		"dequeue_from_",
		"monitor",
		"non-reentrant mutex",
		"parking queue",
		"priority enqueue_on_",
		"reentrant mutex",
		"reentry exception",
		"semaphore",
		"semaphore exception",
		"synchronization device",
		"synchronization exception",
		"unsafely atomically read_and store_",
		"unsafely atomically compare_to_and,⁇if equal,⁇store_",
		"_is satisfied",
		"_'s⁇misused condition",
		"_'s⁇misused semaphore",
		"_'s⁇owner's name",
		"_'s⁇reentered mutex",
		"_'s⁇reentering fiber"
	),
	"Tuples" =
	(
		"Require:_accepts_«(check indices)»?",
		"Require:_[_.._]is ever valid",
		"SHA-_digest of_",
		"UUID",
		"a UUID",
		"all indices of_in_",
		"all indices of_where_",
		"all indices of…in_§where_",
		"deserialize_based on_",
		"distinct_",
		"drop from_until_",
		"drop from_while_",
		"drop…from_§until_",
		"drop…from_§where_",
		"drop…from_§while_",
		"drop_from_",
		"explode_at element_«,⁇skipping empties»?",
		"select each…,…from_§where_",
		"first index of_in_",
		"first index of_where_",
		"first index of…in_§where_",
		"insertion index of|for_in_with_",
		"last index of_where_",
		"last index of…in_§where_",
		"For each…,…in|of_§do_",
		"left fold_into_through_",
		"left fold_through_",
		"map each…,…in|of_§through_",
		"merge sort_",
		"merge sort_with_",
		"merge sort…,…in|of_§by_",
		"quicksort_",
		"quicksort_with_",
		"quicksort…,…in|of_§by_",
		"relevant`|_`|",
		"replace all occurrences of_in_with_",
		"replace the first occurrence of_in_with_",
		"right fold_through_",
		"serialize_",
		"split_after_",
		"split_before_",
		"stripe_at_",
		"take from_until_",
		"take from_where_",
		"take from_while_",
		"take…from_§until_",
		"take…from_§where_",
		"take…from_§while_",
		"take_from_",
		"tuple type of_[_.._]",
		"zip_",
		"∑_",
		"∏_",
		"_ends with_",
		"_padded with_to a multiple of_",
		"_starts with_",
		"_to_",
		"_'s⁇head",
		"_'s⁇last",
		"_'s⁇tail",
		"_[_..]",
		"_[.._]",
		"_[_.._]else_",
		"_[_..]else_",
		"_[.._]else_",
		"_*",
		"_+",
		"_`?",
		"_↑++=_",
		"_++=_",
		"_↑-=_",
		"_-=_",
		"«_‡zip»"
	),
	"Types" =
	(
		"[«_‡,»]→_",
		"<«_‡,»`…`|_.._>",
		"<«_‡,»`…`|_..>",
		"<«_‡,»`…`|.._>",
		"<«_‡,»`…`|_>",
		"<«_‡,»`…`|>",
		"{_`|_.._}",
		"{_`|_..}",
		"{_`|.._}",
		"{_`|}",
		"{_→_`|_.._}",
		"{_→_`|_..}",
		"{_→_`|.._}",
		"{_→_`|}",
		"“_”(cardinality restriction)",
		"_⊈_"
	),
	"Variables" =
	(
		"Clear_↑", "Clear_",
		"Swap_↑and_↑", "Swap_and_",
		"atomically compare_↑to_and,⁇if equal,⁇store_",
			"atomically compare_to_and,⁇if equal,⁇store_",
		"atomically read_↑and add_",
			"atomically read_and add_",
		"atomically read_↑and store_",
			"atomically read_and store_",
		"eject_↑", "eject_",
		"(↓new`↑_:=_)",
		"(↓new`↑_`?=_)",
		"_↑++", "_++",
		"++_↑", "++_",
		"(_↑++)", "(_++)",
		"(++_↑)", "(++_)",
		"_↑--", "_--",
		"--_↑", "--_",
		"(_↑--)", "(_--)",
		"(--_↑)", "(--_)",
		"_↑`?=_", "_`?=_",
		"_↑`?=_'s⁇initialization", "_`?=_'s⁇initialization",
		"_↑is assigned", "_is assigned",
		"_is unassigned",
		"↓_else_",
		"`↑_↑",
		"«…‡,»::=_;"
	),
	"Very Early Definers" =
	(
		"Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_",
		"Reject parse(confidence=_),expected:_"
	)
Body

Brand all visible atoms as hailing from Foundation;

[
	/* Forbid overriding of the exports… */
	forbiddenOverrides ::= current module's exported names;
	/* …but certain exports are allowed for overriding, or need to be dealt with
	 * specially.
	 */
	specialOverrides ::= {$"“_”"};
	/* Seal the asymmetric difference at every existing definition. */
	Seal methods forbiddenOverrides \ specialOverrides at existing definitions;
]();
