/*
 * Early Control Structures.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Control Structures"
Versions
	"Avail-1.6.1"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Definers",
	"Early Literals",
	"Early Variables"
Names
	"Cast|cast_into_",
	"Exit_",
	"Exit_with_",
	"From_to_do_",
	"Ignore:_",
	"(_)",
	"((_))",
	"_`?→_†"
Body

/**
 * Ignore the specified value. This allows the return value of an expression to
 * be discarded, effectively converting it into a statement.
 *
 * @method "Ignore:_"
 * @param "value" "any"
 *        An arbitrary value which will be ignored.
 * @returns "⊤"
 * @category "Control Structures" "Conversions"
 */
Public method "Ignore:_" is
[
	value : any
|
	/* No implementation required. */
] : ⊤;

/**
 * Establish grammatical boundaries around an expression. This serves to assist
 * the compiler in disambiguating expressions. Used well, it also improves
 * readability of source text by programmers.
 *
 * @macro "(_)"
 * @param "expr" "expression phrase"
 *        An expression.
 * @returns "expression phrase"
 *        The argument.
 * @category "Control Structures"
 */
Public macro "(_)" is
[
	expr : expression phrase
|
	If expr ∈ super cast phrase then
	[
		Reject parse, expected:
			"argument of parentheses not to be a supercast"
	];
	expr
];

/**
 * Establish a conditional expression whose static return type is the type union
 * of its two possible functions' return types.
 *
 * @method "If|if_then_else_"
 * @restricts "boolean's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	predicate : boolean's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type ∪ falseFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is true (which it is).
 *
 * @method "If|if_then_else_"
 * @restricts "true's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	tautology : true's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is false (which it is).
 *
 * @method "If|if_then_else_"
 * @restricts "false's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	contradiction : false's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	falseFunction's return type
];

/**
 * If the function {@param "accept"} accepts {@param "value"} as an argument
 * (based on its runtime type), then invoke {@param "accept"} with {@param
 * "value"}. Otherwise, cause an assertion failure. This is obsolete once
 * exceptions are available, and should not be exported beyond this package.
 *
 * @method "Cast|cast_into_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "function accepting <⊥> and returning ⊤"
 *        The function to invoke if {@param "value"} is a subtype of the its
 *        parameter type.
 * @returns "⊤"
 * @category "Bootstrap" "Casts" "Conditionals"
 */
Public method "Cast|cast_into_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤
|
	Primitive CastInto (failureCode : natural number);
	valueDescription ::= primitive description of value;
	acceptedDescription ::= primitive description of accept's type[1];
	t : tuple := concatenate <
		"Failed run-time cast: ",
		valueDescription,
		" was not an instance of ",
		acceptedDescription>;
	s : string;
	s ?= t;
	Shouldn't happen (s)
] : ⊤
styled by conditional styler;

/**
 * Strengthen the return type of {@method "Cast|cast_into_else"} so that it may
 * be used as a value-producing expression. If the type cast is unnecessary,
 * then reject the current parse.
 *
 * @method "Cast|cast_into_else_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "Cast|cast_into_else_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type,
	reject : nullary procedure's type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		Cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If accept[1] ∩ value = ⊥ then
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" and ",
			“accept[1]”,
			" are disjoint">;
		Cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type ∪ reject's return type
];

/**
 * Strengthen the return type of {@method "Cast|cast_into_"} so that it may be
 * used as a value-producing expression. If the type cast is unnecessary or
 * invalid, then reject the current parse.
 *
 * @method "Cast|cast_into_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 */
Semantic restriction "Cast|cast_into_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		Cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If value ∩ accept[1] = ⊥ then
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" is not a supertype of ",
			“accept[1]”>;
		Cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type
];

/* Nesting parentheses directly is bad style, and leads to confusing
 * expressions, so forbid it.
 */
Invoke
[
	names ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	Grammatical restriction names is <names>;
]
with <>;


/**
 * Cast the value into the specified <em>statically evaluated</em> type.  If the
 * value at runtime does not comply with this type, fail the same way any call
 * overly strengthened by a semantic restriction would fail.
 *
 * @method "_`?→_†"
 * @param "value" "any"
 *        The value whose type is to be strengthened.
 * @param "strongerType" "type"
 *        Evaluated at compile time to produce the strengthened type of this
 *        call.
 * @returns "any"
 *          Restricted to the {@param "strongerType"}.
 * @category "Casts"
 */
Public method "_`?→_†" is
[
	value : any,
	strongerType : type
|
	value
]
styled by conditional styler;

/**
 * Cast the value into the specified <em>statically evaluated</em> type.  If the
 * value at runtime does not comply with this type, fail the same way any call
 * overly strengthened by a semantic restriction would fail.
 *
 * The value's static type and the provided type must have a non-⊥ intersection.
 * Additionally, the value's static type must not already be sufficiently strong
 * by being a subtype of the provided type.  The resulting type of the call site
 * is the intersection of the value's static type and the provided type.
 *
 * @method "_`?→_†"
 * @restricts "valueType" "any's type"
 *        The static type of the expression whose type is to be strengthened.
 * @restricts "strongerMeta" "type's type"
 *        Evaluated at compile time to produce the strengthened type of this
 *        call.  The actual type is passed at runtime, but the metatype is what
 *        gets provided to this semantic restriction.
 */
Semantic restriction "_`?→_†" is
[
	valueType : any's type,
	strongerMeta : type's type
|
	strongerType ::= strongerMeta's instance;
	If valueType ∩ strongerType = ⊥ then
	[
		Reject parse, expected:
			cast
				concatenate <
					"cast value's type (",
					“valueType”,
					") and target type (",
					“strongerType”,
					") to be related.">
			into [s : string | s]
	];
	If valueType ⊆ strongerType then
	[
		Reject parse, expected:
			"a necessary cast expression, but the value will always be an \
			\|instance of the specified type."
	];
	valueType ∩ strongerType
];

/**
 * The parenthesis method "(_)" is not allowed to nest syntactically, which is
 * dealt with by a grammatical restriction.  However, this can lead to confusing
 * diagnostics, since attempted grammatical restriction violations are never
 * reported as compilation errors – they're simply rejected.
 *
 * @macro "((_))"
 * @param "expr" "expression phrase" An expression.
 * @returns "⊥" Because it always rejects its invocations.
 * @category "Control Structures"
 */
Public macro "((_))" is
[
	expr : expression phrase
|
	Reject parse,
		expected: "something other than directly nested parentheses"
];

/**
 * The cardinality of ⊥ is also ⊥. This is supplied to disambiguate "`|`|_`|`|".
 *
 * @method "`|`|_`|`|"
 * @param "bottomMeta" "⊥'s type"
 * @returns "⊥"
 * @category "Types" "Queries"
 */
Method "`|`|_`|`|" is
[
	bottomMeta : ⊥'s type
|
	⊥
];

zeroOrOne ::= integer range from 0 (inclusive = true) to 1 (inclusive = true);
optionalSendPhraseType ::= <<>, send phrase… | zeroOrOne>;

/**
 * Create a send phrase from the supplied message name (atom), list phrase of
 * arguments, and return type.  Strengthen the return type based on the
 * applicable method definitions.  Also launch a fiber for each applicable
 * semantic restriction and strengthen the return type with their eventual
 * results.
 *
 * If any semantic restrictions reject parsing, reject it again immediately in
 * the current fiber.  This ignores unwind blocks, so don't export this
 * mechanism past Exceptions, where a safer form is created.
 *
 * @method "bootstrap restricted send_with_:_"
 * @param "message" "atom"
 *        The atom that names the method to be invoked by the send phrase.
 * @param "args" "list phrase"
 *        The list phrase of phrases that are supplied as arguments of the send
 *        phrase.
 * @param "basicReturnType" "type"
 *        The return type of the send phrase, prior to strengthening by
 *        applicable method definitions and semantic restrictions.
 * @returns "send phrase⇒⊤"
 *        The strengthened send phrase.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group-or-ellipsis exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Method "bootstrap restricted send_with_:_" is
[
	message : atom,
	args : list phrase,
	basicReturnType : type
|
	pair ::= restricted report and send message with args : basicReturnType;
	optionalSendPhrase ::= pair[1] ?→ optionalSendPhraseType;
	If optionalSendPhrase = <> then
	[
		Reject parse strongly, expected: pair[2] ?→ string
	];
	optionalSendPhrase[1] ?→ send phrase
] : send phrase;

Style atom for "Exit_if_" with nonlocal control styler;

/**
 * Reject the current parse unless the value supplied upon exit of a
 * continuation conforms to its function type's return type.
 *
 * @method "Exit_with_if_"
 * @restricts "continuation meta"
 * @restricts "any meta"
 */
Semantic restriction "Exit_with_if_" is
[
	continuationType : continuation meta,
	exitType : any meta,
	conditionType : boolean's type
|
	functionType ::= continuationType's function type;
	Unless exitType ⊆ functionType's return type then
	[
		Reject parse, expected:
			cast concatenate <
				"continuation (",
				“continuationType”,
				") to accept value (",
				“exitType”,
				")"
			> into [s : string | s]
	];
	⊤
];

Style atom for "Exit_with_if_" with nonlocal control styler;

exitIfAtom ::= atom for "Exit_if_";

/**
 * Exit the continuation unconditionally. Execution proceeds as though the
 * continuation had just returned from its current function, and the current
 * continuation is completely replaced by the specified continuation's resumed
 * caller.
 *
 * @method "Exit_"
 * @param "aContinuation" "$[…]→⊤"
 *        The continuation to exit.
 * @returns "⊥"
 * @category "Control Structures" "Continuations"
 */
Public macro "Exit_" is
[
	aContinuation : expression phrase ⇒ $[…]→⊤
|
	trueLiteral ::= `true`("true")@0:0 → literal phrase;
	sendPhrase ::= bootstrap restricted send exitIfAtom
		with <aContinuation, trueLiteral> → list phrase
		: ⊥;
	cast sendPhrase into [x : send phrase ⇒ ⊥ | x]
] : send phrase ⇒ ⊥
styled by nonlocal control styler;

exitWithIfAtom ::= atom for "Exit_with_if_";

/**
 * Exit the continuation unconditionally. Execution proceeds as though the
 * continuation had just returned from its current function, and the current
 * continuation is completely replaced by the specified continuation's resumed
 * caller.
 *
 * @method "Exit_with_"
 * @param "aContinuation" "$[…]→⊤"
 *        The continuation to exit.
 * @param "value" "any"
          The value to return from the continuation.
 * @returns "⊥"
 * @category "Control Structures" "Continuations"
 */
Public macro "Exit_with_" is
[
	aContinuation : expression phrase ⇒ continuation,
	value : expression phrase ⇒ any
|
	trueLiteral ::= `true`("true")@0:0 → literal phrase;
	sendPhrase ::= bootstrap restricted send exitWithIfAtom
		with <aContinuation, value, trueLiteral> → list phrase
		: ⊥;
	cast sendPhrase into [x : send phrase ⇒ ⊥ | x]
] : send phrase ⇒ ⊥
styled by nonlocal control styler;

/**
 * Reject the current parse unless the value supplied upon exit of a
 * continuation conforms to its function type's return type.
 *
 * @method "Exit_with_"
 * @restricts "continuation meta"
 * @restricts "any meta"
 */
Semantic restriction "Exit_with_" is
[
	continuationType : continuation meta,
	exitType : any meta
|
	functionType ::= continuationType's function type;
	Unless exitType ⊆ functionType's return type then
	[
		Reject parse, expected:
			cast concatenate <
				"continuation (",
				“continuationType”,
				") to accept value (",
				“exitType”,
				")"
			> into [s : string | s]
	];
	⊥
];

/**
 * Basic counting loop with early exit support. Invoke {@param "action"} once
 * with each consecutive number in the range established by {@param "start"} and
 * {@param "end"}.
 *
 * @method "From_to_do_"
 * @param "start" "natural number"
 *        The start value, inclusive.
 * @param "end" "integer range from 0 (inclusive=true) to ∞ (inclusive=true)"
 *        The end value, inclusive.
 * @param "action" "function accepting <⊥> and returning boolean"
 *        A function that accepts a value in the specified range. If it answers
 *        {@method "true"}, then continue to iterate; if it answers {@method
 *        "false"}, then terminate iteration early.
 * @returns "⊤"
 * @category "Bootstrap" "Control Structures" "Loops"
 */
Public method "From_to_do_" is
[
	start : natural number,
	end : integer range from 0 (inclusive=true) to ∞ (inclusive=true),
	action : function accepting <⊥> and returning boolean
|
	$loop : ⊤;
	Exit loop if end < start;
	shouldExit ::= invoke action with <start> = false;
	Exit loop if shouldExit;
	Restart loop with <start + 1, end, action>
] : ⊤
styled by loop styler;

/**
 * Sanity check the function's arguments against the implied range of iteration.
 *
 * @method "From_to_do_"
 * @restricts "natural number's type"
 * @restricts "(integer range from 0 (inclusive=true) to
 * ∞ (inclusive=true))'s type"
 * @restricts "(function accepting <⊥> and returning boolean)'s type"
 */
Semantic restriction "From_to_do_" is
[
	start : natural number's type,
	end : (integer range from 0 (inclusive=true) to ∞ (inclusive=true))'s type,
	action : (function accepting <⊥> and returning boolean)'s type
|
	lower ::= start's genuine lower bound;
	If lower ≤ end's genuine upper bound then
	[
		upper ::= end's genuine upper bound + 1;
		subscripts ::= integer range
			from lower (inclusive = lower's type ⊆ start)
			to upper (inclusive = false);
		If subscripts ⊆ action[1] then
		[
			/* This is the happy case, but logical negation isn't available yet.
			 */
		]
		else
		[
			messageTuple ::= concatenate <
				"repeatedly applied function to accept all integers from ",
				“lower”,
				" to ",
				“end's genuine lower bound”,
				" (but it only accepts ",
				“action[1]”,
				")">;
			cast messageTuple into
			[
				message : string
			|
				Reject parse, expected: message
			]
		];
	];
	⊤
];


/* An error message for "Restart_with_". */
sizesIncompatibleMessage ::=
	"size of argument tuple to be compatible with size of \
	\|continuation's parameter tuple";

/**
 * Reject the current parse if the argument tuple cannot possibly match the
 * continuation's parameter tuple.
 *
 * @method "Restart_with_"
 * @restricts "continuation meta"
 * @restricts "tuple meta"
 */
Semantic restriction "Restart_with_" is
[
	continuationType : continuation meta,
	argumentsType : tuple meta
|
	functionType ::= continuationType's function type;
	parametersType ::= functionType's parameters' type;
	parametersSizes ::= ||parametersType||;
	/* If `parameterSizes` = ⊥, then `parametersType` = ⊥. In this case, we
	 * cannot statically ascertain anything interesting about the function and
	 * the arguments to apply.
	 */
	If (parametersSizes = ⊥) = false then
	[
		argumentsSizes ::= ||argumentsType||;
		validSizes ::= parametersSizes ∩ argumentsSizes;
		If validSizes = ⊥ then
		[
			Reject parse, expected: sizesIncompatibleMessage
		];
	];
	⊥
];

Style atom for "Restart_with_" with nonlocal control styler;

/* Don't permit (_)  as the second argument of  Assert:_(_). */
Invoke
[
	cast ::= [ t : {string|natural number} | t ];
	names ::= cast <"Assert:_(_)">→set into cast;
	exclusions ::= cast <"(_)">→set into cast;
	Grammatical restriction names is <∅, exclusions>;
]
with <>;
