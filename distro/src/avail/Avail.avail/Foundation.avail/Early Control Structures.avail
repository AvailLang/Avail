/*
 * Early Control Structures.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Control Structures"
Versions
	"1.4.0"
Uses
	"Bootstrap",
	"Early Assertions",
	"Early Conditionals",
	"Early Definers",
	"Early Enumeration Support",
	"Early Literals",
	"Early Variables"
Names
	"Ignore:_",
	"From_to_do_",
	"Cast|cast_into_",
	"(_)",
	"((_))"
Body

/**
 * Ignore the specified value. This allows the return value of an expression to
 * be discarded, effectively converting it into a statement.
 *
 * @method "Ignore:_"
 * @param "value" "any"
 *        An arbitrary value which will be ignored.
 * @returns "⊤"
 * @category "Control Structures" "Conversions"
 */
Public method "Ignore:_" is
[
	value : any
|
	/* No implementation required. */
] : ⊤;

/**
 * Establish grammatical boundaries around an expression. This serves to assist
 * the compiler in disambiguating expressions. Used well, it also improves
 * readability of source text by programmers.
 *
 * @macro "(_)"
 * @param "expr" "expression phrase"
 *        An expression.
 * @returns "expression phrase"
 *        The argument.
 * @category "Control Structures"
 */
Public macro "(_)" is
[
	expr : expression phrase
|
	If expr ∈ super cast phrase then
	[
		Reject parse, expected: "argument of parentheses not to be a supercast"
	];
	expr
];

/**
 * Establish a conditional expression whose static return type is the type union
 * of its two possible functions' return types.
 *
 * @method "If|if_then_else_"
 * @restricts "boolean's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	predicate : boolean's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type ∪ falseFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is true (which it is).
 *
 * @method "If|if_then_else_"
 * @restricts "true's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	tautology : true's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is false (which it is).
 *
 * @method "If|if_then_else_"
 * @restricts "false's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	contradiction : false's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	falseFunction's return type
];

/**
 * If the function {@param "accept"} accepts {@param "value"} as an argument
 * (based on its runtime type), then invoke {@param "accept"} with {@param
 * "value"}. Otherwise, cause an assertion failure. This is obsolete once
 * exceptions are available, and should not be exported beyond this package.
 *
 * @method "Cast|cast_into_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "function accepting <⊥> and returning ⊤"
 *        The function to invoke if {@param "value"} is a subtype of the its
 *        parameter type.
 * @returns "⊤"
 * @category "Bootstrap" "Casts" "Conditionals"
 */
Public method "Cast|cast_into_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤
|
	Primitive CastInto (failureCode : natural number);
	valueDescription ::= primitive description of value;
	acceptedDescription ::= primitive description of accept's type[1];
	t : tuple := concatenate <
		"Failed run-time cast: ",
		valueDescription,
		" was not an instance of ",
		acceptedDescription>;
	s : string;
	s ?= t;
	Assert: false (s)
] : ⊤;

/**
 * Strengthen the return type of {@method "Cast|cast_into_else"} so that it may
 * be used as a value-producing expression. If the type cast is unnecessary,
 * then reject the current parse.
 *
 * @method "Cast|cast_into_else_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "Cast|cast_into_else_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type,
	reject : nullary procedure's type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If accept[1] ∩ value = ⊥ then
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" and ",
			“accept[1]”,
			" are disjoint">;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type ∪ reject's return type
];

/**
 * Strengthen the return type of {@method "Cast|cast_into_"} so that it may be
 * used as a value-producing expression. If the type cast is unnecessary or
 * invalid, then reject the current parse.
 *
 * @method "Cast|cast_into_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 */
Semantic restriction "Cast|cast_into_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If value ∩ accept[1] = ⊥ then
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" is not a supertype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type
];

/* Nesting parentheses directly is bad style, and leads to confusing
 * expressions, so forbid it.
 */
Invoke
[
	names ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	Grammatical restriction names is <names>;
]
with <>;

/**
 * The parenthesis method "(_)" is not allowed to nest syntactically, which is
 * dealt with by a grammatical restriction.  However, this can lead to confusing
 * diagnostics, since attempted grammatical restriction violations are never
 * reported as compilation errors – they're simply rejected.
 *
 * @macro "((_))"
 * @param "expr" "expression phrase" An expression.
 * @returns "⊥" Because it always rejects its invocations.
 * @category "Control Structures"
 */
Public macro "((_))" is
[
	expr : expression phrase
|
	Reject parse, expected: "something other than directly nested parentheses"
];

/**
 * The cardinality of ⊥ is also ⊥. This is supplied to disambiguate "`|`|_`|`|".
 *
 * @method "`|`|_`|`|"
 * @param "bottomMeta" "⊥'s type"
 * @returns "⊥"
 * @category "Types" "Queries"
 */
Method "`|`|_`|`|" is
[
	bottomMeta : ⊥'s type
|
	⊥
];

/**
 * Strengthen {@method "Invoke|invoke_with_"} to the invoked function's return
 * type.
 *
 * @method "Invoke|invoke_with_"
 * @restricts "function meta"
 * @restricts "tuple meta"
 */
Semantic restriction "Invoke|invoke_with_" is
[
	aFunction : function meta,
	arguments : tuple meta
|
	aFunction's return type
];

/**
 * Reject the current parse unless the value supplied upon exit of a
 * continuation conforms to its function type's return type.
 *
 * @method "Exit_with_if_"
 * @restricts "continuation meta"
 * @restricts "any meta"
 */
Semantic restriction "Exit_with_if_" is
[
	continuationType : continuation meta,
	exitType : any meta,
	conditionType : boolean's type
|
	functionType ::= continuationType's function type;
	Unless exitType ⊆ functionType's return type then
	[
		Reject parse, expected:
			cast concatenate <
				"continuation (",
				“continuationType”,
				") to accept value (",
				“exitType”,
				")"
			> into [s : string | s]
	];
	⊤
];

/*
 * Simplified addition, with a strong enough semantic restriction to avoid
 * runtime checks for finite integers.
 */
Primitive "_plus_" is
[
	augend : number,
	addend : number
|
	Primitive Addition (failureCode :
		cannot-add-unlike-infinities code's type);
	/* Let "_+_" handle the failure. */
	augend + addend
] : number;

/* Keep the result within extended integers, to simplify the subsequent code. */
Semantic restriction "_plus_" is
[
	augend : extended integer's type,
	addend : extended integer's type
|
	extended integer
];

/* Group on left. */
restrictions ::= <∅, {"_plus_"}>;
Grammatical restriction "_plus_" is restrictions;

/* Use a constant for its strong static type. */
minusOne ::= 0 - 1;

/* Now make it precise for extended integers. */
Semantic restriction "_plus_" is
[
	augend : integer's type,
	addend : integer's type
|
	integer range from
		augend's genuine lower bound
			plus addend's genuine lower bound
			plus minusOne
		(inclusive = -∞ ∈ augend ∪ addend)
		to augend's genuine upper bound
			plus addend's genuine upper bound
			plus 1
		(inclusive = ∞ ∈ augend ∪ addend)
];

/**
 * Basic counting loop with early exit support. Invoke {@param "action"} once
 * with each consecutive number in the range established by {@param "start"} and
 * {@param "end"}.
 *
 * @method "From_to_do_"
 * @param "start" "natural number"
 *        The start value, inclusive.
 * @param "end" "integer range from 0 (inclusive=true) to ∞ (inclusive=true)"
 *        The end value, inclusive.
 * @param "action" "function accepting <⊥> and returning boolean"
 *        A function that accepts a value in the specified range. If it answers
 *        {@method "true"}, then continue to iterate; if it answers {@method
 *        "false"}, then terminate iteration early.
 * @returns "⊤"
 * @category "Bootstrap" "Control Structures" "Loops"
 */
Public method "From_to_do_" is
[
	start : natural number,
	end : integer range from 0 (inclusive=true) to ∞ (inclusive=true),
	action : function accepting <⊥> and returning boolean
|
	$loop : ⊤;
	Exit loop with 123 if end < start;
	continue ::= invoke action with <start>;
	Exit loop with 123 if continue = false;
	Restart loop with <start plus 1, end, action>
] : ⊤;

/**
 * Sanity check the function's arguments against the implied range of iteration.
 *
 * @method "From_to_do_"
 * @restricts "natural number's type"
 * @restricts "(integer range from 0 (inclusive=true) to
 * ∞ (inclusive=true))'s type"
 * @restricts "(function accepting <⊥> and returning boolean)'s type"
 */
Semantic restriction "From_to_do_" is
[
	start : natural number's type,
	end : (integer range from 0 (inclusive=true) to ∞ (inclusive=true))'s type,
	action : (function accepting <⊥> and returning boolean)'s type
|
	lower ::= start's genuine lower bound;
	If lower ≤ end's genuine upper bound then
	[
		upper ::= end's genuine upper bound plus 1;
		subscripts ::= integer range
			from lower (inclusive = lower's type ⊆ start)
			to upper (inclusive = false);
		If subscripts ⊆ action[1] then
		[
			/* This is the happy case, but logical negation isn't available yet.
			 */
		]
		else
		[
			messageTuple ::= concatenate <
				"repeatedly applied function to accept all integers from ",
				“lower”,
				" to ",
				“end's genuine lower bound”,
				" (but it only accepts ",
				“action[1]”,
				")">;
			cast messageTuple into
			[
				message : string
			|
				Reject parse, expected: message
			]
		];
	];
	⊤
];

/* Don't permit (_)  as the second argument of  Assert:_(_). */
Invoke
[
	cast ::= [ t : {string|natural number} | t ];
	names ::= cast <"Assert:_(_)">→set into cast;
	exclusions ::= cast <"(_)">→set into cast;
	Grammatical restriction names is <∅, exclusions>;
]
with <>;
