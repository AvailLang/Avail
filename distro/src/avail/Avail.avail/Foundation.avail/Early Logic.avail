/*
 * Early Logic.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Logic"
Versions
	"Avail-1.6.1"
Uses
	"Bootstrap",
	"Definers",
	"Early Conditionals",
	"Early Control Structures",
	"Early Literals",
	"Phrases"
Names
	"¬_",
	"_∧_",
	"_∨_",
	"_≠_"
Body

/**
 * Compute and answer the logical negation, i.e., NOT, of the argument.
 *
 * @method "¬_"
 * @param "predicate" "boolean"
 *        A boolean.
 * @returns "boolean"
 *          ¬{@method "predicate"}.
 * @category "Logic"
 */
Public method "¬_" is
[
	predicate : boolean
|
	predicate = false
] : boolean;

/** Generate the comparison in the caller, if possible. */
Public macro "¬_" is
[
	predicate : expression phrase ⇒ boolean
|
	⟦⦊predicate⦉ = false⟧
] : expression phrase ⇒ boolean;

/** Override when predicate is always true. */
Public macro "¬_" is
[
	predicate : expression phrase ⇒ true's type
|
	⟦false⟧
] : expression phrase ⇒ false's type;

/** Override when predicate is always false. */
Public macro "¬_" is
[
	predicate : expression phrase ⇒ false's type
|
	⟦true⟧
] : expression phrase ⇒ true's type;

/**
 * Compute and answer the logical conjunction, i.e., AND, of the arguments.
 * Short-circuit the computation, i.e., only evaluate {@param "b"} if {@param
 * "a"} is {@method "true"}.
 *
 * @method "_∧_"
 * @param "a" "boolean"
 *        A boolean.
 * @param "b" "[]→boolean"
 *        A boolean function.
 * @returns "boolean"
 *          {@param "a"} ∧ {@param "b"}.
 * @category "Primitives" "Logic"
 */
Public method "_∧_" is
[
	a : boolean,
	b : function accepting <> and returning boolean
|
	Primitive ShortCircuitHelper;
] : ⊤;

Public method "_∧_" is
[
	a : false's type,
	b : function accepting <> and returning boolean
|
	false
] : false's type;

/**
 * Improve on the ShortCircuitHelper primitive's return type.
 *
 * @method "_∧_"
 * @restricts "boolean's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∧_" is
[
	a : boolean's type,
	b : (function accepting <> and returning boolean)'s type
|
	boolean
];

/**
 * If the left-hand argument of {@method "_∧_"} is known statically to be
 * {@method "false"}, then the expression is also known statically to be
 * {@method "false"}.
 *
 * @method "_∧_"
 * @restricts "false's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∧_" is
[
	a : false's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	false's type
];

/**
 * If the left-hand argument of {@method "_∧_"} is known statically to be
 * {@method "true"}, then the static type of the expression is {@param "b"}'s
 * return type.
 *
 * @method "_∧_"
 * @restricts "true's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∧_" is
[
	a : true's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	b's return type
];

/**
 * If the right-hand argument of {@method "_∧_"} is known statically to be
 * {@method "false"}, then the expression is also known statically to be
 * {@method "false"}.
 *
 * @method "_∧_"
 * @restricts "boolean's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∧_" is
[
	a : boolean's type,
	b : (function accepting <> and returning false's type)'s type
|
	false's type
];

/**
 * Given two arbitrary {@type "boolean"}-valued {@type "phrase"}s, answer a
 * logical conjunction, i.e., AND, {@type "send phrase" phrase}. The resulting
 * phrase short-circuits the computation, i.e., only evaluates {@param "b"} if
 * {@param "a"} is {@method "true"}.
 *
 * @method "_∧_"
 * @param "a" "expression phrase ⇒ boolean"
 *        An {@type "expression phrase"} that yield a {@type "boolean"}.
 * @param "b" "expression phrase ⇒ boolean"
 *        An {@type "expression phrase"} that yield a {@type "boolean"}.
 * @returns "send phrase ⇒ boolean"
 *          {@param "a"} ∧ {@param "b"}.
 * @category "Primitives" "Logic"
 */
Macro "_∧_" is
[
	a : expression phrase ⇒ boolean,
	b : expression phrase ⇒ boolean
|
	⟦⦊a⦉ ∧ [⦊b⦉]⟧
];

/**
 * Compute and answer the logical disjunction, i.e., OR, of the arguments.
 * Short-circuit the computation, i.e., only evaluate {@param "b"} if {@param
 * "a"} is {@method "false"}.
 *
 * @method "_∨_"
 * @param "a" "boolean"
 *        A boolean.
 * @param "b" "[]→boolean"
 *        A boolean function.
 * @returns "⊤"
 *          {@param "a"} ∨ {@param "b"}, strengthened to boolean later.
 * @category "Primitives" "Logic"
 */
Public method "_∨_" is
[
	a : boolean,
	b : function accepting <> and returning boolean
|
	Primitive ShortCircuitHelper;
] : ⊤;

Public method "_∨_" is
[
	a : true's type,
	b : function accepting <> and returning boolean
|
	true
] : true's type;

/**
 * Improve on the ShortCircuitHelper primitive's return type.
 *
 * @method "_∨_"
 * @restricts "boolean's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∨_" is
[
	a : boolean's type,
	b : (function accepting <> and returning boolean)'s type
|
	boolean
];

/**
 * If the left-hand argument of {@method "_∨_"} is known statically to be
 * {@method "true"}, then the expression is also known statically to be {@method
 * "true"}.
 *
 * @method "_∨_"
 * @restricts "true's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∨_" is
[
	a : true's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	true's type
];

/**
 * If the left-hand argument of {@method "_∨_"} is known statically to be
 * {@method "false"}, then the static type of the expression is {@param
 * "b"}'s return type.
 *
 * @method "_∨_"
 * @restricts "false's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∨_" is
[
	a : false's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	b's return type
];

/**
 * If the right-hand argument of {@method "_∨_"} is known statically to be
 * {@method "true"}, then the expression is also known statically to be {@method
 * "true"}.
 *
 * @method "_∨_"
 * @restricts "boolean's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_∨_" is
[
	a : boolean's type,
	b : (function accepting <> and returning true's type)'s type
|
	true's type
];

/**
 * Given two arbitrary {@type "boolean"}-valued {@type "phrase"}s, answer a
 * logical disjunction, i.e., OR, {@type "send phrase" phrase}. The resulting
 * phrase short-circuits the computation, i.e., only evaluates {@param "b"} if
 * {@param "a"} is {@method "false"}.
 *
 * @method "_∨_"
 * @param "a" "expression phrase ⇒ boolean"
 *        An {@type "expression phrase"} that yield a {@type "boolean"}.
 * @param "b" "expression phrase ⇒ boolean"
 *        An {@type "expression phrase"} that yield a {@type "boolean"}.
 * @returns "send phrase ⇒ boolean"
 *          {@param "a"} ∧ {@param "b"}.
 * @category "Primitives" "Logic"
 */
Macro "_∨_" is
[
	a : expression phrase ⇒ boolean,
	b : expression phrase ⇒ boolean
|
	⟦⦊a⦉ ∨ [⦊b⦉]⟧
];

/**
 * Are the arguments unequal?
 *
 * @macro "_≠_"
 * @param "a" "expression phrase ⇒ any"
 *        An {@type "expression phrase"} that yield a value to compare.
 * @param "b" "expression phrase ⇒ any"
 *        An {@type "expression phrase"} that yield another value to compare.
 * @returns "send phrase ⇒ boolean"
 *          An expression yielding {@method "true"} if the arguments are not
 *          equal, {@method "false"} otherwise.
 * @category "Mathematics" "Relations"
 */
Public macro "_≠_" is
[
	a : expression phrase ⇒ any,
	b : expression phrase ⇒ any
|
	⟦¬⦊a⦉ = ⦊b⦉⟧
] : expression phrase ⇒ boolean;

/*
 * Make logical operators left-associative.  Even though the right-associative
 * form would allow earlier exits from long chains, it would require a deeper
 * block structure.
 */
Grammatical restriction {"_∧_", "_∨_"} (set of string) is
<
	{"_∧_", "_∨_"} (set of string),
	∅
> (tuple of set of string);

Grammatical restriction {"_=_", "_≠_"} (set of string) is
<
	{"_∧_", "_∨_"} (set of string),
	{"_∧_", "_∨_"} (set of string)
> (tuple of set of string);
