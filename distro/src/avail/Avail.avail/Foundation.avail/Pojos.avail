/*
 * Pojos.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Pojos"
Versions
	"1.4.0"
Uses
	"Bootstrap",
	"Characters",
	"Control Structures",
	"Definers",
	"Early Conditionals",
	"Enumeration Support",
	"Exceptions" =
	(
		"Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_"
			→ "Reject parse(confidence=_),expected:_"
		…
	),
	"Format",
	"Late Math",
	"Literals",
	"Logic",
	"Phrases",
	"Strings",
	"Tuples",
	"Types",
	"Variables"
Names
	/* Java integral types. */
	"Java byte",
	"Java char",
	"Java int",
	"Java long",
	"Java short",

	/* Array type construction. */
	"_[]",

	/* Java class and interface binding. */
	"_<«_‡,»>",
	"«…‡.»«<«_‡,»>»?",

	/* Java method binding. */
	"method_.…parameterized by_",
	"static method_.…parameterized by_",

	/* Java field binding. */
	"field_._",
	"field_.…",
	"static field_._",
	"static field_.…"
Body

Method "_[_]" is stable at [any's type, whole number's type]→pojo array meta;
Method "`|_`|" is stable at [pojo array]→whole number;
Method "_'s⁇element type" is stable at [pojo array's type]→(any's type);
Method "`|`|_`|`|" is stable at [pojo array's type]→(whole number's type);

/**
 * @method "_'s⁇element type"
 * @restricts "pojo array meta"
 */
Semantic restriction "_'s⁇element type" is
[
	arrayMeta : pojo array meta's type
|
	arrayMeta's instance's element type's type
];

/**
 * @method "_[_]"
 * @restricts "any's type's type"
 * @restricts "whole number's type's type"
 */
Semantic restriction "_[_]" is
[
	elementMeta : any's type's type,
	lengthType : whole number's type's type
|
	elementMeta's instance [lengthType's instance]'s type
];

/**
 * Construct and answer a pojo array type whose element type is {@param
 * "elementType"} and whose cardinality requirement is {@type "whole number"}.
 *
 * @category "Primitives" "Types" "POJO" "Constructors"
 * @method "_[_]"
 * @param "elementType" "any meta"
 *        The type of the elements of instances.
 * @returns "any [whole number]'s type"
 *    The requested pojo array type.
 */
Public stable method "_[]" is
[
	elementType : any's type
|
	elementType [whole number]
] : pojo array meta;

Semantic restriction "_[]" is
[
	elementMeta : any's type's type
|
	elementMeta's instance [whole number]'s type
];

/**
 * @method "new_[_]"
 * @restricts "any's type's type"
 * @restricts "whole number's type"
 */
Semantic restriction "new_[_]" is
[
	elementMeta : any's type's type,
	lengthType : whole number's type
|
	elementMeta's instance [lengthType]
];

/**
 * @method "`|_`|"
 * @restricts "pojo array's type"
 */
Semantic restriction "`|_`|" is
[
	arrayType : pojo array's type
|
	||arrayType||
];

Method "constructor of_,⁇parameterized by_" is stable at
	[pojo's type, any's type*, [pojo exception]→⊤]→any;

Method "method_._,⁇parameterized by_" is stable at
	[pojo's type, string's type, any's type*, [pojo exception]→⊤]→function;

Method "static method_._,⁇parameterized by_" is stable at
	[pojo's type, string's type, any's type*, [pojo exception]→⊤]→function;

/**
 * @method "_[_]"
 * @restricts "pojo array's type"
 * @restricts "natural number's type"
 */
Semantic restriction "_[_]" is
[
	arrayType : pojo array's type,
	index : natural number's type
|
	arrayType's element type
];

/**
 * @method "_→tuple"
 * @restricts "pojo's array's type"
 */
Semantic restriction "_→tuple" is
[
	arrayType : pojo array's type
|
	<<>, arrayType's element type… | ||arrayType||>
];

/**
 * Answer the {@type "extended integer" numeric type} that conforms to
 * Java's {@code long}, i.e., a signed 64-bit 2's complement integer.
 *
 * @type "Java long"
 * @category "Types" "POJO" "Numbers" "Integers"
 */
Public stable method "Java long" is [[-2^63..2^63)];

/**
 * Answer the {@type "extended integer" numeric type} that conforms to
 * Java's {@code int}, i.e., a signed 32-bit 2's-complement integer.
 *
 * @type "Java int"
 * @category "Types" "POJO" "Numbers" "Integers"
 */
Public stable method "Java int" is [[-2^31..2^31)];

/**
 * Answer the {@type "extended integer" numeric type} that conforms to
 * Java's {@code short}, i.e., a signed 16-bit 2's-complement integer.
 *
 * @type "Java short"
 * @category "Types" "POJO" "Numbers" "Integers"
 */
Public stable method "Java short" is [[-2^15..2^15)];

/**
 * Answer the {@type "extended integer" numeric type} that conforms to
 * Java's {@code byte}, i.e., a signed 8-bit 2's-complement integer.
 *
 * @type "Java byte"
 * @category "Types" "POJO" "Numbers" "Integers"
 */
Public stable method "Java byte" is [[-2^7..2^7)];

/**
 * Answer the {@type "extended integer" numeric type} that conforms to
 * Java's {@code char}, i.e., an unsigned 16-bit 2's-complement integer.
 *
 * @type "Java short"
 * @category "Types" "POJO" "Numbers" "Integers"
 */
Public stable method "Java char" is [[0..2^16)];

/**
 * Answer the type that represents the Java class specified by the given
 * fully-qualified name and type parameters. To establish type conformance
 * between Avail types and Java types, the following marshaling rules are
 * applied:
 *
 * <ul>
 * <li>{@code "java.lang.Void"} is marshaled to {@type "⊤"}.</li>
 * <li>{@code "java.lang.Object"} is marshaled to {@type "any"}.</li>
 * <li>{@code "java.lang.Boolean"} is marshaled to {@type "boolean"}.</li>
 * <li>{@code "java.lang.Byte"} is marshaled to {@type "Java byte"}.</li>
 * <li>{@code "java.lang.Short"} is marshaled to {@type "Java short"}.</li>
 * <li>{@code "java.lang.Integer"} is marshaled to {@type "Java int"}.</li>
 * <li>{@code "java.lang.Long"} is marshaled to {@type "Java long"}.</li>
 * <li>{@code "java.lang.Character"} is marshaled to {@type "Java char"}.</li>
 * <li>{@code "java.lang.Float"} is marshaled to {@type "float"}.</li>
 * <li>{@code "java.lang.Double"} is marshaled to {@type "double"}.</li>
 * <li>All other values are unmarshaled.</li>
 * </ul>
 *
 * @category "Primitives" "Types" "POJO" "Constructors"
 * @method "_<«_‡,»>"
 * @param "javaName" "string"
 *        The fully qualified name of the Java class or interface.
 * @param "typeParameters" "any's type*"
 *        The type arguments. The cardinality of this tuple must agree with the
 *        number of type parameters required by the Java class or interface.
 * @returns "any's type"
 *          The requested type.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "Java-class-not-available exception"
 */
Public stable method "_<«_‡,»>" is
[
	javaName : string,
	typeParameters : any's type*
|
	Primitive CreatePojoType (failureCode : {
		incorrect-number-of-arguments code,
		Java-class-not-available code}ᵀ);
	Invoke early failure function with <failureCode>
] : any's type;

/**
 * Construct and answer a {@type "function"} that, when applied with arguments
 * corresponding to the specified parameter types, invokes a particular
 * instance method.
 *
 * The answered function adapts a reflective invocation of the Java method,
 * if any, that has the specified name and accepts the specified number and
 * types of arguments. The receiver is specified as the first argument. To
 * establish type conformance between Avail types and Java types for the purpose
 * of reflective method definer resolution, the following marshaling rules
 * are applied:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * To establish type conformance between Avail types and Java types for the
 * purpose of reflective method parameter resolution, the following marshaling
 * rules are applied for the target type:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code
 *     "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * @category "Functions" "POJO" "Constructors"
 * @method "method_.…parameterized by_"
 * @param "aPojoType" "any's type"
 *        Any type that may be treated as a valid pojo type.
 * @param "methodName" "token"
 *        The name of the desired method.
 * @param "parameterTypes" "any's type*"
 *        The parameter types accepted by the desired method.
 * @returns "[…]→⊤"
 *          The requested instance method invocation function.
 * @raises "Java-method-not-available exception"
 * @raises "Java-method-reference-is-ambiguous exception"
 */
Public stable method "method_.…parameterized by_" is
[
	aPojoType : any's type,
	methodName : token,
	parameterTypes : any's type*
|
	method aPojoType.methodName's lexeme,
		parameterized by parameterTypes
] : function;

/**
 * Construct and answer a {@type "function"} that, when applied with arguments
 * corresponding to the specified parameter types, invokes a particular
 * static method.
 *
 * The answered function adapts a reflective invocation of the Java method,
 * if any, that has the specified name and accepts the specified number and
 * types of arguments. The receiver is specified as the first argument. To
 * establish type conformance between Avail types and Java types for the purpose
 * of reflective method definer resolution, the following marshaling rules
 * are applied:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * To establish type conformance between Avail types and Java types for the
 * purpose of reflective method parameter resolution, the following marshaling
 * rules are applied for the target type:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code
 *     "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * @category "Functions" "POJO" "Constructors"
 * @method "static method_.…parameterized by_"
 * @param "aPojoType" "any's type"
 *        Any type that may be treated as a valid pojo type.
 * @param "methodName" "token"
 *        The name of the desired method.
 * @param "parameterTypes" "any's type*"
 *        The parameter types accepted by the desired method.
 * @returns "[…]→⊤"
 *    The requested static method invocation function.
 * @raises "Java-method-not-available exception"
 * @raises "Java-method-reference-is-ambiguous exception"
 */
Public stable method "static method_.…parameterized by_" is
[
	aPojoType : any's type,
	methodName : token,
	parameterTypes : any's type*
|
	static method aPojoType.methodName's lexeme,
		parameterized by parameterTypes
] : function;

/**
 * Construct and answer a {@type "variable"} that, when read or written, passes
 * through to a particular instance field.
 *
 * @category "Variables" "POJO" "Constructors"
 * @method "field_._"
 * @param "aPojoType" "any's type"
 *        A {@type "pojo"}.
 * @param "fieldName" "string"
 *        The name of the desired field.
 * @returns "read ⊤/write ⊥"
 *          The requested field.
 * @raises "Java-field-not-available exception"
 */
Public stable method "field_._" is
[
	aPojoType : pojo,
	fieldName : string
|
	aPojoType's fieldName field
] : read ⊤/write ⊥;

/**
 * Construct and answer a {@type "variable"} that, when read or written, passes
 * through to a particular instance field.
 *
 * @category "Variables" "POJO" "Constructors"
 * @method "field_.…"
 * @param "aPojoType" "any's type"
 *        A {@type "pojo"}.
 * @param "fieldName" "token"
 *        The name of the desired field.
 * @returns "read ⊤/write ⊥"
 *          The requested field.
 * @raises "Java-field-not-available exception"
 */
Public stable method "field_.…" is
[
	aPojoType : pojo,
	fieldName : token
|
	aPojoType's fieldName's lexeme field
] : read ⊤/write ⊥;

/**
 * Construct and answer a {@type "variable"} that, when read or written, passes
 * through to a particular static field.
 *
 * To establish type conformance between Avail types and Java types for the
 * purpose of reflective field lookup, the following marshaling rules are
 * applied:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * @category "Variables" "POJO" "Constructors"
 * @method "static field_._"
 * @param "aPojoType" "any's type"
 *        Any type that may be treated as a valid pojo type.
 * @param "fieldName" "string"
 *        The name of the desired static field.
 * @returns "read ⊤/write ⊥"
 *          The requested static field.
 * @raises "Java-field-not-available exception"
 * @raises "Java-field-reference-is-ambiguous exception"
 */
Public stable method "static field_._" is
[
	aPojoType : any's type,
	fieldName : string
|
	aPojoType's fieldName field
] : read ⊤/write ⊥;

/**
 * Construct and answer a {@type "variable"} that, when read or written, passes
 * through to a particular static field.
 *
 * To establish type conformance between Avail types and Java types for the
 * purpose of reflective field lookup, the following marshaling rules are
 * applied:
 *
 * <ul>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean"}.</li>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@type "any"} is marshaled to {@code "java.lang.Object"}.</li>
 * </ul>
 *
 * @category "Variables" "POJO" "Constructors"
 * @method "static field_.…"
 * @param "aPojoType" "any's type"
 *        Any type that may be treated as a valid pojo type.
 * @param "fieldName" "token"
 *        The name of the desired static field.
 * @returns "read ⊤/write ⊥"
 *          The requested static field.
 * @raises "Java-field-not-available exception"
 * @raises "Java-field-reference-is-ambiguous exception"
 */
Public stable method "static field_.…" is
[
	aPojoType : any's type,
	fieldName : token
|
	aPojoType's fieldName's lexeme field
] : read ⊤/write ⊥;

/**
 * Answer the type that represents the Java class or interface specified by the
 * given fully-qualified name and type parameters. Reject the current parse if
 * the macro invocation cannot be understood as a Java class or interface
 * reference, using heuristics to determine the confidence of the rejection.
 *
 * @category "Types" "POJO" "Constructors"
 * @macro "«…‡.»«<«_‡,»>»?"
 * @param "pParts" "list phrase ⇒ (<token…|3..>)"
 *        The fully qualified name of the Java class or interface, comprising at
 *        least three path components.
 * @param "typeParameters" "list phrase ⇒ (any's type+?)"
 *        The type arguments. The cardinality of this tuple must agree with the
 *        number of type parameters required by the Java class or interface.
 * @returns "literal phrase ⇒ any's type"
 *          The requested type.
 */
Public macro "«…‡.»«<«_‡,»>»?" is
[
	pParts : list phrase ⇒ (<token…|3..>),
	pTypesOpt : list phrase ⇒ (any's type+?)
|
	parts ::= map each t of evaluate pParts through [t's lexeme];
	types ::= evaluate pTypesOpt[1] else [<>];
	className ::= “parts” (as list partitioned by ".");
	guard [‘className parameterized by types’]
	intercept
	[
		e : Java-class-not-available exception
	|
		/* Compute a score for determining how confidently to report the error,
		 * where 1=silent, 2=weak, 3=moderate, and 4=strong.
		 */
		n ::= |parts|;
		score ::=
			if ¬types is empty then [4]
			else if parts[1] ∈ {"java", "com", "org"} then [4]
			else if parts[n][1] is uppercase
				∧ each p of parts[1..n-1] satisfies [p[1] is lowercase] then [4]
			else [4 min (|parts| - 2)];
		Reject parse (confidence = score), expected:
			format "‘①’ to name a linkable Java class"
			with className
	]
];
