/*
 * Lexers.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Lexers"
Versions
	"Avail-1.6.0"
Uses
	"Bootstrap",
	"Characters",
	"Control Structures",
	"Early Conditionals",
	"Early Definers",
	"Early Functions",
	"Exceptions",
	"Format",
	"Literals",
	"Logic",
	"Math",
	"Phrases",
	"Sets",
	"Strings",
	"Tuples",
	"Types",
	"Variables",
	"Very Early Definers"
Names
	"end of line comment lexer",
	"explicit radix integer lexer",
	"binary integer lexer",
	"octal integer lexer",
	"hexadecimal integer lexer",
	"floating point number lexer",
	"raw string lexer",
	"character set lexer"
Body

/**
 * Upon encountering a solidus, attempt to scan an end-of-line {@type "comment"}
 * {@type "token"}. This is // following by arbitrary characters and terminated
 * by the first {@method "_is line terminator" Unicode line terminator} or
 * end-of-file.
 *
 * @lexer "end of line comment lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "comment"} {@type "token"}.
 */
Lexer $"end of line comment lexer"
when [c : character | c = ¢/]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	size ::= |source|;
	if position < size ∧ source[position + 1] = ¢/ then
	[
		i : natural number := position + 2;
		While i ≤ size ∧ ¬source[i] is line terminator do [i++;];
		commentText ::= source[position..i min size];
		{<comment (commentText) @ position:line>}
	]
	else [∅]
];

// Here's the first end of line comment!
// And here's the second, without a line terminator!

radixIntegerAlphabet ::= "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
radixIntegerAlphabetSet ::= radixIntegerAlphabet→set;

/**
 * Upon encountering an Arabic numeral or Roman letter, attempt to scan an
 * {@type "integer"} {@type "literal token" token} specified in an explicit
 * base. The format is:
 *
 *    literal ::= value "r" base (:base ≥ 2:) ;
 *    value ::= [0-9A-Z]+ ;
 *    base ::= [0-9]+ ;
 *
 * e.g., 22r10 (= 22), A0r16 (= 160), ZZr36 (= 1295).
 *
 * @lexer "explicit radix integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"explicit radix integer lexer"
when [c : character | c ∈ radixIntegerAlphabet]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	// Scan ahead looking for the radix indicator, ¢r.
	i : natural number := position + 1;
	size ::= |source|;
	While i ≤ size ∧ source[i] ∈ radixIntegerAlphabetSet do [i++;];
	if i > size ∨ source[i] ≠ ¢r then [∅]
	else
	[
		integerText ::= source[position..i-1];
		basePosition ::= (++i);
		// Scan for the end of the radix specifier token.
		While i ≤ size ∧ source[i] is an Arabic numeral do [i++;];
		if i ≤ size ∧ source[i] is a letter then [∅]
		else
		[
			end ::= (i-1) min size;
			baseText ::= source[basePosition..end];
			base ::= baseText→whole number;
			cast base into
			[
				validBase : [2..36]
			|
				value ::=
					try [integerText (base validBase)]
					else
					[
						Reject parse, expected:
							format
								"base-‘①’ integer literal to use only \
								\|characters in “②” to denote its value"
							with
								baseText,
								(radixIntegerAlphabet[1..validBase])
					];
				{<`value` (source[position..end]) @ position:line>}
			]
			else
			[
				Reject parse, expected:
					format
						"base for integer literal to be ≥ 2 (but the specified \
						\|base was ‘①’)"
					with
						baseText
			]
		]
	]
];

binaryAlphabet ::= radixIntegerAlphabet[1..2]→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "b"}
 * followed by a sequence of binary digits, i.e., {@type "character"}s in
 * {@code "01"}.
 *
 * @lexer "octal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"binary integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	// Look ahead for a subsequent ¢b.
	i : natural number := position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢b then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ binaryAlphabet do [i++;];
		if
			i ≤ size ∧
				(source[i] is a letter ∨ source[i] is an Arabic numeral)
		then
		[
			Reject parse, expected:
				"a valid binary digit (0-1)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 2);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

octalAlphabet ::= radixIntegerAlphabet[1..8]→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "o"}
 * followed by a sequence of octal digits, i.e., {@type "character"}s in
 * {@code "01234567"}.
 *
 * @lexer "octal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"octal integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	// Look ahead for a subsequent ¢o.
	i : natural number := position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢o then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ octalAlphabet do [i++;];
		if
			i ≤ size ∧
				(source[i] is a letter ∨ source[i] is an Arabic numeral)
		then
		[
			Reject parse, expected:
				"a valid octal digit (0-7)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 8);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

hexadecimalAlphabet ::= (radixIntegerAlphabet[1..16] ++ "abcdef")→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "x"}
 * followed by a sequence of hexadecimal digits, i.e., {@type "character"}s in
 * {@code "0123456789ABCDEFabcdef"}.
 *
 * @lexer "hexadecimal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"hexadecimal integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	// Look ahead for a subsequent ¢x.
	i : natural number := position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢x then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ hexadecimalAlphabet do [i++;];
		if i ≤ size ∧ source[i] is a letter then
		[
			Reject parse, expected:
				"a valid hexadecimal digit (0-9, A-F, a-f)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 16);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

/**
 * Upon encountering an {@code "Arabic numeral"} digit, attempt to scan
 * forward past all digit groups (optionally separated with single {@code "_"}
 * digit group separator) until a single {@code "."} is encountered. Then
 * require one or more digit groups. Allow an exponent signifier {@code "e"}
 * before the final digit group, which may be prefixed with a sign. Allow an
 * {@code "f"} in the final position to indicate that the value should be stored
 * as a single-precision {@code "float"} rather than a {@code "double"}.
 *
 * Note that a floating point number literal MUST have a digit in the integer
 * part; 0 is acceptable.
 *
 * Regex: /[0-9]+(_[0-9]+)*\.([0-9]+_)*[0-9]+(e[+-]?([0-9]+_)*[0-9]+)?f?/
 *
 * @lexer "floating point number lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"floating point number lexer"
when [c : character | c is an Arabic numeral]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	$body : {token+|};
	i : natural number := position;
	size ::= |source|;

	getDigits ::= [
		start ::= i;
		While i ≤ size ∧ source[i] is an Arabic numeral do [i++;];
		digits ::= source[start..i-1];
		Exit body with ∅ if digits is empty;
		cast digits into [s : Arabic numeral+ | s]
	];

	// A digit group matches regex: /[0-9]+(_[0-9]+)*/
	getDigitGroup ::= [
		allDigits : Arabic numeral+ := getDigits();
		While i ≤ size ∧ source[i] = ¢_ do
		[
			i++; // to consume ¢_
			allDigits ++= getDigits();
		];
		allDigits
	];

	// Collect the integer part.
	integerDigits ::= getDigitGroup();
	Exit body with ∅ if i > size ∨ source[i] ≠ ¢.; // Check condition for reaching EOF

	// Collect the fractional part.
	i++; // to consume ¢.
	fractionalDigits ::= getDigitGroup();

	// Collect the exponent part, if any. Default to exponent value 0. If a
	// value is supplied but no sign is prefixed, default to positive.
	exponentIsNegative : boolean := false;
	exponentDigits ::= if i > size ∨ source[i] ≠ ¢e then ["0"] else
	[
		i++; // to consume ¢e
		If i ≤ size ∧ source[i] = ¢+ then
		[
			i++; // to consume ¢+
		]
		else if i ≤ size ∧ source[i] = ¢- then
		[
			exponentIsNegative := true;
			i++; // to consume ¢-
		];
		getDigitGroup()
	];

	isFloat : boolean := false;
	If i ≤ size ∧ source[i] = ¢f then
	[
		isFloat := true;
		i++; // to consume ¢f
	];

	doubleValueFunction ::= [
		wholePart : Arabic numeral+,
		fractionPart : Arabic numeral+,
		exponentIsPositive : boolean,
		exponentPart : Arabic numeral+
	|
		Primitive DoubleFromParts;
	] : double;

	doubleValue ::= doubleValueFunction(
		integerDigits, fractionalDigits, ¬exponentIsNegative, exponentDigits);
	value ::= if isFloat then [doubleValue → float] else [doubleValue];
	retval ::= {<`value` (source[position..i-1]) @ position:line>};
	retval
];

/**
 * Upon encountering {@code "r"} followed by three (3) or more identical {@type
 * "character"}s, attempt to scan arbitrary text followed by a corresponding end
 * delimiter of the same length. The arbitrary text is understood as the content
 * of a {@type "string"}. No escape sequences are processed.
 *
 * If the {@type "character"}s comprising the start delimiter are {@method "_is
 * punctuation start" punctuation start (Ps) or initial punctuation (Pi} {@type
 * "character"}s, then the end delimiter must comprise the corresponding
 * punctuation end (Pe) or final punctuation (Pf) {@type "character"}s.
 *
 * If the {@type "character"}s comprising the start delimiter are {@method "_is
 * punctuation end" punctuation end (Pe) or final punctuation (Pf)} {@type
 * "character"}s, then the end delimiter must comprise the corresponding
 * punctuation start (Ps) or initial punctuation (Pi) {@type "character"}s.
 *
 * If the {@type "character"}s comprising the start delimiter are any other
 * {@type "character"}s, then the end delimiter must comprise those same {@type
 * "character"}s.
 *
 * @lexer "raw string lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "string"} {@type "literal token"}.
 */
Lexer $"raw string lexer"
when [c : character | c = ¢r]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	// Count subsequent ¢" characters.
	i : natural number := position + 1;
	size ::= |source|;
	if i > size then [∅]
	else
	[
		startChar ::= source[i];
		i++;
		While i ≤ size ∧ source[i] = startChar do [i++;];
		startDelimiter ::= source[position+1..i-1];
		delimiterSize ::= |startDelimiter|;
		if delimiterSize < 3 then
		[
			Reject parse silently, expected:
				format
					"raw string to begin with three (3) or more “①” \
					\|characters"
				with
					startChar
		]
		else
		[
			endChar ::=
				if startChar is punctuation start
				then [punctuation end for startChar]
				else [punctuation start for startChar];
			endDelimiter ::= delimiterSize of endChar;
			valuePosition ::= i;
			// Scan ahead for the close delimiter.
			limit ::= size - delimiterSize + 1;
			While
				i ≤ limit
					∧ source[i..i + delimiterSize - 1] ≠ endDelimiter
			do [i++;];
			if i > limit then
			[
				Reject parse, expected:
					format
						"raw string to terminate with ‘①’ before end of file"
					with
						endDelimiter
			]
			else
			[
				value ::= source[valuePosition..i-1];
				{<
					`value` (source[position..i + delimiterSize - 1])
						@ position:line
				>}
			]
		]
	]
];

/**
 * Reject parsing with a stylized message.
 */
Private method "Reject in_at_,expected_" is
[
	source : string,
	i : natural number,
	expected : string
|
	Reject parse strongly, expected:
		expected ++
		" near: " ++
		“
			source[(i - 5) max 1 .. i - 1] ++
			"⤷" ++
			source[i .. (i + 5) min |source|]
		” ++
		" in character set literal"
]: ⊥;

/**
 * A helper for parsing the ¢[A-Z0-9] style of sets of characters.  Reads one
 * character, possible using a backslash-prefixed form described in the
 * {@type "character set lexer"}. The character is read from the given string,
 * starting at the position indicated by the integer variable.  The integer
 * variable is left positioned after the character description, and that
 * character is returned.
 *
 * If there is a problem with the parsing of the character, reject the parse
 * with a suitable message.
 *
 * @param s The ({@code string}) to parse from.
 * @param i The ({@code variable}) that tracks the current parse position.
 * @returns The ({@type character}) extracted at the position.
 */
Private method "read range element from_at_" is
[
	s : string,
	i : read natural number / write ⊥
|
	$body : character;
	size ::= |s|;
	If ↓i > size then
	[
		Reject in s at ↓i,
			expected "the character set close (]) before end-of-file"
	];
	c ::= s[↓i];
	problems ::= {
		¢"-" → "a character other than a range-indicating dash (-)",
		¢"[" → "a character other than a suspicious open-bracket ([)",
		¢"]" → "a character other than a suspicious close-bracket (])",
		¢"\n" → "the character set close (]) before the end of line (U+000A)",
		¢"\r" → "the character set close (]) before the end of line (U+000D)",
		¢"\t" → "a character other than an embedded tab (U+0009)"
	};
	If c ∈ problems then
	[
		Reject in s at ↓i, expected problems[c]
	];
	i++;
	Exit body with c if c ≠ ¢\;
	If ↓i > size then
	[
		Reject in s at ↓i, expected "character after backslash"
	];
	c2 ::= s[↓i];
	escapes ::= {
		¢n → ¢"\n",
		¢r → ¢"\r",
		¢t → ¢"\t",
		¢\ → ¢"\\",
		¢"\"" → ¢"\""
	};
	If c2 ∈ escapes then
	[
		Exit body with escapes[c2]
	];
	If c2 ≠ ¢"(" then
	[
		Reject in s at ↓i, expected
		  "one of {n, r, t, (, \\, or \"} after backslash"
	];
	// It's of the form "\(1F2E5)".  Read hex digits and the close parenthesis.
	i++;
	hexStart ::= ↓i;
	While ↓i ≤ size ∧ s[↓i] ∈ "0123456789ABCDEFabcdef" → set do [i++;];
	If ↓i > size ∨ s[↓i] ≠ ¢")" then
	[
		Reject in s at ↓i, expected
			"close parenthesis for Unicode hexadecimal escape in character set"
	];
	hex ::= s[hexStart..↓i-1];
	If hex = "" then
	[
		Reject in s at ↓i, expected "hexadecimal digits for Unicode escape"
	];
	cast hex (base 16) into [cp : code point | cp → character]
	else
	[
		Reject in s at ↓i, expected
			"Unicode escape to be a valid Unicode value [0..10FFFF]"
	]
];

/**
 * A lexer for literal sets of characters.  For example, ¢[0-9] is the set
 * containing the 10 decimal digits, ¢[0-46-9] is the set with the decimal
 * digits except 5, ¢[0-9A-Fa-f] is the set of uppercase or lowercase
 * hexadecimal digits, and ¢[aeiou] is the typical set of English vowels.
 *
 * For special characters that are hard to see visually (e.g., unusual
 * whitespace), or interfere with the lexer's syntax or general clarity (square
 * brackets, dash, backslash), there are backslash-escaped sequences available:
 *   * \(xxx) – A hexadecimal Unicode codepoint, including "[", "-", and "]",
 *   * \n – A newline (U+000A)
 *   * \r – A carriage return (U+000D)
 *   * \t – A tab (U+0009)
 *   * \\ – A backslash (U+005C)
 *   * \" – A quote (U+0022)
 *
 * Normal characters may also be captured with the hexadecimal notation, so that
 * the code points can be made explicit.
 *
 * For safety, none of the range or single characters may overlap.
 *
 * @lexer "character set lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "natural number"
 *        The position of the leading {@type "character"}.
 * @param "line" "natural number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "string"} {@type "literal token"}.
 */
Lexer $"character set lexer"
when [c : character | c = ¢¢]
is
[
	source : string,
	position : natural number,
	line : natural number
|
	result : {character|} := ∅;
	size ::= |source|;
	i : natural number := position + 1;
	If i > size ∨ source[i] ≠ ¢"[" then
	[
		Reject parse silently,
			expected: "character set literal like ¢[A-Z]"
	];
	i++;
	While i ≤ size ∧ source[i] ≠ ¢"]" do
	[
		start ::= read range element from source at ↑i;
		range ::= if i ≤ size ∧ source[i] = ¢- then
		[
			// Character range.
			i++;
			end ::= read range element from source at ↑i;
			If end ≤ start then
			[
				Reject parse strongly, expected:
					"Range end to be after range start"
			];
			start to end
		]
		else
		[
			// Single character.
			<start>
		];
		For each ch in range do
		[
			If ch ∈ result then
			[
				Reject parse strongly, expected:
					"Character set not to contain duplicate element: " ++ “ch”
			];
			result := result + ch;
		];
	];
	If i > size then
	[
		Reject parse strongly, expected:
			"\"]\" to end character set literal like ¢[A-Z]"
	];
	i++;
	if i ≤ size ∧ source[i] = ¢"ᵀ" then
	[
		// It's a type, specifically a subtype of `character`.  Don't also allow
		// the character set to be a result.
		{<
			`enumeration of result` (source[position .. i]) @ position:line
		>}
	]
	else
	[
		// It's a character set.
		{<
			`result` (source[position .. i - 1]) @ position:line
		>}
	]
];
