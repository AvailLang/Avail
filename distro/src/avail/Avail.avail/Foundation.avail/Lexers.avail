/*
 * Lexers.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Lexers"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Bootstrap",
	"Characters",
	"Control Structures",
	"Early Conditionals",
	"Exceptions",
	"Literals",
	"Logic",
	"Math",
	"Phrases",
	"Sets",
	"Strings",
	"Tuples",
	"Variables"
Names
	"end of line comment lexer",
	"explicit radix integer lexer",
	"binary integer lexer",
	"octal integer lexer",
	"hexadecimal integer lexer",
	"raw string lexer"
Body

/**
 * Upon encountering a solidus, attempt to scan an end-of-line {@type "comment"}
 * {@type "token"}. This is // following by arbitrary characters and terminated
 * by the first {@method "_is line terminator" Unicode line terminator} or
 * end-of-file.
 *
 * @lexer "end of line comment lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "comment"} {@type "token"}.
 */
Lexer $"end of line comment lexer"
when [c : character | c = ¢/]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	size ::= |source|;
	if position < size ∧ source[position + 1] = ¢/ then
	[
		i : real source position;
		i ?= position + 2;
		While i ≤ size ∧ ¬source[i] is line terminator do [i++;];
		commentText ::= source[position..i min size];
		{<comment (commentText) @ position:line>}
	]
	else [∅]
];

// Here's the first end of line comment!
// And here's the second, without a line terminator!

radixIntegerAlphabet ::= "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
radixIntegerAlphabetSet ::= radixIntegerAlphabet→set;

/**
 * Upon encountering an Arabic numeral or Roman letter, attempt to scan an
 * {@type "integer"} {@type "literal token" token} specified in an explicit
 * base. The format is:
 *
 *    literal ::= value "r" base (:base ≥ 2:) ;
 *    value ::= [0-9A-Z]+ ;
 *    base ::= [0-9]+ ;
 *
 * e.g., 22r10 (= 22), A0r16 (= 160), ZZr36 (= 1295).
 *
 * @lexer "explicit radix integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"explicit radix integer lexer"
when [c : character | c ∈ radixIntegerAlphabet]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	// Scan ahead looking for the radix indicator, ¢r.
	i : real source position;
	i ?= position + 1;
	size ::= |source|;
	While i ≤ size ∧ source[i] ∈ radixIntegerAlphabetSet do [i++;];
	if i > size ∨ source[i] ≠ ¢r then [∅]
	else
	[
		integerText ::= source[position..i-1];
		basePosition ::= (++i);
		// Scan for the end of the radix specifier token.
		While i ≤ size ∧ source[i] is an Arabic numeral do [i++;];
		if i ≤ size ∧ source[i] is a letter then [∅]
		else
		[
			end ::= (i-1) min size;
			baseText ::= source[basePosition..end];
			base ::= baseText→whole number;
			cast base into
			[
				validBase : [2..36]
			|
				value ::=
					try [integerText (base validBase)]
					else
					[
						Reject parse, expected:
							format
								"base-‘①’ integer literal to use only \
								\|characters in “②” to denote its value"
							with
								baseText,
								(radixIntegerAlphabet[1..validBase])
					];
				{<`value` (source[position..end]) @ position:line>}
			]
			else
			[
				Reject parse, expected:
					format
						"base for integer literal to be ≥ 2 (but the specified \
						\|base was ‘①’)"
					with
						baseText
			]
		]
	]
];

binaryAlphabet ::= radixIntegerAlphabet[1..2]→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "b"}
 * followed by a sequence of binary digits, i.e., {@type "character"}s in
 * {@code "01"}.
 *
 * @lexer "octal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"binary integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	// Look ahead for a subsequent ¢b.
	i : real source position;
	i ?= position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢b then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ binaryAlphabet do [i++;];
		if
			i ≤ size ∧
				(source[i] is a letter ∨ source[i] is an Arabic numeral)
		then
		[
			Reject parse, expected:
				"a valid binary digit (0-1)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 2);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

octalAlphabet ::= radixIntegerAlphabet[1..8]→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "o"}
 * followed by a sequence of octal digits, i.e., {@type "character"}s in
 * {@code "01234567"}.
 *
 * @lexer "octal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"octal integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	// Look ahead for a subsequent ¢o.
	i : real source position;
	i ?= position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢o then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ octalAlphabet do [i++;];
		if
			i ≤ size ∧
				(source[i] is a letter ∨ source[i] is an Arabic numeral)
		then
		[
			Reject parse, expected:
				"a valid octal digit (0-7)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 8);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

hexadecimalAlphabet ::= (radixIntegerAlphabet[1..16] ++ "abcdef")→set;

/**
 * Upon encountering a {@code "0"}, attempt to scan a subsequent {@code "x"}
 * followed by a sequence of hexadecimal digits, i.e., {@type "character"}s in
 * {@code "01234567ABCDEFabcdef"}.
 *
 * @lexer "hexadecimal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "integer"} {@type "literal token"}.
 */
Lexer $"hexadecimal integer lexer"
when [c : character | c = ¢0]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	// Look ahead for a subsequent ¢x.
	i : real source position;
	i ?= position + 1;
	size ::= |source|;
	if i > size ∨ source[i] ≠ ¢x then [∅]
	else
	[
		valuePosition ::= (++i);
		// Scan for the boundary.
		While i ≤ size ∧ source[i] ∈ hexadecimalAlphabet do [i++;];
		if i ≤ size ∧ source[i] is a letter then
		[
			Reject parse, expected:
				"a valid hexadecimal digit (0-9, A-F, a-f)"
		]
		else
		[
			end ::= (i-1) min size;
			valueText ::= source[valuePosition..end];
			value ::= valueText (base 16);
			{<`value` (source[position..end]) @ position:line>}
		]
	]
];

/**
 * Upon encountering {@code "r"} followed by three (3) or more identical {@type
 * "character"}s, attempt to scan arbitrary text followed by a corresponding end
 * delimiter of the same length. The arbitrary text is understood as the content
 * of a {@type "string"}. No escape sequences are processed.
 *
 * If the {@type "character"}s comprising the start delimiter are {@method "_is
 * punctuation start" punctuation start (Ps) or initial punctuation (Pi} {@type
 * "character"}s, then the end delimiter must comprise the corresponding
 * punctuation end (Pe) or final punctuation (Pf) {@type "character"}s.
 *
 * If the {@type "character"}s comprising the start delimiter are {@method "_is
 * punctuation end" punctuation end (Pe) or final punctuation (Pf)} {@type
 * "character"}s, then the end delimiter must comprise the corresponding
 * punctuation start (Ps) or initial punctuation (Pi) {@type "character"}s.
 *
 * If the {@type "character"}s comprising the start delimiter are any other
 * {@type "character"}s, then the end delimiter must comprise those same {@type
 * "character"}s.
 *
 * @lexer "hexadecimal integer lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "string"} {@type "literal token"}.
 */
Lexer $"raw string lexer"
when [c : character | c = ¢r]
is
[
	source : string,
	position : real source position,
	line : real source line number
|
	// Count subsequent ¢" characters.
	i : real source position;
	i ?= position + 1;
	size ::= |source|;
	if i > size then [∅]
	else
	[
		startChar ::= source[i];
		i++;
		While i ≤ size ∧ source[i] = startChar do [i++;];
		startDelimiter ::= source[position+1..i-1];
		delimiterSize ::= |startDelimiter|;
		if delimiterSize < 3 then
		[
			Reject parse, expected:
				format
					"raw string to begin with three (3) or more “①” \
					\|characters"
				with
					startChar
		]
		else
		[
			endChar ::=
				if startChar is punctuation start
				then [punctuation end for startChar]
				else [punctuation start for startChar];
			endDelimiter ::= delimiterSize of endChar;
			valuePosition ::= i;
			// Scan ahead for the close delimiter.
			limit ::= size - delimiterSize + 1;
			While
				i ≤ limit
					∧ source[i..i + delimiterSize - 1] ≠ endDelimiter
			do [i++;];
			if i > limit then
			[
				Reject parse, expected:
					format
						"raw string to terminate with ‘①’ before end of file"
					with
						endDelimiter
			]
			else
			[
				value ::= source[valuePosition..i-1];
				{<
					`value` (source[position..i + delimiterSize - 1])
						@ position:line
				>}
			]
		]
	]
];
