/*
 * Very Early Definers.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Very Early Definers"
Versions
	"Avail-1.6.1"
Uses
	"Bootstrap"
Names
	"<«_‡,»>",
	"Assert:_",
	"Assert:_(_)",
	"Method_is_«styled by_»",
	"Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_",
	"Reject parse(confidence=_),expected:_",
	"Replace assertion failure function with_",
	"Replace parse rejection function with_",
	"Shouldn't happen",
	"Shouldn't happen(_)"
Body

/**
 * Use the same primitive that implements {@method "_'s⁇type"} to implement its
 * semantic restriction function.
 *
 * @method "_'s⁇type"
 * @restricts "type"
 */
Semantic restriction "_'s⁇type" is
[
	value : type
|
	Primitive Type;
] : type;

/**
 * Construct and answer a tuple from the lexically specified expressions. The
 * hard work here is done automatically by the Avail compiler.
 *
 * @method "<«_‡,»>"
 * @param "elements" "tuple"
 *        The desired tuple, lexically constructed by the compiler.
 * @returns "tuple"
 *          The argument.
 * @category "Constructors" "Tuples"
 */
Primitive "<«_‡,»>" is
[
	elements : tuple
|
	elements
] : tuple;

/**
 * Strengthen the type of {@method "<«_‡,»>"} to the most exact possible. The
 * hard work here is done automatically by the Avail compiler, which examines
 * the lexical arguments and produces instance types for literals and applies
 * semantic restrictions to any method sends.
 *
 * @method "<«_‡,»>"
 * @restricts "tuple meta"
 */
Semantic restriction "<«_‡,»>" is
[
	elements : tuple meta
|
	elements
];

/**
 * Strengthen {@method "Invoke|invoke_with_"} to the invoked function's return
 * type.
 *
 * @method "Invoke|invoke_with_"
 * @restricts "function meta"
 * @restricts "tuple meta"
 */
Semantic restriction "Invoke|invoke_with_" is
[
	aFunction : function meta,
	arguments : tuple meta
|
	aFunction's return type
];

/* The range from zero to one. */
zeroOrOne ::= integer range from 0 (inclusive = true) to 1 (inclusive = true);

/**
 * Define a new method.
 *
 * @method "Method_is_«styled by_»"
 * @category "Methods"
 * @param "methodName" "string"
 *        The method to extend.
 * @param "body" "function"
 *        An implementation of the method.
 * @param "optionalStyler" "<stylerFunction|0..1>"
 *        An optional styler function.
 * @returns "⊤"
 */
Primitive "Method_is_«styled by_»" is
[
	methodName : string,
	body : function,
	optionalStyler : <<>, styler function…|zeroOrOne>
|
	Primitive SimpleMethodDeclaration (failureCode : natural number);
	Invoke early failure function with <failureCode>
] : ⊤;

/**
 * Define a new method.
 *
 * @method "Method_is_«styled by_»"
 * @category "Methods"
 * @param "methodName" "atom"
 *        The method to extend.
 * @param "body" "function"
 *        An implementation of the method.
 * @param "optionalStyler" "<stylerFunction|0..1>"
 *        An optional styler function.
 * @returns "⊤"
 */
Primitive "Method_is_«styled by_»" is
[
	methodName : atom,
	body : function,
	optionalStyler : <<>, styler function…|zeroOrOne>
|
	Primitive MethodDeclarationFromAtom (failureCode : natural number);
	Invoke early failure function with <failureCode>
] : ⊤;

/**
 * This is a helper for the semantic restriction for {@method
 * "function accepting_and returning_"}, below.  It extracts a metatype's
 * primary instance, a type.  Note that subtypes of that type are also instances
 * of the metatype.  The return type from this method will be narrowed by a
 * semantic restriction so the compiler will know it produces a type.
 *
 * @method "private instance of meta_"
 * @param "m" "type's type"
 *        Any metatype.
 * @returns "any"
 *          This is strengthened to {@type "type"} below.
 */
Method "private instance of meta_" is
[
	m : type's type
|
	m's instances→tuple[1]
] : any;

/**
 * This is a restriction for a helper for the semantic restriction for {@method
 * "function accepting_and returning_"}, below.  It ensures that a metatype's
 * instance is strengthened to be a type.
 *
 * @method "private instance of meta_"
 * @restricts "m" "type's type's type"
 *        Any metatype's type.
 * @returns "type's type"
 *          This strengthens the result of an invocation to be a type.
 */
Semantic restriction "private instance of meta_" is
[
	m : type's type's type
|
	type
];

/**
 * Statically strengthen <em>just the return type</em>.  It's far too early in
 * the bootstrapping to deal sensibly with the tuple of argument types here.
 *
 * @method "function accepting_and returning_"
 * @restricts "tuple of any meta's type"
 * @restricts "type's type"
 */
Semantic restriction "function accepting_and returning_" is
[
	ignoredArgTypes : tuple of any meta's type,
	returnMeta : type's type
|
	returnType ::= private instance of meta returnMeta;
	functionType ::= […]→returnType;
	functionType's type
];


/**
 * A very early restriction on {@method "_+_"}.  This is important to facilitate
 * counting loops and other calculations.  Normally this sort of restriction
 * would be postponed until later in the bootstrap order, but experience shows
 * this particular one has high benefit from being done as early as possible.
 *
 * Start with a simple restriction of closure of extended integer, then use that
 * in the subsequent one that computes an accurate bound.
 *
 * @category "Primitives" "Numbers" "Mathematics"
 * @method "_+_"
 * @restricts "integer"
 * @restricts "integer"
 */
Semantic restriction "_+_" is [
	a : extended integer's type,
	b : extended integer's type
|
	extended integer
];

minusOne ::= 0 - 1;
temp1 ::= ∞'s type;
infinities ::= -∞'s type ∪ temp1;

Semantic restriction "_+_" is [
	a : extended integer's type,
	b : extended integer's type
|
	low ::= a's genuine lower bound + b's genuine lower bound;
	high ::= a's genuine upper bound + b's genuine upper bound;
	union ::= a ∪ b;
	includedInfinities ::= union ∩ infinities;
	finitePart ::= integer range
		from low + minusOne (inclusive = false)
		to high + 1 (inclusive = false);
	finitePart ∪ includedInfinities
];

/*
 * Very early bootstrapped types for the {@code "parseRejectionFunction"},
 * defined below.
 */
parseRejectionArgumentsTuple ::= <parse rejection level, string>;
sizes ::= ||parseRejectionArgumentsTuple's type||;
parseRejectionArgumentsType ::= <parseRejectionArgumentsTuple, ⊥… |sizes>;
parseRejectionFunctionType ::=
	function accepting parseRejectionArgumentsTuple and returning ⊥;

/**
 * After exceptions are defined, parse rejection has to first throw a suitable
 * exception to cause any necessary unwinding to happen.  Before that's defined,
 * however, we simply avoid situations that require unwinding.  This variable
 * holds a hook function that the Exceptions module can replace when loading or
 * unloading.
 *
 * The initial value for this variable is the RejectParsing primitive.
 */
parseRejectionFunction : parseRejectionFunctionType :=
[
	level : parse rejection level,
	expected : string
|
	Primitive RejectParsing (failureCode :
		untimely-parse-rejection code's type);
	Crash: failureCode
] : ⊥;

/*
 * Define a bootstrap function invoker, needed by the parse rejection method,
 * below.
 */
invokerArgumentsType ::= <function, tuple>;
Forward method "private invoke_with_" is
	function accepting invokerArgumentsType and returning ⊤;

Method "private invoke_with_" is
[
	aFunction : function,
	arguments : tuple
|
	Primitive InvokeWithTuple (failureCode : natural number);
	private invoke early failure function with <failureCode>;
] : ⊤;

Semantic restriction "private invoke_with_" is
[
	functionType : function meta,
	argumentsType : tuple meta
|
	functionType's return type
];

/**
 * Install a parse rejection function, answering the prior value.
 */
Method "Replace parse rejection function with_" is
[
	newFunction : parseRejectionFunctionType
|
	temp ::= parseRejectionFunction;
	parseRejectionFunction := newFunction;
	temp
] : parseRejectionFunctionType;

/**
 * Reject the current parse. This causes the compiler to reject the
 * interpretation of the program text that resulted in execution of the code
 * that invoked this method. The argument is a description of the parse
 * rejection, but in positive terms that primarily assert what the caller was
 * expecting (on the compiler's behalf). It is, of course, also useful to state
 * what was actually discovered.
 *
 * Note that the Avail compiler attempts, in parallel, many different parses of
 * a statement. If the only parses syntactically accepted by the compiler are
 * semantically rejected by callers of this method, then and only then is the
 * statement deemed invalid and the arguments of such calls emitted by the
 * compiler as error messages to assist the programmer in correcting the
 * rejected statement.
 *
 * This method may only be invoked from the body of a macro function or a
 * semantic restriction function: it should only be invoked by the Avail
 * compiler, never by a semantically valid Avail program.
 *
 * Also note that this mechanism bypasses exceptions, so this should only be
 * used as the primitive function supplied to an invocation of
 * "unwind fiber and run_with_".  This extra wrapping has no effect prior to
 * bootstrapping exceptions, but it applies retroactively after the bootstrap.
 *
 * @category "Primitives" "Semantic Restrictions"
 * @method "Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_"
 * @param "level" "[1..4]"
 *        The notification level that controls under what circumstances the text
 *        should be presented as a compilation error.  The values are:
 *            1=silently, which is never displayed,
 *            2=weakly, which is only displayed if there is nothing >2,
 *            3=moderately, which is only displayed if there is nothing >3, and
 *            4=strongly, which is always displayed, as long as parsing has not
 *              proceeded too far beyond this position.
 * @param "expected" "string"
 *        A description of the cause of rejection, worded to sound good
 *        after {@code "Expected..."}.
 * @returns "⊥"
 * @raises "untimely-parse-rejection exception"
 */
Method "Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_" is
[
	level : parse rejection level,
	expected : string
|
	private invoke parseRejectionFunction with <level, expected>
] : ⊥;

/**
 * Make an alternate form available, in which the confidence is supplied as a
 * numeric parameter, rather than an N-way choice of explicit keyword.
 */
Alias "Reject parse(confidence=_),expected:_" to
	atom for "Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_";

/**
 * Ensure semantic restriction bodies accept only types.  The primitive would
 * fail anyhow, but that failure is different from a parse rejection.
 *
 * @method "Semantic restriction_is_"
 * @restricts "string"
 * @restricts "function"
 */
Semantic restriction "Semantic restriction_is_" is
[
	nameType : string's type,
	bodyType : function's type
|
	argTypes ::= bodyType's parameters' type;
	Cast argTypes into [t : tuple of type's type | /**/ ]
	else
	[
		Reject parse strongly, expected:
			"semantic restriction body to accept types"
	];
	Cast bodyType's return type into [t : type | /**/ ]
	else
	[
		Reject parse strongly, expected:
			"semantic restriction body to return a type"
	];
	⊤
];


assertionFailureArgumentsTuple ::= <string>;
assertionFailureArgumentsSizes ::= ||assertionFailureArgumentsTuple's type||;
assertionFailureArgumentsType ::=
	<assertionFailureArgumentsTuple, ⊥… |assertionFailureArgumentsSizes>;
assertionFailureFunctionType ::=
	function accepting assertionFailureArgumentsTuple and returning ⊥;

/**
 * The variable holding the assertion failure handler function.  This is
 * populated when the exception mechanism has been sufficiently bootstrapped.
 */
assertionFailureFunction : assertionFailureFunctionType :=
[
	messageText : string
|
	message : tuple;
	Cast <"Assertion failure: ", messageText>
		into [t : tuple of tuple | message := concatenate t;]
		else [message := "Unable to assemble message for assertion failure";];
	Crash: message
] : ⊥;

/**
 * Update the assertionFailureFunction, returning the prior value.
 */
Method "Replace assertion failure function with_" is
[
	newFunction : assertionFailureFunctionType
|
	temp ::= assertionFailureFunction;
	assertionFailureFunction := newFunction;
	temp
] : assertionFailureFunctionType;

emptyTuple ::= <>;
nullaryFunctionReturningString ::=
	function accepting emptyTuple and returning string;

Method "Assert:_with function_" is
[
	predicate : boolean,
	message : nullaryFunctionReturningString
|
	/* No implementation required. */
] : ⊤;

Method "Assert:_with function_" is
[
	predicate : false's type,
	message : nullaryFunctionReturningString
|
	Invoke assertionFailureFunction with <invoke message with <>>
] : ⊥;

assertWithFunctionAtom ::= atom for "Assert:_with function_";

/**
 * If {@param "predicate"} evaluates to {@method "false"}, then raise a {@type
 * "descriptive exception" descriptive} {@type "assertion-failed
 * exception"} that includes an {@param "message" error message} produced by the
 * specified {@type "string"} {@type "expression phrase" expression}.
 *
 * @macro "Assert:_(_)"
 * @param "predicate" "expression phrase ⇒ boolean"
 *        A predicate.
 * @param "message" "expression phrase ⇒ string"
 *        An {@type "expression phrase" expression} that produces an error
 *        message. It is only evaluated if {@param "predicate"} is {@method
 *        "false"}.
 * @returns "send phrase ⇒ ⊤"
 * @category "Assertions"
 */
Macro "Assert:_(_)" is
[
	predicate : expression phrase ⇒ boolean,
	message : expression phrase ⇒ string
|
	messageBlock ::= «[emptyTuple |Primitive "" <message>]: string ^ ∅»;
	send assertWithFunctionAtom with <predicate, messageBlock> → list phrase : ⊤
];

/**
 * Statically detect assertions that are always false.
 *
 * @method "Assert:_(_)"
 * @restricts "false's type's type"
 */
Semantic restriction "Assert:_(_)" is
[
	contradiction : false's type's type,
	message : string's type
|
	Reject parse, expected:
		"an assertion that could ever be true \
		\|(use \"Shouldn't happen\" instead)"
];


/**
 * The {@code "Assert:_"} method is polymorphic on its {@code boolean} argument.
 * Define the base boolean case here, which will be overridden for the {@code
 * false} case below.
 *
 * @category "Assertions"
 * @method "Assert:_"
 * @param "condition" "boolean"
 *        The condition being asserted. Ideally it should be {@code true}, but
 *        if it's false, it should complain.
 */
Method "Assert:_" is
[
	condition : boolean
|
	/* Do nothing by default. */
] : ⊤;

/**
 * Override the {@code "Assert:_"} method for {@code false} as its argument.  It
 * should invoke the {@code "assertionFailureFunction"}.  Note that this
 * override yields {@code "⊥"}, so a statically detectable failing assertion
 * cannot have other statements after it.
 */
Method "Assert:_" is
[
	condition : false's type
|
	Invoke assertionFailureFunction with <"An assertion has failed">
] : ⊤;

/**
 * Statically detect assertions that are always false.
 *
 * @method "Assert:_"
 * @restricts "false's type's type"
 */
Semantic restriction "Assert:_" is
[
	contradiction : false's type's type
|
	Reject parse, expected:
		"an assertion that could ever be true \
		\|(use \"Shouldn't happen\" instead)"
];

/**
 * Declare that the code path that called this method should never be executed.
 * It results in an assertion failure. This is obsolete once exceptions are
 * available, and should not be exported beyond this package.
 *
 * @method "Shouldn't happen"
 * @returns "⊤" (but immediately restricted to ⊥, below)
 * @category "Bootstrap" "Assertions"
 */
Method "Shouldn't happen" is
[
	Invoke assertionFailureFunction with
		<"This should not be possible; debug the VM and/or system library.">
] : ⊤;

/**
 * It would be hard to bootstrap this method to have a bottom return type, so
 * just restrict it instead.
 *
 * @method "Shouldn't happen"
 * @returns "⊥"
 */
Semantic restriction "Shouldn't happen" is [⊥];

/**
 * Declare that the code path that called this method should never be executed.
 * It results in an assertion failure.
 *
 * @method "Shouldn't happen(_)"
 * @param "message" "string"
 *        The error message.
 * @returns "⊥"
 * @raises "assertion-failed exception"
 *         Always.
 * @category "Assertions"
 */
Method "Shouldn't happen(_)" is
[
	message : string
|
	messageText : tuple;
	Cast <"This should not be possible: ", message>
		into [t : tuple of tuple | messageText := concatenate t;]
		else [
			messageText := "Unable to assemble message for assertion failure";];
	Invoke assertionFailureFunction with <messageText>
] : ⊤;

Semantic restriction "Shouldn't happen(_)" is
[
	message : string's type
|
	⊥
];
