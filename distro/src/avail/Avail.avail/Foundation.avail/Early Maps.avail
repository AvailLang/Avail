/*
 * Early Maps.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Maps"
Versions
	"Avail-1.6.0"
Extends
	"Collections" = ("_[_]else_")
Uses
	"Bootstrap",
	"Collections" = ("_[_]else_"),
	"Definers",
	"Early Conditionals",
	"Early Control Structures",
	"Early Logic",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Math",
	"Types",
	"Variables"
Names
	"environment map",
	"${…}«else_»",
	"${…#}«else_»"
Body

Method "{_→_`|_.._}" is stable at
	[any meta, any meta, whole number, [0..∞]]→map meta;
Method "{_→_`|_..}" is stable at [any meta, any meta, whole number]→map meta;
Method "{_→_`|.._}" is stable at [any meta, any meta, [0..∞]]→map meta;
Method "{_→_`|}" is stable at [any meta, any meta]→map meta;

/**
 * If the exact map is known, then answer the enumeration of its keys.
 * Otherwise, just answer the key type.
 *
 * @method "_'s⁇key type"
 * @restricts "map meta's type"
 */
Semantic restriction "_'s⁇key type" is
[
	mapMeta : map meta's type
|
	mapType ::= mapMeta's instance;
	if |mapType| = 1 then
	[
		aMap ::= mapType's instance;
		elements ::= aMap's keys;
		enumeration of elements' type
	]
	else
	[
		mapMeta's instance's key type's type
	]
];

/**
 * If the exact map is known, then answer the enumeration of its values.
 * Otherwise, just answer the value type.
 *
 * @method "_'s⁇value type"
 * @restricts "map meta's type"
 */
Semantic restriction "_'s⁇value type" is
[
	mapMeta : map meta's type
|
	mapType ::= mapMeta's instance;
	if |mapType| = 1 then
	[
		aMap ::= mapType's instance;
		elements ::= aMap's values→set;
		enumeration of elements' type
	]
	else
	[
		mapMeta's instance's value type's type
	]
];

Method "_∈_" is stable at [any, map]→boolean;

/**
 * Use type intersection to determine whether the map could possibly contain
 * the specified key. In some rare circumstances, it is even possible to
 * determine if the map *must* contain the key.
 *
 * @method "_∈_"
 * @restricts "any meta"
 * @restricts "map meta"
 */
Semantic restriction "_∈_" is
[
	keyType : any meta,
	mapType : map meta
|
	mapKeyType ::= mapType's key type;
	if keyType ∩ mapKeyType = ⊥ then [false's type]
	else
	[
		if |mapKeyType| = ⌊mapType⌋ ∧ keyType ⊆ mapKeyType then [true's type]
		else [boolean]
	]
];

Method "_[_]" is stable at [map, any]→any;

/**
 * Answer the map's value type.
 *
 * @method "_[_]"
 * @restricts "map meta"
 * @restricts "any meta"
 */
Semantic restriction "_[_]" is
[
	mapType : map meta,
	keyType : any meta
|
	mapType's value type
];

Method "_'s⁇bindings" is stable at [map]→key-value tuple;

/**
 * @method "_'s⁇bindings"
 * @restricts "map meta"
 */
Semantic restriction "_'s⁇bindings" is
[
	mapType : map meta
|
	<<>, <mapType's key type, mapType's value type…|2>… | ||mapType||>
];

Method "_'s⁇keys" is stable at [map]→set;

/**
 * @method "_'s⁇keys"
 * @restricts "map meta"
 */
Semantic restriction "_'s⁇keys" is
[
	mapType : map meta
|
	{mapType's key type | ||mapType||}
];

/**
 * Note that the values of a map are arbitrarily ordered (by hashing), and no
 * two invocations on the same map are guaranteed to produce the same tuple.
 *
 * @method "_'s⁇values"
 * @restricts "map meta"
 */
Semantic restriction "_'s⁇values" is
[
	mapType : map meta
|
	<<>, mapType's value type… | ||mapType||>
];

Method "_+_→_" is stable at [map, any, any]→map;

/**
 *
 * @method "_+_→_"
 * @restricts "map meta"
 * @restricts "any meta"
 * @restricts "any meta"
 */
Semantic restriction "_+_→_" is
[
	mapType : map meta,
	keyType : any meta,
	valueType : any meta
|
	oldKeyType ::= mapType's key type;
	newKeyType ::= oldKeyType ∪ keyType;
	newValueType ::= mapType's value type ∪ valueType;
	lower : [0..∞) := ⌊mapType⌋;
	bound : [0..∞] := ⌈mapType⌉;
	/* If the type intersection of the key type and the new key type is
	 * ⊥, then the new key cannot be present in the map. Adjust the
	 * cardinality accordingly.
	 */
	if oldKeyType ∩ keyType = ⊥ then
	[
		lower := eject lower + 1;
		bound := eject bound + 1;
	]
	/* Otherwise the key *may* be present, but there's no way to
	 * know for sure. Adjust the cardinality accordingly.
	 */
	else
	[
		lower := eject lower max 1;
		bound := eject bound + 1;
	];
	{newKeyType→newValueType | [lower..bound+1)}
];

Method "_-_" is stable at [map, any]→map;

/**
 * @method "_-_"
 * @restricts "map meta"
 * @restricts "any meta"
 */
Semantic restriction "_-_" is
[
	mapType : map meta,
	keyType : any meta
|
	lower : [0..∞) := ⌊mapType⌋;
	upper : [0..∞] := ⌈mapType⌉ + 1;
	/* If the type intersection of the key type and the new key type is
	 * ⊥, then the new key cannot be present in the map. Adjust the
	 * cardinality accordingly.
	 */
	if mapType's key type ∩ keyType = ⊥ then
	[
		/* Do nothing. */
	]
	/* Otherwise the key *may* be present, but there's no way to
	 * know for sure. Adjust the cardinality accordingly.
	 */
	else
	[
		lower := 0 max eject lower - 1;
	];
	{mapType's key type→mapType's value type | [lower..upper)}
];

/**
 * If {@param "key"} is a key of {@param "aMap"}, then answer its associated
 * value. Otherwise, invoke {@param "else"} and answer its return value.
 *
 * @method "_[_]else_"
 * @param "aMap" "map"
 *        A map.
 * @param "key" "any"
 *        A key.
 * @param "default" "[]→any"
 *        A function that answers the
 * @returns "any"
 * @category "Maps" "Queries"
 */
Method "_[_]else_" is
[
	aMap : map,
	key : any,
	default : []→any
|
	if key ∈ aMap then [ aMap[key] ] else default
] : any;

/**
 * @method "_[_]else_"
 * @restricts "map meta"
 * @restricts "any meta"
 * @restricts "([]→any)'s type"
 */
Semantic restriction "_[_]else_" is
[
	mapType : map meta,
	keyType : any meta,
	default : ([]→any)'s type
|
	if keyType ∩ (mapType's key type) = ⊥ then
	[
		default's return type
	]
	else
	[
		mapType's value type ∪ default's return type
	]
];

/**
 * Answer the Avail virtual machine's environment as a {@type "map"} from
 * environment variable names to values.
 *
 * @method "environment map"
 * @returns "{string→string|}"
 *          The environment {@type "map"}. On systems that do not support
 *          environment variables, this {@type "map"} will be empty.
 * @category "Maps" "Queries"
 */
Public method "environment map" is
[
	Primitive EnvironmentMap;
] : {string → string | whole number};

/**
 * Answer the value of the requested environment variable.
 *
 * @method "${…}«else_»"
 * @param "aToken" "token"
 *        The name of the environment variable.
 * @param "else" "[]→string"
 *        The {@type "function"} to evaluate to produce a default if the
 *        environment does not include an appropriately named variable.
 * @returns "string"
 * @category "Maps" "Queries"
 */
Public method "${…}«else_»" is
[
	aToken : token,
	else : ([]→string)?
|
	environment map[aToken's lexeme] else
	[
		invoke
			else[1] else
				[[invoke early failure function with <key-not-found code>]]
		with <>
	]
] : string;

/**
 * Answer the value of the requested environment variable.
 *
 * @method "${…#}«else_»"
 * @param "aToken" "literal token ⇒ nonempty string"
 *        The name of the environment variable.
 * @param "else" "[]→string"
 *        The {@type "function"} to evaluate to produce a default if the
 *        environment does not include an appropriately named variable.
 * @returns "string"
 * @category "Maps" "Queries"
 */
Public method "${…#}«else_»" is
[
	aToken : literal token ⇒ nonempty string,
	else : ([]→string)?
|
	environment map[aToken's value] else
	[
		invoke
			else[1] else
				[[invoke early failure function with <key-not-found code>]]
		with <>
	]
] : string;
