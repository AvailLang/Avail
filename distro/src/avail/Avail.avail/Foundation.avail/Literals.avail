/*
 * Literals.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Literals"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Early Literals" =
	(
		"<«_‡,»>",
		"{«_‡,»}",
		"“_”"
	)
Uses
	"Bootstrap",
	"Definers",
	"Early Assertions",
	"Early Conditionals",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Early Variables",
	"Enumeration Support",
	"Macro Support",
	"Phrases"
Names
	"{«_→_‡,»}",
	"`$…",
	"`$…$",
	"¢…!",
	"…#.…#«f»?",
	"…#.…#…",
	"…#.…#e|E«+|-»!…#«f»?",
	"enclosing module"
Body

Method "`|_`|" is stable at
	function accepting <tuple> and returning whole number;

/**
 * @method "`|_`|"
 * @restricts "tuple meta"
 * @category "Tuples"
 */
Semantic restriction "`|_`|" is
[
	aTupleType : tuple meta
|
	||aTupleType||
];

Method "`|_`|" is stable at
	function accepting <set> and returning whole number;

/**
 * @method "`|_`|"
 * @restricts "set meta"
 * @category "Sets"
 */
Semantic restriction "`|_`|" is
[
	aSetType : set meta
|
	sizes ::= ||aSetType||;
	[⎣sizes⎦..⎡sizes⎤ + 1)
];

Method "`|_`|" is stable at
	function accepting <map> and returning whole number;
	
/**
 * @method "`|_`|"
 * @restricts "map meta"
 * @category "Maps"
 */
Semantic restriction "`|_`|" is
[
	aMapType : map meta
|
	sizes ::= ||aMapType||;
	[⎣sizes⎦..⎡sizes⎤ + 1)
];

/**
 * Answer the lower bound of the argument.
 *
 * @method "⎣_⎦"
 * @param "aTupleType" "tuple meta"
 *        A tuple type.
 * @returns "whole number"
 *          The lower bound of the argument.
 * @category "Tuples" "Types" "Queries"
 */
Method "⎣_⎦" is
[
	aTupleType : tuple meta
|
	⎣||aTupleType||⎦
] : whole number;

/**
 * Answer the lower bound of the argument.
 *
 * @method "⎣_⎦"
 * @param "aSetType" "set meta"
 *        A set type.
 * @returns "whole number"
 *          The lower bound of the argument.
 * @category "Sets" "Types" "Queries"
 */
Method "⎣_⎦" is
[
	aSetType : set meta
|
	⎣||aSetType||⎦
] : whole number;

/**
 * Answer the lower bound of the argument.
 *
 * @method "⎣_⎦"
 * @param "aMapType" "map meta"
 *        A map type.
 * @returns "whole number"
 *    The lower bound of the argument.
 * @category "Maps" "Types" "Queries"
 */
Method "⎣_⎦" is
[
	aMapType : map meta
|
	⎣||aMapType||⎦
] : whole number;

Method "⎣_⎦" is
[
	bottom : ⊥'s type
|
	Shouldn't happen
];

Method "⎡_⎤" is
[
	bottom : ⊥'s type
|
	Shouldn't happen
];

/**
 * @method "⎣_⎦"
 * @restricts "⊥'s type's type"
 */
Semantic restriction "⎣_⎦" is
[
	bottom : ⊥'s type's type
|
	Reject parse, expected:
		"a value other than ⊥'s type for ⎣_⎦."
];

/**
 * @method "⎡_⎤"
 * @restricts "⊥'s type's type"
 */
Semantic restriction "⎡_⎤" is
[
	bottom : ⊥'s type's type
|
	Reject parse, expected:
		"a value other than ⊥'s type for ⎡_⎤."
];

/**
 * Answer the upper bound of the argument.
 *
 * @method "⎡_⎤"
 * @param "aTupleType" "tuple meta"
 *        A tuple type.
 * @returns "[0..∞]"
 *          The upper bound of the argument.
 * @category "Tuples" "Types" "Queries"
 */
Method "⎡_⎤" is
[
	aTupleType : tuple meta
|
	⎡||aTupleType||⎤
] : [0..∞];

/**
 * Answer the upper bound of the argument.
 *
 * @method "⎡_⎤"
 * @param "aSetType" "set meta"
 *        A set type.
 * @returns "[0..∞]"
 *          The upper bound of the argument.
 * @category "Sets" "Types" "Queries"
 */
Method "⎡_⎤" is
[
	aSetType : set meta
|
	⎡||aSetType||⎤
] : [0..∞];

/**
 * Answer the upper bound of the argument.
 *
 * @method "⎡_⎤"
 * @param "aMapType" "map meta"
 *        A map type.
 * @returns "[0..∞]"
 *          The upper bound of the argument.
 * @category "Maps" "Types" "Queries"
 */
Method "⎡_⎤" is
[
	aMapType : map meta
|
	⎡||aMapType||⎤
] : [0..∞];

/**
 * Strengthen the lower bound for tuple types.
 *
 * @method "⎣_⎦"
 * @restricts "tuple meta's type"
 */
Semantic restriction "⎣_⎦" is
[
	aTupleTypeType : tuple meta's type
|
	||aTupleTypeType's instance||
];

/**
 * Strengthen the lower bound for set types.
 *
 * @method "⎣_⎦"
 * @restricts "set meta's type"
 */
Semantic restriction "⎣_⎦" is
[
	aSetTypeType : set meta's type
|
	||aSetTypeType's instance||
];

/**
 * Strengthen the lower bound for map types.
 *
 * @method "⎣_⎦"
 * @restricts "map meta's type"
 */
Semantic restriction "⎣_⎦" is
[
	aMapTypeType : map meta's type
|
	||aMapTypeType's instance||
];

/**
 * Strengthen the upper bound for tuple types.
 *
 * @method "⎡_⎤"
 * @restricts "tuple meta's type"
 */
Semantic restriction "⎡_⎤" is
[
	aTupleTypeType : tuple meta's type
|
	instance ::= aTupleTypeType's instance;
	[⎣instance⎦ .. ⎡instance⎤]
];

/**
 * Strengthen the upper bound for set types.
 *
 * @method "⎡_⎤"
 * @restricts "set meta's type"
 */
Semantic restriction "⎡_⎤" is
[
	aSetTypeType : set meta's type
|
	instance ::= aSetTypeType's instance;
	[⎣instance⎦ .. ⎡instance⎤]
];

/**
 * Strengthen the upper bound for map types.
 *
 * @method "⎡_⎤"
 * @restricts "map meta's type"
 */
Semantic restriction "⎡_⎤" is
[
	aMapTypeType : map meta's type
|
	instance ::= aMapTypeType's instance;
	[⎣instance⎦ .. ⎡instance⎤]
];

/**
 * Construct an {@type "atom"} {@type "literal phrase" literal} from a keyword
 * {@type "token"}. The atom is obtained via {@method "atom for_"}, i.e., it is
 * looked up using in the current module's context. The name of the atom is
 * provided by the argument's lexeme.
 * 
 * @macro "`$…"
 * @param "tokenPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the atom.
 * @returns "literal phrase ⇒ atom"
 *          The {@type "atom"} {@type "literal phrase" literal}.
 * @category "Atoms" "Constructors"
 */
Public macro "`$…" is
[
	tokenPhrase : literal phrase ⇒ token
|
	‘atom for tokenPhrase's token's lexeme’
] : literal phrase ⇒ atom;

/**
 * Construct an {@type "atom"} {@type "literal phrase" literal} from a string
 * literal token. The atom is obtained via {@method "atom for_"}, i.e., it is
 * looked up in the current module's context. If the token is a string literal,
 * then use its value instead of its lexeme for the name of the atom.
 * 
 * @macro "`$…$"
 * @param "aToken"
 *        "literal phrase ⇒ (literal token ⇒ string)"
 *        A {@type "literal phrase"} holding a {@type "literal token"} whose
 *        value is the name of the atom.
 * @returns "literal phrase ⇒ atom"
 *          The {@type "atom"} {@type "literal phrase" literal}.
 * @category "Atoms" "Constructors"
 */
Public macro "`$…$" is
[
	tokenPhrase : literal phrase ⇒ (literal token ⇒ string)
|
	‘atom for tokenPhrase's token's value's value’
] : literal phrase ⇒ atom;

/**
 * Construct a {@type "character"} {@type "literal phrase" literal} from an
 * arbitrary one-character {@type "token"}.
 * 
 * @macro "¢…!"
 * @param "tokenPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose lexeme denotes the character.
 * @returns "literal phrase ⇒ character"
 *          The {@type "character"} {@type "literal phrase" literal}.
 * @category "Unicode" "Constructors"
 */
Public macro "¢…!" is
[
	tokenPhrase : literal phrase ⇒ token
|
	‘tokenPhrase's token's lexeme[1]’
];

/**
 * Construct a character literal from a literal string token of length one.
 * This allows capture of characters like space and double quote (").
 * 
 * @macro "¢…!"
 * @param "tokenPhrase" "literal phrase ⇒ (literal token ⇒ <character…|1>)"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value denotes the character.
 * @returns "literal phrase ⇒ character"
 *          The {@type "character"} {@type "literal phrase" literal}.
 * @category "Unicode" "Constructors"
 */
Public macro "¢…!" is
[
	tokenPhrase : literal phrase ⇒ (literal token ⇒ <<>, character…|1's type>)
|
	‘tokenPhrase's token's value's value[1]’
];

/**
 * Disambiguate subscript of ⊥. This is a type subscript operation, such as
 * defined for tuple types or function types, and can consistently answer ⊥.
 * 
 * @method "_[_]"
 * @param "bottom" "⊥'s type"
 * @param "index" "natural number"
 *        The subscript (ignored).
 * @returns "⊥"
 * @category "Types" "Queries"
 */
Method "_[_]" is
[
	bottom : ⊥'s type,
	index : natural number
|
	⊥
];

Method "_[_]" is stable at
	function accepting <tuple, natural number> and returning any;

/**
 * Strengthen the tuple subscript operation. The strongest available static type
 * is the type union of the elements within the slice indicated by the range of
 * the subscript. Forbid any access that could never be correct, i.e., the
 * minimum value of the subscript exceeds the maximum cardinality of the tuple.
 *
 * @method "_[_]"
 * @restricts "tuple meta"
 * @restricts "natural number's type"
 */
Semantic restriction "_[_]" is
[
	aTupleType : tuple meta,
	index : natural number's type
|
	If ⎡aTupleType⎤ < ⎣index⎦ then
	[
		messageTuple ::= concatenate <
			"a subscript (",
			“⎣index⎦”,
			" ≤ theSubscript ≤ ",
			“⎡index⎤”,
			") that could ever be valid (",
			“⎣aTupleType⎦”,
			" ≤ |theTuple| ≤ ",
			“⎡aTupleType⎤”,
			")">;
		message ::= cast messageTuple into [ t : string | t ];
		Reject parse, expected: message
	];
	union : type := ⊥;
	limit ::= cast |aTupleType's leading types| + 1
		into [ t : natural number | t ];
	startIndex ::= ⎣index⎦ min limit;
	endIndex ::= ⎡index⎤ min limit;
	From startIndex to endIndex do
	[
		i : natural number
	|
		union := union ∪ aTupleType[i];
		true
	];
	union
];

/**
 * Strengthen the tuple type subscript operation. The strongest available static
 * type is the instance type of the type union of the elements within the slice
 * indicated by the range of the subscript. Forbid any access that could never
 * be correct, i.e., the minimum value of the subscript exceeds the maximum
 * cardinality of the tuple.
 *
 * @method "_[_]"
 * @restricts "tuple meta's type"
 * @restricts "natural number's type"
 */
Semantic restriction "_[_]" is
[
	aTupleMeta : tuple meta's type,
	index : natural number's type
|
	aTupleType ::= aTupleMeta's instance;
	If ⎡aTupleType⎤ < ⎣index⎦ then
	[
		messageTuple ::= concatenate <
			"a subscript (",
			“⎣index⎦”,
			" ≤ theSubscript ≤ ",
			“⎡index⎤”,
			") that could ever be valid (",
			“⎣aTupleType⎦”,
			" ≤ |theTuple| ≤ ",
			“⎡aTupleType⎤”,
			")">;
		message ::= cast messageTuple into [ t : string | t ];
		Reject parse, expected: message
	];
	union : type := ⊥;
	limit ::= cast |aTupleType's leading types| + 1
		into [ t : natural number | t ];
	startIndex ::= ⎣index⎦ min limit;
	endIndex ::= ⎡index⎤ min limit;
	From startIndex to endIndex do
	[
		i : natural number
	|
		union := union ∪ aTupleType[i];
		true
	];
	union's type
];

/* Disambiguate `∪_` and `∪_[_.._]` by forbidding `_[_.._]` as the only argument
 * of the former.
 */
Invoke
[
	cast ::= [ t : {string|natural number} | t ];
	names ::= cast <"∪_">→set into cast;
	exclusions ::= cast <"_[_.._]">→set into cast;
	Grammatical restriction names is <exclusions>;
]
with <>;

/**
 * If a lexical set is built only from expressions with statically well-known
 * runtime values, then answer the instance type of the set that contains
 * those statically known elements. This gives lexical sets of literals and
 * statically well-known elements the same force as lexical literals, e.g.,
 * numbers and strings.
 *
 * @method "{«_‡,»}"
 * @restricts "<any…|1..>'s type"
 */
Semantic restriction "{«_‡,»}" is
[
	elements : <<>, any…|natural number>'s type
|
	/* Since the argument is derived from a lexically constructed tuple, then
	 * the cardinality of the argument is guaranteed to be a fixed, finite
	 * value. Therefore asking for either the lower or upper bound would be
	 * equivalent.
	 */
	limit ::= ⎡elements⎤;
	accumulator : tuple := <>;
	/* Check to see if the elements are instance types. */
	From 1 to limit do
	[
		index : natural number
	|
		element ::= elements[index];
		if |elements[index]| = 1 then
		[
			instance ::= elements[index]'s instance;
			/* Do not blithely construct a literal-force tuple if any of the
			 * instances are themselves types. This prevents expressions like
			 * `{elements[index]}` from asserting the type `{any}'s type` rather
			 * than `{any's type|1}`, which frequently leads to (absurd)
			 * runtime type errors, e.g., if elements[index] has the static type
			 * [0..5], then the return type verification nybblecode would fail
			 * because `{[0..5]}` is not a subtype of `{any}`.
			 */
			if instance's type ⊆ type then
			[
				false
			]
			else
			[
				accumulator := concatenate <eject accumulator, <instance>>;
				true
			]
		]
		else
		[
			false
		]
	];
	/* If the elements were all instance types, then answer an instance type. */
	if |accumulator| = limit then
	[
		(accumulator→set)'s type
	]
	/* Otherwise, the answer cannot be an instance type. Compute the most
	 * precise possible set type.
	 */
	else
	[
		/* Build a tuple of distinct types encountered during a traversal of
		 * `elements`. Two types are distinct in this sense if they have no
		 * common descendants more general than ⊥. This establishes a lower
		 * bound on the answer's cardinality requirement.
		 *
		 * Also note what types have been encountered along the way. At the end
		 * they will be put into a set to effect deduplication of exact type
		 * matches. This set establishes an upper bound on the answer's
		 * cardinality requirement.
		 */
		types : tuple of type := <elements[1]>;
		distinct : tuple of type := <elements[1]>;
		From 2 to limit do
		[
			outerIndex : natural number
		|
			element ::= elements[outerIndex];
			types := cast concatenate <eject types, <element>>
				into [ t : tuple of type | t ];
			isDistinct : boolean := true;
			From 1 to |distinct| do
			[
				innerIndex : natural number
			|
				if element ∩ distinct[innerIndex] ≠ ⊥ then
				[
					isDistinct := false;
					false
				]
				else
				[
					true
				]
			];
			If isDistinct then
			[
				distinct := cast concatenate <eject distinct, <element>> into
					[ t : tuple of type | t ];
			];
			true
		];
		lower ::= |distinct|;
		upper ::= |types| + 1;
		union ::= cast ∪ types into [ t : any's type | t ];
		{union | [lower..upper)}
	]
];

/**
 * Construct and answer a map from the lexically specified key-value bindings.
 * 
 * @method "{«_→_‡,»}"
 * @param "bindings" "key-value tuple"
 *        The key-value bindings that constitute the answer.
 * @returns "map"
 *          A map comprising the specified key-value bindings.
 * @category "Maps" "Constructors"
 */
Public method "{«_→_‡,»}" is
[
	bindings : key-value tuple
|
	bindings→map
] : map;

/**
 * If a lexical map is built only from expressions with statically well-known
 * runtime values, then answer the instance type of the map that contains
 * those statically known elements. This gives lexical maps of literals and
 * statically well-known elements the same force as lexical literals, e.g.,
 * numbers and strings.
 *
 * @method "{«_→_‡,»}"
 * @restricts "key-value tuple's type"
 * @returns "set's type"
 * @category "Maps"
 */
Semantic restriction "{«_→_‡,»}" is
[
	bindings : key-value tuple's type
|
	/* Since the argument is derived from a lexically constructed tuple, then
	 * the cardinality of the argument is guaranteed to be a fixed, finite
	 * value. Therefore asking for either the lower or upper bound would be
	 * equivalent.
	 */
	limit ::= ⎡bindings⎤;
	accumulator : <<>, <<>, any…|[2..2]>… |whole number> := <>;
	/* Check to see if keys and values are all instance types. */
	From 1 to limit do
	[
		index : natural number
	|
		binding ::= bindings[index];
		if |binding[1]| = 1 then
		[
			instanceK ::= binding[1]'s instance;
			if |binding[2]| = 1 then
			[
				instanceV ::= binding[2]'s instance;
				/* Do not blithely construct a literal-force tuple if any of the
				 * instances are themselves types. This prevents expressions
				 * like `{index→elements[index]}` from asserting the type
				 * `{natural number→any}'s type` rather than
				 * `{natural number's type→any's type|1}`, which frequently
				 * leads to (absurd) runtime type errors.
				 */
				if instanceK's type ⊆ type ∨ instanceV's type ⊆ type then
				[
					false
				]
				else
				[
					accumulator :=
						cast concatenate
							<eject accumulator, <<instanceK, instanceV>>>
						into
						[
							t : <<>, <<>, any…|[2..2]>… |whole number>
						|
							t
						];
					true
				]
			]
			else
			[
				false
			]
		]
		else
		[
			false
		]
	];
	/* If the keys and values were all instance types, then answer an instance
	 * type.
	 */
	if |accumulator| = limit then
	[
		(accumulator→map)'s type
	]
	/* Otherwise, the answer cannot be an instance type. Compute the most
	 * precise possible map type.
	 */
	else
	[
		/* Build a tuple of distinct key types encountered during a traversal of
		 * `bindings`. Two key types are distinct in this sense if they have no
		 * common descendants more general than ⊥. This establishes a lower
		 * bound on the answer's cardinality requirement.
		 *
		 * Also note what key types have been encountered along the way. At the
		 * end they will be put into a set to effect deduplication of exact type
		 * matches. This set establishes an upper bound on the answer's
		 * cardinality requirement.
		 */
		firstBinding ::= bindings[1];
		firstKeyType ::= firstBinding[1];
		distinct : tuple of type := <firstKeyType>;
		keyTypes : tuple of type := <firstKeyType>;
		valueTypes : tuple of type := <firstBinding[2]>;
		From 2 to limit do
		[
			outerIndex : natural number
		|
			binding ::= bindings[outerIndex];
			keyType ::= binding[1];
			keyTypes := cast concatenate <eject keyTypes, <keyType>>
				into [ t : tuple of type | t ];
			valueTypes := cast concatenate <eject valueTypes, <binding[2]>>
				into [ t : tuple of type | t ];
			isDistinct : boolean := true;
			From 1 to |distinct| do
			[
				innerIndex : natural number
			|
				if keyType ∩ distinct[innerIndex] ≠ ⊥ then
				[
					isDistinct := false;
					false
				]
				else
				[
					true
				]
			];
			If isDistinct then
			[
				distinct := cast concatenate <eject distinct, <keyType>>
					into [ t : tuple of type | t ];
			];
			true
		];
		lower ::= |distinct|;
		upper ::= |keyTypes| + 1;
		unionK ::= cast ∪ keyTypes into [ t : any's type | t ];
		unionV ::= cast ∪ valueTypes into [ t : any's type | t ];
		{unionK → unionV | [lower..upper)}
	]
];

/* Forbid nesting the cardinality range accessor into the lower and upper
 * bounds operations.
 */
Grammatical restriction {"⎣_⎦", "⎡_⎤"} is <{"`|`|_`|`|"}>;

/**
 * Attempt to produce a literal {@type "tuple"} from the specified lexical
 * {@type "list phrase" list} of {@type "expression phrase" expression}s. This
 * folding is only possible if each subordinate expression is a {@type
 * "literal phrase"}. If any subordinate expression implies dynamic behavior,
 * then we must not fold to a specific tuple.
 *
 * @macro "<«_‡,»>"
 * @param "exprs" "list phrase ⇒ tuple"
 * @returns "phrase ⇒ tuple"
 * @category "Tuples"
 */
Macro "<«_‡,»>" is
[
	exprs : list phrase ⇒ tuple
|
	Cast exprs' expressions into
	[
		literals : <<>, literal phrase…|whole number>
	|
		values : tuple := <>;
		From 1 to |literals| do
		[
			index : natural number
		|
			values := concatenate
				<eject values, <literals[index]'s token's value>>;
			true
		];
		‘values’
	]
	else [exprs]
];

/**
 * If a lexical tuple is built only from expressions with statically well-known
 * runtime values, then answer the instance type of the tuple that contains
 * those statically known elements. This gives lexical tuples of literals and
 * statically well-known elements the same force as lexical literals, e.g.,
 * numbers and strings.
 *
 * @method "<«_‡,»>"
 * @restricts "tuple meta"
 */
/*
 * TODO [MvG] REMOVE THIS RESTRICTION.  It's probably pointless with the macro
 * that was just defined above.
[
	elements : tuple meta
|
	/* Since the argument is derived from a lexically constructed tuple, then
	 * the cardinality of the argument is guaranteed to be a fixed, finite
	 * value. Therefore asking for either the lower or upper bound would be
	 * equivalent.
	 */
	limit ::= ⎡elements⎤;
	accumulator : tuple := <>;
	From 1 to limit do
	[
		index : natural number
	|
		if |elements[index]| = 1 then
		[
			instance ::= elements[index]'s instance;
			/* Do not blithely construct a literal-force tuple if any of the
			 * instances are themselves types. This prevents expressions like
			 * `<elements[index]>` from asserting the type `<any>'s type` rather
			 * than `<any's type…|1>`, which frequently leads to (absurd)
			 * runtime type errors, e.g., if elements[index] has the static type
			 * [0..5], then the return type verification nybblecode would fail
			 * because `<[0..5]>` is not a subtype of `<any>`.
			 */
			if instance's type ⊆ type then
			[
				false
			]
			else
			[
				accumulator := concatenate <eject accumulator, <instance>>;
				true
			]
		]
		else
		[
			false
		]
	];
	if |accumulator| = limit then
	[
		accumulator's type
	]
	else
	[
		elements
	]
];
*/

/**
 * Attempt to produce a literal {@type "set"} from the specified lexical
 * {@type "list phrase" list} of {@type "expression phrase" expression}s. This
 * folding is only possible if each subordinate expression is a {@type
 * "literal phrase"}. If any subordinate expression implies dynamic behavior,
 * then we must not fold to a specific set.
 *
 * @macro "{«_‡,»}"
 * @param "exprs" "list phrase ⇒ nonempty tuple"
 * @returns "phrase ⇒ set"
 * @category "Sets"
 */
Macro "{«_‡,»}" is
[
	exprs : list phrase ⇒ nonempty tuple
|
	cast exprs' expressions into
	[
		literals : <<>, literal phrase…|natural number>
	|
		values : tuple := <>;
		From 1 to |literals| do
		[
			index : natural number
		|
			values := concatenate
				<eject values, <literals[index]'s token's value>>;
			true
		];
		‘values→set’
	]
	else [restricted send $"{«_‡,»}" with «<exprs>» : set]
];

/**
 * Attempt to produce a literal {@type "map"} from the specified lexical
 * {@type "list phrase" list} of {@type "expression phrase" expression}s. This
 * folding is only possible if each subordinate expression is a {@type
 * "literal phrase"}. If any subordinate expression implies dynamic behavior,
 * then we must not fold to a specific map.
 *
 * @macro "{«_→_‡,»}"
 * @param "exprs" "list phrase ⇒ tuple"
 * @returns "phrase ⇒ set"
 * @category "Maps"
 */
Macro "{«_→_‡,»}" is
[
	exprs : list phrase ⇒ <<>, <<>, any… | 2's type>… | whole number>
|
	values : tuple := <>;
	literalizable : boolean := true;
	Cast exprs' expressions into
	[
		literals : <<>, list phrase ⇒ <<>, any… | 2's type>… | whole number>
	|
		From 1 to |literals| do
		[
			index : natural number
		|
			bindingPhrase ::= literals[index];
			Cast bindingPhrase's expressions into
			[
				bindingTuple : <<>, literal phrase…|2's type>
			|
				values := concatenate
				<
					eject values,
					<
						<
							bindingTuple[1]'s token's value,
							bindingTuple[2]'s token's value
						>
					>
				>;
				true
			]
			else [literalizable := false;];
			literalizable
		];
	]
	else [literalizable := false;];
	bindings ::= cast values
		into [t : <<>, <<>, any… | 2's type>… | whole number> | t];
	if literalizable then [‘bindings→map’]
	else [restricted send $"{«_→_‡,»}" with «<exprs>» : map]
];

/**
 * Construct a {@type "double"} from the supplied {@type "literal token"}s that
 * represent its parts.
 *
 * @method "a double from integer=_,fraction=_,exponent=_"
 * @param "integerPart" "literal token ⇒ whole number"
 *        The part of the base-10 numeral that occurs before the decimal point.
 * @param "fractionalPart" "literal token ⇒ whole number"
 *        The part of the base-10 numeral that occurs after the decimal point.
 * @param "exponentPart" "literal token ⇒ integer"
 *        The part of the base-10 numeral that represents the scale factor.
 * @returns "double"
 */
Private method "a double from integer=_,fraction=_,exponent=_" is
[
	integerPart : literal token ⇒ whole number,
	fractionalPart : literal token ⇒ whole number,
	exponentPart : literal token ⇒ integer
|
	Primitive ConstructDoubleFromParts;
] : double;

/**
 * Construct a {@type "double"} literal from the supplied integral and
 * fractional parts.
 *
 * @macro "…#.…#«f»?"
 * @param "integerPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "fractionalPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "isFloat" "literal phrase ⇒ boolean"
 * @category "Numbers" "Floating Point"
 * @returns "literal phrase ⇒ number"
 */
Public macro "…#.…#«f»?" is
[
	integerPart : literal phrase ⇒ (literal token ⇒ whole number),
	fractionalPart : literal phrase ⇒ (literal token ⇒ whole number),
	isFloatPhrase : literal phrase ⇒ boolean
|
	Require: macro send has no internal whitespace
		("floating-point literal not to contain whitespace");
	integerToken ::= integerPart's token's value;
	fractionalToken ::= fractionalPart's token's value;
	isFloat ::= isFloatPhrase's token's value;
	d ::= a double from
		integer = integerToken,
		fraction = fractionalToken,
		exponent = `0`;
	‘if isFloat then [d→float] else [d]’
];

/**
 * Construct a {@type "double"} or {@type "float"} literal from the supplied
 * integral, fractional, and exponent parts.
 *
 * @macro "…#.…#…"
 * @param "integerPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "fractionalPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "exponentPart" "literal phrase ⇒ token"
 * @category "Numbers" "Floating Point"
 * @returns "literal phrase ⇒ number"
 */
Public macro "…#.…#…" is
[
	integerPart : literal phrase ⇒ (literal token ⇒ whole number),
	fractionalPart : literal phrase ⇒ (literal token ⇒ whole number),
	exponentPart : literal phrase ⇒ token
|
	Require: macro send has no internal whitespace
		("floating-point literal not to contain whitespace");
	rejectMessage ::=
		"exponent to comprise e or E followed by one or more digits";
	integerToken ::= integerPart's token's value;
	fractionalToken ::= fractionalPart's token's value;
	exponentToken ::= exponentPart's token;
	exponentString : string := exponentToken's lexeme;
	If ¬exponentString[1] ∈ {¢e, ¢E} then
	[
		Reject parse, expected: rejectMessage
	];
	exponentString := cast exponentString[2..|exponentString|]
		into [t : string | t];
	If |exponentString| = 0 then
	[
		Reject parse, expected: rejectMessage
	];
	exponent : extended integer := 0;
	isFloat : boolean := false;
	From 1 to |exponentString| do
	[
		index : natural number
	|
		c ::= exponentString[index];
		/* Conversion of a tuple to a set isn't stable yet, so we can't fold
		 * it away. Therefore we express the set of digits explicitly, in a way
		 * that can be folded by the set constructor macro.
		 */
		If c ∈ {¢f,  ¢F} then
		[
			If index ≠ |exponentString| then
			[
				Reject parse, expected: rejectMessage
			];
			isFloat := true;
		]
		else
		[
			If ¬c ∈ {¢0, ¢1, ¢2, ¢3, ¢4, ¢5, ¢6, ¢7, ¢8, ¢9} then
			[
				Reject parse, expected: rejectMessage
			];
			/* The precedence of "_×_" and "_+_" are not established yet, so use
			 * parentheses to force the order of operations. 48 is ¢0's code
			 * point.
			 */
			exponent := (eject exponent × 10) + (c's code point - 48);
		];
		true
	];
	syntheticExponentToken ::= `cast exponent into [t : whole number | t]`;
	d ::= a double from
		integer = integerToken,
		fraction = fractionalToken,
		exponent = syntheticExponentToken;
	‘if isFloat then [d→float] else [d]’
];

/**
 * Construct a {@type "double"} literal from the supplied integral, fractional,
 * and exponent parts.
 *
 * @macro "…#.…#e|E«+|-»!…#«f»?"
 * @param "integerPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "fractionalPart" "literal phrase ⇒ (literal token ⇒ whole number)"
 * @param "exponentPart" "literal phrase ⇒ token"
 * @param "isFloatPhrase" "literal phrase ⇒ boolean"
 * @category "Numbers" "Floating Point"
 * @returns "literal phrase ⇒ number"
 */
Public macro "…#.…#e|E«+|-»!…#«f»?" is
[
	integerPart : literal phrase ⇒ (literal token ⇒ whole number),
	fractionalPart : literal phrase ⇒ (literal token ⇒ whole number),
	signPart : literal phrase ⇒ [1..2],
	exponentPart : literal phrase ⇒ (literal token ⇒ integer),
	isFloatPhrase : literal phrase ⇒ boolean
|
	Require: macro send has no internal whitespace
		("floating-point literal not to contain whitespace");
	integerToken ::= integerPart's token's value;
	fractionalToken ::= fractionalPart's token's value;
	exponentToken ::= exponentPart's token;
	sign ::= signPart's token's value;
	exponent ::= cast exponentToken's value's value × <1, 0 - 1>[sign]
		into [t : integer | t];
	isFloat ::= isFloatPhrase's token's value;
	syntheticExponentToken ::= `exponent`;
	d ::= a double from
		integer = integerToken,
		fraction = fractionalToken,
		exponent = syntheticExponentToken;
	‘if isFloat then [d→float] else [d]’
];

/**
 * Answer the lexically enclosing {@type "module"}.
 *
 * @macro "enclosing module"
 * @category "Modules"
 * @returns "literal phrase⇒module"
 */
Public macro "enclosing module" is [‘current module’];
