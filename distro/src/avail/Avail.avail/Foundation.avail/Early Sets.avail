/*
 * Early Sets.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Early Sets"
Versions
	"1.5.1"
Uses
	"Bootstrap",
	"Definers",
	"Early Conditionals",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Enumeration Support",
	"Literals",
	"Types"
Body

Method "{_`|_.._}" is stable at [any meta, whole number, [0..∞]]→set meta;
Method "{_`|_..}" is stable at [any meta, whole number]→set meta;
Method "{_`|.._}" is stable at [any meta, [0..∞]]→set meta;
Method "{_`|}" is stable at [any meta]→set meta;

/**
 * @method "_'s⁇element|member type"
 * @restricts "set meta's type"
 */
Semantic restriction "_'s⁇element|member type" is
[
	aSetMeta : set meta's type
|
	aSetType ::= aSetMeta's instance;
	aSetType's element type's type
];

Method "_∪_" is stable at [set, set]→set;

/**
 * @method "_∪_"
 * @restricts "set meta"
 * @restricts "set meta"
 */
Semantic restriction "_∪_" is
[
	typeA : set meta,
	typeB : set meta
|
	lower ::= ⌊typeA⌋ max ⌊typeB⌋;
	upper ::= ⌈typeA⌉ + ⌈typeB⌉;
	{typeA's element type ∪ typeB's element type | [lower..upper + 1)}
];

/**
 * Make union left associate.
 *
 * @method "_∪_"
 * @forbids 2 "_∪_"
 */
Grammatical restriction "_∪_" is <∅, {"_∪_"}>;

Method "_∩_" is stable at [set, set]→set;

/**
 * @method "_∩_"
 * @restricts "set meta"
 * @restricts "set meta"
 */
Semantic restriction "_∩_" is
[
	typeA : set meta,
	typeB : set meta
|
	innerType ::= typeA's element type ∩ (typeB's element type);
	upper : [0..∞] := ⌈typeA⌉ min ⌈typeB⌉;
	If |innerType| ≠ ∞ ∧ innerType ∩ (type's type) ≠ ⊥ then
	[
		/* There are a limited number of possible values. */
		upper := upper min |innerType|;
	];
	{typeA's element type ∩ (typeB's element type) | [0..upper + 1)}
];

/**
 * Make intersection left associate.
 *
 * @method "_∩_"
 * @forbids 2 "_∩_"
 */
Grammatical restriction "_∩_" is <∅, {"_∩_"}>;

Method "_⊆_" is stable at [set, set]→boolean;

/**
 * @method "_⊆_"
 * @restricts "set meta"
 * @restricts "set meta"
 */
Semantic restriction "_⊆_" is
[
	typeA : set meta,
	typeB : set meta
|
	elementA ::= typeA's element type;
	elementB ::= typeB's element type;
	/* The basic rule is this: If the type intersection of the element type
	 * of typeA and the element type of typeB is ⊥, then the result must
	 * be false. Otherwise all bets are off.
	 */
	basicRule ::=
		[ if elementA ∩ elementB = ⊥ then [ false's type ] else [ ⊤ ] ];
	sizesB ::= ||typeB||;
	/* This is finesse. If typeB is definitely the set of all possible
	 * instances of its (enumeration) element type, then typeA's instances
	 * must be subsets of typeB's instance if typeA's element type is a
	 * subtype of typeB's element type.
	 */
	if |elementB| ≠ ∞ ∧ ⌊sizesB⌋ = ⌈sizesB⌉ ∧ |elementB| = ⌊sizesB⌋ then
	[
		if elementA ⊆ elementB then [true's type]
		else basicRule
	]
	else basicRule
];

Method "_∈_" is stable at [any, set]→boolean;

/**
 * @method "_∈_"
 * @restricts "any meta"
 * @restricts "set meta"
 */
Semantic restriction "_∈_" is
[
	valueType : any meta,
	setType : set meta
|
	elementType ::= setType's element type;
	if valueType ∩ elementType = ⊥ then [false's type]
	else
	[
		if (¬elementType ∈ type)
			∧ |elementType| = ⌊setType⌋
			∧ |elementType| = ⌈setType⌉
			∧ valueType ⊆ elementType
		then [true's type]
		else [⊤]
	]
];

Method "_\\_" is stable at [set, set]→set;

/**
 * If the subtrahend definitely can't contain any of the same elements as the
 * minuend, then the size of the subtrahend can't be affected (because the
 * asymmetric difference won't remove any elements).
 *
 * @method "_\\_"
 * @restricts "set meta"
 * @restricts "set meta"
 */
Semantic restriction "_\\_" is
[
	minuendType : set meta,
	subtrahendType : set meta
|
	subtrahendUpper ::=
		if minuendType's element type ∩ (subtrahendType's element type) = ⊥
		then [ 0 ]
		else [ ⌈subtrahendType⌉ ];
	lower ::= cast (⌊minuendType⌋ - subtrahendUpper) max 0
		into [ t : whole number | t ];
	{minuendType's element type | lower..⌈minuendType⌉}
];

/**
 * Make asymmetric set difference left-associate.
 *
 * @method "_\\_"
 * @forbids 2 "_\\_"
 */
Grammatical restriction "_\\_" is <∅, {"_\\_"}>;

/**
 * @method "_→_"
 * @forbids 2 "set"
 */
Grammatical restriction "_→_" is <∅, {"set"}>;

/**
 * Make various boolean-valued set (and type) operations bind more tightly than
 * logical negation.
 *
 * @method "_∈_"
 * @forbids 1 "¬_"
 */
/**
 * Make various boolean-valued set (and type) operations bind more tightly than
 * logical negation.
 *
 * @method "_⊆_"
 * @forbids 1 "¬_"
 */
Grammatical restriction {"_∈_", "_⊆_"} is <{"¬_"}, ∅>;
