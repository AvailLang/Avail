/*
 * Tools.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Tools"
Versions
	"1.4.0"
Uses
	"Foundation"
Names
	/* Tools. */
	"Fail test",
	"Fail test:_",
	"Skip test",
	"Require:_",
	"Require:_(_)",
	"Require:_=_",
	"Require:_=_(_)",
	"Require:_raises_",
	"Require:_raises_(_)",
	"Require if supported«on this platform»⁇:_",
	"Require if supported«on this platform»⁇:_(_)",
	"Require if supported«on this platform»⁇:_raises_",
	"Require if supported«on this platform»⁇:_raises_(_)",

	/* Exceptions. */
	"explicit-failed-test exception",
	"failed-requirement exception"
Body

/**
 * An exception that indicates that an explicit unit test failure.
 *
 * @type "explicit-failed-test exception"
 * @supertype "exception"
 * @category "Exceptions" "Unit Testing"
 */
Public explicit class "explicit-failed-test exception" extends exception;

/**
 * Fail the currently running unit test.
 *
 * @method "Fail test"
 * @returns "⊥"
 * @raises "explicit-failed-test exception"
 *          Always.
 * @category "Unit Testing"
 */
Public method "Fail test" is [Raise a explicit-failed-test exception] : ⊥;

/**
 * Fail the currently running unit test.
 *
 * @method "Fail test:_"
 * @param "message" "string"
 *        A detail message that describes the failure.
 * @returns "⊥"
 * @raises "descriptive explicit-failed-test exception"
 *          Always.
 * @category "Unit Testing"
 */
Public method "Fail test:_" is
[
	message : string
|
	Raise a descriptive explicit-failed-test exception with
		error message ::= message
] : ⊥;

/**
 * Skip the currently running unit test.
 *
 * @method "Skip test"
 * @returns "⊥"
 * @raises "unsupported-operation exception"
 *         Always.
 * @category "Unit Testing"
 */
Public method "Skip test" is [Raise an unsupported-operation exception] : ⊥;

/**
 * An exception that indicates that a unit test requirement failed.
 *
 * @type "failed-requirement exception"
 * @supertype "exception"
 * @category "Unit Testing" "Exceptions"
 */
Public explicit class "failed-requirement exception" extends exception;

/**
 * Require that the specified predicate is true.
 *
 * @method "Require:_"
 * @param "predicate" "boolean"
 *        A predicate that must be true.
 * @returns "⊤"
 * @raises "failed-requirement exception"
 *         If {@param "predicate"} is false.
 * @category "Unit Testing"
 */
Public method "Require:_" is [predicate : boolean |] : ⊤;
Method "Require:_" is
[
	predicate : false's type
|
	Raise a failed-requirement exception
] : ⊥;

Private method "Require:__" is [predicate : boolean, message : []→string |] : ⊤;
Private method "Require:__" is
[
	predicate : false's type,
	message : []→string
|
	Raise a descriptive failed-requirement exception with
		error message ::= message()
] : ⊥;

/**
 * Require that the specified predicate is {@method "true"}.
 *
 * @macro "Require:_(_)"
 * @param "predicate" "expression phrase ⇒ boolean"
 *        A predicate that must be {@method "true"}.
 * @param "message" "expression phrase ⇒ string"
 *        Additional information that should be attached to the exception in the
 *        event of failure. It is only evaluated in the event of failure.
 * @returns "send phrase ⇒ ⊤"
 * @raises "failed-requirement exception"
 *         If {@param "predicate"} evaluates to {@method "false"}.
 * @category "Unit Testing"
 */
Public macro "Require:_(_)" is
[
	predicate : expression phrase ⇒ boolean,
	message : expression phrase ⇒ string
|
	restricted send $"Require:__" with
		«<
			predicate,
			«[<message>] : message's semantic type»
		>» : ⊤
];

/**
 * Require that the arguments are equal.
 *
 * @method "Require:_=_"
 * @param "actual" "any"
 * @param "expected" "any"
 * @returns "⊤"
 * @raises "failed-requirement exception"
 *         If {@param "expected"} ≠ {@param "value"}.
 * @category "Unit Testing"
 */
Public method "Require:_=_" is
[
	actual : any,
	expected : any
|
	If actual ≠ expected then
	[
		Raise a descriptive failed-requirement exception with
			error message ::=
				format "expected=“①”, actual=“②”" with expected, actual
	];
] : ⊤;

/**
 * Reject the current parse if the arguments are guaranteed unequal.
 *
 * @method "Require:_=_"
 * @restricts "any's type"
 * @restricts "any's type"
 * @category "Unit Testing"
 */
Semantic restriction "Require:_=_" is
[
	actual : any's type,
	expected : any's type
|
	If actual ∩ expected = ⊥ then
	[
		Reject parse, expected:
			format "a predicate that could ever be true (because \
				\|(“①”) doesn't intersect (“②”)"
			with actual, expected
	];
	⊤
];

Private method "Require:_=__" is
[
	actual : any,
	expected : any,
	message : []→string
|
	If actual ≠ expected then
	[
		Raise a descriptive failed-requirement exception with
			error message ::=
				format "“①”: expected=“②”, actual=“③”"
				with message(), expected, actual
	];
] : ⊤;

/**
 * Require that the arguments are equal.
 *
 * @macro "Require:_=_(_)"
 * @param "actual" "expression phrase ⇒ any"
 * @param "expected" "expression phrase ⇒ any"
 * @param "message" "expression phrase ⇒ string"
 *        Additional information that should be attached to the exception in the
 *        event of failure. It is only evaluated if the arguments are unequal.
 * @returns "send phrase ⇒ ⊤"
 * @category "Unit Testing"
 */
Public macro "Require:_=_(_)" is
[
	actual : expression phrase ⇒ any,
	expected : expression phrase ⇒ any,
	message : expression phrase ⇒ string
|
	If actual's semantic type ∩ expected's semantic type = ⊥ then
	[
		Reject parse, expected:
			format "a predicate that could ever be true (because \
				\|(“①”) doesn't intersect (“②”)"
			with actual's semantic type, expected's semantic type
	];
	restricted send $"Require:_=__" with
		«<
			actual,
			expected,
			«[<message>] : message's semantic type»
		>» : ⊤
];

/**
 * Require that the {@param "aFunction"} raises an exception of type
 * {@param "exceptionType"} when applied.
 *
 * @method "Require:_raises_"
 * @param "aFunction" "[]→⊤"
 * @param "exceptionType" "exception's type"
 * @returns "⊤"
 * @raises "failed-requirement exception"
 *         If {@param "aFunction"} does not produce an exception of the
 *         appropriate type.
 * @category "Unit Testing"
 */
Public method "Require:_raises_" is
[
	aFunction : []→⊤,
	exceptionType : exception's type
|
	Guard
	[
		aFunction();
		Raise a descriptive failed-requirement exception with
			error message ::=
				format "expected ∈ “①” (no exception)"
				with exceptionType
	]
	intercept
	[
		e : exception
	|
		If ¬e ∈ exceptionType then
		[
			Raise a descriptive cascade failed-requirement exception with
				causal exception ::= e,
				error message ::=
					format "expected ∈ “①”, actual=“②”"
					with exceptionType, e
		];
	];
] : ⊤;

Private method "Require:_raises__" is
[
	aFunction : []→⊤,
	exceptionType : exception's type,
	message : []→string
|
	Guard
	[
		aFunction();
		Raise a descriptive failed-requirement exception with
			error message ::=
				format "“①”: expected ∈ “②” (no exception)"
				with message(), exceptionType
	]
	intercept
	[
		e : exception
	|
		If ¬e ∈ exceptionType then
		[
			Raise a descriptive cascade failed-requirement exception with
				causal exception ::= e,
				error message ::=
					format "“①”: expected ∈ “②”, actual=“③”"
					with message(), exceptionType, e
		];
	];
] :  ⊤;

/**
 * Require that the {@param "aFunction"} raises an exception of type
 * {@param "exceptionType"} when applied.
 *
 * @macro "Require:_raises_(_)"
 * @param "aFunction" "expression phrase ⇒ []→⊤"
 * @param "exceptionType" "expression phrase ⇒ (exception's type)"
 * @param "message" "expression phrase ⇒ string"
 *        Additional information that should be attached to the exception in the
 *        event of failure. It is evaluated only in the event of failure.
 * @returns "send phrase ⇒ ⊤"
 * @category "Unit Testing"
 */
Public macro "Require:_raises_(_)" is
[
	aFunction : expression phrase ⇒ []→⊤,
	exceptionType : expression phrase ⇒ (exception's type),
	message : expression phrase ⇒ string
|
	restricted send $"Require:_raise__" with
		«<
			aFunction,
			exceptionType,
			«[<message>] : message's semantic type»
		>» : ⊤
];

/**
 * Require that {@param "aFunction"} answers {@method "true"} or raises an
 * {@type "unsupported-operation exception"}.
 *
 * @method "Require if supported«on this platform»⁇:_"
 * @param "aFunction" "[]→boolean"
 * @returns "⊤"
 * @raises "failed-requirement exception"
 *         If {@param "aFunction"} answers {@method "false"}.
 * @category "Unit Testing"
 */
Public method "Require if supported«on this platform»⁇:_" is
[
	aFunction : []→boolean
|
	Guard
	[
		If ¬aFunction() then
		[
			Raise a failed-requirement exception
		];
	]
	intercept
	[
		e : unsupported-operation exception
	|
		/* Ignore this exception. */
	];
] : ⊤;

Private method "Require if supported«on this platform»⁇:__" is
[
	aFunction : []→boolean,
	message : []→string
|
	Guard
	[
		If ¬aFunction() then
		[
			Raise a descriptive failed-requirement exception with
				error message ::= message()
		];
	]
	intercept
	[
		e : unsupported-operation exception
	|
		/* Ignore this exception. */
	];
] : ⊤;

/**
 * Require that {@param "aFunction"} answers {@method "true"} or raises an
 * {@type "unsupported-operation exception"}.
 *
 * @macro "Require if supported«on this platform»⁇:_(_)"
 * @param "aFunction" "expression phrase ⇒ []→boolean"
 * @param "message" "expression phrase ⇒ string"
 *        Additional information that should be attached to the exception in the
 *        event of failure. It is evaluated only in the event of failure.
 * @returns "send phrase ⇒ ⊤"
 * @raises "failed-requirement exception"
 *         If {@param "aFunction"} answers {@method "false"}.
 * @category "Unit Testing"
 */
Public macro "Require if supported«on this platform»⁇:_(_)" is
[
	aFunction : expression phrase ⇒ []→boolean,
	message : expression phrase ⇒ string
|
	restricted send $"Require if supported«on this platform»⁇:__" with
		«<
			aFunction,
			«[<message>] : message's semantic type»
		>» : ⊤
];

/**
 * Require that {@param "aFunction"} raises an {@type "exception"} that is a
 * subtype of either {@param "exceptionType"} or {@type
 * "unsupported-operation exception"}.
 *
 * @macro "Require if supported«on this platform»⁇:_raises_"
 * @param "aFunction" "[]→boolean"
 * @param "exceptionType" "exception's type"
 * @returns "⊤"
 * @raises "failed-requirement exception"
 *         If {@param "aFunction"} does not raise an {@type "exception"} or
 *         raises an {@type "exception"} that is not a subtype of either
 *         {@param "exceptionType"} or {@type
 *         "unsupported-operation exception"}.
 * @category "Unit Testing"
 */
Public method "Require if supported«on this platform»⁇:_raises_" is
[
	aFunction : []→⊤,
	exceptionType : exception's type
|
	Guard
	[
		aFunction();
		Raise a descriptive failed-requirement exception
			with error message ::=
				format "expected ∈ “①” (no exception)"
				with exceptionType
	]
	intercept
	[
		e : unsupported-operation exception
	|
		/* Ignore this exception. */
	]
	intercept
	[
		e : exception
	|
		If ¬e ∈ exceptionType then
		[
			Raise a descriptive cascade failed-requirement exception with
				causal exception ::= e,
				error message ::=
					format "expected ∈ “①”, actual=“②”"
					with exceptionType, e
		];
	];
] : ⊤;

Private method "Require if supported«on this platform»⁇:_raises__" is
[
	aFunction : []→⊤,
	exceptionType : exception's type,
	message : []→string
|
	Guard
	[
		aFunction();
		Raise a descriptive failed-requirement exception with
			error message ::=
				format "“①”: expected ∈ “②” (no exception)"
				with message(), exceptionType
	]
	intercept
	[
		e : unsupported-operation exception
	|
		/* Ignore this exception. */
	]
	intercept
	[
		e : exception
	|
		If ¬e ∈ exceptionType then
		[
			Raise a descriptive cascade failed-requirement exception with
				causal exception ::= e,
				error message ::=
					format "“①”: expected ∈ “②”, actual=“③”"
					with message(), exceptionType, e
		];
	];
] : ⊤;

/**
 * Require that {@param "aFunction"} raises an {@type "exception"} that is a
 * subtype of either {@param "exceptionType"} or {@type
 * "unsupported-operation exception"}.
 *
 * @method "Require if supported«on this platform»⁇:_raises_(_)"
 * @param "aFunction" "expression phrase ⇒ []→boolean"
 * @param "exceptionType" "expression phrase ⇒ (exception's type)"
 * @param "message" "expression phrase ⇒ string"
 *        Additional information that should be attached to the exception in the
 *        event of failure. It is evaluated only in the event of failure.
 * @returns "send phrase ⇒ ⊤"
 * @category "Unit Testing"
 */
Public method "Require if supported«on this platform»⁇:_raises_(_)" is
[
	aFunction : expression phrase ⇒ []→⊤,
	exceptionType : expression phrase ⇒ (exception's type),
	message : expression phrase ⇒ string
|
	restricted send $"Require if supported«on this platform»⁇:_raises__" with
		«<
			aFunction,
			exceptionType,
			«[<message>] : message's semantic type»
		>» : ⊤
];

[
	comparisons ::=
		{
			"_≤_", "_<_", "_≥_", "_>_",
			"_=_", "«_‡=»", "«_‡«=|≤|<»!»", "«_‡«=|≥|>»!»"
		};
	/**
	 * @method "Require:_"
	 * @forbids 1 "_=_"
	 */
	Grammatical restriction "Require:_" is <{"_=_"}>;

	/**
	 * @method "Require:_(_)"
	 * @forbids 1 "_=_"
	 * @forbids 2 "∅"
	 */
	Grammatical restriction "Require:_(_)" is <{"_=_"}, ∅>;

	/**
	 * @method "Require:_=_"
	 * @forbids 1 "_≤_" "_<_" "_≥_" "_>_" "_=_" "«_‡=»" "«_‡«=|≤|<»!»"
	 * 		"«_‡«=|≥|>»!»"
	 * @forbids 2 "_≤_" "_<_" "_≥_" "_>_" "_=_" "«_‡=»" "«_‡«=|≤|<»!»"
	 * 		"«_‡«=|≥|>»!»"
	 * @forbids 3 "∅"
	 */
	Grammatical restriction "Require:_=_" is <comparisons, comparisons>;

	/**
	 * @method "Require:_=_(_)"
	 * @forbids 1 "_≤_" "_<_" "_≥_" "_>_" "_=_" "«_‡=»" "«_‡«=|≤|<»!»"
	 * 		"«_‡«=|≥|>»!»"
	 * @forbids 2 "_≤_" "_<_" "_≥_" "_>_" "_=_" "«_‡=»" "«_‡«=|≤|<»!»"
	 * 		"«_‡«=|≥|>»!»"
	 * @forbids 3 "∅"
	 */
	Grammatical restriction "Require:_=_(_)" is <comparisons, comparisons, ∅>;
]();
