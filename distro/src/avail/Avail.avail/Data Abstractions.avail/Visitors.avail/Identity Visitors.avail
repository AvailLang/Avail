/*
 * Identity Visitors.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Identity Visitors"
Versions
	"Avail-1.6.0"
Uses
	"Abstract Visitors",
	"Depth-First Visitors",
	"Foundation",
	"General Deconstruction"
Names
	/* Types. */
	"anti-identity revisitor",

	/* Identity queries. */
	"_has identity",

	/* Field atoms. */
	"visited values"
Body

"escape continuation" is a new field atom;

/**
 * An {@type "private identity visitor"} retains a {@type "continuation"} that
 * enables fast escape upon affirmative discovery that a value has identity.
 *
 * @type "private identity visitor"
 * @supertype "visitor"
 * @field "escape continuation" "$[…]→boolean"
 *        The {@type "continuation"} to {@method "Exit_with_" exit} if the
 *        target value is determined to have identity.
 */
Class "private identity visitor" extends visitor
	with field
		escape continuation : $[…]→boolean;

For each kind in {
	atom,
	definition,
	fiber,
	function,
	function implementation,
	method,
	module,
	pojo,
	phrase,
	token,
	variable
} do
[
	visitorArg ::= arg «(this token: aVisitor) : private identity visitor»;
	valueArg ::= arg «(this token: value) : kind»;
	visitorRead ::= «↓visitorArg»
		?→ variable use phrase ⇒ private identity visitor;
	phrase ::=
		«[
			<visitorArg, valueArg>
		|
			<⟦Exit ⦊visitorRead⦉'s escape continuation with true⟧>
		]: ⊥»;
	Method "Before visiting_upon_" is phrase → function;
];

/**
 * Answer the components of the specified value that are considered visitable by
 * an {@type "private identity visitor"}.
 *
 * @method "_'s⁇visitable components"
 * @param "value" "any"
 *        A value.
 * @returns "tuple"
 *          The components of the value that are considered visitable by an
 *          {@type "private identity visitor"}.
 */
Private method "_'s⁇visitable components" is
[
	value : any
|
	value's subcomponents
] : tuple;

/**
 * Should the argument be visited if it is a field value within an {@type
 * "object"}?
 *
 * @method "_is visitable object value"
 * @param "value" "any"
 * @returns "boolean"
 *          {@method "true"} if the value should be visited, {@method "false"}
 *          otherwise.
 */
Private method "_is visitable object value" is
[
	value : any
|
	true
] : boolean;

Private method "_is visitable object value" is
[
	value : atom
|
	¬value is special ∧ ¬explicit subclassing key ∈ value
];

Private method "_'s⁇visitable components" is
[
	value : object
|
	select each v from value→map's values where [v is visitable object value]
];

Private method "_'s⁇visitable components" is
[
	value : type
|
	if |value| ≠ ∞ then [value's instances→tuple] else [<>]
];

Private method "_'s⁇visitable components" is
[
	value : variable
|
	<>
];

/**
 * Does the specified value have identity? A value has identity if any of its
 * components, recursively, have identity.
 *
 * @method "_has identity"
 * @param "value" "any"
 *        The value being interrogated.
 * @returns "boolean"
 *          {@method "true"} if {@param "value"} has identity, {@method "false"}
 *          otherwise.
 * @category "Visitors"
 */
Public stable method "_has identity" is
[
	value : any
|
	$body : boolean;
	aVisitor ::= a private identity visitor with escape continuation ::= body;
	Visit aVisitor
		upon value
		deconstructed by [a : any | a's visitable components]
		(breadth first = false);
	false
] : boolean;

Public "visited values" is a new field atom;

/**
 * An {@type "anti-identity revisitor"} does not {@method
 * "Visit_upon_deconstructed by_(breadth first=_)" visit} a value that {@method
 * "_has identity" has identity} more than once.
 *
 * @type "anti-identity revisitor"
 * @supertype "visitor"
 * @field "visited values" "set"
 *        The values that have already been visited.
 * @category "Visitors"
 */
Public explicit class "anti-identity revisitor" extends visitor
	with mutable field
		visited values : set;

Method "Visit_upon_deconstructed by_(breadth first=_)" is
[
	aVisitor : anti-identity revisitor,
	value : any,
	deconstructor : [⊥]→tuple,
	breadthFirst : false's type
|
	substitute ::= Before visiting aVisitor upon value;
	If substitute = do not visit then
	[
		/* Do nothing. */
	]
	else if substitute = value then
	[
		For each component of deconstructor(value) do
		[
			If ¬component ∈ aVisitor's visited values then
			[
				If component has identity then
				[
					aVisitor's visited values :=
						aVisitor's visited values + component;
				];
				Visit aVisitor upon component deconstructed by deconstructor
					(breadth first = false);
			];
		];
		After visiting aVisitor upon value;
	]
	else
	[
		If ¬substitute ∈ aVisitor's visited values then
		[
			If substitute has identity then
			[
				aVisitor's visited values :=
					aVisitor's visited values + substitute;
			];
			Visit aVisitor upon substitute deconstructed by deconstructor
				(breadth first = false);
		];
	];
];

Method "Visit_upon_deconstructed by_(breadth first=_)" is
[
	aVisitor : anti-identity revisitor,
	value : any,
	deconstructor : [⊥]→tuple,
	breadthFirst : true's type
|
	queue : tuple := <value>;
	While ¬queue is empty do
	[
		head ::= queue[1];
		If head has identity then
		[
			aVisitor's visited values := aVisitor's visited values + head;
		];
		queue := queue[2..];
		substitute ::= Before visiting aVisitor upon head;
		If substitute = do not visit then
		[
			/* Do nothing. */
		]
		else if substitute = head then
		[
			queue ++= select each component from deconstructor(head) where
				[¬component ∈ aVisitor's visited values];
			After visiting aVisitor upon head;
		]
		else
		[
			queue := <substitute> ++ queue;
		];
	];
];
