/*
 * Abstract Visitors.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Abstract Visitors"
Versions
	"1.4.0"
Uses
	"Foundation"
Names
	/* Types. */
	"visitor",

	/* Instigating visitation. */
	"Visit_upon_deconstructed by_(breadth first=_)",

	/* Aliases for instigating visitation. */
	"Visit_upon_deconstructed by_«,breadth first»?",

	/* Customizing visitation. */
	"Before visiting_upon_",
	"After visiting_upon_",
	"do not visit"
Body

/**
 * A {@type "visitor"} may be subtyped in order to provide custom behavior
 * during the traversal of a value's components via one of the standard
 * visitation mechanisms.
 *
 * @type "visitor"
 * @supertype "object"
 * @see {@method "Visit_upon_deconstructed by_(breadth first=_)"}
 * @category "Visitors"
 */
Public explicit class "visitor" extends object;

/**
 * Visit the supplied {@type "visitor"} upon the target {@type "any" value}.
 * Visitation occurs in three stages:
 *
 * <ol>
 * <li>{@method "Before visiting_upon_"}: Sent upon arriving at a value. May
 * be used to provide a substitute value. May answer {@method "do not visit"} to
 * skip visitation of this value.</li>
 * <li>Deconstruction: {@param "deconstructor"} is applied to the current value
 * to produce its visitable components.</li>
 * <li>{@method "After visiting_upon_"}: Send before leaving a value.</li>
 * </ol>
 *
 * A substitute value is subjected to each stage of visitation. The visitable
 * components of a value are visited left to right.
 *
 * @method "Visit_upon_deconstructed by_(breadth first=_)"
 * @param "aVisitor" "visitor"
 *        The {@type "visitor"}.
 * @param "value" "any"
 *        The {@type "any" value}.
 * @param "deconstructor" "[⊥]→tuple"
 *        The function responsible for deconstructing a visited value; it is
 *        applied to a visit value and should produce a {@type "tuple"} of
 *        visitable components. This function should usually call a
 *        polymorphic {@type "method"} to delegate deconstruction.
 * @param "breadthFirst" "boolean"
 *        {@method "true"} to traverse {@param "value"}'s components in
 *        breadth-first order, {@method "false"} to traverse {@param "value"}'s
 *        components in depth-first order.
 * @returns "⊤"
 * @category "Visitors"
 */
Public abstract method "Visit_upon_deconstructed by_(breadth first=_)" is
	[visitor, any, [⊥]→tuple, boolean]→⊤;

Alias
	"Visit_upon_deconstructed by_«,breadth first»?"
	to $"Visit_upon_deconstructed by_(breadth first=_)";

/**
 * Sent by {@method "Visit_upon_deconstructed by_(breadth first=_)"} before
 * visiting the visitable components of the specified value. The generic
 * implementation does nothing, immediately returning control to the sender.
 *
 * @method "Before visiting_upon_"
 * @param "aVisitor" "visitor"
 *        The {@type "visitor"}.
 * @param "value" "any"
 *        The {@type "any" value}.
 * @returns "any"
 *          The value to be visited, which may be a substitute for {@param
 *          "value"}. The generic implementation simply returns {@param
 *          "value"}.
 * @category "Visitors"
 */
Public method "Before visiting_upon_" is
[
	aVisitor : visitor,
	value : any
|
	value
];

/**
 * Sent by "Visit_upon_deconstructed by_(breadth first=_)" after visiting the
 * visitable components of the specified value. The generic implementation does
 * nothing, immediately returning control to the sender.
 *
 * @method "After visiting_upon_"
 * @param "aVisitor" "visitor"
 *        The {@type "visitor"}.
 * @param "value" "any"
 *        The {@type "any" value}.
 * @returns "⊤"
 * @category "Visitors"
 */
Public method "After visiting_upon_" is [aVisitor : visitor, value : any |];

/**
 * If {@method "Before visiting_upon_"} answers the result of this method, then
 * the traversal skips this object completely, moving to the next object.
 *
 * @method "do not visit"
 * @returns "atom"
 * @category "Visitors"
 */
Public "do not visit" is a new atom;
