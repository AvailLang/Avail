/*
 * General Deconstruction.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "General Deconstruction"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Foundation",
	"Phrase Deconstruction"
Names
	"_'s⁇subcomponents"
Body

/**
 * Answer the subcomponents that comprise the specified value.
 *
 * @method "_'s⁇subcomponents"
 * @param "value" "any"
 *        The value to deconstruct.
 * @returns "tuple"
 *          The subcomponents.
 * @category "Visitors"
 */
Public method "_'s⁇subcomponents" is [value : any | <>] : tuple;

Public method "_'s⁇subcomponents" is
[
	value : map
|
	visitable : tuple := <>;
	For each k → v of value do [visitable ++= <k, v>;];
	visitable
];

/**
 * Should the argument be visited if it is a field value within an {@type
 * "object"}?
 *
 * @method "_is visitable field"
 * @param "value" "any"
 * @returns "boolean"
 *          {@method "true"} if the field should be visited, {@method "false"}
 *          otherwise.
 */
Private method "_is visitable field" is
[
	value : any
|
	true
] : boolean;

Private method "_is visitable field" is
[
	value : atom
|
	¬explicit subclassing key ∈ value
];

Public method "_'s⁇subcomponents" is
[
	value : object
|
	map and filter value→map by
	[
		k : atom,
		v : any,
		accept : [<atom, any…|2>]→⊤
	|
		If k is visitable field then
		[
			accept(<k, v>);
		];
	]'s bindings
];

Public method "_'s⁇subcomponents" is
[
	value : phrase
|
	value's subphrases
];

Public method "_'s⁇subcomponents" is
[
	value : set
|
	value→tuple
];

Public method "_'s⁇subcomponents" is
[
	value : tuple
|
	value
];

Public method "_'s⁇subcomponents" is
[
	value : variable
|
	<↓value>
];
