/*
 * Streams.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Streams"
Versions
	"1.4.0"
Extends
	"Abstract Streams" =
	(
		"For each of⁇_do_",
		"For each…in|of_§do_",
		"an empty stream",
		"concatenate_",
		"drop from_until_",
		"drop from_while_",
		"drop«at most»?_from_",
		"element type",
		"empty stream",
		"empty-stream exception",
		"filter_by_",
		"map_through_",
		"map each…in|of_§through_",
		"select each…from_§where_",
		"stream",
		"stream of_",
		"take from_until_",
		"take from_while_",
		"take«at most»?_from_",
		"zip_",
		"_is empty",
		"_starts with_",
		"_'s⁇element type",
		"_'s⁇head",
		"_'s⁇tail",
		"«_‡zip»",
		"«_‡++»",
		"_'s⁇head method is_",
		"_'s⁇tail method is_"
	),
	"Bounded Streams" =
	(
		"_limited to_elements"
	),
	"Collection Streams" =
	(
		"a stream over_"
	),
	"Counting Streams" =
	(
		"a counting stream from_to_",
		"a counting stream from_to_by_"
	),
	"Delimited Streams" =
	(
		"_delimited by_",
		"_delimited by any of_"
	)
Uses
	"Foundation"
Body

/**
 * Answer a function that computes a prefix function.
 *
 * @method "a stream prefix function"
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ stream]→⊤"
 *          The requested function.
 */
Private method "a stream prefix function" is
[
	[
		elementPhrase : literal phrase ⇒ token,
		aStream : expression phrase ⇒ stream
	|
		Declare loop variable elementPhrase as
		[
			aStreamType ::= aStream's semantic type;
			aStreamType's element type's instance
		];
	]
]: [literal phrase ⇒ token, expression phrase ⇒ stream]→⊤;

/**
 * Answer a function that computes a body function.
 *
 * @method "body function(_,_)"
 * @param "anAtom" "atom" the atom that represents the function that the
 * 		macro builds
 * @param "baseReturnType" "type" the base return type of the method
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ stream,
 *   block phrase ⇒ []→ boolean]→send phrase ⇒ ⊤"
 *          The requested function.
 */
Private method "body function(_,_)" is
[
	anAtom : atom,
	baseReturnType : type
|
	[
		elementPhrase : literal phrase ⇒ token,
		aStream : expression phrase ⇒ stream,
		action : block phrase ⇒ []→ ⊤
	|
		name ::= elementPhrase's token's lexeme;
		declaration ::= scope map[name];
		Undeclare name;
		aStreamType ::= aStream's semantic type;
		elementType ::= aStreamType's element type's instance;
		blockType ::=
			[elementType]→(action's semantic type's return type);
		returnType ::= strengthen baseReturnType for call of anAtom
			using <aStreamType, blockType>;

		statements ::= action's statements;
		blockReturnType ::= cast statements
			into [t : phrase+ | t's last's semantic type]
			else [⊤];
		restricted send anAtom with
		«<
			aStream,
			«[
			  	<cast declaration into [d : argument phrase | d]>
			 |
				statements
			 ] : blockReturnType»
		>» : returnType
	] : send phrase ⇒ ⊤
] : [literal phrase ⇒ token, expression phrase ⇒ stream,
     block phrase ⇒ []→ ⊤]→send phrase ⇒ ⊤;

/**
 * Stream iterating-loop that invokes {@param "action"} once for every
 * {@param "elementPhrase"} in {@param "aStream"}
 *
 * @macro "For each…in|of_§do_"
 * @category "Data Abstractions" "Streams"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of
 *        {@param "aStream"}'s element type.
 * @param "aStream" "expression phrase ⇒ stream"
 *        An {@type "expression phrase"} that yields the stream to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Control Structures" "Loops" "Readers" "Data Abstractions"
 */
Macro "For each…in|of_§do_" is a stream prefix function,
	body function($"For each of⁇_do_", ⊤);

/**
 * Answer a tuple containing the prefix of {@param "aStream"} that answered
 * {@method "true"} to {@param "predicateBlock"}.
 *
 * @macro "take…from_§while_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of
 *        {@param "aStream"}'s element type.
 * @param "aStream" "expression phrase ⇒ stream"
 *        An {@type "expression phrase"} that yields the stream to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Streams" "Data Abstractions"
 */
Macro "take…from_§while_" is a stream prefix function,
	body function($"take from_while_", tuple);

/**
 * Answer a tuple containing the prefix of {@param "aStream"} that answered
 * {@method "false"} to {@param "predicateBlock"}.
 *
 * @macro "take…from_§until_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of
 *        {@param "aStream"}'s element type.
 * @param "aStream" "expression phrase ⇒ stream"
 *        An {@type "expression phrase"} that yields the stream to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Streams" "Data Abstractions"
 */
Macro "take…from_§until_" is a stream prefix function,
	body function($"take from_until_", tuple);

/**
 * Construct and answer a stream that applies `theTransformer` to the
 * consecutive elements of `aStream`. The result is lazy, so `aStream` may be
 * infinite.
 *
 * @macro "map each…in|of_§through_"
 * @category "Data Abstractions" "Streams"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of
 *        {@param "aStream"}'s element type.
 * @param "aStream" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Streams" "Data Abstractions"
 */
Macro "map each…in|of_§through_" is a stream prefix function,
	body function($"map_§through_", stream);

/**
 * Iteratively apply {@param "predicate"} to each consecutive element of
 * {@param "aStream"}, collecting those elements for which {@param "predicate"}
 * answers {@method "true"} into a new stream (and preserving ordering). Answer
 * the new stream.
 *
 * @macro "select each…from_§where_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on the type union
 *        of the leading types and default type of {@param "aStream"}.
 * @param "aStream" "expression phrase ⇒ any"
 *        An {@type "expression phrase"} that yields the stream to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Data Abstractions" "Streams"
 */
Macro "select each…from_§where_" is a stream prefix function,
	body function($"filter_by_",stream);

/**
 * Iteratively apply {@param "predicate"} to each consecutive element of
 * {@param "aStream"}, rejecting those elements for which {@param "predicate"}
 * answers {@method "true"} into a new stream (and preserving ordering). Answer
 * the new stream.
 *
 * @macro "reject each…from_§where_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on the type union
 *        of the leading types and default type of {@param "aStream"}.
 * @param "aStream" "expression phrase ⇒ any"
 *        An {@type "expression phrase"} that yields the stream to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Data Abstractions" "Streams"
 */
Macro "reject each…from_§where_" is a stream prefix function,
[
	elementPhrase : literal phrase ⇒ token,
	aStream : expression phrase ⇒ stream,
	predicateBlock : block phrase ⇒ []→⊤
|
	name ::= elementPhrase's token's lexeme;
	aStreamType ::= aStream's semantic type;
	blockType ::= [⊥]→(predicateBlock's semantic type's return type);
	returnType ::= strengthen stream for call of $"filter_by_"
		using <aStreamType, blockType>;
	statements ::= predicateBlock's statements;

	size ::= |statements|;

	newStatements ::= if size = 0 then [<>] else
	[
		end : whole number := cast size-1 into [w : whole number | w];
		i : natural number := cast size into [n : natural number | n];
		c : expression phrase⇒any := cast statements[i] into
			[e : expression phrase⇒any | e];
		statements[..end] ++ <restricted send $"¬_" with «<c>» : boolean>
	];
	blockReturnType ::= cast newStatements
		into [t : phrase+ | t[|t|]'s semantic type]
		else [⊤];

	declaration ::= scope map[name];
	Undeclare name;

	restricted send $"filter_by_" with
		«<
			aStream,
			«[
			  	<cast declaration into [d : argument phrase | d]>
			|
				newStatements
			] : blockReturnType»
		>» : returnType
] : send phrase ⇒ ⊤;
