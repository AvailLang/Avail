/*
 * Abstract Streams.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Abstract Streams"
Versions
	"Avail-1.6.1"
Extends
	"Common",
	"Foundation" =
	(
		"For each of⁇_do_",
		"For each…in|of_§do_",
		"concatenate_",
		"drop from_until_",
		"drop from_while_",
		"filter_by_",
		"map_through_",
		"map each…in|of_§through_",
		"select each…from_§where_",
		"take from_until_",
		"take from_while_",
		"take…from_§until_",
		"take…from_§while_",
		"zip_",
		"_is empty",
		"_starts with_",
		"_'s⁇head",
		"_'s⁇tail",
		"«_‡zip»"
	)
Uses
	"Foundation" = (-"_'s⁇element type", …)
Names
	"an empty stream",
	"decorated stream|streams",
	"drain_",
	"drop«at most»?_from_",
	"empty stream",
	"empty-stream exception",
	"stream",
	"stream of_",
	"take«at most»?_from_",
	"_'s⁇head method is_",
	"_'s⁇tail method is_",
	"«_‡++»"

	/* We don't include "_'s⁇element type" here because it already exists (as
	 * a method on set types).
	 */
Body

Public "decorated stream|streams" is a new field atom;
"transformer" is a new field atom;
"filter" is a new field atom;
"stream index" is a new field atom;

/**
 * A stream is an immutable lazy list of arbitrarily many elements.
 *
 * @type "stream"
 * @category "Data Abstractions" "Streams"
 */
Public explicit class "stream" extends object
	with fields
		element type : any's type;

/**
 * Construct and answer a stream type that answers values of the specified type.
 *
 * @method "stream of_"
 * @category "Data Abstractions" "Streams"
 * @param "elementType" "any's type"
 *        The type of value produced by streams of the answered type.
 * @returns "stream's type"
 *          The requested stream type.
 */
Public method "stream of_" is
[
	elementType : any's type
|
	extend stream with element type : elementType's type
] : stream's type;

/**
 * An empty-stream exception is raised when an inappropriate operation, like
 * `_'s⁇head` and `_'s⁇tail`, is performed on an empty stream.
 *
 * @type "empty-stream exception"
 * @category "Data Abstractions" "Streams"
 * @supertype "exception"
 */
Public explicit class "empty-stream exception" extends exception;

/**
 * Is the specified stream empty?
 *
 * @method "_is empty"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 * @returns "boolean"
 *          `true` if the argument is empty, `false` otherwise.
 */
Abstract method "_is empty" is [stream]→boolean;

/**
 * Answer the first element of the specified nonempty stream.
 *
 * @method "private_'s⁇head"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *        A nonempty stream.
 * @returns "any"
 *          The first element of the specified stream.
 */
Private abstract method $"private_'s⁇head" is [stream]→any;

/**
 * Ensure that the specified stream is not empty, then answer its first element.
 *
 * @method "_'s⁇head"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 * @returns "any"
 *          The first element of the specified stream.
 * @raises "empty-stream exception"
 *         If the stream is empty.
 */
Method "_'s⁇head" is
[
	aStream : stream
|
	Unless aStream is empty then
	[
		private aStream's head
	]
	else
	[
		Raise an empty-stream exception
	]
] : any;

/**
 * @method "_'s⁇head"
 * @category "Data Abstractions" "Streams"
 * @restricts "stream's type"
 */
Semantic restriction "_'s⁇head" is
[
	streamType : stream's type
|
	streamType's element type's instance
];

/**
 * Define a method to provide the head of a nonempty stream. The public
 * operation, {@method "_'s⁇head"}, does not permit extension (to ensure that streams
 * are always checked for exhaustion), but the private operation should not be
 * called directly from client code. This special defining method allows the
 * private operation to be overridden for specific stream implementations
 * without exposing it for direct use. These mechanisms cooperate to ensure that
 * stream exhaustion checking is never bypassed.
 *
 * @method "_'s⁇head method is_"
 * @category "Data Abstractions" "Streams"
 * @param "streamType" "stream's type"
 *        The stream's type, as a cross check for the implementation.
 * @param "implementation" "[⊥]→any"
 *        The new method extension.
 * @returns "⊤"
 */
Public method "_'s⁇head method is_" is
[
	streamType : stream's type,
	implementation : [⊥]→any
|
	Private method $"private_'s⁇head" is implementation;
] : ⊤;

/**
 * Ensure that the implementation function accepts a stream.
 *
 * @method "_'s⁇head method is_"
 * @category "Data Abstractions" "Streams"
 * @restricts "stream's type's type"
 * @restricts "([⊥]→any)'s type"
 */
Semantic restriction "_'s⁇head method is_" is
[
	streamMeta : stream's type's type,
	implementationType : ([⊥]→any)'s type
|
	If implementationType[1] = ⊥ then
	[
		Reject parse, expected:
			"function's parameter types to be statically known"
	];
	If ¬implementationType[1] ⊆ streamMeta's instance then
	[
		Reject parse, expected:
			"function parameter type ("
			++ “implementationType[1]”
			++ ") to be a subtype of the stream type ("
			++ “streamMeta's instance”
			++ ")"
	];
	⊤
];

/**
 * Construct and answer a stream that contains all but the first element of the
 * specified nonempty stream.
 *
 * @method "private_'s⁇tail"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *        A nonempty stream.
 * @returns "stream"
 *          The requested stream.
 */
Private abstract method $"private_'s⁇tail" is [stream]→stream;

/**
 * Ensure that the specified stream is not empty, then construct and answer a
 * stream that contains all but the first element of the specified nonempty
 * stream.
 *
 * @method "_'s⁇tail"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 * @returns "stream"
 *          The requested stream.
 * @raises "empty-stream exception"
 *         If the stream is empty.
 */
Method "_'s⁇tail" is
[
	aStream : stream
|
	Unless aStream is empty then
	[
		private aStream's tail
	]
	else
	[
		Raise an empty-stream exception
	]
] : stream;

Semantic restriction "_'s⁇tail" is
[
	streamType : stream's type
|
	streamType
];

/**
 * Define a method to provide the tail of a nonempty stream. The public
 * operation, {@method "_'s⁇tail"}, does not permit extension (to ensure that streams
 * are always checked for exhaustion), but the private operation should not be
 * called directly from client code. This special defining method allows the
 * private operation to be overridden for specific stream implementations
 * without exposing it for direct use. These mechanisms cooperate to ensure that
 * stream exhaustion checking is never bypassed.
 *
 * @method "_'s⁇tail method is_"
 * @category "Data Abstractions" "Streams"
 * @param "streamType" "stream's type"
 *        The stream's type, as a cross check for the implementation.
 * @param "implementation" "[⊥]→stream"
 *        The new method extension.
 * @returns "⊤"
 */
Public method "_'s⁇tail method is_" is
[
	streamType : stream's type,
	implementation : [⊥]→stream
|
	Private method $"private_'s⁇tail" is implementation;
] : ⊤;

/**
 * Ensure that the implementation function accepts a stream.
 *
 * @method "_'s⁇tail method is_"
 * @category "Data Abstractions" "Streams"
 * @restricts "stream's type's type"
 * @restricts "([⊥]→stream)'s type"
 */
Semantic restriction "_'s⁇tail method is_" is
[
	streamMeta : stream's type's type,
	implementationType : ([⊥]→stream)'s type
|
	If implementationType[1] = ⊥ then
	[
		Reject parse, expected:
			"function's parameter type to be statically known"
	];
	If ¬implementationType[1] ⊆ streamMeta's instance then
	[
		Reject parse, expected:
			"function parameter type ("
			++ “implementationType[1]”
			++ ") to be a subtype of the stream type ("
			++ “streamMeta's instance”
			++ ")"
	];
	⊤
];

/**
 * An empty stream has ⊥ as its element type.
 *
 * @type "empty stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "stream"
 * @field "element type" "⊥'s type"
 */
Public explicit class "empty stream" extends stream
	with fields
		element type : ⊥'s type;

/**
 * Answer `true`.
 *
 * @method "_is empty"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "empty stream"
 *        An empty stream.
 * @returns "true's type"
 */
Method "_is empty" is
[
	aStream : empty stream
|
	true
] : true's type;

/**
 * Raise an `empty-stream exception`.
 *
 * @method "_'s⁇head"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "empty stream"
 * @returns "⊥"
 * @raises "empty-stream exception"
 */
Method "_'s⁇head" is
[
	aStream : empty stream
|
	Raise an empty-stream exception
] : ⊥;

/**
 * @method "_'s⁇head"
 * @category "Data Abstractions" "Streams"
 * @restricts "empty stream's type"
 */
Semantic restriction "_'s⁇head" is
[
	streamType : empty stream's type
|
	Reject parse, expected:
		"an empty stream not to be asked for its head"
];

/**
 * Raise an `empty-stream exception`.
 *
 * @method "_'s⁇tail"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "empty stream"
 * @returns "⊥"
 * @raises "empty-stream exception"
 */
Method "_'s⁇tail" is
[
	aStream : empty stream
|
	Raise an empty-stream exception
] : ⊥;

/**
 * @method "_'s⁇tail"
 * @category "Data Abstractions" "Streams"
 * @restricts "empty stream's type"
 */
Semantic restriction "_'s⁇tail" is
[
	streamType : empty stream's type
|
	Reject parse, expected:
		"an empty stream not to be asked for its tail"
];

theEmptyStream ::= an empty stream with element type ::= ⊥;

/**
 * Answer an empty stream.
 *
 * @method "an empty stream"
 * @category "Data Abstractions" "Streams"
 * @returns "an empty stream with element type ::= ⊥"
 *    An empty stream.
 */
Public method "an empty stream" is [ theEmptyStream ];

/**
 * @method "a|an_«with«_:=_‡,»»"
 * @category "Data Abstractions" "Streams"
 * @forbids "1" "empty stream"
 */
Grammatical restriction "a|an_«with«_:=_‡,»»" is <{"empty stream"}, ∅, ∅>;

/* Seal the public operations. */
Seal method "_is empty" at <empty stream>;
Seal method "_'s⁇head" at <stream>;
Seal method "_'s⁇tail" at <stream>;

/**
 * Iteratively apply `action` to each consecutive element of `aStream`.
 *
 * @method "For each of⁇_do_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @param "action" "[⊥]→⊤"
 *    action - A function that accepts the elements of the stream.
 * @returns "⊤"
 */
Method "For each of⁇_do_" is
[
	aStream : stream,
	action : [⊥]→⊤
|
	rest : stream := aStream;
	Until rest is empty	do
	[
		action(rest's head);
		rest := eject rest's tail;
	];
] : ⊤;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * element type of `streamType`, then reject the current parse.
 *
 * @method "Require:_accepts_"
 * @param "actionType" "([⊥]→⊤)'s type"
 *    action - A function type whose sole parameter must correspond to the
 *       element type of `streamType`.
 * @param "streamType" "stream's type"
 *    streamType - A stream type.
 * @returns "⊤"
 */
Method "Require:_accepts_" is
[
	actionType : ([⊥]→⊤)'s type,
	streamType : stream's type
|
	elementType ::= streamType's element type's instance;
	If actionType[1] ≠ ⊥ ∧ ¬elementType ⊆ actionType[1] then
	[
		Reject parse, expected:
			format
				"repeatedly applied function to accept all elements ∈ “①” \
				\|of the stream (but it only accepts “②”)"
			with elementType, actionType[1]
	];
] : ⊤;

Semantic restriction "For each of⁇_do_" is
[
	streamType : stream's type,
	actionType : ([⊥]→⊤)'s type
|
	Require: actionType accepts streamType;
	⊤
];



/**
 * `map_through_` produces mapped streams. A mapped stream decorates another
 * stream and retains a transformer function. When it is asked for its head,
 * it answers the result of applying the function to the head of the decorated
 * stream.
 *
 * @type "mapped stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "stream"
 * @field "decorated stream" "stream"
 * @field "transformer" "[⊥]→any"
 */
Class "mapped stream" extends stream
	with fields
		decorated stream : stream,
		transformer : [⊥]→any;

Method "_is empty" is
[
	aStream : mapped stream
|
	aStream's decorated stream is empty
] : boolean;

mapped stream's head method is
[
	aStream : mapped stream
|
	aStream's transformer(aStream's decorated stream's head)
] : any;

mapped stream's tail method is
[
	aStream : mapped stream
|
	a mapped stream with
		element type ::= aStream's element type,
		decorated stream ::= aStream's decorated stream's tail,
		transformer ::= aStream's transformer
] : mapped stream;

/**
 * Construct and answer a stream that applies `theTransformer` to the
 * consecutive elements of `aStream`. The result is lazy, so `aStream` may be
 * infinite.
 *
 * @method "map_through_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - The source stream.
 * @param "theTransformer" "[⊥]→any"
 *    theTransformer - A function that accepts the elements of `aStream`.
 * @returns "stream"
 *    A stream that applies `transformer` to the head of `aStream` when asked
 *    for its own head.
 */
Method "map_through_" is
[
	aStream : stream,
	theTransformer : [⊥]→any
|
	a mapped stream with
		element type ::= theTransformer's type's return type,
		decorated stream ::= aStream,
		transformer ::= theTransformer
] : stream;

Semantic restriction "map_through_" is
[
	streamType : stream's type,
	transformerType : ([⊥]→any)'s type
|
	Require: transformerType accepts streamType;
	extend stream with element type : transformerType's return type's type
];

/**
 * `filter_by_` produces filtered streams. A filtered stream decorates another
 * stream and retains a filter function. When it is asked for its head,
 * it answers the first element of the decorated stream that satisfies the
 * filter function.
 *
 * @type "filtered stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "stream"
 * @field "decorated stream" "stream"
 * @field "filter" "[⊥]→boolean"
 */
Class "filtered stream" extends stream
	with fields
		decorated stream : stream,
		filter : [⊥]→boolean;

/**
 * A headed filtered stream is a filtered stream that has already been forwarded
 * to the next element that passes the filter.
 *
 * @type "headed filtered stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "filtered stream"
 */
Explicit class "headed filtered stream" extends filtered stream;

Method "_is empty" is
[
	aStream : filtered stream
|
	found : boolean := false;
	rest : stream := aStream's decorated stream;
	Until found ∨ rest is empty do
	[
		If aStream's filter(rest's head) then
		[
			found := true;
		];
		rest := eject rest's tail;
	];
	¬found
] : boolean;

filtered stream's head method is
[
	aStream : filtered stream
|
	/* There is guaranteed to be a satisfactory element remaining. */
	rest : stream := aStream's decorated stream;
	Until aStream's filter(rest's head)	do
	[
		rest := eject rest's tail;
	];
	rest's head
] : any;

filtered stream's tail method is
[
	aStream : filtered stream
|
	/* There is guaranteed to be a satisfactory element remaining. */
	rest : stream := aStream's decorated stream;
	Until aStream's filter(rest's head)	do
	[
		rest := eject rest's tail;
	];
	rest := eject rest's tail;
	If rest is empty then [ an empty stream ]
	else
	[
		streamType ::= if aStream's filter(rest's head)
			then [ headed filtered stream]
			else [ filtered stream ];
		a streamType with
			element type ::= aStream's element type,
			decorated stream ::= rest,
			filter ::= aStream's filter
	]
] : stream;

headed filtered stream's head method is
[
	aStream : headed filtered stream
|
	aStream's decorated stream's head
] : any;

/**
 * Construct and answer a stream that applies `predicate` to `aStream`. The
 * result is lazy, so `aStream` may be infinite. The result contains only those
 * elements of `aStream` that pass the specified filter.
 *
 * Note that the public stream operations may require an infinite amount of time
 * to complete when presented with an infinite filtered stream, e.g., consider
 * that case of:
 *
 *    filter stream from 1 to ∞ by [ x : natural number | x < 10 ]
 *
 * Which will require infinite computation after advancing beyond the element
 * `10`.
 *
 * Also, filtered streams are slow in general (because they must rescan for each
 * public operation). Consider using filtered iterators instead.
 *
 * @method "filter_by_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - The source stream.
 * @param "predicate" "[⊥]→boolean"
 *    predicate - A function that accepts the elements of `aStream` and answers
 *       `true` iff they should be obtainable via the result stream.
 * @returns "stream"
 *    A stream capable of producing exactly those elements of `aStream` for
 *    which `predicate` answers `true`.
 */
Method "filter_by_" is
[
	aStream : stream,
	predicate : [⊥]→boolean
|
	a filtered stream with
		element type ::= aStream's element type,
		decorated stream ::= aStream,
		filter ::= predicate
] : stream;

Semantic restriction "filter_by_" is
[
	streamType : stream's type,
	predicateType : ([⊥]→boolean)'s type
|
	Require: predicateType accepts streamType;
	extend stream with element type : streamType's element type
];

/**
 * A concatenation stream produces values from a sequenced collection of
 * streams.
 *
 * @type "concatenation stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "stream"
 * @field "decorated streams" "stream*"
 * @field "stream index" "natural number"
 */
Class "concatenation stream" extends stream
	with fields
		decorated streams : stream*,
		stream index : natural number;

Method "_is empty" is
[
	aStream : concatenation stream
|
	index ::= aStream's stream index;
	streams ::= aStream's decorated streams;
	each s of streams[index..] satisfies [s is empty]
] : boolean;

concatenation stream's head method is
[
	aStream : concatenation stream
|
	index : natural number := aStream's stream index;
	streams ::= aStream's decorated streams;
	While streams[index] is empty do [ index++; ];
	streams[index]'s head
];

concatenation stream's tail method is
[
	aStream : concatenation stream
|
	index : natural number := aStream's stream index;
	streams ::= aStream's decorated streams;
	While streams[index] is empty do [ index++; ];
	a concatenation stream with
		element type ::= aStream's element type,
		decorated streams ::= streams[index]→(streams[index]'s tail),
		stream index ::= index
];

/**
 * Construct and answer a stream that produces values from the specified tuple
 * of streams. The result first produces the values of the first element of the
 * tuple, then the second, etc.
 *
 * @method "concatenate_"
 * @category "Data Abstractions" "Streams"
 * @param "streams" "stream+"
 *    streams - A nonempty tuple of streams.
 * @returns "stream"
 *    The requested stream.
 */
Method "concatenate_" is
[
	streams : stream+
|
	if |streams| = 0 then [ an empty stream ]
	else if |streams| = 1 then [ streams[1] ]
	else
	[
		elementType ::= ∪ map streams through [s : stream | s's element type];
		a concatenation stream with
			element type ::= elementType,
			decorated streams ::= streams,
			stream index ::= 1
	]
] : stream;

/**
 * Construct and answer a stream that produces values from the specified tuple
 * of streams. The result first produces the values of the first lexical
 * argument, then the second, etc.
 *
 * @method "«_‡++»"
 * @category "Data Abstractions" "Streams"
 * @param "streams" "<stream…|2..>"
 *    streams - A tuple of streams.
 * @returns "stream"
 *    The requested stream.
 */
Public method "«_‡++»" is
[
	streams : <stream…|2..>
|
	elementType ::= ∪ map streams through [s : stream | s's element type];
	a concatenation stream with
		element type ::= elementType,
		decorated streams ::= streams,
		stream index ::= 1
] : stream;

/**
 * Answer a function suitable for use as a semantic restriction for the
 * `concatenate_` and `«_‡++»` methods.
 *
 * @method "concatenation semantic restriction"
 * @category "Data Abstractions" "Streams"
 * @returns "[stream+'s type]→concatenation stream"
 *    The requested function.
 */
Private method "concatenation semantic restriction" is
[
	[
		streams : stream+'s type
	|
		elementType : any's type's type := ⊥;
		For each i from 1 to (⌊streams⌋ min (|streams' leading types| + 1)) do
		[
			elementType := eject elementType ∪ streams[i]'s element type;
		];
		extend concatenation stream with
			element type : elementType,
			decorated streams : streams,
			stream index : 1's type
	]
];

Semantic restriction "concatenate_" is concatenation semantic restriction;
Semantic restriction "«_‡++»" is concatenation semantic restriction;
Grammatical restriction {"concatenate_"} is <{"«_‡++»"}>;
Grammatical restriction {"«_‡++»"} is <{"«_‡++»"}>;

/**
 * A zipped stream produces zipped tuples from a sequenced collection of
 * streams.
 * @type "zipped stream"
 * @category "Data Abstractions" "Streams"
 * @supertype "stream"
 * @field "element type" "tuple's type"
 * @field "decorated streams" "stream*"
 */
Explicit class "zipped stream" extends stream
	with fields
		element type : tuple's type,
		decorated streams : stream*;

Method "_is empty" is
[
	aStream : zipped stream
|
	any s of aStream's decorated streams satisfies [s is empty]
] : boolean;

zipped stream's head method is
[
	aStream : zipped stream
|
	map aStream's decorated streams through [s : stream | s's head]
] : any;

zipped stream's tail method is
[
	aStream : zipped stream
|
	a zipped stream with
		element type ::= aStream's element type,
		decorated streams ::=
			map aStream's decorated streams through [s : stream | s's tail]
] : zipped stream;

/**
 * Construct and answer the zip of the specified streams. Given n input streams,
 * the output is the stream whose i-th element is an n-tuple containing the i-th
 * element from each consecutive input stream. The answer is empty when any of
 * the input streams becomes empty.
 *
 * @method "zip_"
 * @category "Data Abstractions" "Streams"
 * @param "streams" "stream+"
 *    streams - A tuple of streams.
 * @returns "stream"
 *    The requested stream.
 */
Method "zip_" is
[
	streams : stream+
|
	types ::= map streams through [s : stream | s's element type];
	elementType ::= <types[1..|types| - 1], types' last… | |streams|'s type>;
	a zipped stream with
		element type ::= elementType,
		decorated streams ::= streams
] : stream;

/**
 * Construct and answer the zip of the specified streams. Given n input streams,
 * the output is the stream whose i-th element is an n-tuple containing the i-th
 * element from each consecutive input stream. The answer is empty when any of
 * the input streams becomes empty.
 *
 * @method "«_‡zip»"
 * @category "Data Abstractions" "Streams"
 * @param "streams" "<stream…|2..>"
 *    streams - A tuple of streams.
 * @returns "stream"
 *    The requested stream.
 */
Method "«_‡zip»" is
[
	streams : <stream…|2..>
|
	types ::= map streams through [s : stream | s's element type];
	elementType ::= <types[1..|types| - 1], types' last… | |streams|'s type>;
	a zipped stream with
		element type ::= elementType,
		decorated streams ::= streams
] : stream;

/**
 * Answer a function suitable for use as a semantic restriction for the `zip_`
 * and `«_‡zip»` methods.
 *
 * @method "zip semantic restriction"
 * @returns "[stream+'s type]→zipped stream"
 *    The requested function.
 */
Private method "zip semantic restriction" is
[
	[
		streams : stream+'s type
	|
		types : <any's type…|> := <>;
		For each i from 1 to (⌊streams⌋ min (|streams' leading types| + 1)) do
		[
			types := eject types ++ <streams[i]'s element type's instance>;
		];
		nonempty ::= cast types into [ t : <any's type…|1..> | t ];
		elementType ::=
			<nonempty[1..|nonempty| - 1], nonempty's last…
				| ||streams||>;
		extend zipped stream with
			element type : elementType's type,
			decorated streams : streams
	]
];

Semantic restriction "zip_" is zip semantic restriction;
Semantic restriction "«_‡zip»" is zip semantic restriction;

/**
 * Answer a tuple containing the first `count` elements of `aStream`.
 *
 * @method "take«at most»?_from_"
 * @category "Data Abstractions" "Streams"
 * @param "isLax" "boolean"
 *    isLax - `false` if an `empty-stream exception` should be raised if
 *       `count` exceeds the number of elements remaining, `true` otherwise.
 * @param "count" "[0..∞]"
 *    count - The size of the requested tuple.
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @returns "tuple"
 *    A tuple containing the first `count` elements of `aStream`, preserving the
 *    original order.
 * @raises "empty-stream exception"
 *    empty-stream exception - If `isLax` is `false` and `aStream` does not
 *       contain `count` elements.
 */
Method "take«at most»?_from_" is
[
	isLax : boolean,
	count : [0..∞],
	aStream : stream
|
	rest : stream := aStream;
	result : tuple := <>;
	Guard
	[
		Repeat
		[
			next ::= rest's head;
			result := eject result ++ <next>;
			rest := eject rest's tail;
		] count times;
	]
	intercept
	[
		e : empty-stream exception
	|
		Unless isLax then [Raise e];
	];
	result
] : tuple;

Semantic restriction "take«at most»?_from_" is
[
	laxity : boolean's type,
	count : [0..∞]'s type,
	streamType : stream's type
|
	Assert: |laxity| = 1;
	If ¬laxity's instance ∧ ∞ ∈ count then
	[
		Reject parse, expected:
			"'at most' clause to be specified when count may be ∞"
	];
	min ::= if laxity's instance then [0] else [⌊count⌋ ?→ whole number];
	<streamType's element type's instance… | min..⌈count⌉>
];

/**
 * Answer a tuple containing the prefix of `aStream` that answered `true` to
 * `predicate`.
 *
 * @method "take from_while_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aTuple - A tuple.
 * @param "predicate" "[⊥]→boolean"
 *    predicate - A function that can accept each element of the specified
 *       stream. It should answer `true` to keep the element (and continue
 *       scanning) or `false` to abort.
 * @returns "tuple"
 *    A tuple containing the prefix of `aStream` that satisfied `predicate`.
 */
Method "take from_while_" is
[
	aStream : stream,
	predicate : [⊥]→boolean
|
	result : tuple := <>;
	rest : stream := aStream;
	While ¬rest is empty ∧ predicate(rest's head) do
	[
		result := eject result ++ <rest's head>;
		rest := eject rest's tail;
	];
	result
] : tuple;

Semantic restriction "take from_while_" is
[
	streamType : stream's type,
	predicate : ([⊥]→boolean)'s type
|
	Require: predicate accepts streamType;
	<streamType's element type's instance…|>
];

/**
 * Answer a tuple containing the prefix of `aStream` that answered `false` to
 * `predicate`.
 *
 * @method "take from_until_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @param "predicate" "[⊥]→boolean"
 *    predicate - A function that can accept each element of the specified
 *       stream. It should answer `false` to keep the element (and continue
 *       scanning) or `true` to abort.
 * @returns "tuple"
 *    A tuple containing the prefix of `aStream` that satisfied `predicate`.
 */
Method "take from_until_" is
[
	aStream : stream,
	predicate : [⊥]→boolean
|
	result : tuple := <>;
	rest : stream := aStream;
	Until rest is empty ∨ predicate(rest's head) do
	[
		result := eject result ++ <rest's head>;
		rest := eject rest's tail;
	];
	result
] : tuple;

Semantic restriction "take from_until_" is
[
	streamType : stream's type,
	predicate : ([⊥]→boolean)'s type
|
	Require: predicate accepts streamType;
	<streamType's element type's instance…|>
];

/**
 * Answer a stream containing every element of `aStream` except for the first
 * `count` elements.
 *
 * @method "drop«at most»?_from_"
 * @category "Data Abstractions" "Streams"
 * @param "isLax" "boolean"
 *    isLax - `false` if an `empty-stream exception` should be raised if
 *       `count` exceeds the number of elements remaining, `true` otherwise.
 * @param "count" "whole number"
 *    count - The size of the prefix of `aStream` that should be omitted from
 *       the result stream.
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @returns "stream"
 *    A stream containing every element but the first `count` elements of
 *    `aStream`, preserving the original order.
 * @raises "empty-stream exception"
 *    empty-stream exception - If `isLax` is `false` and `aStream` does not
 *       contain `count` elements.
 */
Method "drop«at most»?_from_" is
[
	isLax : boolean,
	count : whole number,
	aStream : stream
|
	rest : stream := aStream;
	Guard
	[
		Repeat
		[
			rest := eject rest's tail;
		] count times;
	]
	intercept
	[
		e : empty-stream exception
	|
		Unless isLax then [Raise e];
	];
	rest
] : stream;

Semantic restriction "drop«at most»?_from_" is
[
	laxity : boolean's type,
	count : whole number's type,
	streamType : stream's type
|
	streamType
];

/**
 * Compute and answer the suffix of `aStream` that begins with the element that
 * answers `false` to `predicate`.
 *
 * @method "drop from_while_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @param "predicate" "[⊥]→boolean"
 *    predicate - A function that can accept each element of the specified
 *       stream. It should answer `true` to discard the element (and continue
 *       scanning) or `false` to abort.
 * @returns "stream"
 *    The requested suffix.
 */
Method "drop from_while_" is
[
	aStream : stream,
	predicate : [⊥]→boolean
|
	rest : stream := aStream;
	While ¬rest is empty ∧ predicate(rest's head) do
	[
		rest := eject rest's tail;
	];
	rest
] : stream;

Semantic restriction "drop from_while_" is
[
	streamType : stream's type,
	predicate : ([⊥]→boolean)'s type
|
	Require: predicate accepts streamType;
	stream of (streamType's element type's instance)
];

/**
 * Compute and answer the suffix of `aStream` that begins with the element that
 * answers `true` to `predicate`.
 *
 * @method "drop from_until_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @param "predicate" "[⊥]→boolean"
 *    predicate - A function that can accept each element of the specified
 *       stream. It should answer `false` to discard the element (and continue
 *       scanning) or `true` to abort.
 * @returns "stream"
 *    The requested suffix.
 */
Method "drop from_until_" is
[
	aStream : stream,
	predicate : [⊥]→boolean
|
	rest : stream := aStream;
	Until rest is empty ∨ predicate(rest's head) do
	[
		rest := eject rest's tail;
	];
	rest
] : stream;

Semantic restriction "drop from_until_" is
[
	streamType : stream's type,
	predicate : ([⊥]→boolean)'s type
|
	Require: predicate accepts streamType;
	stream of (streamType's element type's instance)
];

/**
* Answer a tuple comprising all elements of {@param "target"}.
*
* @macro "drain_"
* @param "target" "expression phrase ⇒ stream"
* @category "Streams"
* @returns "send phrase ⇒ tuple"
*/
Public macro "drain_" is
[
  target : expression phrase ⇒ stream
|
  restricted send $"take«at most»?_from_" with
     «<
        ‘true’,
        ‘∞’,
        target
     >» : tuple
];

/**
 * Does `aStream` start with the subsequence `prefix`?
 *
 * @method "_starts with_"
 * @category "Data Abstractions" "Streams"
 * @param "aStream" "stream"
 *    aStream - The stream whose prefix should be checked against `prefix`.
 * @param "prefix" "tuple"
 *    prefix - The search tuple.
 * @returns "boolean"
 *    `true` if `aStream` starts with the subsequence `prefix`, `false`
 *    otherwise.
 */
Method "_starts with_" is
[
	aStream : stream,
	prefix : tuple
|
	$body : boolean;
	rest : stream := aStream;
	For each prefix do
	[
		value : any
	|
		Exit body with false if rest's head ≠ value;
		rest := eject rest's tail;
	];
	true
] : boolean;
