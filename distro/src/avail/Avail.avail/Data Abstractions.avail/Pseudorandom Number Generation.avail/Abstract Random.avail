/*
 * Abstract Random.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Abstract Random"
Versions
	"1.1.0 DEV 2019-05-21"
Uses
	"Common",
	"Foundation" = (-"_'s⁇element type", …),
	"Iterators",
	"Rational Number",
	"Streams"
Names
	/* Types. */
	"pRNG",
	"pRNG of_",

	/* Pseudorandom number generation. */
	"_'s⁇next«value in»⁇_",
	"_'s⁇next element of_",
	"_'s⁇next binding of_",
	"_'s⁇next shuffling of_"
Body
"bit count" is a new field atom;
/**
 * A pseudorandom number generator employs a deterministic process to produce a
 * sequence of numbers with properties similar to those possessed by a truly
 * random sequence of numbers.
 *
 * @type "pRNG"
 * @category "Data Abstractions" "Random"
 */
Public explicit class "pRNG" extends reader
	with fields
		element type : whole number's type;

/**
 * Construct and answer a {@type "pRNG"} type that answers values of the
 * specified type.
 *
 * @method "pRNG of_"
 * @param "elementType" "whole number's type"
 *        The type of value produced by iterators of the answered type.
 * @returns "pRNG's type"
 *          The requested pRNG type.
 * @category "Data Abstractions" "Random"
 */
Public method "pRNG of_" is
[
	elementType : whole number's type
|
	extend pRNG with element type : elementType's type
] : pRNG's type;

/**
 * Consume and answer a pseudorandom value from the specified {@type "pRNG"
 * generator}.
 *
 * @method "_'s⁇next«value in»⁇_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "range" "whole number's type"
 *        A subtype of the generator's {@method "_'s⁇element type" element
 *        type}. The result will lie within this range.
 * @returns "whole number"
 *          A pseudorandom value that is an instance of {@param "range"}.
 * @category "Data Abstractions" "Random"
 * @raises "incorrect-argument-type exception"
 *         If ⎡{@param "range"}⎤ is ∞.
 */
Public method "_'s⁇next«value in»⁇_" is
[
	rng : pRNG,
	range : integer's type
|
	If range = ⊥ ∨ ⎡range⎤ = ∞ then
	[
		Raise an incorrect-argument-type exception
	];

	/* The following algorithm is used to uniformly map values from the range
	 * onto pRNG's element type.  The algorithm
	 */
	rangeSize : natural number := cast ⎡range⎤ - ⎣range⎦ + 1
		into [n : natural number | n];

	rngSize ::= cast ⎡rng's element type⎤ - ⎣rng's element type⎦ + 1
		into [n : natural number | n];

	bitCount : whole number:= cast (log 2 of rngSize) → extended integer
		into [w: whole number | w];

	/* Calculate the number of values from pRNG are required to ensure that
	 * no boundary condition will ever result in more than two values
	 * being in contention.
	 * m represents the number of times to inflate the bit range.  If
	 * rng's range represents n bits, then the range required to accomplish
	 * the task is (2^n)^m.  We will need to acquire m numbers from rng to
	 * construct our final value through bit shifting.
	 */
	requiredValueCount ::= ⎡⎡log 2 of rangeSize⎤ ÷ bitCount⎤ → extended integer;

	/* There will always be at least 1 roll required.  If the result of
	 * requiredValueCount is less than 1, we need to choose 1
	 */
	requiredValueCounts : <extended integer…| 1..2> :=
		<1> ++ <requiredValueCount>;
	m ::= cast max requiredValueCounts
		into [n : natural number | n];

	/* Calculate the potential maximum random value that can occur as a result
	 * of the values obtained from the pRNG.
	 * The new adjusted rng to map the range on will be
	 * [0..maxRandomValue]
	 */
	maxRandomValue : whole number := rngSize^m - 1;

	/* Acquire all necessary values from rng */
	generatedNumbers : <whole number…|> := <>;
	For each i from 1 to m do
	[
	 	generatedNumbers := generatedNumbers ++ <rng's current element>;
	 	Advance rng;
	];
	/* Obtain the total random number value */
	randomValue : whole number := generatedNumbers[1];
	For each i from 2 to |generatedNumbers| do
	[
	 	randomValue := eject randomValue +
	 		(generatedNumbers[i] << (bitCount  × (i - 1)));
	];

	/* Calculate the multiplier that indicates where on the newly adjusted
	 * rng that a boundary condition exists.  This value is a rational number
	 * @see "rational number" in Rational Number.avail*/
	boundaryMultiple ::= maxRandomValue ÷ rangeSize (r);

	/*Determine if a boundary condition is reached.  A boundary condition is
	 * known to have been reached if the following conditions are met:
	 *
	 * 		1. (((result + 1) ÷ boundaryMultiple)'s whole number part
	 * 			-  (result ÷ boundaryMultiple)'s whole number part) > 0
	 *
	 * 		2. (result ÷ boundaryMultiple)'s fraction > 0
	 */
	resultRangeValue ::= randomValue ÷ boundaryMultiple;
	incrementedResultRangeValue ::= (randomValue + 1) ÷ boundaryMultiple;
	wholeNumberDiff ::= incrementedResultRangeValue's whole number part
		- resultRangeValue's whole number part;

	baseResult : integer := if wholeNumberDiff > 0
		∧ resultRangeValue's fraction is nonzero then
	[
	 	/*TODO Write function to continuously roll till resolved*/
	 	resolutionReached : boolean := false;
	 	weightedProbability : fraction :=  resultRangeValue's fraction;
	 	outcome : integer := -1;

	 	Do
	 	[
	 	 	newBoundary ::= rngSize × weightedProbability;
	 	 	newResult ::= rng's current element;

	 	 	If newResult < newBoundary's whole number part then
	 	 	[
	 	 	 	outcome := resultRangeValue's whole number part;
	 	 	 	resolutionReached := true;
	 	 	] else if newResult > newBoundary's whole number part then
	 	 	[
	 	 	 	outcome := incrementedResultRangeValue's whole number part;
	 	 	 	resolutionReached := true;
	 	 	] else [weightedProbability := newBoundary's fraction;];
	 	]
	 	until resolutionReached;
	 	outcome
	] else [resultRangeValue's whole number part];

	/* Adjust the base result to match*/
	cast baseResult + ⎣range⎦ into [i : integer | i]
] : integer;

Semantic restriction "_'s⁇next«value in»⁇_" is
[
	rng : pRNG's type,
	range : integer's type's type
|
	range's instance
];

/**
 * Consume a pseudorandom value from the specified {@type "pRNG" generator} and
 * use it to select an instance of the specified {@param "enum" enumeration}.
 *
 * @method "_'s⁇next«value in»⁇_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "enum" "type"
 * @returns "any"
 *          A pseudorandomly selected instance of {@param "enum"}.
 * @category "Data Abstractions" "Random"
 */
Method "_'s⁇next«value in»⁇_" is
[
	rng : pRNG,
	enum : type
|
	Assert: |enum| is finite;
	result ::= enum's instances→tuple[rng's next [1..|enum|+1)];
	Advance rng;
	result
] : any;

Method "_'s⁇next«value in»⁇_" is
[
	rng : pRNG,
	enum : boolean's type
|
	result ::= rng's current element is odd;
	Advance rng;
	result
] : boolean;

Semantic restriction "_'s⁇next«value in»⁇_" is
[
	rng : pRNG's type,
	meta : type's type
|
	enum ::= meta's instance;
	if |enum| is finite then [enum] else [⊤]
];

/**
 * Consume a pseudorandom value from the specified {@type "pRNG" generator} and
 * use it to select an element of the specified tuple.
 *
 * @method "_'s⁇next element of_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "aTuple" "tuple"
 *        A non-empty tuple.
 * @returns "any"
 *          A pseudorandomly selected element of {@param "aTuple"}.
 * @category "Data Abstractions" "Random"
 */
Public method "_'s⁇next element of_" is
[
	rng : pRNG,
	aTuple : any+
|
	result ::= aTuple[rng's next [1..|aTuple|+1)];
	Advance rng;
	result
] : any;

Semantic restriction "_'s⁇next element of_" is
[
	rng : pRNG's type,
	tupleType : any+'s type
|
	∪ tupleType[1..⎣tupleType⎦ min (|tupleType's leading types| + 1)]
];

/**
 * Consume a pseudorandom value from the specified {@type "pRNG" generator} and
 * use it to select an element of the specified set.
 *
 * @method "_'s⁇next element of_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "aSet" "set"
 *        A non-empty set.
 * @returns "any"
 *          A pseudorandomly selected element of {@param "aSet"}.
 * @category "Data Abstractions" "Random"
 */
Method "_'s⁇next element of_" is
[
	rng : pRNG,
	aSet : {any|1..}
|
	aTuple ::= aSet→tuple;
	result ::= aTuple[rng's next [1..|aTuple|+1)];
	Advance rng;
	result
] : any;

Semantic restriction "_'s⁇next element of_" is
[
	rng : pRNG's type,
	setType : {any|1..}'s type
|
	setType's element type
];

/**
 * Consume a pseudorandom value from the specified {@type "pRNG" generator} and
 * use it to select a binding of the specified map.
 *
 * @method "_'s⁇next binding of_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "aMap" "map"
 *        A non-empty map.
 * @returns "any"
 *          A pseudorandomly selected element of {@param "aMap"}.
 * @category "Data Abstractions" "Random"
 */
Public method "_'s⁇next binding of_" is
[
	rng : pRNG,
	aMap : {any→any|1..}
|
	aTuple ::= aMap's bindings;
	result ::= aTuple[rng's next [1..|aTuple|+1)];
	Advance rng;
	result
] : <any…|2>;

Semantic restriction "_'s⁇next binding of_" is
[
	rng : pRNG's type,
	mapType : {any→any|1..}'s type
|
	<mapType's key type, mapType's value type…|2>
];

/**
 * Compute and answer a pseudorandom permutation of the specified tuple.
 *
 * @method "_'s⁇next shuffling of_"
 * @param "rng" "pRNG"
 *        A pseudorandom number generator.
 * @param "aTuple" "tuple"
 *        A tuple.
 * @returns "tuple"
 *          A permutation of {@param "aTuple"}.
 * @category "Data Abstractions" "Random"
 */
Public method "_'s⁇next shuffling of_" is
[
	rng : pRNG,
	aTuple : tuple
|
	result : tuple := aTuple;
	For each index from |aTuple| to 2 by -1 do
	[
		randomIndex ::= rng's next [1..index];
		result := eject result[index↔randomIndex];
	];
	result
] : tuple;

Semantic restriction "_'s⁇next shuffling of_" is
[
	rng : pRNG's type,
	tupleType : tuple's type
|
	<<>, ∪ tupleType[1..|tupleType's leading types| + 1]… | ||tupleType||>
];
