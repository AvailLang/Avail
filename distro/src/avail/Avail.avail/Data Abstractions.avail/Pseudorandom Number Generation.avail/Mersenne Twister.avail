/*
 * Mersenne Twister.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Mersenne Twister"
Versions
	"Avail-1.6.0"
Uses
	"Abstract Random",
	"Common",
	"Foundation" = (-"_'s⁇element type", …),
	"Iterators",
	"Streams",
	"Unit Testing"
Names
	"a Mersenne Twister from_",
	"a Mersenne Twister«from_»",
	"a Mersenne Twister stream from_"
Body

"mt" is a new field atom;
"index" is a new field atom;

/**
 * The Mersenne Twister pseudorandom number generator.
 *
 * @type "Mersenne Twister"
 * @supertype "stream"
 * @category "Data Abstractions" "Random"
 * @see
 * "M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally
 * equidistributed uniform pseudorandom number generator\", ACM Trans. on
 * Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 (1998)"
 * @see {@link "http://doi.acm.org/10.1145/272991.272995" "DOI:10.1145/272991.272995"}
 * @see {@link "http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html"}
 */
Class "Mersenne Twister" extends stream
	with fields
		element type : [0..1<<32)'s type,
		mt : <[0..1<<32)…|624>,
		index : [1..624]
	with reconstructors
		(mt, index);

Method "_is empty" is
[
	rng : Mersenne Twister
|
	false
] : false's type;

/**
 * Compute and answer the next {@type "Mersenne Twister"} state vector.
 *
 * @method "next state after_"
 * @param "vector" "<[0..1<<32)…|624>"
 *        A Mersenne Twister state vector.
 * @returns "<[0..1<<32)…|624>"
 *          A refreshed Mersenne Twister state vector.
 * @category "Data Abstractions" "Random"
 */
Private method "next state after_" is
[
	vector : <[0..1<<32)…|624>
|
	next : <[0..1<<32)…|624> := vector;
	For each i from 1 to 624 do
	[
		y ::= (next[i] bit∧ (1<<31))
			bit∨ (next[i mod 624+1] bit∧ ((1<<31) - 1));
		v ::= next[(i+396) mod 624+1] bit⊕ (y>>1);
		next := eject next[i]→
			(v bit⊕ (if y is odd then [2567483615] else [0])) bit∧ ((1<<32)-1);
	];
	next
] : <[0..1<<32)…|624>;

Mersenne Twister's head method is
[
	rng : Mersenne Twister
|
	y : integer := rng's mt[rng's index];
	y := y bit⊕ (y >> 11);
	y := y bit⊕ ((y × (1<<7)) bit∧ 2636928640);
	y := y bit⊕ ((y × (1<<15)) bit∧ 4022730752);
	y := y bit⊕ (y >> 18);
	cast y into [t : [0..1<<32) | t]
] : [0..1<<32);

Mersenne Twister's tail method is
[
	rng : Mersenne Twister
|
	nextIndex ::= rng's index mod 624 + 1;
	vector ::= if nextIndex = 1
		then [ next state after rng's mt]
		else [ rng's mt ];
	rng's
		mt ::= vector,
		index ::= nextIndex
] : Mersenne Twister;

/**
 * Produce an untwisted (i.e., not completely initialized)
 * {@type "Mersenne Twister"} pseudorandom number generator.
 *
 * @method "untwisted Mersenne Twister from_"
 * @param "seed" "[0..1<<32)"
 *        A seed.
 * @returns "Mersenne Twister"
 *          An untwisted Mersenne Twister pseudorandom number generator.
 * @category "Data Abstractions" "Random"
 */
Private method "untwisted Mersenne Twister from_" is
[
	seed : [0..1<<32)
|
	vector : <[0..1<<32)…|1..> := <seed>;
	For each i from 1 to 623 do
	[
		last ::= vector's last;
		value ::= 1812433253 × (last bit⊕ (last >> 30)) + i;
		vector := eject vector ++ <value bit∧ ((1<<32)-1)>;
	];
	a Mersenne Twister with
		element type ::= [0..1<<32),
		mt ::= cast vector into [t : <[0..1<<32)…|624> | t],
		index ::= 1
];

Method "a Mersenne Twister stream from_" is
[
	seed : [0..1<<32)
|
	rng ::= untwisted Mersenne Twister from seed;
	rng's mt ::= next state after rng's mt, index ::= 1
] : Mersenne Twister;

/**
 * Construct and answer a {@type "Mersenne Twister"} pseudorandom number
 * generator. The argument, if supplied, is a seed used to initialize the
 * generator. If no argument is supplied, then the {@"milliseconds since the
 * Epoch" current time} is used to initialize the generator.
 *
 * @method "a Mersenne Twister«from_»"
 * @param "optionalSeed" "[0..1<<32)?"
 *        An optional seed.
 * @returns "Mersenne Twister"
 *          A Mersenne Twister pseudorandom number generator.
 * @category "Data Abstractions" "Random"
 */
Public method "a Mersenne Twister«from_»" is
[
	optionalSeed : [0..1<<32)?
|
	seed ::= optionalSeed[1] else
		[(high-precision timer value mod ((1<<32) - 1)) + 1];
	(a reader over a Mersenne Twister stream from seed) as pRNG of [0..1<<32)
] : pRNG of [0..1<<32);

Method "a Mersenne Twister stream from_" is
[
	seed : <[0..1<<32)…|1..>
|
	rng ::= untwisted Mersenne Twister from 19650218;
	vector : <[0..1<<32)…|624> := rng's mt;
	i : [2..∞) := 2;
	j : natural number := 1;
	Repeat
	[
		prev ::= vector[i - 1];
		this ::= vector[i];
		value ::= (this bit⊕ ((prev bit⊕ (prev >> 30)) × 1664525))
			+ seed[j] + (j - 1);
		vector := vector[i]→value bit∧ ((1<<32)-1);
		If (++i) > 624 then
		[
			vector := vector[1]→vector[624];
			i := 2;
		];
		If (++j) > |seed| then [ j := 1; ];
	] |seed| max 624 times;
	Repeat
	[
		prev ::= vector[i - 1];
		this ::= vector[i];
		value ::= (this bit⊕ ((prev bit⊕ (prev >> 30)) × 1566083941)) - (i - 1);
		vector := vector[i]→value bit∧ ((1<<32)-1);
		If (++i) > 624 then
		[
			vector := vector[1]→vector[624];
			i := 2;
		];
	] 623 times;
	vector := vector[1]→1<<31;
	rng's mt ::= next state after vector, index ::= 1
] : Mersenne Twister;

/**
 * Construct and answer a {@type "Mersenne Twister"} pseudorandom number
 * generator. The argument is a seed used to initialize the generator.
 *
 * @method "a Mersenne Twister from_"
 * @param "seed" "<[0..1<<32)…|1..>"
 *        A seed.
 * @returns "Mersenne Twister"
 *          A Mersenne Twister pseudorandom number generator.
 * @category "Data Abstractions" "Random"
 */
Public method "a Mersenne Twister from_" is
[
	seed : <[0..1<<32)…|1..>
|
	(a reader over a Mersenne Twister stream from seed) as pRNG of [0..1<<32)
] : pRNG of [0..1<<32);
