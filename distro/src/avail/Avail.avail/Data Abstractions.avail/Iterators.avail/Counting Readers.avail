/*
 * Counting Readers.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Counting Readers"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Abstract Iterators",
	"Concatenation Readers",
	"Exhausted Readers",
	"Filtered Readers",
	"Foundation" = (-"_'s⁇element type", …),
	"Mapped Readers",
	"Sizable Positionable Iterators",
	"Unit Testing",
	"Zipped Readers"
Names
	"a counting reader from_to_",
	"a counting reader from_to_by_",
	"counting reader test suite"
Body

"start" is a new field atom;
"step" is a new field atom;
"size" is a new field atom;

naturalNumberVariable ::= ↑natural number;

/**
 * A counting number reader is an immutable lazy list of arbitrarily many
 * numbers, each of which is a fixed distance from its neighbors.
 *
 * @type "counting number reader"
 * @supertype "reader"
 * @supertype "sizable positionable iterator"
 * @category "Data Abstractions" "Readers"
 */
Class "counting number reader" extends reader ∩ sizable positionable iterator
	with fields
		position variable : naturalNumberVariable,
		element type : number's type,
		start : number,
		step : number,
		size : [0..∞];

/**
 * A counting integer reader is an immutable lazy list of arbitrarily many
 * integers, each of which is a fixed distance from its neighbors.
 *
 * @type "counting integer reader"
 * @supertype "counting number reader"
 * @category "Data Abstractions" "Readers"
 */
Class "counting integer reader" extends counting number reader
	with fields
		element type : integer's type,
		start : integer,
		step : integer;

Method "_is exhausted" is
[
	aReader : counting number reader
|
	aReader's position > aReader's size
] : boolean;

counting number reader's current element method is
[
	aReader : counting number reader
|
	(aReader's position - 1) × aReader's step + aReader's start
] : number;

counting number reader's advance method is
[
	aReader : counting number reader
|
	aReader's position variable++;
] : ⊤;

Method "_'s⁇position" is
[
	aReader : counting number reader
|
	↓aReader's position variable
];

Method "_'s⁇position:=_" is
[
	aReader : counting number reader,
	position : natural number
|
	Require: position ≤ aReader's size + 1;
	aReader's position variable ?= position;
] : ⊤;

/* Statically forbid positions that aren't natural numbers. */
Semantic restriction "_'s⁇position:=_" is
[
	aReader : counting number reader's type,
	position : any's type
|
	Unless position ⊆ natural number then
	[
		Reject parse, expected:
			format
				"counting reader to be positioned by natural number, not “①”."
			with position
	];
	⊤
];

Method "`|_`|" is
[
	aReader : counting number reader
|
	aReader's size
] : [0..∞];

Semantic restriction "`|_`|" is
[
	aReader : counting number reader's type
|
	aReader's size
];

Method "`|_'s⁇remaining elements`|" is
[
	aReader : counting number reader
|
	size ::= |aReader|;
	cast size - aReader's position + 1 into [n : [0..∞] | n]
] : [0..∞];

Semantic restriction "`|_'s⁇remaining elements`|" is
[
	aReader : counting number reader's type
|
	[0..⎡aReader's size⎤]
];

Semantic restriction "For each of⁇_do_" is
[
	readerType : counting number reader's type,
	actionType : [⊥]→⊤'s type
|
	parameterType ::= actionType[1];
	elementType ::= readerType's element type's instance;
	If parameterType ≠ ⊥ ∧ ¬elementType ⊆ parameterType then
	[
		Reject parse, expected:
			format "action block argument (“①”) to accept \
				\|possible values (“②”)"
			with parameterType, elementType
	];
	returnType ::= actionType's return type;
	If returnType ≠ ⊤ then
	[
		Reject parse, expected:
			"action block to produce type ⊤, not " ++ “returnType”
	];
	if ⎣readerType's size⎦ = ∞ then
	[
		/* It will always loop forever. */
		⊥
	]
	else if ⎡readerType's size⎤ = 0 then
	[
		/* It will complete immediately, having never run the action. */
		⊤
	]
	else
	[
		/* This is no different than the previous case, but eventually we'll
		 * have proper support for exceptions and be able to indicate that in
		 * this case it might raise any exceptions that the action could raise.
		 */
		⊤
	]
];

/**
 * Construct and answer a {@type "reader"} that lazily produces all
 * consecutive values between {@param "start"} and {@param "end"}.
 *
 * @method "a counting reader from_to_"
 * @param "first" "integer"
 *        The start value, inclusive. This is the first value that will be
 *        answered by the reader.
 * @param "last" "extended integer"
 *        The end value, inclusive. This is the last value that will be
 *        answered by the reader.
 * @returns "reader of integer"
 *          The requested reader.
 * @category "Data Abstractions" "Readers"
 */
Public method "a counting reader from_to_" is
[
	first : integer,
	last : (-∞..∞]
|
	Require: last ≥ first - 1;
	size ::= cast last - first + 1 into [n : [0..∞] | n];
	newVar : natural number := 1;
	a counting integer reader with
		position variable ::= ↑newVar,
		element type ::= [first..last + 1),
		start ::= first,
		step ::= 1,
		size ::= size
] : counting integer reader;

Semantic restriction "a counting reader from_to_" is
[
	startType : integer's type,
	endType : extended integer's type
|
	elementType ::= (⎣startType⎦ - 1..⎡endType⎤ + 1);
	minSize ::= (⎣endType⎦ - ⎡startType⎤ + 1) max 0;
	maxSize ::= ⎡endType⎤ - ⎣startType⎦ + 1;
	extend counting integer reader with
		element type : elementType's type,
		position variable : naturalNumberVariable,
		start : startType,
		step : 1's type,
		size : [minSize..maxSize]
];

/**
 * Construct and answer a {@type "reader"} that lazily produces values
 * between {@param "start"} and {@param "end"}. For each value <em>v</em>
 * produced, there is some <em>n ∈ number</em> such that:<br><br>
 *	{@code
 *    aReader ::= a counting reader from start to end by step;<br>
 *    ...<br>
 *    v ::= aReader's current element;<br>
 *    Assert: v = start + n × step;}<br><br>
 *
 * Note that {@param "end"} is not guaranteed to be the last value produced by
 * the reader. It is only guaranteed that no larger values than {@param "end"}
 * will be answered.
 *
 * @method "a counting reader from_to_by_"
 * @param "first" "number"
 *        The start value, inclusive. This is the first value that will be
 *        answered by the reader.
 * @param "last" "number"
 *        The end value, inclusive. If {@param "delta"} ≥ 0, then no values
 *        larger than this will be answered by the reader. If {@param "delta"}
 *        < 0, then no values smaller than this will be answered by the
 *        reader.
 * @param "delta" "number"
 *        The amount by which successive values answered by the reader will
 *        differ.
 * @returns "reader of number"
 *          The requested reader.
 * @category "Data Abstractions" "Readers"
 */
Public method "a counting reader from_to_by_" is
[
	first : number,
	last : number,
	delta : number
|
	Require: delta < 0 ∨ delta > 0;
	actualSize : [0..∞] := if first ≤ last ≤ first
		then [1]
		else [(⎣(last - first) ÷ delta⎦→extended integer + 1) max 0];
	elementType ::= if actualSize = 0
		then [⊥]
		else
		[
			cast first + delta into
				[t : double | double],
				[t : float | float],
				[t : extended integer |
					actualLast ::= first + ((actualSize - 1) × delta);
					minValue ::= cast ⎣first⎦ min ⎣actualLast⎦
						into [x : extended integer | x];
					maxValue ::= cast ⎡first⎤ max ⎡actualLast⎤
						into [x : extended integer | x];
					[minValue..maxValue]]
				else [number]
		];
	newVar : natural number := 1;
	a counting number reader with
		position variable ::= ↑newVar,
		element type ::= elementType,
		start ::= first,
		step ::= delta,
		size ::= actualSize
] : counting number reader;

Semantic restriction "a counting reader from_to_by_" is
[
	startType : number's type,
	endType : number's type,
	deltaType : number's type
|
	extremeDeltas : {number|} := ∅;
	negativeIntegralRange ::= deltaType ∩ [-∞..-1];
	If negativeIntegralRange ≠ ⊥ then
	[
		extremeDeltas := extremeDeltas ∪
			{⎣negativeIntegralRange⎦, ⎡negativeIntegralRange⎤};
	];
	positiveIntegralRange ::= deltaType ∩ [1..∞];
	If positiveIntegralRange ≠ ⊥ then
	[
		extremeDeltas := extremeDeltas ∪
			{⎣positiveIntegralRange⎦, ⎡positiveIntegralRange⎤};
	];
	If |deltaType| is finite then
	[
		extremeDeltas := extremeDeltas ∪ deltaType's instances;
	];
	if extremeDeltas is empty then
	[
		/* We don't have enough information about what the delta could be to be
		 * able to usefully analyze the range. */
		extend counting number reader with
			element type : (startType ∪ endType ∪ deltaType)'s type,
			start : startType,
			step : deltaType,
			size : [0..∞]
	]
	else
	[
		/* We have enough information to determine the lower and upper bounds of
		 * the number of elements in the resulting reader. */
		minEnd ::= cast endType
			into [i : extended integer's type | ⎣i⎦]
			else
			[
				if |endType| is finite then
				[
					min (endType's instances ∪ {∞} → tuple)
				]
				else
				[
					-∞
				]
			];
		maxEnd ::= cast endType
			into [i : extended integer's type | ⎡i⎤]
			else
			[
				if |endType| is finite then
				[
					max (endType's instances ∪ {-∞} → tuple)
				]
				else
				[
					∞
				]
			];
		minStart ::= cast startType
			into [i : extended integer's type | ⎣i⎦]
			else
			[
				if |startType| is finite then
				[
					min (startType's instances ∪ {∞} → tuple)
				]
				else
				[
					-∞
				]
			];
		maxStart ::= cast startType
			into [i : extended integer's type | ⎡i⎤]
			else
			[
				if |startType| is finite then
				[
					max (startType's instances ∪ {-∞} → tuple)
				]
				else
				[
					∞
				]
			];
		/* Watch out for ∞ - ∞ and -∞ - -∞. */
		minSpan ::= if minEnd = maxStart
			then [0]
			else [minEnd - maxStart];
		maxSpan ::= if maxEnd = minStart
			then [0]
			else [minEnd - maxStart];
		minSize : [0..∞] := ∞;
		maxSize : [0..∞] := 0;
		For each delta of extremeDeltas do
		[
			If delta > 0 ∨ delta < 0 then
			[
				maxSize := maxSize
					max ((⎣maxSpan ÷ delta⎦→extended integer + 1) max 0);
				minSize := minSize
					min ((⎣minSpan ÷ delta⎦→extended integer + 1) max 0);
			];
		];
		elementType ::=
			if startType ⊆ double ∨ deltaType ⊆ double then [double]
			else if startType ⊆ float ∨ deltaType ⊆ float then [float]
			else
			[
				cast <startType, deltaType, endType> into
				[
					triple : <extended integer's type…|3>
				|
					[⎣triple[1]⎦ min ⎣triple[3]⎦
						..⎡triple[1]⎤ max ⎡triple[3]⎤]
				]
				else
				[
					number
				]
			];
		extend counting number reader with
			position variable : naturalNumberVariable,
			element type : elementType's type,
			start : startType,
			step : deltaType,
			size : [minSize..maxSize]
	]
];
