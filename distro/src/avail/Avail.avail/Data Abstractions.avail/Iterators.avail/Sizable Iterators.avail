/*
 * Sizable Iterators.avail
 * Copyright © 1993-2017, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Sizable Iterators"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Iterators",
	"Foundation"
Names
	"sizable iterator",
	"sizable_"
Body

/**
 * A sizable iterator may be queried to discover its {@method "`|_`|" size}.
 *
 * @type "sizable iterator"
 * @supertype "iterator"
 * @category "Data Abstractions" "Iterators"
 */
Public explicit class "sizable iterator" extends iterator;

/**
 * Construct and answer a sizable iterator type from the specified {@type
 * "iterator"} type.
 *
 * @method "sizable_"
 * @param "iteratorType" "iterator's type"
 *        An {@type "iterator"} type.
 * @returns "sizable iterator's type"
 *          The requested iterator type.
 * @category "Data Abstractions" "Iterators"
 */
Public method "sizable_" is
[
	iteratorType : iterator's type
|
	iteratorType ∩ sizable iterator
] : sizable iterator's type;

/* "sizable iterator" always means the type. */
Grammatical restriction "sizable_" is <{"iterator"}>;

/**
 * Answer the size of the specified {@type "sizable iterator"}.
 *
 * @method "`|_`|"
 * @param "anIterator" "sizable iterator"
 *        A {@type "sizable iterator"}.
 * @returns "[0..∞]"
 *          The number of elements covered by {@param "anIterator"}, included
 *          any elements already answered.
 * @category "Data Abstractions" "Iterators"
 */
Abstract method "`|_`|" is [sizable iterator]→[0..∞];
