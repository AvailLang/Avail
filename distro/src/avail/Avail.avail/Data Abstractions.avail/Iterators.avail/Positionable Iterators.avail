/*
 * Positionable Iterators.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Positionable Iterators"
Versions
	"Avail-1.6.0"
Uses
	"Abstract Iterators",
	"Common" = ("element type"),
	"Foundation"
Names
	"invalid-position exception",
	"position variable",
	"positionable iterator",
	"_positioned by_†",
	"_'s⁇position",
	"_'s⁇position:=_"
Body

"position variable" is a new field atom;

/**
 * A positionable iterator supports explicitly {@method "_'s⁇position"
 * querying} and {@method "_'s⁇position:=_" setting} the current position.
 * Specific subtypes may support random access, but all subtypes should support
 * setting the current position to a previous position.
 *
 * Since the position can be read, it covaries with respect to the positionable
 * iterator hierarchy.  Similarly, it can be written, so it must behave
 * covariantly.  In order for there to be any usable abstraction, we use
 * {@method "read_/write_"} to create a variable type with the most general
 * allowed read type and the most specific write type, so that all positionable
 * iterators for which the read type and write are the same (ensured by the
 * {@method "_positioned by_†"} constructor) are considered subtypes of this
 * abstract type.
 *
 * @type "positionable iterator"
 * @supertype "iterator"
 * @category "Data Abstractions" "Iterators"
 */
Public class "positionable iterator" extends iterator
	with immutable field
		position variable : read any/write ⊥;

/**
 * Construct and answer a {@type "positionable iterator"} type from the
 * specified {@type "iterator"} type and statically computed position type.
 *
 * We statically compute the position type, since passing something more
 * specific than the static type would lead to a violation of contravariance of
 * the position type (technically just the contravariance aspect due to the need
 * to write to the position variable).
 *
 * @method "_positioned by_†"
 * @param "iteratorType" "iterator's type"
 *        An {@type "iterator"} type.
 * @param "positionType" "any's type"
 *        The statically computed type of position memento used by iterators of
 *        the answered type.
 * @returns "positionable iterator's type"
 *          The requested iterator type.
 * @category "Data Abstractions" "Iterators"
 */
Public method "_positioned by_†" is
[
	iteratorType : iterator's type,
	positionType : any's type
|
	If positionType = ⊥ then
	[
		Raise an invalid-argument exception
	];
	extend iteratorType with
		position variable : ↑positionType
] : positionable iterator's type;

/**
 * Strengthen the {@type "positionable iterator"}'s type with information about
 * the original iterator's static type and the supplied position type.
 *
 * @method "_positioned by_†"
 * @restricts "iterator's type's type"
 * @restricts "any's type"
 * @category "Data Abstractions" "Iterators"
 */
Semantic restriction "_positioned by_†" is
[
	iteratorType : iterator's type's type,
	positionType : any's type's type
|
	iteratorInstanceType ::= iteratorType's instance;
	positionInstanceType ::= positionType's instance;
	extendedInstanceType ::= extend iteratorInstanceType with
		position variable : ↑positionInstanceType;
	extendedInstanceType's type
];

/**
 * An invalid-position exception is raised by {@method
 * "_'s⁇position:=_"} when the provided position is not appropriate.
 *
 * @type "invalid-position exception"
 * @supertype "element-access exception"
 * @category "Data Abstractions" "Iterators"
 */
Public explicit class "invalid-position exception"
	extends element-access exception;

/**
 * Answer the current position of the specified {@type "positionable iterator"}.
 *
 * @method "_'s⁇position"
 * @param "anIterator" "positionable iterator"
 *        A {@type "positionable iterator"}.
 * @returns "any"
 *          A position memento that represents the current position.
 * @category "Data Abstractions" "Iterators"
 */
Public method "_'s⁇position" is
[
	anIterator : positionable iterator
|
	↓anIterator's position variable
];

/**
 * Restrict the current position of the specified {@type
 * "positionable iterator"} to the position variable's content type.
 *
 * @method "_'s⁇position"
 * @param "anIterator" "positionable iterator"
 *        A {@type "positionable iterator"}.
 * @returns "any"
 *          A position memento that represents the current position.
 * @category "Data Abstractions" "Iterators"
 */
Semantic restriction "_'s⁇position" is
[
	iteratorType : positionable iterator's type
|
	iteratorType's position variable's read type
];

/**
 * Set the current position of the {@type "positionable iterator"}.
 *
 * @method "_'s⁇position:=_"
 * @param "anIterator" "positionable iterator"
 *        A {@type "positionable iterator"}.
 * @param "position" "any"
 *        A position memento that represents a valid position.
 * @returns "⊤"
 * @category "Data Abstractions" "Iterators"
 * @raises "invalid-position exception"
 *         If {@param "position"} is not a valid memento.
 */
Public method "_'s⁇position:=_" is
[
	anIterator : positionable iterator,
	newPosition : any
|
	anIterator's position variable ?= newPosition;
];

/**
 * Ensure the new position is suitable.
 *
 * @method "_'s⁇position:=_"
 * @restricts "positionable iterator's type's type"
 * @restricts "any's type"
 * @category "Data Abstractions" "Iterators"
 */
Semantic restriction "_'s⁇position:=_" is
[
	iteratorType : positionable iterator's type,
	positionType : any's type
|
	expectedType ::= iteratorType's position variable's write type;
	If ¬positionType ⊆ expectedType then
	[
		Reject parse, expected:
			format
				"new position's type (“①”) to be compatible with \
					\|the expected position type (“②”)"
			with positionType, expectedType
	];
	⊤
];
