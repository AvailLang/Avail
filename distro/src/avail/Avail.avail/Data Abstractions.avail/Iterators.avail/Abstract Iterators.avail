/*
 * Abstract Iterators.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Abstract Iterators"
Versions
	"Avail-1.6.0"
Extends
	"Common" = ("element type", "_'s⁇element type"),
	"Foundation" =
	(
		"For each of⁇_do_",
		"For each…in|of_§do_",
		"concatenate_",
		"filter_by_",
		"map each…in|of_§through_",
		"reject each…from_§where_",
		"map_through_",
		"select each…from_§where_",
		"take from_until_",
		"take from_while_",
		"take…from_§until_",
		"take…from_§while_",
		"zip_",
		"«_‡zip»"
	)
Uses
	"Foundation" = (-"_'s⁇element type", …)
Names
	"Advance_",
	"Drop from_until_",
	"Drop from_while_",
	"Drop«at most»?_from_",
	"Seal_'s⁇current element method",
	"Seal_'s⁇advance method",
	"exhausted-iterator exception",
	"iterator",
	"iterators test suite",
	"reader",
	"reader of_",
	"take«at most»?_from_",
	"drain_",
	"writer",
	"writer of_",
	"Write_to_",
	"_is exhausted",
	"_is not exhausted",
	"_'s⁇advance method is_",
	"_'s⁇current element",
	"_'s⁇current element:=_",
	"_'s⁇current element method is_"
Body

/**
 * An iterator is a construct that can be advanced via {@method "Advance_"}
 * until the iterator {@method "_is exhausted"}. Subclasses like {@method
 * "reader"} and {@method "writer"} provide the necessary additional methods for
 * reading and writing data, respectively, at the current position.
 *
 * @category "Data Abstractions" "Iterators"
 * @type "iterator"
 */
Public explicit class "iterator" extends object
	with fields
		element type : any's type;

/**
 * A reader is an {@type "iterator"} through which reading may happen, via the
 * method {@method "_'s⁇current element"}.
 *
 * @category "Data Abstractions" "Readers"
 * @type "reader"
 * @supertype "iterator"
 */
Public explicit class "reader" extends iterator;

/**
 * A writer is an {@type "iterator"} through which writing may happen, via the
 * method {@method "_'s⁇current element:=_"}.
 *
 * @category "Data Abstractions" "Writers"
 * @type "writer"
 * @supertype "iterator"
 */
Public explicit class "writer" extends iterator;

/**
 * An exhausted-iterator exception is raised when an inappropriate operation,
 * like {@method "Advance_"}, is performed on an exhausted reader.
 *
 * @type "exhausted-iterator exception"
 * @supertype "exception"
 * @category "Exceptions" "Iterators"
 */
Public explicit class "exhausted-iterator exception" extends exception;

/**
 * Is the specified iterator exhausted?
 *
 * @category "Data Abstractions" "Iterators"
 * @method "_is exhausted"
 * @param "anIterator" "iterator"
 *        An iterator.
 * @returns "boolean"
 *          {@code true} if the argument is exhausted, {@code false} otherwise.
 */
Abstract method "_is exhausted" is [iterator]→boolean;

Private abstract method $"Private advance_" is [iterator]→⊤;

/**
 * Ensure that the specified iterator is not exhausted, then advance its state.
 *
 * @category "Data Abstractions" "Iterators"
 * @method "Advance_"
 * @param "anIterator" "iterator"
 *        An iterator.
 * @returns "⊤"
 * @raises "exhausted-iterator exception"
 *         If the iterator is exhausted.
 */
Method "Advance_" is
[
	anIterator : iterator
|
	Unless anIterator is exhausted then
	[
		Private advance anIterator;
	]
	else
	[
		Raise an exhausted-iterator exception
	];
] : ⊤;

/**
 * Define a method to advance the state of a non-exhausted iterator. The public
 * operation, {@method "Advance_"}, does not permit extension (to ensure that
 * iterators are always checked for exhaustion), but the private operation
 * should not be called directly from client code. This special defining method
 * allows the private operation to be overridden for specific iterator
 * implementations without exposing it for direct use. These mechanisms
 * cooperate to ensure that iterator exhaustion checking is never bypassed.
 *
 * @method "_'s⁇advance method is_"
 * @param "iteratorType" "iterator's type"
 *        The iterator's type, as a cross check for the implementation.
 * @param "implementation" "[⊥]→⊤"
 *        The new method extension.
 * @category "Data Abstractions" "Iterators"
 * @returns "⊤"
 */
Public method "_'s⁇advance method is_" is
[
	iteratorType : iterator's type,
	implementation : [⊥]→⊤
|
	Private method $"Private advance_" is implementation;
] : ⊤;

/**
 * Ensure the supplied function's argument type is the same as the specified
 * {@type "iterator"} type.
 *
 * @method "_'s⁇advance method is_"
 * @restricts "iteratorMeta" "iterator's type's type"
 * @restricts "implementationType" "[⊥]→⊤'s type"
 * @category "Data Abstractions" "Iterators"
 */
Semantic restriction "_'s⁇advance method is_" is
[
	iteratorMeta : iterator's type's type,
	implementationType : [⊥]→⊤'s type
|
	If implementationType[1] = ⊥ then
	[
		Reject parse, expected:
			"function's parameter types to be statically known"
	];
	If implementationType[1] ≠ iteratorMeta's instance then
	[
		Reject parse, expected:
			"function parameter type ("
			++ “implementationType[1]”
			++ ") to be exactly equal to the iterator type ("
			++ “iteratorMeta's instance”
			++ ")"
	];
	⊤
];

/**
 * Seal the advance method at the specified {@type "iterator"} type.
 *
 * @category "Data Abstractions" "Iterators"
 * @method "Seal_'s⁇advance method"
 * @param "iteratorType" "iterator's type"
 * @returns "⊤"
 */
Public method "Seal_'s⁇advance method" is
[
	iteratorType : iterator's type
|
	Seal method $"Private advance_" at <iteratorType>;
] : ⊤;

/**
 * Construct and answer a {@type "reader"} type that produces values of the
 * specified type.
 *
 * @category "Data Abstractions" "Readers"
 * @method "reader of_"
 * @param "elementType" "any's type"
 *        The type of value produced by readers having the answered type.
 * @returns "reader's type"
 *          The requested reader type.
 */
Public method "reader of_" is
[
	elementType : any's type
|
	extend reader with element type : elementType's type
] : reader's type;

Private abstract method $"private_'s⁇current element" is [reader]→any;

/**
 * Ensure that the specified reader is not exhausted, then answer its current
 * element.
 *
 * @category "Data Abstractions" "Readers"
 * @method "_'s⁇current element"
 * @param "aReader" "reader"
 *        A reader.
 * @returns "any"
 *          The current element of the specified reader.
 * @raises "exhausted-iterator exception"
 *         If the reader (iterator) is exhausted.
 */
Method "_'s⁇current element" is
[
	aReader : reader
|
	unless aReader is exhausted then
	[
		private aReader's current element
	]
	else
	[
		Raise an exhausted-iterator exception
	]
] : any;

/**
 * Strengthen the values produced by any {@type "reader"} to that of the element
 * type of the reader.
 *
 * @category "Data Abstractions" "Readers"
 * @method "_'s⁇current element"
 * @restricts "readerType" "reader's type"
 *        The type of reader being probed.
 * @returns "type"
 *          The strengthened type of element that will be returned.
 */
Semantic restriction "_'s⁇current element" is
[
	readerType : reader's type
|
	readerType's element type's instance
];

/**
 * Define a method to provide the current element of a non-exhausted reader.
 * The public operation, {@"_'s⁇current element"}, does not permit extension (to
 * ensure that readers are always checked for exhaustion), but the private
 * operation should not be called directly from client code. This special
 * defining method allows the private operation to be overridden for specific
 * reader implementations without exposing it for direct use. These mechanisms
 * cooperate to ensure that reader exhaustion checking is never bypassed.
 *
 * @category "Data Abstractions" "Readers"
 * @method "_'s⁇current element method is_"
 * @param "readerType" "reader's type"
 *        The reader's type, as a cross check for the implementation.
 * @param "implementation" "[⊥]→any"
 *        The new method extension.
 * @returns "⊤"
 */
Public method "_'s⁇current element method is_" is
[
	readerType : reader's type,
	implementation : [⊥]→any
|
	Private method $"private_'s⁇current element" is implementation;
] : ⊤;

/**
 * Ensure the supplied function's argument type is the same as the specified
 * {@type "reader"} type.
 *
 * @category "Data Abstractions" "Readers"
 * @method "_'s⁇current element method is_"
 * @restricts "readerType" "reader's type"
 *        The reader's type, as a cross check for the implementation.
 * @restricts "implementation" "[⊥]→any"
 *        The new method extension.
 * @returns "⊤"
 */
Semantic restriction "_'s⁇current element method is_" is
[
	readerMeta : reader's type's type,
	implementationType : [⊥]→any's type
|
	If implementationType[1] = ⊥ then
	[
		Reject parse, expected:
			"function's parameter types to be statically known"
	];
	If implementationType[1] ≠ readerMeta's instance then
	[
		Reject parse, expected:
			"function parameter type ("
			++ “implementationType[1]”
			++ ") to exactly equals the reader type ("
			++ “readerMeta's instance”
			++ ")"
	];
	⊤
];

/**
 * Seal the current element method at the specified {@type "reader"} type.
 *
 * @category "Data Abstractions" "Readers"
 * @method "Seal_'s⁇current element method"
 * @param "readerType" "reader's type"
 * @returns "⊤"
 */
Public method "Seal_'s⁇current element method" is
[
	readerType : reader's type
|
	Seal method $"private_'s⁇current element" at <readerType>;
] : ⊤;



/**
 * Construct and answer a writer type that accepts values of the specified type.
 *
 * @category "Data Abstractions" "Readers"
 * @method "writer of_"
 * @param "elementType" "any's type"
 *        The type of value consumed by writers having the answered type.
 * @returns "writer's type"
 *          The requested writer type.
 */
Public method "writer of_" is
[
	elementType : any's type
|
	extend writer with element type : elementType's type
] : writer's type;

/**
 * Set the specified writer's current element without advancing.
 *
 * @category "Data Abstractions" "Writers"
 * @method "_'s⁇current element:=_"
 * @param "aWriter" "writer"
 *        A writer.
 * @param "element" "any"
 *        The element to write.
 * @returns "⊤"
 */
Public abstract method "_'s⁇current element:=_" is [writer, any]→⊤;

/**
 * Ensure the values provided to any {@type "writer"} are suitable for that
 * writer.
 *
 * @category "Data Abstractions" "Writers"
 * @method "_'s⁇current element:=_"
 * @restricts "writerType" "writer's type"
 *        The type of writer being probed.
 * @restricts "elementType" "any's type"
 *        The type of value being written.
 * @returns "⊤"
 */
Semantic restriction "_'s⁇current element:=_" is
[
	writerType : writer's type,
	elementType : any's type
|
	If ¬ elementType ⊆ writerType's element type's instance then
	[
		Reject parse, expected:
			format "Writer's element type (“①”) \
				\|to accept specified element type (“②”)"
			with writerType's element type's instance, elementType
	];
	⊤
];

/* Seal the public operations. */
Seal method "_'s⁇current element" at <iterator>;
Seal method "Advance_" at <iterator>;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * element type of `readerType`, then reject the current parse.
 *
 * @category "Data Abstractions" "Readers"
 * @method "Require:_accepts_"
 * @param "action" "[⊥]→⊤'s type"
 *        A function type whose sole parameter must correspond to the element
 *        type of `readerType`.
 * @param "readerType" "reader's type"
 *        An reader type.
 * @returns "⊤"
 */
Method "Require:_accepts_" is
[
	actionType : [⊥]→⊤'s type,
	readerType : reader's type
|
	elementType ::= readerType's element type's instance;
	If actionType[1] ≠ ⊥ ∧ ¬elementType ⊆ actionType[1] then
	[
		Reject parse, expected:
			format
				"repeatedly applied function to accept all elements ∈ “①” \
				\|of the reader (but it only accepts “②”)"
			with elementType, actionType[1]
	];
] : ⊤;

/**
 * Iteratively apply {@param "action"} to each consecutive element of {@param
 * "anIterator"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "For each of⁇_do_"
 * @param "anIterator" "iterator"
 *        An iterator.
 * @param "action" "[⊥]→⊤"
 *        A function that accepts the elements of the iterator.
 * @returns "⊤"
 */
Method "For each of⁇_do_" is
[
	aReader : reader,
	action : [⊥]→⊤
|
	Until aReader is exhausted do
	[
		action(aReader's current element);
		Advance aReader;
	];
] : ⊤;

/**
 * Ensure statically that the supplied action will accept values provided by the
 * reader.
 *
 * @category "Data Abstractions" "Readers"
 * @method "For each of⁇_do_"
 * @restricts "readerType" "reader's type"
 *        A reader.
 * @restricts "actionType" "[⊥]→⊤'s type"
 *        A function that accepts the elements of the iterator.
 * @returns "⊤"
 */
Semantic restriction "For each of⁇_do_" is
[
	readerType : reader's type,
	actionType : [⊥]→⊤'s type
|
	Require: actionType accepts readerType;
	⊤
];

/**
 * Answer a tuple containing (at most) the first {@param "count"} elements of
 * {@param "aReader"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "take«at most»?_from_"
 * @param "isLax" "boolean"
 *        {@code false} if an {@type "exhausted-iterator exception"} should be
 *        raised if {@param "count"} exceeds the number of elements remaining,
 *        {@code true} otherwise.
 * @param "count" "[0..∞]"
 *        The size of the requested tuple.
 * @param "aReader" "reader"
 *        An reader.
 * @returns "tuple"
 *          A tuple containing the first {@param "count"} elements of {@param
 *          "aReader"}, preserving the original order.
 * @raises "exhausted-iterator exception"
 *         If {@param "isLax"} is {@code false} and {@param "aReader"} does
 *         not contain {@param "count"} elements.
 */
Method "take«at most»?_from_" is
[
	isLax : boolean,
	count : [0..∞],
	aReader : reader
|
	result : tuple := <>;
	Guard
	[
		Repeat
		[
			next ::= aReader's current element;
			result := eject result ++ <next>;
			Advance aReader;
		] count times;
	]
	intercept
	[
		e : exhausted-iterator exception
	|
		Unless isLax then [Raise e];
	];
	result
] : tuple;

/**
 * Strengthen the result of the take operation.  Take into account the reader's
 * element type, how many elements are to be extracted, and whether the
 * "at most" clause was present.
 *
 * @method "take«at most»?_from_"
 * @restricts "laxity" "boolean's type"
 * @restricts "count" "[0..∞]'s type"
 * @restricts "readerType" "reader's type"
 * @returns "tuple's type"
 */
Semantic restriction "take«at most»?_from_" is
[
	laxity : boolean's type,
	count : [0..∞]'s type,
	readerType : reader's type
|
	Assert: |laxity| = 1;
	isLax ::= laxity's instance;
	If ¬isLax ∧ ∞ ∈ count then
	[
		Reject parse, expected:
			"'at most' clause to be specified when count may be ∞"
	];
	min ::= if isLax then [0] else [⌊count⌋ ?→ whole number];
	<readerType's element type's instance… | min..⌈count⌉>
];

/**
 * Checks to see if the reader is not exhausted.
 *
 * @category "Data Abstractions" "Readers"
 * @method "_is not exhausted"
 * @param "aReader" "reader"
 * @returns "boolean"
 * @author "Richard Arriaga"
 */
Public macro "_is not exhausted" is
[
	aReader : expression phrase ⇒ reader
|
	restricted send $"¬_"
		with «<(restricted send $"_is exhausted" with «<aReader>» : boolean)>»
		: boolean
] : send phrase ⇒ boolean;

/**
 * Answer a tuple containing the prefix of {@param "aReader"} that answered
 * {@method "true"} to {@param "predicate"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "take from_while_"
 * @param "aReader" "reader"
 *        An reader.
 * @param "predicate" "[⊥]→boolean"
 *        A function that can accept each element of the specified reader. It
 *        should answer {@code true} to keep the element (and continue scanning)
 *        or {@code false} to abort.
 * @returns "tuple"
 *          A tuple containing the prefix of {@param "aReader"} that
 *          satisfied {@param "predicate"}.
 */
Method "take from_while_" is
[
	aReader : reader,
	predicate : [⊥]→boolean
|
	result : tuple := <>;
	While aReader is not exhausted ∧ predicate(aReader's current element) do
	[
		result := eject result ++ <aReader's current element>;
		Advance aReader;
	];
	result
] : tuple;

/**
 * Strengthen the result of the {@method "take from_while_"} operation.
 *
 * @method "take from_while_"
 * @restricts "readerType" "reader's type"
 * @restricts "predicate" "[⊥]→boolean's type"
 * @returns "tuple's type"
 */
Semantic restriction "take from_while_" is
[
	readerType : reader's type,
	predicate : [⊥]→boolean's type
|
	Require: predicate accepts readerType;
	<readerType's element type's instance…|>
];

/**
 * Answer a tuple containing the prefix of {@param "aReader"} that answered
 * {@method "false"} to {@param "predicate"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "take from_until_"
 * @param "aReader" "reader"
 *        An reader.
 * @param "predicate" "[⊥]→boolean"
 *        A function that can accept each element of the specified reader. It
 *        should answer {@code false} to keep the element (and continue
 *        scanning) or {@code true} to abort.
 * @returns "tuple"
 *          A tuple containing the prefix of {@param "aReader"} that
 *          satisfied {@param "predicate"}.
 */
Method "take from_until_" is
[
	aReader : reader,
	predicate : [⊥]→boolean
|
	result : tuple := <>;
	Until aReader is exhausted ∨ predicate(aReader's current element) do
	[
		result := eject result ++ <aReader's current element>;
		Advance aReader;
	];
	result
] : tuple;

/**
 * Strengthen the result of the {@method "take from_until_"} operation.
 *
 * @method "take from_until_"
 * @restricts "readerType" "reader's type"
 * @restricts "predicate" "[⊥]→boolean's type"
 * @returns "tuple's type"
 */
Semantic restriction "take from_until_" is
[
	readerType : reader's type,
	predicate : [⊥]→boolean's type
|
	Require: predicate accepts readerType;
	<readerType's element type's instance…|>
];

/**
 * Forward the specified {@type "reader"} past (at most) the first {@param
 * "count"} elements.
 *
 * @category "Data Abstractions" "Readers"
 * @method "Drop«at most»?_from_"
 * @param "isLax" "boolean"
 *        {@code false} if an {@type "exhausted-iterator exception"} should be
 *        raised if {@param "count"} exceeds the number of elements remaining,
 *        {@code true} otherwise.
 * @param "count" "whole number"
 *        The size of the prefix of {@param "aReader"} that should be omitted
 *        from the result reader.
 * @param "aReader" "reader"
 *        An reader.
 * @returns "⊤"
 * @raises "exhausted-iterator exception"
 *         If {@param "isLax"} is {@code false} and {@param "aReader"} does
 *         not contain {@param "count"} elements.
 */
Method "Drop«at most»?_from_" is
[
	isLax : boolean,
	count : whole number,
	aReader : reader
|
	Guard
	[
		Repeat [Advance aReader;] count times;
	]
	intercept
	[
		e : exhausted-iterator exception
	|
		Unless isLax then [Raise e];
	];
] : ⊤;

/**
 * Forward the specified {@type "reader"} past the prefix of elements that
 * answer {@code true} to {@param "predicate"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "Drop from_while_"
 * @param "aReader" "reader"
 *        An reader.
 * @param "predicate" "[⊥]→boolean"
 *        A function that can accept each element of the specified reader. It
 *        should answer {@code true} to discard the element (and continue
 *        scanning) or {@code false} to abort.
 * @returns "⊤"
 */
Method "Drop from_while_" is
[
	aReader : reader,
	predicate : [⊥]→boolean
|
	While aReader is not exhausted ∧ predicate(aReader's current element)
		do [Advance aReader;];
] : ⊤;

/**
 * Verify statically that {@method "Drop from_while_"}'s reader provides
 * elements suitable for processing by the predicate.
 *
 * @method "Drop from_while_"
 * @restricts "readerType" "reader's type"
 * @restricts "predicate" "[⊥]→boolean's type"
 * @returns "⊤'s type"
 */
Semantic restriction "Drop from_while_" is
[
	readerType : reader's type,
	predicate : [⊥]→boolean's type
|
	Require: predicate accepts readerType;
	⊤
];

/**
 * Forward the specified {@type "reader"} past the prefix of elements that
 * answer {@code false} to {@param "predicate"}.
 *
 * @category "Data Abstractions" "Readers"
 * @method "Drop from_while_"
 * @param "aReader" "reader"
 *        An reader.
 * @param "predicate" "[⊥]→boolean"
 *        A function that can accept each element of the specified reader. It
 *        should answer {@code false} to discard the element (and continue
 *        scanning) or {@code true} to abort.
 * @returns "⊤"
 */
Method "Drop from_until_" is
[
	aReader : reader,
	predicate : [⊥]→boolean
|
	Until aReader is exhausted ∨ predicate(aReader's current element) do
	[
		Advance aReader;
	];
] : ⊤;

/**
 * Verify statically that {@method "Drop from_until_"}'s reader provides
 * elements suitable for processing by the predicate.
 *
 * @method "Drop from_until_"
 * @restricts "readerType" "reader's type"
 * @restricts "predicate" "[⊥]→boolean's type"
 * @returns "⊤'s type"
 */
Semantic restriction "Drop from_until_" is
[
	readerType : reader's type,
	predicate : [⊥]→boolean's type
|
	Require: predicate accepts readerType;
	⊤
];

/**
* Answer a tuple comprising all elements of {@param "target"}.
*
* @macro "drain_"
* @param "target" "expression phrase ⇒ reader"
* @category "Readers"
* @returns "send phrase ⇒ tuple"
*/
Public macro "drain_" is
[
	target : expression phrase ⇒ reader
|
	restricted send $"take«at most»?_from_" with
		«<
			‘true’,
			‘∞’,
			target
		>» : tuple
];

/**
 * Write the elements of the specified {@type "tuple"} to the supplied {@type
 * "writer"}.
 *
 * @method "Write_to_"
 * @param "newElements" "tuple"
 * @param "aWriter" "writer"
 * @returns "⊤"
 * @category "Writers" "Data Abstractions"
 */
Method "Write_to_" is
[
	newElements : tuple,
	aWriter : writer
|
	For each element of newElements do
	[
		aWriter's current element := element;
		Advance aWriter;
	];
];

Semantic restriction "Write_to_" is
[
	newElements : tuple's type,
	writerType : writer's type
|
	unionType ::= ∪ newElements[1..relevant |newElements|];
	If ¬ unionType ⊆ writerType's element type's instance then
	[
		Reject parse, expected:
			format
				"writer to accept all members of the supplied tuple \
				\|(but “①” isn't a subtype of “②”)"
			with unionType, writerType's element type's instance
	];
	⊤
];
