/*
 * Stream Readers.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Stream Readers"
Versions
	"1.4.0"
Uses
	"Abstract Iterators",
	"Concatenation Readers",
	"Exhausted Readers",
	"Filtered Readers",
	"Foundation",
	"Mapped Readers",
	"Positionable Iterators",
	"Streams" =
	(
		"a counting stream from_to_",
		"stream"
	),
	"Unit Testing",
	"Zipped Readers"
Names
	"a reader over_",
	"stream reader",
	"stream reader test suite"
Body

"adapted stream" is a new field atom;
"reader id" is a new atom;

atomVariable ::= ↑atom;

/**
 * A stream reader consumes the elements of a stream. A stream reader can be
 * rewound to any position previously answered by {@method
 * "_'s⁇position"}.
 *
 * @type "stream reader"
 * @supertype "positionable iterator"
 * @supertype "reader"
 * @category "Data Abstractions" "Readers"
 */
Public class "stream reader" extends reader ∩ positionable iterator
	with field
		position variable : atomVariable
	with mutable field
		adapted stream : stream;

Method "_is exhausted" is
[
	aReader : stream reader
|
	aReader's adapted stream is empty
] : boolean;

stream reader's current element method is
[
	aReader : stream reader
|
	aReader's adapted stream's head
] : any;

stream reader's advance method is
[
	aReader : stream reader
|
	aReader's adapted stream := aReader's adapted stream's tail;
] : ⊤;

Method "_'s⁇position" is
[
	aReader : stream reader
|
	/* Create an atom as a memento of the current position. Use the "adapted
	 * stream" atom to store the current stream, and "reader id" to store the
	 * argument. In this way the memento is specific to a particular reader
	 * and position.
	 */
	position ::= new atom named "current position";
	position[reader id] := aReader;
	position[adapted stream] := aReader's adapted stream;
	position
] : atom;

Method "_'s⁇position:=_" is
[
	aReader : stream reader,
	position : atom
|
	/* Only allow a position memento previously allocated by this reader to be
	 * used to change its current position.
	 */
	Unless reader id ∈ position ∧ position[reader id] = aReader then
	[
		Raise an invalid-position exception
	];
	Assert: adapted stream ∈ position;
	aReader's adapted stream := cast position[adapted stream]
		into [t : stream | t];
];

/**
 * Construct and answer a reader that destructively consumes the elements of
 * the specified stream.
 *
 * @method "a reader over_"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @returns "stream reader"
 *    The requested reader.
 * @category "Data Abstractions" "Readers"
 */
Public method "a reader over_" is
[
	aStream : stream
|
	newVar ::= cast new ↑atom into [v : atomVariable | v];
	/* Leave the variable uninitialized. */
	a stream reader with
		element type ::= aStream's element type,
		position variable ::= newVar,
		adapted stream := aStream
] : stream reader;

Semantic restriction "a reader over_" is
[
	streamType : stream's type
|
	extend stream reader with
		element type : streamType's element type
];
