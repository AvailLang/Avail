/*
 * Delimited Readers.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Delimited Readers"
Versions
	"1.2.0 DEV 2019-07-09"
Uses
	"Abstract Iterators",
	"Collection Readers" = ("a reader over_"),
	"Decorated Readers",
	"Foundation" = (-"_'s⁇element type", …),
	"Unit Testing"
Names
	"delimited a reader test suite",
	"_delimited by_",
	"delimited reader test suite"
Body

"delimiter" is a new field atom;
"current value" is a new field atom;
"exhaustion state" is a new field atom;

/**
 * A delimited reader answers tuples of elements from its decorated reader.
 * These tuples are separated by occurrences of the delimiter.
 *
 * @type "delimited reader"
 * @supertype "reader"
 * @category "Data Abstractions" "Readers"
 */
Class "delimited reader" extends decorated reader
	with fields
		element type : tuple's type,
		delimiter : any+
	with mutable fields
		referable current value : tuple,
		exhaustion state : boolean;

Method "_is exhausted" is
[
	aReader : delimited reader
|
	aReader's exhaustion state
] : boolean;

delimited reader's current element method is
[
	aReader : delimited reader
|
	/* If this is the first inquiry, then advance the reader (to capture the
	 * current element).
	 */
	If ↑aReader's current value is unassigned then
	[
		Advance aReader;
	];
	aReader's current value
] : tuple;

delimited reader's advance method is
[
	aReader : delimited reader
|
	inner ::= aReader's component reader;
	If inner is exhausted then
	[
		Clear ↑aReader's current value;
		aReader's exhaustion state := true;
	]
	else
	[
		result : tuple := <>;
		delimiter ::= aReader's delimiter;
		index : natural number := 1;
		Until inner is exhausted ∨ index > |delimiter|
		do
		[
			value ::= inner's current element;
			If value = delimiter[index] then
			[
				index++;
			]
			else
			[
				result := eject result ++ delimiter[1..index-1] ++ <value>;
				index := 1;
			];
			Advance inner;
		];
		aReader's current value := result;
	];
] : ⊤;

/**
 * Construct and answer an {@type "reader"} that produces tuples of values
 * from {@param "aReader"}. These tuples are separated by occurrences of
 * {@param "delimiterTuple"} (which will never be produced as output from the
 * answered reader).
 *
 * @method "_delimited by_"
 * @param "aReader" "reader"
 *        A reader to decorate.
 * @param "delimiterTuple" "tuple"
 *        The delimiter.
 * @returns "reader of tuple"
 *          The requested reader.
 * @category "Data Abstractions" "Readers"
 */
Public method "_delimited by_" is
[
	aReader : reader,
	delimiterTuple : any+
|
	a delimited reader with
		element type ::= aReader's element type*,
		component reader ::= aReader,
		delimiter ::= delimiterTuple,
		exhaustion state := false
] : reader of tuple;

Semantic restriction "_delimited by_" is
[
	readerType : reader's type,
	delimiterType : any+'s type
|
	extend delimited reader with
		element type : readerType's element type's instance*'s type,
		component reader : readerType,
		delimiter : delimiterType
];
