/*
 * Bounded Readers.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Bounded Readers"
Versions
	"1.5.0"
Uses
	"Abstract Iterators",
	"Counting Readers" = ("a counting reader from_to_"),
	"Decorated Readers",
	"Exhausted Readers",
	"Foundation",
	"Unit Testing"
Names
	"bounded reader test suite",
	"_limited to_elements"
Body

"remaining elements" is a new field atom;

/**
 * A bounded reader artificially limits the number of elements that its
 * decorated reader may produce.
 *
 * @type "bounded reader"
 * @supertype "reader"
 * @category "Data Abstractions" "Readers"
 */
Class "bounded reader" extends reader
	with fields
		component reader : reader
	with mutable fields
		referable remaining elements : whole number;

/**
 * Test whether this {@type "bounded reader"} is exhausted.
 *
 * @method "_is exhausted"
 * @param "aReader" "bounded reader"
 * @returns "boolean"
 *          Whether the reader is exhausted.
 * @category "Data Abstractions" "Readers"
 */
Method "_is exhausted" is
[
	aReader : bounded reader
|
	aReader's remaining elements = 0 ∨ aReader's component reader is exhausted
] : boolean;

/* Fetch the current element from this bounded reader. */
bounded reader's current element method is
[
	aReader : bounded reader
|
	aReader's component reader's current element
] : any;

/* Advance this bounded reader. */
bounded reader's advance method is
[
	aReader : bounded reader
|
	Advance aReader's component reader;
	↑aReader's remaining elements--;
] : ⊤;

/**
 * Construct and answer an {@type "reader"} that can answer at most the first
 * {@param "limit"} elements of {@param "aReader"}.
 *
 * @method "_limited to_elements"
 * @param "aReader" "reader"
 *        A reader.
 * @param "limit" "[0..∞]"
 *        The effective size of the result.
 * @returns "reader"
 *          A reader incapable of producing more than {@param "limit"}
 *          elements of {@param "aReader"}.
 * @category "Data Abstractions" "Readers"
 */
Public stable method "_limited to_elements" is
[
	aReader : reader,
	limit : [0..∞]
|
	cast limit into
		[t : ∞'s type | aReader],
		[t : 0's type | an exhausted reader],
		[
			t : whole number
		|
			a bounded reader with
				element type ::= aReader's element type,
				component reader ::= aReader,
				remaining elements := t
		]
] : reader;

Semantic restriction "_limited to_elements" is
[
	readerType : reader's type,
	limit : [0..∞]'s type
|
	if ⌊limit⌋ = ∞ then [readerType]
	else if ⌈limit⌉ = 0 then [exhausted reader]
	else
	[
		reader of readerType's element type's instance
	]
] : reader's type;
