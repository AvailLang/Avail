/*
 * Standard Input.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Standard Input"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Exceptions",
	"Foundation"
Names
	"next line«from standard input»⁇",
	"next«value in»⁇_«from standard input»⁇",
	"next_character|characters«from standard input»⁇"
Body

/**
 * Read {@param "count"} characters from the standard input stream.
 *
 * @category "I/O" "Standard IO"
 * @method "next_character|characters«from standard input»⁇"
 * @param "count" "whole number"
 *        The desired number of characters.
 * @returns "string"
 *          A string containing {@param "count"} characters.
 * @category "Synchronous IO" "Standard IO" "IO"
 */
Public method "next_character|characters«from standard input»⁇" is
[
	count : whole number
|
	result : string := "";
	Repeat
	[
		result := eject result ++ <next character>;
	] count times;
	result
] : string;

/**
 * @method "next_character|characters«from standard input»⁇"
 * @restricts "whole number's type"
 */
Semantic restriction "next_character|characters«from standard input»⁇" is
[
	count : whole number's type
|
	<<>, character…|count>
];

/**
 * Read a line of text from the standard input stream. Reading stops once a line
 * feed {@code "\\n"} (U+000A) has been consumed. The result does not include
 * any line feeds.
 *
 * @category "I/O" "Standard IO"
 * @method "next line«from standard input»⁇"
 * @returns "string"
 *          A line of text (not including any line feeds).
 * @category "Synchronous IO" "Standard IO" "IO"
 */
Public method "next line«from standard input»⁇" is
[
	result : string := "";
	Until
	[
		next ::= next character;
		result := eject result ++ <next>;
		next = ¢"\n"
	];
	nonempty ::= cast result into [t : nonempty string | t];
	nonempty[1..|nonempty| - 1]
] : string;

integerChars ::= "-∞0123456789"→set;

/**
 * Read an integer from the standard input stream. Reading stops once the first
 * inappropriate character has been peeked.
 *
 * @method "next«value in»⁇_«from standard input»⁇"
 * @param "range" "extended integer's type"
 *        The range within which the extended integer must lie.
 * @returns "extended integer"
 *          An extended integer within the requested range.
 * @category "Synchronous IO" "Standard IO" "IO"
 */
Public method "next«value in»⁇_«from standard input»⁇" is
[
	range : extended integer's type
|
	text : string := "";
	While
	[
		Mark for 1 character of read ahead;
		next ::= next character;
		text := eject text ++ <next>;
		next ∈ integerChars
	];
	Reset to mark;
	nonempty ::= cast text into [t : nonempty string | t];
	value ::= nonempty[1..|nonempty| - 1]→extended integer;
	If ¬value ∈ range then
	[
		Raise a data-validation exception
	];
	value
] : extended integer;

/**
 * @method "next«value in»⁇_«from standard input»⁇"
 * @restricts "extended integer's type's type"
 */
Semantic restriction "next«value in»⁇_«from standard input»⁇" is
[
	range : extended integer's type's type
|
	range's instance
];
