/*
 * File Names.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "File Names"
Versions
	"1.3.0 DEV 2019-07-16"
Uses
	"Foundation"
Names
	/* File name types. */
	"file name",
	"_'s⁇name",

	/* File name construction. */
	"a file named_",
	"concatenate_",
	"./_",
	"«_‡/»",

	/* File existence. */
	"_exists(follow if symlink=_)",
	"_exists«(don't follow if symlink)»?",

	/* File name queries. */
	"_is absolute",
	"_names the⁇same file as_",
	"_'s⁇parent path",
	"_'s⁇path components",

	/* File name conversion. */
	"_'s⁇absolute path",
	"_'s⁇real path(follow if symlink=_)",
	"_'s⁇real path«(don't follow if symlink)»?",

	/* Noteworthy file names. */
	"current working directory",
	"home directory",
	"temporary directory"
Body

"string name" is a new field atom;

/**
 * A file name represents a node, actual or hypothetical, within a file system.
 *
 * @type "file name"
 * @supertype "object"
 * @category "Files"
 */
Public class "file name" extends object
	with fields
		public string name : string ("_'s⁇name");

Stable method "“_”" is
[
	fn : file name
|
	format "a file named “①”" with fn's name
];

/**
 * Construct and answer a {@type "file name"} from the specified {@type
 * "string"}.
 *
 * @method "a file named_"
 * @param "n" "string"
 *        The name of the file. If empty, then the resultant {@type "file name"}
 *        represents the {@method "current working directory"} (but as a
 *        relative path rather than an {@method "_is absolute" absolute} one).
 * @returns "file name"
 *          The requested file name.
 * @category "Files"
 */
Public stable method "a file named_" is
[
	n : string
|
	a file name with string name ::= n
] : file name;

Semantic restriction "a file named_" is
[
	n : string's type
|
	extend file name with string name : n
];

/**
 * Construct and answer a {@type "file name"} from the specified {@type
 * "string"}.
 *
 * @method "./_"
 * @param "n" "string"
 *        The name of the file. If empty, then the resultant {@type "file name"}
 *        represents the {@method "current working directory"} (but as a
 *        relative path rather than an {@method "_is absolute" absolute} one).
 * @returns "file name"
 *          The requested file name.
 * @category "Files"
 */
Public stable method "./_" is
[
	n : string
|
	a file name with string name ::= n
] : file name;

Semantic restriction "./_" is
[
	n : string's type
|
	extend file name with string name : n
];

/**
 * Does the specified {@type "file name"} exist?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_exists(follow if symlink=_)"
 * @param "fn" "file name"
 * @param "followIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should be followed if it refers to a
 *        symbolic link, {@method "false"} otherwise.
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} names an existing file, {@method
 *          "false"} otherwise.
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @category "Files"
 */
Public method "_exists(follow if symlink=_)" is
[
	fn : file name,
	followIfSymlink : boolean
|
	[
		s : string,
		b : boolean
	|
		Primitive FileExists (e : {
			invalid-path code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : boolean (fn's name, followIfSymlink)
];

/**
 * Does the specified {@type "file name"} exist?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_exists«(don't follow if symlink)»?"
 * @param "fn" "file name"
 * @param "dontFollowIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should not be followed if it refers
 *        to a symbolic link, {@method "false"} otherwise.
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} names an existing file, {@method
 *          "false"} otherwise.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @category "Files"
 */
Public method "_exists«(don't follow if symlink)»?" is
[
	fn : file name,
	dontFollowIfSymlink : boolean
|
	fn exists (follow if symlink = ¬dontFollowIfSymlink)
] : boolean;

/**
 * Is {@param "fn"} an absolute path?
 *
 * @method "_is absolute"
 * @param "fn" "file name"
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} is an absolute path, {@method
 *          "false"} otherwise.
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @category "Files"
 */
Public method "_is absolute" is
[
	fn : file name
|
	[
		s : string
	|
		Primitive FileIsAbsolute (e : invalid-path code's type);
		Raise an exception for e
	] : boolean (fn's name)
] : boolean;

/**
 * Answer the absolute path that includes the specified {@type "file name"} as a
 * suffix.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇absolute path"
 * @param "fn" "file name"
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @category "Files"
 */
Public method "_'s⁇absolute path" is
[
	fn : file name
|
	absolute ::=
		[
			s : string
		|
			Primitive FileAbsolutePath (e : {
				invalid-path code,
				permission-denied code,
				I/O-error code}ᵀ);
			Raise an exception for e
		] : string (fn's name);
	a file named absolute
] : file name;

/**
 * Answer the real path of the file denoted by the specified {@type
 * "file name"}. The real path is an {@method "_is absolute" absolute} path that
 * does not traverse any symbolic links. If the file system preserves the case
 * of file names, then the file name components are reported with their
 * canonical cases.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇real path"
 * @param "fn" "file name"
 * @param "followIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should be followed if it refers to a
 *        symbolic link, {@method "false"} otherwise.
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @category "Files"
 */
Public method "_'s⁇real path(follow if symlink=_)" is
[
	fn : file name,
	followIfSymlink : boolean
|
	real ::=
		[
			s : string,
			b : boolean
		|
			Primitive FileRealPath (e : {
				invalid-path code,
				permission-denied code,
				I/O-error code}ᵀ);
			Raise an exception for e
		] : string (fn's name, followIfSymlink);
	a file named real
] : file name;

/**
 * Answer the real path of the file denoted by the specified {@type
 * "file name"}. The real path is an {@method "_is absolute" absolute} path that
 * does not traverse any symbolic links. If the file system preserves the case
 * of file names, then the file name components are reported with their
 * canonical cases.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇real path"
 * @param "fn" "file name"
 * @param "dontFollowIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should not be followed if it refers
 *        to a symbolic link, {@method "false"} otherwise.
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @category "Files"
 */
Public method "_'s⁇real path«(don't follow if symlink)»?" is
[
	fn : file name,
	dontFollowIfSymlink : boolean
|
	fn's real path (follow if symlink = ¬dontFollowIfSymlink)
] : file name;

/**
 * Do {@param "f1"} and {@param "f2"} locate the same file?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_names the⁇same file as_"
 * @param "f1" "file name"
 * @param "f2" "file name"
 * @returns "boolean"
 *          {@method "true"} if the arguments locate the same file, {@method
 *          "false"} otherwise.
 * @raises "invalid-path exception"
 *         If either {@param "f1"} or {@param "f2"} cannot be understood as a
 *         path.
 * @raises "permission-denied exception"
 *         If permission is denied to either of the specified {@type
 *         "file name"}s.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @category "Files"
 */
Public method "_names the⁇same file as_" is
[
	f1 : file name,
	f2 : file name
|
	[
		s1 : string,
		s2 : string
	|
		Primitive FilesAreSame (e : {
			invalid-path code,
			permission-denied code,
			I/O-error code}ᵀ);
		Raise an exception for e
	] : boolean (f1's name, f2's name)
] : boolean;

/**
 * Answer the {@type "file name" current working directory} of the Avail
 * virtual machine. This is a read-only global value that is set when the
 * virtual machine starts, and no mechanism is provided to change it.
 *
 * @method "current working directory"
 * @returns "file name"
 *        The {@method "_'s⁇real path(follow if symlink=_)" real path} of the
 *        current working directory.
 * @category "Files"
 */
Public method "current working directory" is
[
	cwd ::=
		[
			Primitive CurrentWorkingDirectory;
		] : string ();
	a file named cwd
] : file name;

/**
 * Concatenate the specified {@type "tuple"} of {@type "string" path component}s
 * to obtain a {@type "file name"}. If no path components are specified, then
 * answer the {@method "current working directory"}.
 *
 * @method "concatenate_"
 * @param "fns" "<file name…|0..>"
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If any of the elements of {@param "fns"} cannot be understood as a
 *         path.
 * @category "Files"
 */
Public stable method "concatenate_" is
[
	fns : <file name…|>
|
	path ::=
		[
			ns : string*
		|
			Primitive FilePathConcatenation (e : {invalid-path code}ᵀ);
			Raise an exception for e
		] : string (map each fn in fns through [fn's name]);
	a file named path
] : file name;

/**
 * Concatenate the specified {@type "tuple"} of {@type "string"}s to obtain a
 * {@type "file name"}.
 *
 * @method "«_‡/»"
 * @param "fns" "<file name…|2..>"
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If any of the elements of {@param "fns"} cannot be understood as a
 *         path.
 * @category "Files"
 */
Public method "«_‡/»" is
[
	fns : <file name…|2..>
|
	concatenate fns
] : file name;

Semantic restriction "«_‡/»" is
[
	fns : <file name…|2..>'s type
|
	instanceCounts : {[0..∞]|} := ∅;
	size ::= |fns's leading types| + 1;
	For each i from 1 to size do
	[
		instanceCounts := eject instanceCounts + |fns[i]|;
	];
	If instanceCounts = {1} then
	[
		instances ::=
			map each i in 1 to size through [fns[i]'s instance];
		{concatenate instances}ᵀ
	]
	else
	[
		⊤
	]
];

/**
 * Concatenate the specified {@type "tuple"} of {@type "string"}s to obtain a
 * {@type "file name"}.
 *
 * @method "«_‡/»"
 * @param "fns" "<file name, string…|2..>"
 * @returns "file name"
 * @raises "invalid-path exception"
 *         If any of the elements of {@param "fns"} cannot be understood as a
 *         path.
 * @category "Files"
 */
Public method "«_‡/»" is
[
	fns : <file name, string…|2..>
|
	path ::=
		[
			ns : string*
		|
			Primitive FilePathConcatenation (e : {invalid-path code}ᵀ);
			Raise an exception for e
		] : string (<fns[1]'s name> ++ fns[2..]);
	a file named path
] : file name;

Semantic restriction "«_‡/»" is
[
	fns : <file name, string…|2..>'s type
|
	instanceCounts : {[0..∞]|} := ∅;
	size ::= |fns's leading types| + 1;
	For each i from 1 to size do
	[
		instanceCounts := eject instanceCounts + |fns[i]|;
	];
	If instanceCounts = {1} then
	[
		instances ::= <fns[1]'s instance> ++
			map each i in 2 to size through [a file named fns[i]'s instance];
		{concatenate instances}ᵀ
	]
	else
	[
		⊤
	]
];

/**
 * Answer the path components of the specified {@type "file name"}, preserving
 * order.
 *
 * @method "_'s⁇path components"
 * @param "fn" "file name"
 * @returns "<file name…|1..>"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @category "Files"
 */
Public stable method "_'s⁇path components" is
[
	fn : file name
|
	components ::=
		[
			n : string
		|
			Primitive FilePathSplit (e : {invalid-path code}ᵀ);
			Raise an exception for e
		] : string+ (fn's name);
	map each c in components through [a file named c]
] : <file name…|1..>;

/**
 * Answer the parent path of the specified {@type "file name"}. This path
 * includes every {@method "_'s⁇path components" path component} except for the
 * path component furthest from a file system root. The operation is schematic
 * only; no file system operations are performed.
 *
 * @method "_'s⁇parent path"
 * @param "fn" "file name"
 * @returns "file name"
 * @category "Files"
 */
Public stable method "_'s⁇parent path" is
[
	fn : file name
|
	components ::= fn's path components;
	concatenate components[1..|components| - 1]
] : file name;

Grammatical restriction "«_‡/»" is <{"«_‡/»"}>;

/**
 * Answer the home directory of the user who owns the Avail virtual machine
 * process.
 *
 * @method "home directory"
 * @returns "file name"
 * @returns "no-file exception"
 *          If the home directory could not be determined.
 * @category "Files"
 */
Public method "home directory" is
[
	/* Unix. */
	./${HOME}
		/* Windows. */
		else [${HOMEPATH}
			else [Raise a no-file exception]]
] : file name;

/**
 * Answer the preferred directory for creating temporary files.
 *
 * @method "temporary directory"
 * @returns "file name"
 * @returns "no-file exception"
 *          If the temporary directory could not be determined.
 * @category "Files"
 */
Public method "temporary directory" is
[
	/* Unix. */
	./${TMPDIR}
		/* Windows. */
		else [${TEMP} else [${TMP}
			else [Raise a no-file exception]]]
] : file name;
