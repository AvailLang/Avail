/*
 * File Access Rights.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "File Access Rights"
Versions
	"1.4.0"
Uses
	"File Names",
	"Foundation"
Names
	/* File access rights. */
	"file access right",
	"group read",
	"group write",
	"group execute",
	"others read",
	"others write",
	"others execute",
	"owner read",
	"owner write",
	"owner execute",
	"_'s⁇access class",
	"_'s⁇permission",

	/* Permission classes. */
	"file access class",
	"owner",
	"group",
	"others",

	/* Permissions. */
	"file permission",
	"read",
	"write",
	"execute",

	/* Permission queries. */
	"_'s⁇access rights(follow if symlink=_)",
	"_'s⁇access rights«(don't follow if symlink)»?",
	"_is executable",
	"_is readable",
	"_is writable",

	/* Setting permissions. */
	"_'s⁇access rights:=_(follow if symlink=_)",
	"_'s⁇access rights:=_«(don't follow if symlink)»?",

	/* Pretty printing. */
	"file access rights summary",
	"“_”(file access rights summary)",
	"_→file access rights",

	/* For file opening. */
	"_→numeric code"
Body

/**
 * Answer the {@type "atom"} that denotes a file's owner class.
 *
 * @method "owner"
 * @returns "file access class"
 * @category "Files"
 */
"owner" is a new atom;

/**
 * Answer the {@type "atom"} that denotes a file's group class.
 *
 * @method "group"
 * @returns "file access class"
 * @category "Files"
 */
"group" is a new atom;

/**
 * Answer the {@type "atom"} that denotes a file's others class.
 *
 * @method "others"
 * @returns "file access class"
 * @category "Files"
 */
"others" is a new atom;

/**
 * A file access class describes partitions the users of a system from the
 * perspective of a file's owner.
 *
 * @type "file access class"
 * @category "Files"
 */
fileAccessClass ::= {owner, group, others}ᵀ;
Method "file access class" is [fileAccessClass];

/**
 * Answer the {@type "atom"} that denotes read permission.
 *
 * @method "read"
 * @returns "file permission"
 * @category "Files"
 */
"read" is a new atom;

/**
 * Answer the {@type "atom"} that denotes write permission.
 *
 * @method "write"
 * @returns "file permission"
 * @category "Files"
 */
"write" is a new atom;

/**
 * Answer the {@type "atom"} that denotes execute permission.
 *
 * @method "execute"
 * @returns "file permission"
 * @category "Files"
 */
"execute" is a new atom;

/**
 * A file permission describes a capability to perform an operation upon a file.
 *
 * @type "file permission"
 * @category "Files"
 */
filePermissions ::= {read, write, execute}ᵀ;
Method "file permission" is [filePermissions];

/* Field atoms. * @category "Files"
 */
"access`#" is a new field atom;
"access class" is a new field atom;
"access right name" is a new field atom;
"permission" is a new field atom;

/**
 * A private file access right describes a conjunction of a {@type
 * "file access class"} and a {@type "file permission"}.
 *
 * @type "file access right"
 * @category "Files"
 */
Class "private file access right" extends object
	with fields
		access# : [1..9],
		access class : file access class,
		access right name : nonempty string,
		permission : file permission;
private file access right's name := "file access right";

Method "“_”" is
[
	right : private file access right
|
	right's access right name
] : nonempty string;

/* Use code generation to produce the file access rights. */
[
	rights ::= <
		"owner read",
		"owner write",
		"owner execute",
		"group read",
		"group write",
		"group execute",
		"others read",
		"others write",
		"others execute">;
	For each rightName, index of rights do
	[
		class ::=
			choose cast (index - 1) ÷ 3 into [t : {0, 1, 2}ᵀ | t]
			from {0, 1, 2}ᵀ
			where
				0 is [owner],
				1 is [group],
				2 is [others];
		perm ::=
			choose cast (index - 1) mod 3 into [t : {0, 1, 2}ᵀ | t]
			from {0, 1, 2}ᵀ
			where
				0 is [read],
				1 is [write],
				2 is [execute];
		right ::= a private file access right with
			access# ::= index,
			access class ::= class,
			access right name ::= rightName,
			permission ::= perm;
		Method rightName is [right];
		Semantic restriction rightName is [right's type];
	];
]();

/* The ordered file access rights, needed to construct "file access right" (and
 * implement "_'s⁇access rights(follow symlinks=_)").
 */
fileAccessRights ::=
<
	owner read, owner write, owner execute,
	group read, group write, group execute,
	others read, others write, others execute
>;

fileAccessRightsReverseMap : {private file access right → [1..9]|} := {};
For each right, index of fileAccessRights do
[
	↑fileAccessRightsReverseMap [right] := index;
];

/**
 * Convert a {@type "file access right"} into its numeric code for consumption
 * by the file open primitive.
 *
 * @method "_→numeric code"
 * @param "accessRight" "file access right"
 * @returns "[1..9]"
 * @category "Files"
 */
Public method "_→numeric code" is
[
	accessRight : private file access right
|
	fileAccessRightsReverseMap [accessRight]
] : [1..9];


/**
 * A file access right comprises the nine valid combinations of a {@type
 * "file access class"} and a {@type "file permission"}.
 *
 * @type "file access right"
 * @category "Files"
 */
fileAccessRightsEnum ::= enumeration of fileAccessRights→set;
Method "file access right" is [fileAccessRightsEnum];

/**
 * Is the file named by the specified {@type "file name"} readable by the
 * current process?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_is readable"
 * @param "fn" "file name"
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} names an existing file that is
 *          readable by this process; {@method "false"} otherwise.
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @category "Files"
 */
Public method "_is readable" is
[
	fn : file name
|
	[
		s : string
	|
		Primitive FileCanRead (e : {
			invalid-path code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : boolean (fn's name)
] : boolean;

/**
 * Is the file named by the specified {@type "file name"} writable by the
 * current process?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_is writable"
 * @param "fn" "file name"
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} names an existing file that is
 *          writable by this process; {@method "false"} otherwise.
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @category "Files"
 */
Public method "_is writable" is
[
	fn : file name
|
	[
		s : string
	|
		Primitive FileCanWrite (e : {
			invalid-path code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : boolean (fn's name)
] : boolean;

/**
 * Is the file named by the specified {@type "file name"} executable by the
 * current process?
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_is executable"
 * @param "fn" "file name"
 * @returns "boolean"
 *          {@method "true"} if {@param "fn"} names an existing file that is
 *          executable by this process; {@method "false"} otherwise.
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @category "Files"
 */
Public method "_is executable" is
[
	fn : file name
|
	[
		s : string
	|
		Primitive FileCanExecute (e : {
			invalid-path code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : boolean (fn's name)
] : boolean;

/**
 * Obtain the {@type "file access rights"} for the file named by the given
 * {@type "file name"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇access rights(follow symlinks=_)"
 * @param "fn" "file name"
 * @param "followIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should be followed if it refers to a
 *        symbolic link, {@method "false"} otherwise.
 * @returns "{file access right…|[0..9]}"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @raises "operation-not-supported exception"
 *         If {@type "file access right"}s are not supported by the host
 *         platform.
 * @category "Files"
 */
Public method "_'s⁇access rights(follow if symlink=_)" is
[
	fn : file name,
	followIfSymlink : boolean
|
	ordinals ::=
		[
			s : string,
			f : boolean
		|
			Primitive FileGetPermissions (e : {
				invalid-path code,
				permission-denied code,
				operation-not-supported code,
				I/O-error code}ᵀ);
			Raise an exception for e
		] : {[1..9]|0..9} (fn's name, followIfSymlink);
	map each i in ordinals through [fileAccessRights[i]]
] : {file access right|0..9};

/**
 * Obtain the {@type "file access rights"} for the file named by the given
 * {@type "file name"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇access rights«(don't follow if symlink)»?"
 * @param "fn" "file name"
 * @param "dontFollowIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should not be followed if it refers
 *        to a symbolic link, {@method "false"} otherwise.
 * @returns "{file access right…|[0..9]}"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @raises "operation-not-supported exception"
 *         If {@type "file access right"}s are not supported by the host
 *         platform.
 * @category "Files"
 */
Public method "_'s⁇access rights«(don't follow if symlink)»?" is
[
	fn : file name,
	dontFollowIfSymlink : boolean
|
	fn's access rights (follow if symlink = ¬dontFollowIfSymlink)
] : {file access right|0..9};

/**
 * Set the {@type "file access rights"} for the file named by the given {@type
 * "file name"}.
 *
 * @method "_'s⁇access rights:=_"
 * @param "fn" "file name"
 * @param "rights" "{file access right|[0..9]}"
 * @param "followIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should be followed if it refers to a
 *        symbolic link, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @raises "operation-not-supported exception"
 *         If {@type "file access right"}s are not supported by the host
 *         platform.
 * @category "Files"
 */
Public method "_'s⁇access rights:=_(follow if symlink=_)" is
[
	fn : file name,
	rights : {file access right|0..9},
	followIfSymlink : boolean
|
	ordinals ::= map each r in rights through [r's access#];
	[
		s : string,
		r : {[1..9]|0..9},
		f : boolean
	|
		Primitive FileSetPermissions (e : {
			invalid-path code,
			permission-denied code,
			operation-not-supported code,
			I/O-error code}ᵀ);
		Raise an exception for e
	] : ⊤ (fn's name, ordinals, followIfSymlink);
] : ⊤;

/**
 * Set the {@type "file access rights"} for the file named by the given {@type
 * "file name"}.
 *
 * @method "_'s⁇access rights:=_"
 * @param "fn" "file name"
 * @param "rights" "{file access right|[0..9]}"
 * @param "dontFollowIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should not be followed if it refers
 *        to a symbolic link, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 * @raises "operation-not-supported exception"
 *         If {@type "file access right"}s are not supported by the host
 *         platform.
 * @category "Files"
 */
Public method "_'s⁇access rights:=_«(don't follow if symlink)»?" is
[
	fn : file name,
	rights : {file access right|0..9},
	dontFollowIfSymlink : boolean
|
	fn's access rights := rights (follow if symlink = ¬dontFollowIfSymlink);
] : ⊤;

/**
 * A file access rights summary is a string representation of a {@type "set"} of
 * {@type "file access rights"} as a series of nine {@type "character"}s:
 *
 * <ol>
 * <li>¢r if {@param "rights"} includes {@method "owner read"},
 * ¢- otherwise.</li>
 * <li>¢w if {@param "rights"} includes {@method "owner write"},
 * ¢- otherwise.</li>
 * <li>¢x if {@param "rights"} includes {@method "owner execute"},
 * ¢- otherwise.</li>
 * <li>¢r if {@param "rights"} includes {@method "group read"},
 * ¢- otherwise.</li>
 * <li>¢w if {@param "rights"} includes {@method "group write"},
 * ¢- otherwise.</li>
 * <li>¢x if {@param "rights"} includes {@method "group execute"},
 * ¢- otherwise.</li>
 * <li>¢r if {@param "rights"} includes {@method "others read"},
 * ¢- otherwise.</li>
 * <li>¢w if {@param "rights"} includes {@method "others write"},
 * ¢- otherwise.</li>
 * <li>¢x if {@param "rights"} includes {@method "others execute"},
 * ¢- otherwise.</li>
 * </ol>
 *
 * @type "file access rights summary"
 * @supertype
 *    "<{¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ,
 *    {¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ,
 *    {¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ…|9>"
 * @category "Files"
 */
[
	tupleType ::=
		<{¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ,
		{¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ,
		{¢r, ¢-}ᵀ, {¢w, ¢-}ᵀ, {¢x, ¢-}ᵀ…|9>;
	Public method "file access rights summary" is [tupleType];
]();

/**
 * Answer a {@type "file access rights summary"} for the specified {@type "set"}
 * of {@type "file access rights"}.
 *
 * @method "“_”(file access rights summary)"
 * @param "rights" "{file access rights|}"
 * @returns "file access rights summary"
 * @category "Files"
 */
Public method "“_”(file access rights summary)" is
[
	rights : {file access right|}
|
	if owner read ∈ rights then ["r"] else ["-"]
	++ if owner write ∈ rights then ["w"] else ["-"]
	++ if owner execute ∈ rights then ["x"] else ["-"]
	++ if group read ∈ rights then ["r"] else ["-"]
	++ if group write ∈ rights then ["w"] else ["-"]
	++ if group execute ∈ rights then ["x"] else ["-"]
	++ if others read ∈ rights then ["r"] else ["-"]
	++ if others write ∈ rights then ["w"] else ["-"]
	++ if others execute ∈ rights then ["x"] else ["-"]
] : file access rights summary;

/**
 * Answer the {@type "set"} of {@type "file access right"}s described by the
 * specified {@type "file access rights summary"}.
 *
 * @method "_→file access rights"
 * @param "s" "file access rights summary"
 * @returns "{file access right|0..9}"
 * @category "Files"
 */
Public stable method "_→file access rights" is
[
	s : file access rights summary
|
	/* Use 0 as a sentinel to indicate the absence of a right, then discard 0
	 * from the set.
	 */
	{
		if s[1] = ¢r then [owner read] else [0],
		if s[2] = ¢w then [owner write] else [0],
		if s[3] = ¢x then [owner execute] else [0],
		if s[4] = ¢r then [group read] else [0],
		if s[5] = ¢w then [group write] else [0],
		if s[6] = ¢x then [group execute] else [0],
		if s[7] = ¢r then [others read] else [0],
		if s[8] = ¢w then [others write] else [0],
		if s[9] = ¢x then [others execute] else [0]
	} - 0
] : {file access right|0..9};
