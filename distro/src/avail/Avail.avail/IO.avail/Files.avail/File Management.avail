/*
 * File Management.avail
 * Copyright © 1993-2018, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "File Management"
Versions
	"1.2.0 DEV 2019-07-09"
Uses
	"Foundation",
	"File Names"
Names
	/* File moving. */
	"Move_to_(overwrite=_)",
	"Move_to_«,⁇overwriting if necessary»?",
	"a fiber renaming_to_\
		\|«(overwrite=_)»,⁇\
		\|then_,⁇\
		\|else_,⁇\
		\|«forked at priority_»",
	"Rename_to_«(overwrite=_)»",

	/* File copying. */
	"Recursively⁇Copy|copy_to_\
		\|(follow symlinks=_,overwrite=_,copy attributes=_)",
	"Recursively⁇Copy|copy_to_\
		\|«,⁇following symlinks»?\
		\|«,⁇overwriting if necessary»?\
		\|«,⁇copying attributes»?",

	/* File unlinking. */
	"Unlink_(recursive=_,must exist=_,follow symlinks=_)",
	"«Recursively»?Unlink|unlink_«if necessary»?«,⁇following symlinks»?"
Body

Private method "private rename_to_replace existing_then_else_priority_" is
[
	src : string,
	dest : string,
	replace : boolean,
	succeed : []→⊤,
	fail :
		[{
			permission-denied code,
			file-exists code,
			no-file code,
			I/O-error code}ᵀ
		]→⊤,
	priority : byte
|
	Primitive FileRename (e : invalid-path code's type);
	Raise an exception for e
] : fiber→⊤;

/**
 * Rename {@param "src"} to {@param "dest"} asynchronously. If the operation
 * succeeds, then eventually apply {@param "succeed"} in the answered {@type
 * "fiber"}. If the operation fails, then eventually apply {@param "fail"} to
 * the error code in the answered {@type "fiber"}.
 *
 * @method
 *    "a fiber renaming_to_\
 *    \|«(overwrite=_)»,⁇\
 *    \|then_,⁇\
 *    \|else_,⁇\
 *    \|«forked at priority_»"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "optionalReplace" "boolean"
 *        {@method "true"} if an existing destination file should be replaced,
 *        {@method "false"} otherwise. If not specified, then default to
 *        {@method "false"}.
 * @param "succeed" "[]→⊤"
 *        What to do after the rename is successful.
 * @param "fail"
 *        "[{
 *           permission-denied code,
 *           file-exists code,
 *           no-file code,
 *           I/O-error code
 *         }ᵀ]→⊤,
 *        What to do with the error code if renaming fails.
 * @param "optionalPriority" "byte?"
 *        The priority at which to launch the answered {@type "fiber"}. If not
 *        specified, then default to the {@method "_'s⁇priority" priority} of
 *        the {@method "current fiber"}.
 * @returns "fiber→⊤"
 *          The {@type "fiber"} which will apply {@param "succeed"} or {@param
 *          "fail"}, as appropriate.
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @category "Files" "Asynchronous IO"
 */
Public method
	"a fiber renaming_to_\
		\|«(overwrite=_)»,⁇\
		\|then_,⁇\
		\|else_,⁇\
		\|«forked at priority_»"
is
[
	src : file name,
	dest : file name,
	optionalReplace : boolean?,
	succeed : []→⊤,
	fail :
		[{
			permission-denied code,
			file-exists code,
			no-file code,
			I/O-error code
		}ᵀ]→⊤,
	optionalPriority : byte?
|
	private rename src's name to dest's name
		replace existing optionalReplace[1] else [false]
		then succeed
		else fail
		priority optionalPriority[1] else [current fiber's priority]
] : fiber→⊤;

/**
 * Rename {@param "src"} to {@param "dest"} synchronously.
 *
 * @method "Rename_to_«(overwrite=_)»"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "optionalReplace" "boolean"
 *        {@method "true"} if an existing destination file should be replaced,
 *        {@method "false"} otherwise. If not specified, then default to
 *        {@method "false"}.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @raises "permission-denied exception"
 *         If the operation is not permitted.
 * @raises "no-file exception"
 *         If {@param "src"} does not exist.
 * @raises "file-exists exception"
 *         If {@param "dest"} exists but {@param "replace"} is {@method
 *         "false"}.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @category "Files" "Synchronous IO"
 */
Public method "Rename_to_«(overwrite=_)»" is
[
	src : file name,
	dest : file name,
	optionalReplace : boolean?
|
	semName ::= format "rename ‘①’ to ‘②’" with src's name, dest's name;
	sem ::= a semaphore named semName with 0 out of 1 permits;
	killer : exception;
	Ignore: private rename src's name to dest's name
		replace existing optionalReplace[1] else [false]
		then [Signal sem;]
		else
		[
			e : {
				permission-denied code,
				file-exists code,
				no-file code,
				I/O-error code
			}ᵀ
		|
			killer := an exception for e;
			Signal sem;
		]
		priority current fiber's priority;
	Await sem;
	If killer is assigned then [Raise killer];
] : ⊤;

/**
 * Move the {@type "file"} named by {@param "src"} to {@param "dest"}.
 *
 * @method "Move_to_(overwrite=_)"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "overwrite" "boolean"
 *        {@method "true"} if {@param "dest"} should be overwritten if it
 *        exists, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @raises "no-file exception"
 *         If {@param "src"} does not exist.
 * @raises "file-exists exception"
 *         If {@param "dest"} exists, but overwriting is not permitted.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use either of the specified {@type "file
 *         name"}s.
 * @category "Files"
 */
Public method "Move_to_(overwrite=_)" is
[
	src : file name,
	dest : file name,
	overwrite : boolean
|
	[
		s : string,
		d : string,
		o : boolean
	|
		Primitive FileMove (e : {
			invalid-path code,
			no-file code,
			file-exists code,
			I/O-error code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : ⊤ (src's name, dest's name, overwrite);
] : ⊤;

/**
 * Move the {@type "file"} named by {@param "src"} to {@param "dest"}.
 *
 * @method "Move_to_«,⁇overwriting if necessary»?"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "overwrite" "boolean"
 *        {@method "true"} if {@param "dest"} should be overwritten if it
 *        exists, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @raises "no-file exception"
 *         If {@param "src"} does not exist.
 * @raises "file-exists exceptions"
 *         If {@param "dest"} exists, but overwriting is not permitted.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use either of the specified {@type "file
 *         name"}s.
 * @category "Files"
 */
Public method "Move_to_«,⁇overwriting if necessary»?" is
[
	src : file name,
	dest : file name,
	overwrite : boolean
|
	Move src to dest (overwrite = overwrite);
] : ⊤;

/**
 * Copy the {@type "file"} named by {@param "src"} to {@param "dest"}. If
 * {@param "src"} is a directory, then it will be recursively copied.
 *
 * @method
 *    "Recursively⁇Copy|copy_to_\
 *    \|(follow symlinks=_,overwrite=_,copy attributes=_)"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "followSymlinks" "boolean"
 *        {@method "true"} if symbolic links should be followed during the
 *        traversal of the source tree, {@method "false" otherwise}.
 * @param "overwrite" "boolean"
 *        {@method "true"} if files in {@param "dest"} should be overwritten by
 *        files at analogous paths in {@param "src"}, {@method "false"}
 *        otherwise.
 * @param "copyAttributes" "boolean"
 *        {@method "true"} if the file attributes of {@param "src"} should be
 *        copied as faithfully as possible, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @raises "partial-success exception"
 *         If {@param "recursive"} is {@method "true"} and at least one file
 *         could not be copied for any reason.
 * @raises "no-file exception"
 *         If {@param "src"} does not exist.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use either of the specified {@type "file
 *         name"}s.
 * @category "Files"
 */
Public method
	"Recursively⁇Copy|copy_to_(follow symlinks=_,overwrite=_,copy attributes=_)"
is
[
	src : file name,
	dest : file name,
	followSymlinks : boolean,
	overwrite : boolean,
	copyAttributes : boolean
|
	[
		s : string,
		d : string,
		f : boolean,
		o : boolean,
		c : boolean
	|
		Primitive FileCopy (e : {
			invalid-path code,
			partial-success code,
			I/O-error code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : ⊤ (src's name, dest's name, followSymlinks, overwrite, copyAttributes);
] : ⊤;

/**
 * Copy the {@type "file"} named by {@param "src"} to {@param "dest"}. If
 * {@param "src"} is a directory, then it will be recursively copied.
 *
 * @method
 *    "Recursively⁇Copy|copy_to_\
 *    \|«,⁇following symlinks»?\
 *    \|«,⁇overwriting if necessary»?\
 *    \|«,⁇copying attributes»?"
 * @param "src" "file name"
 *        The source {@type "file name"}.
 * @param "dest" "file name"
 *        The destination {@type "file name"}.
 * @param "followSymlinks" "boolean"
 *        {@method "true"} if symbolic links should be followed during the
 *        traversal of the source tree, {@method "false" otherwise}.
 * @param "overwrite" "boolean"
 *        {@method "true"} if files in {@param "dest"} should be overwritten by
 *        files at analogous paths in {@param "src"}, {@method "false"}
 *        otherwise.
 * @param "copyAttributes" "boolean"
 *        {@method "true"} if the file attributes of {@param "src"} should be
 *        copied as faithfully as possible, {@method "false"} otherwise.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If either {@param "src"} or {@param "dest"} cannot be understood as a
 *         path.
 * @raises "partial-success exception"
 *         If {@param "recursive"} is {@method "true"} and at least one file
 *         could not be copied for any reason.
 * @raises "no-file exception"
 *        If {@param "src"} does not exist.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use either of the specified {@type "file
 *         name"}s.
 * @category "Files"
 */
Public method
	"Recursively⁇Copy|copy_to_\
	\|«,⁇following symlinks»?\
	\|«,⁇overwriting if necessary»?\
	\|«,⁇copying attributes»?"
is
[
	src : file name,
	dest : file name,
	followSymlinks : boolean,
	overwrite : boolean,
	copyAttributes : boolean
|
	Recursively copy src to dest (
		follow symlinks = followSymlinks,
		overwrite = overwrite,
		copy attributes = copyAttributes);
] : ⊤;

/**
 * Unlink {@param "fn"}. If no links remaining in the file system to the
 * underlying {@type "file"}, then the {@type "file"} is deleted.
 *
 * @method "Unlink_(recursive=_,must exist=_,follow symlinks=_)"
 * @param "fn" "file name"
 * @param "recursive" "boolean"
 *        Unlink {@param "fn"} recursively.
 * @param "requireExistence" "boolean"
 *        {@method "true"} if {@param "fn"} must name an existing file,
 *        {@method "false"} otherwise.
 * @param "followSymlinks" "boolean"
 *        {@method "true"} if symbolic links should be followed during
 *        traversal, {@method "false"} otherwise. Applies to recursive unlinking
 *        only.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "partial-success exception"
 *         If {@param "recursive"} is {@method "true"} and at least one file
 *         could not be unlinked for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @raises "no-file exception"
 *         If {@param "dontRequireExistence"} is {@method "false"} and {@param
 *         "fn"} does not exist.
 * @raises "directory-not-empty exception"
 *         If {@param "recursive"} is {@method "false"} and {@param "fn"} names
 *         a non-empty directory.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @category "Files"
 */
Public method "Unlink_(recursive=_,must exist=_,follow symlinks=_)" is
[
	fn : file name,
	recursive : boolean,
	requireExistence : boolean,
	followSymlinks : boolean
|
	[
		r : boolean,
		s : string,
		d : boolean,
		f : boolean
	|
		Primitive FileUnlink (e : {
			invalid-path code,
			partial-success code,
			no-file code,
			directory-not-empty code,
			I/O-error code,
			permission-denied code}ᵀ);
		Raise an exception for e
	] : ⊤ (recursive, fn's name, requireExistence, followSymlinks);
] : ⊤;

/**
 * Unlink {@param "fn"}. If no links remaining in the file system to the
 * underlying {@type "file"}, then the {@type "file"} is deleted.
 *
 * @method
 *    "«Recursively»?Unlink|unlink_«if necessary»?«,⁇following symlinks»?"
 * @param "recursive" "boolean"
 *        Unlink {@param "fn"} recursively.
 * @param "fn" "file name"
 * @param "dontRequireExistence" "boolean"
 *        {@method "true"} if {@param "fn"} need not name an existing file,
 *        {@method "false"} if it must.
 * @param "followSymlinks" "boolean"
 *        {@method "true"} if symbolic links should be followed during
 *        traversal, {@method "false"} otherwise. Applies to recursive unlinking
 *        only.
 * @returns "⊤"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "partial-success exception"
 *         If {@param "recursive"} is {@method "true"} and at least one file
 *         could not be unlinked for any reason.
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @raises "no-file exception"
 *         If {@param "dontRequireExistence"} is {@method "false"} and {@param
 *         "fn"} does not exist.
 * @raises "directory-not-empty exception"
 *         If {@param "recursive"} is {@method "false"} and {@param "fn"} names
 *         a non-empty directory.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @category "Files"
 */
Public method
	"«Recursively»?Unlink|unlink_«if necessary»?«,⁇following symlinks»?"
is
[
	recursive : boolean,
	fn : file name,
	dontRequireExistence : boolean,
	followSymlinks : boolean
|
	Unlink fn (
		recursive = recursive,
		must exist = ¬dontRequireExistence,
		follow symlinks = followSymlinks);
] : ⊤;
