/*
 * File Iterators.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "File Iterators"
Versions
	"Avail-1.6.0"
Extends
	"Data Abstractions" =
	(
		"_'s⁇position",
		"_'s⁇position:=_"
	),
	"Primitives" =
	(
		"Using|using_,⁇do_",
		"_is closed",
		"_is open"
	)
Uses
	"Common" =
	(
		-"Write_to_",
		…
	),
	"Data Abstractions" = (-"_'s⁇element type", …),
	"File Access Rights",
	"File Names",
	"File Open Options",
	"Foundation" = (-"_'s⁇element type", …),
	"Primitives"
Names
	/* Types. */
	"file iterator",
	"file reader",
	"file writer",
	"file reader/writer",

	/* Constructors. */
	"a_for_\
		\|«aligning buffers to_bytes»\
		\|«buffering at most_bytes»\
		\|«with options_»\
		\|«with file access rights_»",

	/* Other file operations. */
	"Truncate_to_bytes⁇"
Body

"file position" is a new field atom;
"alignment" is a new field atom;
"element source" is a new field atom;

/* File iterators provide buffered random access to external files.  Buffer
 * management is a collaboration between the Avail library and the virtual
 * machine.
 *
 * The parent random access buffered iterator abstraction defines the ability
 * to position the iterator at any natural number position.  Unaligned reads and
 * writes are then supported for the subtypes file reader and file writer,
 * respectively.  However, all reads are padded in the VM to the containing
 * alignment boundaries.  When an unaligned write is requested, an attempt is
 * first made to locate cached buffers with which to pad the write out to the
 * containing alignment boundaries.  If such buffers are not available and if
 * the operating system is unable to supply such buffers readily, an unaligned
 * write will simply take longer as the OS must first fetch any pages being
 * partially written.
 *
 * To mitigate this cost, a best effort is made to perform aligned writes any
 * time this is possible.  Some libraries might read buffers preemptively when
 * starting to write to a page, but Avail does not, under the assumption that by
 * the time the buffer is ready to be flushed, it is likely that the entire page
 * will be overwritten anyhow.
 *
 * A file writer may be created with a maximum buffer amount, which determines
 * how big a dirty buffer may be before being evicted to disk.  Since the buffer
 * need not be aligned (at either end), the dirty buffer is only flushed up to
 * the last alignment boundary, leaving just the residue, if any, in the buffer
 * (clearing the dirty flag only if there is no residue).
 *
 * As for reading, the buffer will be opportunistically populated:  If the
 * initial buffer being requested is in the cache, then as many cached buffers
 * up to the requested read size will be (efficiently) concatenated and
 * returned.  However, if the initial buffer being requested is not in the
 * cache, then an OS read is performed up to the lesser of the end of the
 * requested range or the maximum allowed VM read size or the start of the next
 * buffer that is actually in the cache.  This avoids reading cached pages while
 * still providing efficient bulk transfers for cold data.
 *
 * Cache coherence is explicitly maintained via "Refresh_" (a read barrier) and
 * "Synchronize_" (a write barrier).  Note that all writes first modify the
 * cache, and then the underlying file.  The LRUCache of pages is global,
 * spanning all open files.  Each file also maintains a weak set of page keys
 * (the same keys used in the global LRUCache) that are specific to that file,
 * for efficient eviction during a "Refresh_" or "Close_".
 */

/**
 * A file iterator provides streaming access to a backing {@type "file"}.  Its
 * subtypes {@type "file reader"}, {@type "file writer"}, and
 * {@type "file reader/writer"} are specializations that support reading
 * writing, or both, respectively.
 *
 * @type "file iterator"
 * @supertype "positionable buffered iterator"
 * @category "Files" "Iterators"
 */
Public class "file iterator"
	extends sizable random access buffered iterator
	with fields
		alignment : natural number,
		element type : byte's type,
		element source : file;

/**
 * A file reader buffers bytes obtained from a backing {@type "readable file"}.
 *
 * @type "file reader"
 * @supertype "file iterator"
 * @category "Files" "Readers"
 */
Public explicit class "file reader"
	extends file iterator ∩ random access buffered reader
	with field
		element source : readable file;

/**
 * A file writer buffers bytes obtained from a backing {@type "writable file"}.
 *
 * @type "file writer"
 * @supertype "file iterator"
 * @category "Files" "Writers"
 */
Public class "file writer"
	extends file iterator ∩ random access buffered writer
	with field
		element source : writable file;

/**
 * A file iterator buffers bytes obtained from a backing {@type
 * "readable,⁇writable file"}.
 *
 * @type "file reader/writer"
 * @supertype "file reader"
 * @supertype "file writer"
 * @category "Files" "Readers" "Writers"
 */
Public class "file reader/writer"
	extends file reader ∩ file writer;

Method "`|_`|" is
[
	fileIterator : file iterator
|
	fileIterator's element source's size
];

_privateReadBuffer ::=
[
	fileReader : file reader
|
	buffer : byte*;
	readComplete ::= a semaphore named "read is complete" with 0 permits;
	readFiber ::= a fiber reading fileReader's maximum buffer size bytes
		at fileReader's position
		from fileReader's element source
		on success doing
			[
				theBytes : byte*
			|
				buffer := theBytes;
				Signal readComplete;
			]
		on failure doing
			[
				error : {I/O-error code}ᵀ
			|
				/* All we know is that I/O failed. */
				Signal readComplete;
			];
	Await readComplete;
	If buffer is unassigned then [Raise an I/O exception];
	buffer
] : byte*;

file reader's fetch current buffer method is _privateReadBuffer;

file reader/writer's fetch current buffer method is
[
	aFileReaderWriter : file reader/writer
|
	Assert: ¬ aFileReaderWriter's buffer is dirty;
	_privateReadBuffer(aFileReaderWriter)
];

Private method "Private file write_into_at_" is
[
	bytes : byte+,
	fileWriter : file writer,
	start : natural number
|
	writeComplete ::= a semaphore named "write is complete" with 0 permits;
	success : boolean;
	writeFiber ::= a fiber writing bytes
		at start
		to fileWriter's element source
		on success doing
			[
				success := true;
				Signal writeComplete;
			]
		on failure doing
			[
				error : {I/O-error code}ᵀ
			|
				/* All we know is that I/O failed. */
				success := false;
				Signal writeComplete;
			];
	Await writeComplete;
	Unless success then
	[
		Raise an I/O exception
	];
];

_privateWriteBuffer ::=
[
	fileWriter : file writer
|
	If fileWriter's buffer is dirty then
	[
		Assert: |fileWriter's buffer| > 0;
		Private file
			write fileWriter's buffer ?→ byte+
			into fileWriter
			at fileWriter's buffer start;
		fileWriter's buffer is dirty := false;
	];
] : ⊤;

file writer's exit buffer method is _privateWriteBuffer;

/**
 * Construct and answer a {@type "readable file iterator"} that is open on the
 * file named by {@param "fn"}.
 *
 * @method "a_for_«aligning buffers to_bytes»«with options_»«with file access rights_»"
 * @param "fileIteratorType" "file iterator's type"
 * @param "fn" "file name"
 *        The {@method "file name"} of the target file.
 * @param "optionalAlignment" "natural number?"
 *        If specified, the alignment boundary at which to align writes.  For
 *        optimal performance and safety, this should be a multiple of both the
 *        operating system's block size and the physical device's minimum block
 *        transfer size.  If not specified, a default value is used.
 * @param "optionalMaximumBuffer" "natural number?"
 *        If specified, the maximum number of bytes to buffer from/for the
 *        underlying {@type "file"}. If not specified, a default value is used.
 *        Writes will still happen with end-boundaries that are multiples of the
 *        optionalAlignment, but only when the buffer becomes larger than the
 *        optionalMaximumBuffer size (or when a write is neither contiguous with
 *        nor overlapping the existing buffer).
 * @param "optionSet" "{open option|}?"
 *        The optional set of {@type "open option" options} with which to open
 *        the file handle.  The subtype of file iterator type that is
 * @param "optionalAccessRights" "{file access right|}?"
 *        The optional {@type "set"} of {@type "file access right"}s to supply
 *        at file handle opening time, which controls the initial access rights
 *        of the file only when a new file is constructed.
 * @returns "file iterator"
 * @raises "permission-denied exception"
 *         If permission is denied to use the specified {@type "file name"}.
 * @raises "I/O exception"
 *         If an I/O error occurs for any reason.
 * @category "Files" "Iterators" "Readers" "Writers"
 */
Public method "a_for_\
	\|«aligning buffers to_bytes»\
	\|«buffering at most_bytes»\
	\|«with options_»\
	\|«with file access rights_»" is
[
	fileIteratorType : file iterator's type,
	fn : file name,
	optionalAlignment : natural number?,
	optionalMaximumBuffer : natural number?,
	optionSet : {open option|}?,
	optionalAccessRights : {file access right|}?
|
	originalOptions ::= optionSet[1] else [∅];
	options : {open option|} := originalOptions - append;
	If fileIteratorType ⊆ reader then [options := options ∪ {read};];
	If fileIteratorType ⊆ writer then [options := options ∪ {write};];
	proposedAlignment ::= optionalAlignment[1] else [0];
	rawFile ::= fn opened
		with alignment proposedAlignment
		with options options ?→ {open option|1..}
		with file access rights optionalAccessRights[1]
			else [default file access rights];
	maximumBufferSize ::= optionalMaximumBuffer[1] else [32768];
	actualAlignment ::= rawFile's alignment;
	Assert: actualAlignment ≤ maximumBufferSize;
	theIterator ::= a fileIteratorType with
		element type ::= byte,
		alignment ::= actualAlignment,
		element source ::= rawFile,
		maximum buffer size ::= maximumBufferSize,
		position variable :=
			if append ∈ originalOptions then [rawFile's size + 1] else [1],
		buffer := <>,
		position in buffer := 1;
	Cast theIterator into
	[
		theWriter : file writer
	|
		theWriter's buffer is dirty := false;
	]
	else [];
	theIterator
] : file iterator;

Semantic restriction "a_for_\
	\|«aligning buffers to_bytes»\
	\|«buffering at most_bytes»\
	\|«with options_»\
	\|«with file access rights_»" is
[
	fileIteratorMeta : file iterator's type's type,
	fnType : file name's type,
	optionalAlignmentType : natural number?'s type,
	optionalMaximumBufferType : natural number?'s type,
	optionSetType : {open option|}?'s type,
	optionalAccessRightsType : {file access right|}?'s type
|
	fileIteratorMeta's instance
];

/**
 * Is the {@type "file"} underlying the specified {@type "file iterator"} open?
 *
 * @method "_is open for side effects"
 * @param "anIterator" "file iterator"
 * @returns "boolean"
 *          {@method "true"} if {@param "anIterator"} is open, {@method "false"}
 *          otherwise.
 * @category "Files" "Iterators"
 */
Method "_is open" is
[
	anIterator : file iterator
|
	anIterator's element source is open
] : boolean;

/**
 * Is the {@type "file"} underlying the specified {@type "file iterator"}
 * closed?
 *
 * @method "_is closed"
 * @param "anIterator" "file iterator"
 * @returns "boolean"
 *          {@method "true"} if {@param "anIterator"} is closed, {@method
 *          "false"} otherwise.
 * @category "Files" "Iterators"
 */
Method "_is closed" is
[
	anIterator : file iterator
|
	anIterator's element source is closed
] : boolean;

/**
 * Close the {@type "file"} underlying the specified {@type "file iterator"}.
 *
 * @method "Close_"
 * @param "anIterator" "file iterator"
 * @returns "⊤"
 * @raises "file-closed exception"
 *         If {@param "anIterator"} has already been closed.
 * @category "Files" "Iterators"
 */
Method "Close_" is
[
	anIterator : file iterator
|
	Close anIterator's element source;
];

/**
 * Close the {@type "file"} underlying the specified {@type "file writer"}.
 * {@method "Synchronize_" Synchronize} with the file system before closing.
 *
 * @method "Close_"
 * @param "anIterator" "file iterator"
 * @returns "⊤"
 * @raises "file-closed exception"
 *         If {@param "anIterator"} has already been closed.
 * @category "Files" "Writers"
 */
Method "Close_" is
[
	aWriter : file writer
|
	Synchronize aWriter;
	Close aWriter's element source;
];

/**
 * Perform the specified {@type "function" action}, passing {@param
 * "anIterator"} as the argument. Whether the action completes normally or
 * raises an exception, {@method "Close_" close} {@param "anIterator"}.
 *
 * @method "Using|using_,⁇do_"
 * @param "anIterator" "file iterator"
 *        A file iterator, typically opened very near the send of this method.
 *        The argument position works especially well.
 * @param "action" "[⊥]→⊤"
 *        A function to apply to {@param "anIterator"}.
 * @returns "⊤"
 *          The answer produced by applying {@param "action"} to {@param
 *          "anIterator"}.
 * @category "Files" "Iterators"
 */
Method "Using|using_,⁇do_" is
[
	anIterator : file iterator,
	action : [⊥]→⊤
|
	Guard [action(anIterator);]
	ensure [Close anIterator;];
] : ⊤;

/**
 * @method "Using|using_,⁇do_"
 * @restricts "file iterator's type"
 * @restricts "[⊥]→⊤'s type"
 */
Semantic restriction "Using|using_,⁇do_" is
[
	anIterator : file iterator's type,
	action : [⊥]→⊤'s type
|
	If anIterator ⊈ action[1] then
	[
		Reject parse, expected:
			format
				"function to accept the specified file iterator \
				\|(but “①” is not a subtype of “②”)"
			with anIterator, action[1]
	];
	action's return type
];

/**
 * Write the elements of the specified {@type "tuple"} to the supplied {@type
 * "buffered writer"}. This operation should be more efficient than repeatedly
 * sending {@method "_'s⁇current element:=_"} and {@method "Advance_"}.
 *
 * <p>
 * After the write to the buffer, we only flush it if it crosses an alignment
 * boundary; in that case, we flush up to the <em>last</em> alignment boundary
 * that was crossed.  In the continuous case, this should allow a sequence of
 * writes to avoid having to fetch buffers from disk prior to writing.
 * </p>
 *
 * @method "Write_to_"
 * @param "newElements" "tuple"
 * @param "aWriter" "file writer"
 * @returns "⊤"
 * @category "Files" "Writers"
 */
Method "Write_to_" is
[
	newElements : tuple,
	aWriter : file writer
|
	oldPosition ::= aWriter's position;
	If |newElements| > 0 then
	[
		oldBuffer : tuple := aWriter's buffer;
		startInBuffer : integer := aWriter's position in buffer;
		If ¬ aWriter's buffer is dirty then
		[
			/* There's no point in keeping clean data next to the dirty data.
			 * If we did, we would have to write the clean data whenever the
			 * dirty data was flushed, which would cost us spurious writes.
			 * Hopefully the backing artifact or OS or VM will cache data to
			 * allow unaligned writes-after-reads to still be efficient.
			 */
			aWriter's buffer start := aWriter's position;
			↑aWriter's position in buffer ?= 1;
			↑aWriter's buffer ?= <>;
			oldBuffer := <>;
			startInBuffer := 1;
		]
		else if ¬ 1 ≤ startInBuffer ≤ |oldBuffer| + 1 then
		[
			/* This write does not extend or overwrite the current buffer, so
			 * flush the entire existing buffer before starting the new write.
			 */
			Private file
				write aWriter's buffer ?→ byte+
				into aWriter
				at aWriter's buffer start;
			aWriter's buffer is dirty := false;
			aWriter's buffer start := aWriter's position;
			↑aWriter's position in buffer ?= 1;
			↑aWriter's buffer ?= <>;
			oldBuffer := <>;
			startInBuffer := 1;
		];
		Assert: 1 ≤ startInBuffer ≤ |oldBuffer| + 1;
		/* Determine if we will exceed the maximum buffer size. */
		naturalStartInBuffer ::= startInBuffer ?→ natural number;
		newBuffer ::= oldBuffer
			[
				naturalStartInBuffer ..
				(naturalStartInBuffer + |newElements| - 1) min |oldBuffer|
			] → newElements;
		newBufferSize ::= |newBuffer|;
		If newBufferSize ≥ aWriter's maximum buffer size then
		[
			/* Flush the buffer up to the last alignment boundary.  Just for
			 * safety, if the backing file has an alignment that is bigger than
			 * the maximum buffer size (which should be prevented at creation
			 * time), then don't flush until we've actually crossed an alignment
			 * boundary.
			 */
			aFile ::= aWriter's element source;
			newPosition ::= oldPosition + |newElements|;
			endOfBuffer ::= aWriter's buffer start + newBufferSize - 1;
			residue ::= (endOfBuffer mod aFile's alignment) max 0;
			toWrite ::= (newBufferSize - residue) ?→ natural number;
			Private file
				write newBuffer[1 .. toWrite] ?→ byte+
				into aWriter
				at aWriter's buffer start;
			aWriter's buffer is dirty := residue ≠ 0;
			aWriter's buffer start := aWriter's buffer start + toWrite;
			↑aWriter's position in buffer ?=
				newPosition - aWriter's buffer start + 1;
			↑aWriter's buffer ?= newBuffer[toWrite + 1..];
		]
		else
		[
			/* Just keep it in the buffer. */
			↑aWriter's buffer ?= newBuffer;
			↑aWriter's position in buffer ?=
				naturalStartInBuffer + |newElements|;
			aWriter's buffer is dirty := true;
		];
	];
	Assert: aWriter's position = oldPosition + |newElements|;
];


/**
 * Discard any buffers cached on behalf of this file, including the current
 * buffer.  This is intended to expose the cache coherence protocol underlying
 * file buffering in Avail.  After a process completes a {@method
 * "Synchronize_"} to a file, a subsequent process may {@method "Refresh_"} and
 * then read the content written by the first process.  It's undefined whether
 * any particular read will see a previous write if an intervening Synchronize
 * by the writer and Refresh by the reader are not performed.  Note that
 * closing a writable file implicitly synchronizes it, and opening a file for
 * reading starts with an implicit Refresh.
 *
 * @method "Refresh_"
 * @param "aReader" "file reader"
 * @returns "⊤"
 * @category "Files" "Readers"
 */
Method "Refresh_" is
[
	aReader : file reader
|
	Refresh aReader's element source with file system;
	Refresh (aReader :: random access buffered reader);
] : ⊤;

/**
 * Wait for all outstanding writes on this iterator to complete writing to the
 * physical medium associated with the file's filesystem.
 *
 * @method "Synchronize_"
 * @param "anIterator" "file writer"
 * @returns "⊤"
 * @raises "I/O exception"
 * @category "Files" "Writers" "Synchronous IO"
 */
Method "Synchronize_" is
[
	aFileWriter : file writer
|
	/* First, flush the buffer if it's dirty. */
	_privateWriteBuffer(aFileWriter);
	/* Now abandon the buffer. */
	Synchronize (aFileWriter :: buffered writer);
	/* Finally, wait for the file system to say it has synchronized the file. */
	syncComplete ::= a semaphore named "sync is complete" with 0 permits;
	hadError : boolean := false;
	readFiber ::= a fiber
		synchronizing aFileWriter's element source with file system,
		then
		[
			Signal syncComplete;
		]
		else
		[
			error : {I/O-error code}ᵀ
		|
			hadError := true;
			Signal syncComplete;
		]
		priority current fiber's priority;
	Await syncComplete;
	If hadError then [Raise an I/O exception];
];

/**
 * Shorten the {@type "file writer"} to the given size.  If the file is already
 * that size or smaller, do nothing.
 *
 * @method "Truncate_to_bytes⁇"
 * @param "anIterator" "file writer"
 * @param "newSize" "whole number"
 * @returns "⊤"
 * @category "Files" "Writers"
 */
Method "Truncate_to_bytes⁇" is
[
	aFileWriter : file writer,
	newSize : whole number
|
	truncationComplete ::=
		a semaphore named "truncation is complete" with 0 permits;
	hadError : boolean := false;
	readFiber ::= a fiber
		truncating aFileWriter's element source
		to newSize bytes
		then
		[
			Signal truncationComplete;
		]
		else
		[
			error : {I/O-error code}ᵀ
		|
			hadError := true;
			Signal truncationComplete;
		]
		priority current fiber's priority;
	Await truncationComplete;
	If hadError then [Raise an I/O exception];
];
