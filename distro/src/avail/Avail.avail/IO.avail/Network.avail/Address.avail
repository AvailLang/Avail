/*
 * Address.avail
 * Copyright © 1993-2020, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Address"
Versions
	"1.4.0"
Uses
	"Foundation"
Names
	/* Types. */
	"IP address",
	"IPv4 address",
	"IPv6 address",
	"socket address",

	/* General IP address construction. */
	"an IP address from_",

	/* General socket address construction. */
	"a socket address from_and_",

	/* IPv4 address construction. */
	"IPv4 lexer",
	"…!",

	/* IPv6 address construction. */
	"IPv6««…#§»?«…§»?‡:»",

	/* Socket address construction. */
	"_:…#",
	"[_]:…#",

	/* Accessors. */
	"_'s⁇address",
	"_'s⁇octets",
	"_'s⁇port"
Body

"octets" is a new field atom;

/**
 * An Internet Protocol (IP) address is a 32- or 128-bit unsigned integer label
 * that is used to identify a device participating in an IP network.
 *
 * @type "IP Address"
 * @category "IO" "IP" "Networking"
 */
Public class "IP address" extends object
	with field
		public octets : <byte…|4..16>;

/**
 * An Internet Protocol version 4 (IPv4) address is a 32-bit unsigned integer
 * label that is used to identify a device participating in an IPv4 network.
 *
 * @type "IPv4 address"
 * @supertype "IP address"
 * @category "IO" "IP" "Networking"
 */
Public class "IPv4 address" extends IP address
	with field
		octets : <byte…|4>;

/**
 * @method "“_”"
 * @param "addr" "IPv4 address"
 * @returns "nonempty string"
 * @category "IO" "IP" "Networking"
 */
Method "“_”" is
[
	addr : IPv4 address
|
	format "“①”.“②”.“③”.“④”" with unchecked addr's octets
] : nonempty string;

/**
 * Construct and answer an {@type "IP address"} from the specified {@method
 * "tuple"} of {@method "byte"}s.
 *
 * @method "an IP address from_"
 * @param "o" "<byte…|4..16>"
 * @category "IO" "IP" "Networking"
 * @returns "IPv4 address"
 */
Public stable abstract method "an IP address from_"
	is [<byte…|4..16>]→IP address;

/**
 * @method "an IP address from_"
 * @restricts "<byte…|4..16>'s type"
 * @category "IO" "IP" "Networking"
 */
Semantic restriction "an IP address from_" is
[
	o : <byte…|4..16>'s type
|
	sizes ::= ||o||;
	If ¬(sizes ⊆ [4..4] ∨ sizes ⊆ [16..16]) then
	[
		Reject parse, expected:
			"an IP address tuple to comprise either 4 or 16 bytes"
	];
	extend IP address with octets : o
];

/**
 * @method "an IP address from_"
 * @param "o" "<byte…|4>"
 * @category "IO" "IP" "Networking"
 * @returns "IPv4 address"
 */
Method "an IP address from_" is
[
	o : <byte…|4>
|
	an IPv4 address with octets ::= o
] : IPv4 address;

/**
 * Upon encountering an Arabic numeral, attempt to scan an {@type "IPv4
 * address"} in dotted decimal notation.
 *
 * @lexer "IPv4 lexer"
 * @param "source" "string"
 *        The complete source text.
 * @param "position" "real source position"
 *        The position of the leading {@type "character"}.
 * @param "line" "real source line number"
 *        The line number of the leading {@type "character"}.
 * @returns "{token+|}"
 *          The possible lexes discovered at {@code "position"}, potentially
 *          conforming to a single {@type "IPv4 address"} {@type "literal
 *          token"}.
 */
Lexer $"IPv4 lexer"
when [c : character | c is an Arabic numeral]
is
[
	source : string,
	firstOctetPosition : real source position,
	line : real source line number
|
	$body : {token+|};
	i : real source position := firstOctetPosition;
	size ::= |source|;
	While i ≤ size ∧ source[i] is an Arabic numeral do [i++;];
	Exit body with ∅ if i > size ∨ source[i] ≠ ¢.;
	firstOctetText ::= source[firstOctetPosition..i-1];

	secondOctetPosition ::= i + 1;
	Do [i++;] while i ≤ size ∧ source[i] is an Arabic numeral;
	Exit body with ∅ if i > size ∨ source[i] ≠ ¢.;
	secondOctetText ::= source[secondOctetPosition..i-1];

	thirdOctetPosition ::= i + 1;
	Do [i++;] while i ≤ size ∧ source[i] is an Arabic numeral;
	Exit body with ∅ if i > size ∨ source[i] ≠ ¢.;
	thirdOctetText ::= source[thirdOctetPosition..i-1];

	fourthOctetPosition ::= i + 1;
	Do [i++;] while i ≤ size ∧ source[i] is an Arabic numeral;
	If i = fourthOctetPosition then
	[
		/* It's worth reporting this expectation if we saw three numbers.
		 * Less would more likely be floating point numbers. */
		Reject parse, expected:
			"an IPv4 address to comprise four (4) octets (but only \
			\|three (3) were specified)"
	];
	fourthOctetText ::= source[fourthOctetPosition..i-1];

	cast
		map each x of
			<
				firstOctetText,
				secondOctetText,
				thirdOctetText,
				fourthOctetText
			>
		through [x (base 10)]
	into
	[
		octets : <byte…|4>
	|
		{<
			`an IPv4 address with octets ::= octets`
				(source[firstOctetPosition..i-1])
				@ firstOctetPosition:line
		>}
	]
	else
	[
		Reject parse, expected:
			"each octet of an IPv4 address to be [0..255]"
	]
];

Public macro "…!" is
[
	tokenPhrase : literal phrase ⇒ (literal token ⇒ IPv4 address)
|
	‘tokenPhrase's token's value's value’
];

/**
 * An Internet Protocol version 6 (IPv6) address is a 128-bit unsigned integer
 * label that is used to identify a device participating in an IPv6 network.
 *
 * @type "IPv6 address"
 * @supertype "IP address"
 * @category "IO" "IP" "Networking"
 */
Public class "IPv6 address" extends object
	with field
		octets : <byte…|16>;

/**
 * @method "an IP address from_"
 * @param "o" "<byte…|16>"
 * @returns "IPv6 address"
 * @category "IO" "IP" "Networking"
 */
Method "an IP address from_" is
[
	o : <byte…|16>
|
	an IPv6 address with octets ::= o
] : IPv6 address;

/**
 * Construct and answer an {@type "IPv6 address"} using the recommended textual
 * representation.
 *
 * @method "IPv6««…#§»?«…§»?‡:»"
 * @param "hexadecitets"
 *        "list phrase⇒<<(literal token⇒whole number)?, token?…|1..2>…|3..8>"
 * @returns "literal phrase ⇒ IPv6 address"
 * @category "IO" "IP" "Networking"
 */
Public macro "IPv6««…#§»?«…§»?‡:»" is
[
	hexadecitets :
		list phrase⇒<<(literal token⇒whole number)?, token?…|1..2>…|1..8>
|
	hexadecituple ::= hexadecitets's expressions
		?→ <list phrase ⇒ <token?, token?…|1..2>…|1..8>;
	tetPhrase ::= hexadecituple's last;
	tetTuple ::= tetPhrase's expressions
		?→ <list phrase ⇒ (token?), list phrase ⇒ (token?)…|1..2>;
	numPhrase ::= tetTuple[1];
	numTuple ::= numPhrase's expressions ?→ (literal phrase ⇒ token)?;
	hexadecitet ::= numTuple[1]'s token's lexeme;
	Unless try [0 ≤ hexadecitet (base 16) < 65535] else [false] then
	[
		Reject parse, expected:
			format
				"a hexadecimal token representing a value between 0 and ffff \
				\|(not “①”)"
			with hexadecitet
	];
],
[
	hexadecitets :
		list phrase⇒<<(literal token⇒whole number)?, token?…|1..2>…|1..8>
|
	hexadecituple ::= hexadecitets's expressions
		?→ <list phrase ⇒ <token?, token?…|1..2>…|1..8>;
	tetPhrase ::= hexadecituple's last;
	tetTuple ::= tetPhrase's expressions
		?→ <list phrase ⇒ (token?), list phrase ⇒ (token?)…|1..2>;
	alphaPhrase ::= tetTuple[2];
	alphaTuple ::= alphaPhrase's expressions ?→ (literal phrase ⇒ token)?;
	hexadecitet ::= alphaTuple[1]'s token's lexeme;
	Unless try [0 ≤ hexadecitet (base 16) < 65535] else [false] then
	[
		Reject parse, expected:
			format
				"a hexadecimal token representing a value between 0 and ffff \
				\|(not “①”)"
			with hexadecitet
	];
],
[
	hexadecitets :
		list phrase⇒<<(literal token⇒whole number)?, token?…|1..2>…|3..8>
|
	/* TODO: [TLS/MvG] This mechanism doesn't yet handle the case of xx::, ::xx,
	 * or ::. For cases #1 and #3, we will actually need a new parse instruction
	 * to manipulate the marker stack (because an alternating repetition cannot
	 * end with a separator currently).
	 */
	gapIndex : natural number;
	hexadecituple ::= hexadecitets's expressions
		?→ <list phrase ⇒ <token?, token?…|1..2>…|1..8>;
	octets : byte* := <>;
	For each tetPhrase, index of hexadecituple do
	[
		tetTuple ::= tetPhrase's expressions
			?→ <list phrase ⇒ (token?), list phrase ⇒ (token?)…|1..2>;
		firstPhrase ::= tetTuple[1];
		firstTuple ::= firstPhrase's expressions ?→ (literal phrase⇒token)?;
		secondPhrase ::= tetTuple[2];
		secondTuple ::= secondPhrase's expressions ?→ (literal phrase⇒token)?;
		If firstTuple is empty ∧ secondTuple is empty then
		[
			If gapIndex is assigned then
			[
				Reject parse, expected:
					"only one elision in an IPv6 address"
			];
			/* This index is relative to the output tuple, so scale
			 * appropriately.
			 */
			gapIndex := index << 1;
			octets ++= 2 of 0;
		]
		else
		[
			first ::= if firstTuple is empty
				then [""]
				else [firstTuple[1]'s token's lexeme];
			second ::= if secondTuple is empty
				then [""]
				else [secondTuple[1]'s token's lexeme];
			hex ::= first ++ second;
			value ::= hex (base 16) ?→ whole number;
			octets ++= <(value >> 8) bit∧ 255, value bit∧ 255>;
		];
	];
	If gapIndex is assigned then
	[
		gapSize ::= 8 - |hexadecituple| + 1;
		/* The gap is relative to the output tuple, so scale appropriately. */
		gap ::= (gapSize << 1) of 0;
		octets := eject octets[gapIndex..gapIndex+1]→gap;
	];
	If |octets| ≠ 16 then
	[
		Reject parse, expected:
			"IPv6 address to comprise 16 octets"
	];
	‘cast octets into [t : <byte…|16> | an IPv6 address with octets ::= t]’
];

"address" is a new field atom;
"port" is a new field atom;

/**
 * A socket address combines an {@type "IP address"} with a port number.
 *
 * @type "socket address"
 * @category "IO" "Sockets" "Networking"
 */
Public class "socket address" extends object
	with field
		public address : IP address,
		public port : [0..65535];

/**
 * Construct and answer a {@type "socket address"} from the specified {@method
 * "tuple"} of {@method "byte"}s and port number
 *
 * @method "a socket address from_and_"
 * @param "o" "<byte…|4..16>"
 * @param "portNumber" "[0..65535]"
 * @returns "socket address"
 * @category "IO" "Networking" "Sockets"
 */
Public stable abstract method "a socket address from_and_"
	is [<byte…|4..16>, [0..65535]]→socket address;

/**
 * @method "a socket address from_and_"
 * @restricts "<byte…|4..16>'s type"
 * @restricts "[0..65535]'s type"
 */
Semantic restriction "a socket address from_and_" is
[
	o : <byte…|4..16>'s type,
	portNumber : [0..65535]'s type
|
	extend socket address with
		address : (extend IP address with octets : o),
		port : portNumber
];

/**
 * @method "a socket address from_and_"
 * @param "o" "<byte…|5..13>"
 * @param "portNumber" "[0..65535]"
 * @returns "⊥"
 * @category "IO" "Networking" "Sockets"
 */
Method "a socket address from_and_" is
[
	o : <byte…|5..13>,
	portNumber : [0..65535]
|
	Raise an incorrect-argument-type exception
] : ⊥;

/**
 * @method "a socket address from_and_"
 * @param "o" "<byte…|4>"
 * @param "portNumber" "[0..65535]"
 * @returns "socket address"
 * @category "IO" "Networking" "Sockets"
 */
Method "a socket address from_and_" is
[
	o : <byte…|4>,
	portNumber : [0..65535]
|
	a socket address with
		address ::= an IPv4 address with octets ::= o,
		port ::= portNumber
] : socket address;

/**
 * @method "a socket address from_and_"
 * @param "o" "<byte…|16>"
 * @param "portNumber" "[0..65535]"
 * @returns "socket address"
 * @category "IO" "Networking" "Sockets"
 */
Method "a socket address from_and_" is
[
	o : <byte…|16>,
	portNumber : [0..65535]
|
	a socket address with
		address ::= an IPv6 address with octets ::= o,
		port ::= portNumber
] : socket address;

/**
 * Construct and answer an {@type "IPv4 address"} using the standard dotted
 * decimal notation.
 *
 * @method "_:…#"
 * @param "addr" "literal phrase ⇒ IPv4 address"
 * @param "port" "literal phrase ⇒ (literal token ⇒ [0..65535])"
 * @returns "literal phrase ⇒ socket address"
 * @category "IO" "Networking" "Sockets"
 */
Public macro "_:…#" is
[
	addr : literal phrase ⇒ IPv4 address,
	port : literal phrase ⇒ (literal token ⇒ [0..65535])
|
	‘a socket address with
		address ::= addr's token's value,
		port ::= port's token's value's value’
];

/**
 * Construct and answer an {@type "IPv6 address"} using the standard dotted
 * decimal notation.
 *
 * @method "[_]:…#"
 * @param "addr" "literal phrase ⇒ IPv6 address"
 * @param "port" "literal phrase ⇒ (literal token ⇒ [0..65535])"
 * @returns "literal phrase ⇒ socket address"
 * @category "IO" "Networking" "Sockets"
 */
Public macro "[_]:…#" is
[
	addr : literal phrase ⇒ IPv6 address,
	port : literal phrase ⇒ (literal token ⇒ [0..65535])
|
	‘a socket address with
		address ::= addr's token's value,
		port ::= port's token's value's value’
];
