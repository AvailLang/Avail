/*
 * Genders.avail
 * Copyright © 1993-2020, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Genders"
Versions
	"1.4.0"
Uses
	"Avail",
	"Common",
	"Test Suites"
Names
	/* Genders. */
	"gender",
		/* fields */
		"grammatical gender identity",
			"_'s⁇gender identity",
		/* subtypes */
		"English gender",
			/* subtypes */
			"feminine gender",
				/* instances */
				"feminine",
			"masculine gender",
				/* instances */
				"masculine",
			"neuter gender",
				/* instances */
				"neuter",
		/* type constructors */
		"_-gendered",

	/* Classically gendered objects. */
	"gendered",
		/* fields */
		"grammatical gender",
			/* accessor */
			"_'s⁇gender",
			/* reconstructor */
			"_'s⁇gender::=_",

	/* Low-level English gender identities. */
	"feminine gender identity",
	"masculine gender identity",
	"neuter gender identity"
Body

/**
 * Herein are representations of English grammatical gender. {@type "gender"}
 * and {@type "gendered"} establish the classical three-gender system, but the
 * model supports ready extension to modern concepts of gender.
 *
 * @module
 * @author Todd L Smith <todd@availlang.org>
 */

////////////////////////////////////////////////////////////////////////////////
//                                  Genders.                                  //
////////////////////////////////////////////////////////////////////////////////

Public "grammatical gender identity" is a new field atom;

/**
 * English classically categorizes pronouns according to three grammatical
 * genders, {@method "feminine"}, {@method "masculine"}, and {@method "neuter"}.
 * While certain nouns reflect this grammatical gender in obvious ways, such as
 * {@code "poet"} versus {@code "poetess"}, English reveals its grammatical
 * gender most forcefully in its pronouns. Because modern English ties
 * grammatical gender closely to biological sex or social gender, the
 * abstractions presented herein are designed to accommodate nontraditional
 * concepts of grammatical gender.
 *
 * The type {@type "gender"} flies above the traditional concepts of grammatical
 * gender, providing an opportunity for authors to extend the concepts of
 * grammatical gender as necessary to suit their tastes, audiences, and
 * applications. All library methods are designed to work abstractly with
 * {@type "gender"} rather than specifically with {@type "English gender"},
 * though overrides to library methods may be necessary to provide full support
 * for new {@type "gender"}s.
 *
 * @type "gender"
 * @supertype "attribute"
 * @field "grammatical gender identity" "atom"
 *        The {@type "atom"} that distinguishes one {@type "gender"} instance
 *        from another.
 */
Public class "gender" extends attribute
	with field
		public grammatical gender identity : atom ("_'s⁇gender identity");

////////////////////////////////////////////////////////////////////////////////
//                              English genders.                              //
////////////////////////////////////////////////////////////////////////////////

// Construct the classical gender identities, subtypes, and instances
// systematically, to reduce boilerplate and constructively assure correctness.
For each aGender, index of <"feminine", "masculine", "neuter"> do
[
	identityAtomName ::= aGender ++ " gender identity";
	className ::= aGender ++ " gender";
	methodName ::= aGender;

	identityAtom ::= atom for identityAtomName;
	identityAtom's index ::= index;
	Method identityAtom is [identityAtom];
	Class className extends gender
		with field
			grammatical gender identity : {identityAtom}ᵀ
				("_'s⁇gender identity");
	instance ::=
		evaluate send $"a|an_«with«_«:»?:=_‡,»»" with
		«<
			send atom for className with «<>» : gender's type,
			«<>»
		>» : gender;
	Stable method methodName is [instance];
	Semantic restriction methodName is [instance's type];
	Stable method "“_”" is
	«[
		<arg «this token: x : instance's type»>
	|
		<‘methodName’>
	] : nonempty string» → function;
];

/**
 * {@type "English gender"} is simply the union of {@type "feminine gender"},
 * {@type "masculine gender"}, and {@type "neuter gender"}.
 *
 * @type "English gender"
 * @supertype "gender"
 * @alias "feminine gender ∪ masculine gender ∪ neuter gender"
 */
Public class "English gender"
extends feminine gender ∪ masculine gender ∪ neuter gender;

////////////////////////////////////////////////////////////////////////////////
//                              Gendered values.                              //
////////////////////////////////////////////////////////////////////////////////

Public "grammatical gender" is a new field atom;

/**
 * Any {@type "object"} that wishes to express {@type "gender"} immutably may
 * extend {@type "gendered"}. The class offers a {@method "_'s⁇gender::=_"
 * reconstructor} for convenience.
 *
 * Note that {@type "gendered"} automatically supports {@type "gender"}s beyond
 * the traditional {@type "English gender"}s.
 *
 * @type "gendered"
 * @supertype "object"
 * @field "grammatical gender" "gender"
 *        The grammatical {@type "gender"}.
 */
Public class "gendered" extends object
	with field
		public reconstructible grammatical gender : gender ("_'s⁇gender");

/**
 * Construct a {@type "gendered"} {@type "type"} that is parameterized by the
 * specified {@type "gender"}.
 *
 * @method "_-gendered"
 * @param "aGender" "gender"
 *        An arbitrary {@type "gender"}.
 * @returns "gendered"
 */
Public stable method "_-gendered" is
[
	aGender : gender
|
	extend gendered with grammatical gender : (aGender's type)
];

/**
 * The result is always constrained by the supplied {@type "gender"}.
 *
 * @method "_-gendered"
 * @restricts "gender's type"
 */
Semantic restriction "_-gendered" is
[
	tGender : gender's type
|
	(extend gendered with grammatical gender : tGender)'s type
];

////////////////////////////////////////////////////////////////////////////////
//                                Test cases.                                 //
////////////////////////////////////////////////////////////////////////////////

Test "English genders" in gender test suite is
[
	Require: ¬feminine gender = masculine gender = neuter gender;
	Require: feminine gender's gender identity = {feminine gender identity}ᵀ;
	Require: masculine gender's gender identity = {masculine gender identity}ᵀ;
	Require: neuter gender's gender identity = {neuter gender identity}ᵀ;
	Require: feminine gender ⊆ English gender;
	Require: masculine gender ⊆ English gender;
	Require: neuter gender ⊆ English gender;
	Require: feminine gender∪masculine gender∪neuter gender = English gender;
	Require: feminine ∈ feminine gender;
	Require: masculine ∈ masculine gender;
	Require: neuter ∈ neuter gender;
	Require: feminine's gender identity's index = 1;
	Require: masculine's gender identity's index = 2;
	Require: neuter's gender identity's index = 3;
	Require: feminine-gendered
		⊆ (extend gendered with grammatical gender : feminine gender);
	Require: masculine-gendered
		⊆ (extend gendered with grammatical gender : masculine gender);
	Require: neuter-gendered
		⊆ (extend gendered with grammatical gender : neuter gender);
];
