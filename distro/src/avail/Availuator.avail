/*
 * Availuator.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Availuator"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Convenient ASCII"
Entries
	"`!_",
	"Help",
	"time_",
	"Run_"
Body

/**
 * A simple Avail expression evaluator ("Availuator") that lets the Avail
 * compiler do all of the heavy lifting. Just answer the argument.
 *
 * @method "`!_"
 * @category "Availuator"
 * @param "x" "any"
 *        An arbitrary value.
 * @returns "any"
 *          The argument.
 */
Method "`!_" is [x : any | x];

/* Just in case the library ever wants to export its own "`!_", have the
 * Avail expression evaluator forbid a recursive send of itself.
 */
Grammatical restriction "`!_" is <{"`!_"}>;

/**
 * Invoke the supplied {@type "function"} for its side effects.
 *
 * @method "Run_"
 * @category "Availuator"
 * @param "f" "[]→⊤"
 *        An arbitrary arity-0 {@type "function"}.
 * @returns "⊤"
 */
Method "Run_" is [f : []→⊤ | f();] : ⊤;

/**
 * Invoke the supplied {@type "function"} for its result.
 *
 * @method "Run_"
 * @category "Availuator"
 * @param "f" "[]→any"
 *        An arbitrary arity-0 {@type "function"}.
 * @return "any"
 *         The value of applying the argument.
 */
Method "Run_" is [f : []→any | f()] : any;

/**
 * Time the execution of the supplied {@type "function"}.
 *
 * @method "time_"
 * @category "Availuator"
 * @param "f" "[]→⊤"
 *        An arbitrary arity-0 {@type "function"}.
 * @return "whole number µs"
 *         The elapsed time, in microseconds.
 */
Method "time_" is
[
	f : []→⊤
|
	startTime ::= high-precision timer value;
	f();
	elapsed ::= high-precision timer value - startTime;
	(elapsed ÷ 1000) µs
] : any;

/**
 * Time the execution of the supplied {@type "function"}.
 *
 * @method "time_"
 * @category "Availuator"
 * @param "f" "[]→any"
 *        An arbitrary value-producing arity-0 {@type "function"}.
 * @return "<whole number µs, any…|2>"
 *         A 2-tuple. The first element is the elapsed time in microseconds. The
 *         second element is the function's result.
 */
Method "time_" is
[
	f : []→any
|
	startTime ::= high-precision timer value;
	result ::= f();
	elapsed ::= high-precision timer value - startTime;
	<(elapsed ÷ 1000) µs, result>
];

Semantic restriction "time_" is
[
	f : []→⊤'s type
|
	cast f's return type into [t : any's type | <whole number µs, t…|2>]
	else [whole number µs]
];

/**
 * Help text for the Availuator.
 *
 * @method "Help"
 * @returns "string"
 *          The help text.
 */
Method "Help" is 
[
	Print: "\n\
		\|The Availuator\n\n\
		\|\t The Availuator enables a user to run custom Avail expressions, \
		\|composed using the Avail standard library, directly from the \
		\|workbench without first:\n\
		\|\n\
		\|\t\t1. Creating a source module.\n\
		\|\t\t2. Populating it with the desired expressions.\n\
		\|\t\t3. Defining entry points that evaluate those expressions.\n\
		\|\t\t4. Compiling and loading the module.\n\
		\|\t\t5. Loading it.\n\
		\|\t\t6. Running some of the entry points.\n\
		\|\n\
		\|\tThe Availuator is the only application that is delivered as part \
		\|of the Avail standard library. The four defined entry points, located \
		\|in the entry points pane in the lower left corner of the Avail \
		\|Workbench, are:\n\
		\|\t\"Help\", \"`!_\", \"time_\", and \"Run_\"\n\
		\|These are collectively the Availuator. The Availuator is an Avail \
		\|expression evaluator. It is capable of evaluating any expression \
		\|exported by its siblings, the other modules within the avail module \
		\|root. Simply type the entry point followed by an Avail expression in \
		\|the Command input section below and press enter. Double-clicking the \
		\|entry point in the entry pane pastes the entry point into the \
		\|Commmand text input field.\n\
		\|\n\
		\|The entry points:\n\
		\|\t1. \"Help\"\n\
		\|\t\t Launches this help text for the Availuator, complete with \
		\|examples that can be copied and pasted into the Command input field \
		\|at the bottom of the work bench.\n\n\
		\|\t2. \"`!_\" [any]→any\n\
		\|\t\tEvaluate an argument expression. Answer its value.\n\
		\|\t\tExamples:\n\
		\|\t\t\t✦ !5+7\n\
		\|\t\t\t✦ !10m × 50m\n\
		\|\t\t\t✦ !∑<1,2,5,7>\n\
		\|\t\t\t✦ !filter 10 to 40 by [x: [10..40] | x^2 is even]\n\n\
		\|\t\t\t✦ !select each x from 10 to 40 where [x^2 is even]\n\n\
		\|\t3. \"Run_\" [[…]→⊤]→⊤\n\
		\|\t\tRun the specified function. If it produces a value, then answer \
		\|that value. A function must be inside a bracketed region: Run []\n\
		\|\t\tExamples:\n\
		\|\t\t\t✦ Run [Print: \"Avail, where have you been all my life?!\";]\n\
		\|\t\t\t✦ Run [i : integer := 3; j : [5..9] := 7; k ::= i + j; k's type]\n\
		\|\t\t\t✦ Run\n\
		\|\t\t\t\t[\n\
		\|\t\t\t\t\taTuple ::= <25,11,77,3,18>;\n\
		\|\t\t\t\t\tcomparator ::= [n : number, m : number | n ≤ m];\n\
		\|\t\t\t\t\toutput : <number…|2..> := aTuple;\n\
		\|\t\t\t\t\tFrom 2 to |aTuple| do \n\
		\|\t\t\t\t\t[\n\
		\|\t\t\t\t\t\ti : [2..10]\n\
		\|\t\t\t\t\t |\n\
		\|\t\t\t\t\t\tj : [1..9] := i-1;\n\
		\|\t\t\t\t\t\tk : [2..10] := i;\n\
		\|\t\t\t\t\t\tWhile j > 1 ∧ comparator(output[k], output[j])\n\
		\|\t\t\t\t\t\tdo [\n\
		\|\t\t\t\t\t\t\toutput := output[k↔j];\n\
		\|\t\t\t\t\t\t\tk--;\n\
		\|\t\t\t\t\t\t\tj--;\n\
		\|\t\t\t\t\t\t];\n\
		\|\t\t\t\t\t\toutput := if j = 1 ∧ comparator(output[k], output[j]) then\n\
		\|\t\t\t\t\t\t[output[k↔j]] else [output];\n\
		\|\t\t\t\t\t];\n\
		\|\t\t\t\t\toutput\n\
		\|\t\t\t\t]\n\n\
		\|\t4a. \"time_\"\n\
		\|\t\tRun the specified non-value-producing function. Answer a \
		\|dimensioned quantity that represents the number of microseconds \
		\|that elapsed during execution of the function.\n\
		\|\t\tExamples:\n\
		\|\t\t\t✦ time [x ::= new ↑integer; x ?= ∏ 1 to 100; Clear x;]\n\n\
		\|\t4b. \"time_\"\n\
		\|\t\tRun the specified value-producing function. Answer a 2-tuple. \
		\|The first element is a dimensioned quantity that represents the \
		\|number of microseconds that elapsed during execution of the \
		\|function. The second element is the value produced by the function.\n\
		\|\t\tExamples:\n\
		\|\t\t\t✦ time [5^2]\n\
		\|\t\t\t✦ time [filter 10 to 40 by [x: [10..40] | x^2 is even]]\n\
		\|\t\t\t✦ time [select each x from 10 to 40 where [x^2 is even]]\n\n\
		\|\t\t\t✦ time\n\
		\|\t\t\t\t[\n\
		\|\t\t\t\t\tfibonacci : [integer]→integer; \n\
		\|\t\t\t\t\tfibonacci := [i : integer | \n\
		\|\t\t\t\t\tif (i < 2) then [i] \n\
		\|\t\t\t\t\telse [fibonacci(i-2) + fibonacci(i-1)]];\n\
		\|\t\t\t\t\tmap 0 to 10 through [i : integer | fibonacci(i)]\n\
		\|\t\t\t\t]\n\n\
		\|Helpful links:\n\
		\|\t➣ www.availlang.org/about-avail/documentation/private/workbench.html\n\
		\|\t➣ www.availlang.org/about-avail/documentation/modules/entry-points-section.html\n\
		\|\t➣ www.availlang.org/about-avail/documentation/availuator.html";
];
