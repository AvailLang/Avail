/*
 * Avail Tests.avail
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Avail Tests"
Versions
	"1.5.0"
Uses
	"Avail" = ("all test suites"→"the test suites", …),
	"Tests"
Extends
	"Avail" =
	(
		"whitespace lexer",
		"comment lexer",
		"string token lexer",
		"whole number lexer",
		"keyword lexer",
		"operator lexer",
		"…#",
		"…$",
		"`$…$"
	),
	"Tests" =
	(
		"assertion test suite",
		"backtracking test suite",
		"bounded reader test suite",
		"buffered iterator test suite",
		"cast test suite",
		"character test suite",
		"concurrency test suite",
		"control structure test suite",
		"converters test suite",
		"counting reader test suite",
		"Data|data abstractions test suite",
		"dates and times test suite",
		"decompiler test suite",
		"delimited reader test suite",
		"exception test suite",
		"file access rights test suite",
		"file iterator test suite",
		"file metadata test suite",
		"file names test suite",
		"Foundation|foundation test suite",
		"function test suite",
		"generator test suite",
		"I/O test suite",
		"identity visitors test suite",
		"iterators test suite",
		"logic test suite",
		"map test suite",
		"math test suite",
		"Mersenne Twister test suite",
		"network test suite",
		"observation test suite",
		"optional test suite",
		"pojo test suite",
		"primitive atoms test suite",
		"primitive characters test suite",
		"primitive compiler test suite",
		"primitive continuations test suite",
		"primitive controlflow test suite",
		"primitive doubles test suite",
		"primitive fibers test suite",
		"primitive files test suite",
		"primitive floats test suite",
		"primitive functions test suite",
		"primitive general test suite",
		"primitive hooks test suite",
		"primitive integers test suite",
		"primitive maps test suite",
		"primitive methods test suite",
		"primitive modules test suite",
		"primitive numbers test suite",
		"primitive objects test suite",
		"primitive phrases test suite",
		"primitive pojos test suite",
		"primitive processes test suite",
		"primitive rawfunctions test suite",
		"primitive sets test suite",
		"primitive sockets test suite",
		"primitive tuples test suite",
		"primitive types test suite",
		"primitive variables test suite",
		"Primitives|primitives test suite",
		"pRNG test suite",
		"set test suite",
		"string test suite",
		"stream reader test suite",
		"tuple reader test suite",
		"tuple test suite",
		"type test suite",
		"UTF8 converters test suite",
		"visitors test suite"
	),
	"Dimensional Analysis" =
	(
		"Dimensional|dimensional analysis test suite",
		"SI test suite"
	)
Names
	/* Running test suites; this allows subsequent modules to redeclare these
	 * entries, but with their own test suites visible.
	 */
	"Run all tests in_",
	"Run all tests in_repeatedly"
Entries
	/* Debugging tests interactively. */
	"Debug tests",

	/* Interrogating test suites. */
	"Show all test suites",

	/* Running test suites. */
	"Run all tests",
	"Run all tests in_",
	"Run all tests repeatedly",
	"Run all tests in_repeatedly",
	"Time all tests_time|times"
Body

/**
 * Compute and answer the collection of all unit test suite identifiers.
 *
 * @entry
 * @method "Show all test suites"
 * @returns "⊤"
 */
Private method "Show all test suites" is
[
	sorted ::=
		quicksort a,b in the test suites→tuple by
		[
			if a's name < b's name then [true]
			else if a's name > b's name then [false]
			else [a's issuing module's name ≤ b's issuing module's name]
		];
	Print: “sorted” else ["«no test suites»"] (as list partitioned by "\n");
] : ⊤;

/**
 * Generate a test suite-oriented report for all test suites. Emit it to
 * standard output.  Answer false if any tests failed, otherwise true.
 *
 * @entry
 * @method "Run all tests"
 * @returns "boolean"
 */
Private method "Run all tests" is
[
	report ::= report on all tests;
	Print: test suite-oriented “report”;
	|bad results of report's metrics| = 0
] : boolean;


/**
 * Run all tests the specified number of times, producing a report of how long
 * each successive run took.  Do not break this down by test suite or test.  If
 * any test fails, print the report and abort the loop.
 *
 * @entry
 * @method "Run all tests"
 * @param "count" "natural number"
          The number of times to run all tests.
 * @returns "boolean"
 */
Private method "Time all tests_time|times" is
[
	count : natural number
|
	$escape : ⊤;
	Repeat
	[
		startTime ::= high-precision timer value;
		report ::= report on all tests;
		elapsed ::= high-precision timer value - startTime;

		metrics ::= report's metrics;
		If any of metrics satisfies [m : unit test result |
			m ∈ unit test failure] then
		[
			Print: test suite-oriented “report”;
			Exit escape
		];
		Print: “elapsed ÷ 1000000” ++ " ms\n";
	] count times;
] : ⊤;

/**
 * Generate a test suite-oriented report for the specified test suite. Emit it
 * to standard output.
 *
 * @entry
 * @method "Run all tests in_"
 * @param "suiteID" "atom"
 *        The unit test suite identifier.
 * @returns "⊤"
 */
Public method "Run all tests in_" is
[
	suiteID : atom
|
	report ::= report on all tests in suiteID;
	Print: test suite-oriented “report”;
	|bad results of report's metrics| = 0
];

/**
 * Loop forever running all tests repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests repeatedly"
 * @returns "⊤"
 */
Private method "Run all tests repeatedly" is
[
	For each x from 1 to ∞ do
	[
		Print: "Starting run #" ++ “x” ++ "\n";
		Ignore: Run all tests;
	]
] : ⊥;

/**
 * Loop forever running the test repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests in_repeatedly"
 * @returns "⊤"
 */
Public method "Run all tests in_repeatedly" is
[
	suiteID : atom
|
	For each x from 1 to ∞ do
	[
		Print: "Starting run #" ++ “x” ++ "\n";
		Ignore: Run all tests in suiteID;
	]
] : ⊥;

_compareTests ::=
[
	a : atom,
	b : atom
|
	if a's name < b's name then [true]
	else if a's name > b's name then [false]
	else [a's issuing module's name ≤ b's issuing module's name]
];


Private method "Debug tests" is
[
	roots ::= quicksort the test suites→tuple with _compareTests;
	stack : <<atom, atom*…|>…|> := <<root test suite ID, roots>>;
	command : string;
	Do
	[
		currentEntry ::= stack[1];
		Print: format "\n\n-----> “①”\n" with currentEntry[1];
		If |stack| > 1 then
		[
			Print: "0. go up\n";
		]
		else
		[
			Print: "0. exit test debugger\n";
		];
		For each test, index of currentEntry[2] do
		[
			Print: format "“①”. “②”\n" with index, test;
		];
		Print: "Enter subtest number, 0 for parent/exit, "
			++ "\"run\", or \"run N\" (N=repetitions).\n";
		command := next line from standard input;
		If command ∈ (enumeration of "0123456789"→set)+ then
		[
			subscript ::= command (base 10);
			If subscript = 0 then
			[
				stack := stack[2..];
			]
			else if 1 ≤ subscript ≤ |currentEntry[2]| then
			[
				strongSubscript : natural number;
				strongSubscript ?= subscript;
				subtest ::= currentEntry[2][strongSubscript];
				list ::= guard
					[
						all tests in subtest
					]
					intercept
					[
						e : no-such-test-suite exception
					|
						<>
					];
				sorted ::= quicksort list with _compareTests;
				stack := <<subtest, list>> ++ eject stack;
			]
			else
			[
				Print: "Invalid subtest number.\n";
			];
		]
		else if command starts with "run" then
		[
			count ::= if |command| = 3
				then [1]
				else [trim (command[4..]) → natural number];
			Repeat
			[
				If currentEntry[1] = root test suite ID then
				[
					Ignore: Run all tests;
				]
				else
				[
					Guard
					[
						Print: test suite-oriented “report on currentEntry[1]”;
					]
					intercept
					[
						e : no-such-test exception
					|
						Print: test suite-oriented
							“report on all tests in currentEntry[1]”;
					];
				];
			] count times;
		]
		else
		[
			Print: "Invalid command.\n\n";
		];
	]
	until stack is empty;
];
