/*
 * Foreign Interface.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 */

Module "Foreign Interface"
Versions
	"Avail-1.6.1"
Uses
    "Avail"
Extends
    /* Needed for entry point creation parsing. */
	"Avail" = (
	        "…#",
            "whitespace lexer",
            "comment lexer",
            "string token lexer",
            "whole number lexer",
            "keyword lexer",
            "operator lexer"
        )
Names
    "_'s⁇value",
    "sample value wrapper",
    "wrap_"
Entries
    "wrap_and print"
Body

Link library: "/my-avail-root/App/avail-java-ffi-1.0.jar";

/**
 * A SampleValueWrapper from avail-java-ffi.
 *
 * @type "sample value wrapper"
 */
Public stable method "sample value wrapper" is
	[org.availlang.ffi.SampleValueWrapper];


// Because POJOs can't be serialized for fast loading the following code sets
// the POJOs to a variable to be run once when the module is loaded. Attempting
// to set these values as constants causes the compiler will attempt to 
// serialize the state for fast loading, which creates an error. The error that
// is displayed claims the class cannot be found.
sampleValueWrapperConstructor : [Java int] → sample value wrapper :=
  constructor sample value wrapper (Java int);
getValue : [sample value wrapper] → Java int := 
	method sample value wrapper.getValue ();

/**
 * Construct a {@type "sample value wrapper"}.
 *
 * @method "wrap_"
 * @param "value" "Java int"
 *        The value to wrap.
 * @returns "sample value wrapper"
 */
Public method "wrap_" is
[
    value : Java int
|
    sampleValueWrapperConstructor(value)
]: sample value wrapper;

/**
 * Answer the value wrapped by the given {@type "sample value wrapper"}.
 *
 * @method "_'s⁇value"
 * @param "wrapper" "sample value wrapper"
 * @returns "Java int"
 */
Public stable method "_'s⁇value" is
[
	wrapper : sample value wrapper
|
	getValue(wrapper)
]: integer;

/**
 * Answer the value wrapped by the given {@type "sample value wrapper"}.
 *
 * @method "wrap_and print"
 * @param "value" "Java int"
 */
Method "wrap_and print" is
[
	value : Java int
|
	wrapped ::= wrap value;
	Print: format "The wrapped value: “①”\n" with wrapped's value;
];
