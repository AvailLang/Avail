/*
 * Cast Tests.avail
 * Copyright © 1993-2022, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Cast Tests"
Versions
	"Avail-1.6.1"
Uses
	"Common"
Names
	"cast test suite"
Body

/* The test suite identifier. */
"cast test suite" is a new atom;

New test suite cast test suite extends foundation test suite;

Test "basic cast" in cast test suite is
[
	a : integer := 5;
	b : tuple := "foo";
	t : <number…|3> := <1,2,3>;
	Guard
	[
		/*Attempt several legitimate casts*/
		numberCast : natural number := cast a into [n : natural number | n];
		tupleCast : string := cast b into [s : string | s];
		Cast each of t into
		[
			c : integer,
			d : integer,
			e : integer
		|
			/*Do nothing*/
		];
	]
	intercept
	[
		e : bad-cast exception
	|
		Raise a failed-requirement exception
	];
];

Test "bad cast exception" in cast test suite is
[
	Require:
	[
		a : integer := 5;
		numberCast : [-∞..-1] := cast a into [i : [-∞..-1] | i];
	] raises bad-cast exception;

	Require:
	[
		a : tuple := <1,2,3>;
		numberCast : string := cast a into [s : string | s];
	] raises bad-cast exception;

	Require:
	[
		t : <number…|3> := <1,2,3>;
		Cast each of t into
		[
			a : integer,
			b : integer,
			c : [0..1]
		|
			Print: "Shouldn't print this!";
		];
	] raises bad-cast exception;
];

Test "cast each of else" in cast test suite is
[
	holder : tuple := <>;
	t : <number…|3> := <1,2,3>;
	Cast each of t into
	[
		a : integer,
		b : integer,
		c : [0..1]
	|
		holder := <1,2,3>;
	] else [holder := <4,5,6>;];
	Require: holder = <4,5,6>;

	holder := <>;
	Cast each of t into
	[
		a : integer,
		b : integer,
		c : integer
	|
		holder := <1,2,3>;
	] else [holder := <4,5,6>;];
	Require: holder = t;
];
