var stacksApp = angular.module('stacksApp',[]);

function CategoriesCntrl($scope,$http,Categories) {
	$scope.categories = Categories;

	$scope.jsonURL = "/about-avail/documentation/stacks/library-documentation/internalLink.json";
	$scope.methodLinkage = {};
	$scope.methodLinkagePairedDown = {};
	$http.get($scope.jsonURL).then(function (response)
		{
			$scope.methodLinkage = response.data;
		});
		
	$scope.weakMatchOnMethod = function(content) {
    	return (((content.category.toLowerCase()).indexOf($scope.search.toLowerCase()) >= 0) || content.selected);
	};
	$scope.methodSearch = '';
	$scope.directLink = '';
	$scope.linkText = '';
	$scope.strictSearch = false;
	$scope.setLink = function(aLink)
	{
		$scope.$directLink = aLink;
	}
	$scope.resetLink = function()
	{
		$scope.$directLink = '';
	};
	$scope.customStyle = "";
	$scope.getInternalLink = function(aMethod) {
	
		if (aMethod.length > 0)
		{
			if ($scope.strictSearch)
			{
				if (aMethod in $scope.methodLinkage)
				{
					$scope.methodLinkagePairedDown={};
					$scope.methodLinkagePairedDown[aMethod] = $scope.methodLinkage[aMethod];
					$scope.customStyle = "";
				}
				else 
				{					
					$scope.methodLinkagePairedDown={};	
					$scope.methodLinkagePairedDown["Method Not Found"] = document.getElementById('api_frame').contentWindow.location.href;
					$scope.customStyle = "font-style:italic";
				}
			}
			else
			{
				var tempList = {};
				$scope.methodLinkagePairedDown={};
				for (var key in $scope.methodLinkage)
				{
					if((key.toLowerCase()).indexOf(aMethod.toLowerCase()) >=0)
					{
						tempList[key] = $scope.methodLinkage[key];
						$scope.customStyle = "";
					}
				}
				$scope.methodLinkagePairedDown = tempList;
			}
		}
	};
	$scope.getExternalLink = function(aMethod) {
		if (aMethod in $scope.methodLinkage)
		{
			$scope.directLink = $scope.methodLinkage[aMethod];
			$scope.linkText = 'Link to page';
			return '<a href="http://www.availlang.org' + $scope.methodLinkage[aMethod] + '">"' + aMethod + '"</a>';
		}
		$scope.directLink = '';
		$scope.linkText = '';
		return '"' + aMethod + '"';
	};

	$scope.search = '';
	$scope.filterOnCategory = function(content) {
    	return (((content.category.toLowerCase()).indexOf($scope.search.toLowerCase()) >= 0) || content.selected);
	};
	$scope.visibleFramedPage = "landing-detail.html";
	$scope.methodList;	
	$scope.backPageHistory = [];
	$scope.backPageHistoryCount = 0;
	$scope.methodListUpdate = function()
	{
		var allCategories = $scope.categories;
		var filteredMethods = {};
		var finalList = {content : []};
		var selectedCount = 0;
		for (var i=0; i < allCategories.content.length;i++)
		{
			if (allCategories.content[i].selected)
			{
				selectedCount++;
				for  (var j = 0; j < allCategories.content[i].methods.length; j++)
				{
					var method = allCategories.content[i].methods[j].distinct;
					try
					{
						var newCount = filteredMethods[method].count + 1;
						filteredMethods[method].count = newCount;
					}
					catch(err)
					{
						filteredMethods[method] =
							{"name" :allCategories.content[i].methods[j].methodName,
							"link" : allCategories.content[i].methods[j].link,
							"distinct" : allCategories.content[i].methods[j].distinct,
							"count" : 1};
					}
				}
			}
		}
		for (var key in filteredMethods)
		{
			if (filteredMethods[key].count == selectedCount)
			{
				finalList.content.push({"name" : filteredMethods[key].name, "link" : filteredMethods[key].link, distinct: key})
			}
		}

		$scope.methodList = finalList;
	}
	$scope.mainPage;
	$scope.linkValue = "landing-detail.html";
	$scope.changeLinkValue = function(link)
	{
		$scope.methodLinkagePairedDown={};
		$scope.visibleFramedPage = document.getElementById('api_frame').contentWindow.location.href;
		if ($scope.backPageHistory.length == $scope.backPageHistoryCount)
		{
			$scope.backPageHistory.push($scope.visibleFramedPage);
			$scope.backPageHistoryCount++;
		}
		else
		{
			$scope.backPageHistory[$scope.backPageHistoryCount] = $scope.visibleFramedPagelink;
			$scope.backPageHistoryCount++;
		}
		$scope.linkValue = link;
		$scope.visibleFramedPage = link;
			
	}
	$scope.backPage = function() {
		if($scope.backPageHistory.length == 0 || $scope.backPageHistoryCount == 0)
		{
			$scope.linkValue = "landing-detail.html";
			$scope.backPageHistoryCount = 0;
		}
		else
		{
			
			$scope.linkValue = $scope.backPageHistory[$scope.backPageHistoryCount-1];
			$scope.backPageHistoryCount--;
		}
	}
}

stacksApp.directive('ngEnter', function() {
        return function(scope, element, attrs) {
            element.bind("keydown keypress", function(event) {
                if(event.which === 13) {
                    scope.$apply(function(){
                        scope.$eval(attrs.ngEnter, {'event': event});
                    });

                    event.preventDefault();
                }
            });
        };
    });

stacksApp.factory('Categories', function () {
	var Categories = {};
	Categories.content = {[{CATEGORY-CONTENT}]};
	return Categories;
})