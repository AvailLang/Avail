/*
 * Origin.avail
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Versioned As: $$Revision$$
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

Module "Origin"
Versions
	"1.2.0 DEV 2019-07-09"
Extends
Uses
Names
	"Primitive_is_",
	"special object_",
	"Special object_is_;",
	"whitespace lexer",
	"comment lexer",
	"string token lexer",
	"whole number lexer",
	"keyword lexer",
	"operator lexer",
	"\
		\|[§\
			\|««…:_†§‡,»`|»?\
			\|«Primitive…«(…:_†)»?§;»?\
			\|«`$…«:_†»?;§»?\
			\|«_!§»\
			\|«_!»?\
		\|]§\
		\|«:_†»?\
		\|«^«_†‡,»»?",
	"…:_†;",
	"…::=_;",
	"…:_†:=_;",
	"…:=_;",
	"…",
	"_!;",
	"(_::_†)",
	"…$",
	"…#"
Pragma
	"check=version=1.2.0 DEV 2019-07-09",
	"lexer=BootstrapLexerWhitespaceFilter,BootstrapLexerWhitespaceBody=whitespace lexer",
	"lexer=BootstrapLexerSlashStarCommentFilter,BootstrapLexerSlashStarCommentBody=comment lexer",
	"lexer=BootstrapLexerStringFilter,BootstrapLexerStringBody=string token lexer",
	"lexer=BootstrapLexerWholeNumberFilter,BootstrapLexerWholeNumberBody=whole number lexer",
	"lexer=BootstrapLexerKeywordFilter,BootstrapLexerKeywordBody=keyword lexer",
	"lexer=BootstrapLexerOperatorFilter,BootstrapLexerOperatorBody=operator lexer",
	"method=SimpleMethodDeclaration=Primitive_is_",
	"macro=SpecialObject=special object_",
	"macro=BootstrapDefineSpecialObjectMacro=Special object_is_;",
	"macro=\
		\|BootstrapPrefixStartOfBlock,\
		\|BootstrapPrefixBlockArgument,\
		\|BootstrapPrefixPrimitiveDeclaration,\
		\|BootstrapPrefixLabelDeclaration,\
		\|BootstrapPrefixPostStatement,\
		\|BootstrapPrefixEndOfBlockBody,\
		\|BootstrapBlockMacro=\
			\|[§\
				\|««…:_†§‡,»`|»?\
				\|«Primitive…«(…:_†)»?§;»?\
				\|«`$…«:_†»?;§»?\
				\|«_!§»\
				\|«_!»?\
			\|]§\
			\|«:_†»?\
			\|«^«_†‡,»»?",
	"macro=BootstrapVariableDeclarationMacro=…:_†;",
	"macro=BootstrapConstantDeclarationMacro=…::=_;",
	"macro=BootstrapInitializingVariableDeclarationMacro=…:_†:=_;",
	"macro=BootstrapAssignmentStatementMacro=…:=_;",
	"macro=BootstrapVariableUseMacro=…",
	"macro=BootstrapSendAsStatementMacro=_!;",
	"macro=BootstrapSuperCastMacro=(_::_†)",
	"macro=BootstrapStringLiteral=…$",
	"macro=BootstrapIntegerLiteral=…#"
Body

/**
 * Construct and answer a {@type "block phrase"} from the supplied components.
 *
 * @macro
 *     "\
 *          \|[§\
 *              \|««…:_†§‡,»`|»?\
 *              \|«Primitive…«(…:_†)»?§;»?\
 *              \|«`$…«:_†»?;§»?\
 *              \|«_!§»\
 *              \|«_!»?\
 *          \|]§\
 *          \|«:_†»?\
 *          \|«^«_†‡,»»?"
 * @param "argPhrases" "list phrase⇒(<token, any meta…|>?*)"
 *        A {@type "list phrase"} corresponding to the {@type "argument phrase"
 *        argument declarations}. Zero or many {@type "argument phrase"}s are
 *        permitted.
 * @param "primitivePhrase"
 *        "list phrase⇒(<literal token⇒natural number, <token, any meta…|>?>?)"
 *        A {@type "list phrase"} that includes the parts of the primitive
 *        declaration (primitive number, primitive failure reason, primitive
 *        failure reason type). Zero or one primitive declaration is permitted.
 * @param "labelPhrase" "list phrase⇒(<token, any meta?…|>?)"
 *        A {@type "list phrase"} that includes the parts of the
 *        {@type "label phrase" label declaration} (label name, label return
 *        type). The label return type is optional, and will be inferred from
 *        the enclosing {@type "block phrase" block}'s return type if absent.
 *        Zero or more label declaration is permitted.
 * @param "bodyPhrase" "list phrase⇒(statement*)"
 *        A {@type "list phrase"} corresponding to the {@type "statement"}s that
 *        comprise the body. Zero or many {@type "statement"}s are permitted.
 * @param "returnPhrase" "list phrase⇒(any?)"
 *        A {@type "list phrase"} corresponding to the value-producing return
 *        {@type "expression phrase" expression}. Zero or one return {@type
 *        "expression phrase" expression} is permitted; if omitted, then the
 *        return type is inferred to be {@type "⊤"}.
 * @param "returnTypePhrase" "list phrase⇒(any meta?)"
 *        A {@type "list phrase"} corresponding to the return type declaration.
 *        Zero or one return type declaration is permitted; if omitted, then the
 *        return type is inferred to be {@type "_∪_" type union} of the type
 *        indicated by {@param "returnPhrase"} and the label return type.
 * @param "exceptionTypesPhrase" "list phrase⇒(exception*)"
 *        A {@type "list phrase"} corresponding to the declared {@type
 *        "exception"}s. Zero or many {@type "exception"}s may be declared.
 * @returns "block phrase"
 * @category "Avail Syntax" "Functions"
 */

/**
 * Construct and answer a {@type "local variable phrase" local variable
 * declaration} from the supplied identifier and {@type "any meta" type}.
 *
 * If this macro is evaluated in the module scope, then the compiler will
 * automatically convert the result into an equivalent {@type
 * "module variable phrase" module variable declaration} prior to code
 * generation.
 *
 * @macro "…:_†;"
 * @param "varNamePhrase" "literal phrase⇒token"
 *        A {@type "literal phrase"} that answers the {@type "token"}
 *        corresponding to the identifier of the declared {@type "variable"}.
 * @param "varTypePhrase" "literal phrase⇒any meta"
 *        A {@type "literal phrase"} that answers the {@type "type"} of the
 *        declared {@type "variable"}.
 * @returns "local variable phrase"
 * @category "Avail Syntax" "Variables"
 */

/**
 * Construct and answer a {@type "local constant phrase" local constant
 * definition} from the supplied identifier and {@type "expression phrase"
 * expression}.
 *
 * If this macro is evaluated in the module scope, then the compiler will
 * automatically convert the result into an equivalent {@type
 * "module constant phrase" module constant declaration} prior to code
 * generation.
 *
 * @macro "…::=_;"
 * @param "constNamePhrase" "literal phrase⇒token"
 *        A {@type "literal phrase"} that answers the {@type "token"}
 *        corresponding to the identifier of the defined constant.
 * @param "constValuePhrase" "expression phrase⇒any"
 *        An {@type "expression phrase"} that answers the value to which the
 *        defined constant is permanently bound.
 * @returns "local constant phrase"
 * @category "Avail Syntax" "Variables"
 */

/**
 * Construct and answer a {@type "local variable phrase" local variable
 * declaration} from the supplied identifier, {@type "any meta" type}, and
 * initial value {@type "expression phrase" expression}.
 *
 * If this macro is evaluated in the module scope, then the compiler will
 * automatically convert the result into an equivalent {@type
 * "module variable phrase" module variable declaration} prior to code
 * generation.
 *
 * @macro "…:_†:=_;"
 * @param "varNamePhrase" "literal phrase⇒token"
 *        A {@type "literal phrase"} that answers the {@type "token"}
 *        corresponding to the identifier of the declared {@type "variable"}.
 * @param "varTypePhrase" "literal phrase⇒any meta"
 *        A {@type "literal phrase"} that answers the {@type "type"} of the
 *        declared {@type "variable"}.
 * @param "valuePhrase" "expression phrase⇒any"
 *        An {@type "expression phrase"} that answers the value to which the
 *        declared variable is initially bound.
 * @returns "local variable phrase"
 * @category "Avail Syntax" "Variables"
 */

/**
 * Construct and answer an {@type "assignment phrase"} (wrapped inside an
 * {@type "expression-as-statement phrase"}.
 *
 * @macro "…:=_;"
 * @param "varNamePhrase" "literal phrase⇒token"
 *        A {@type "literal phrase"} that answers the {@type "token"}
 *        corresponding to the identifier of the target {@type "variable"}.
 * @param "valuePhrase" "expression phrase⇒any"
 *        An {@type "expression phrase"} that answers the value to which the
 *        target variable should be rebound.
 * @returns "expression-as-statement phrase"
 *          An {@type "expression-as-statement phrase"} that decorates an
 *          {@type "assignment phrase"}.
 * @category "Avail Syntax" "Variables"
 */

/**
 * Construct and answer a {@type "expression phrase" use} of the identified
 * {@type "variable"} or constant.
 *
 * @macro "…"
 * @param "varNamePhrase" "literal phrase⇒token"
 *        A {@type "literal phrase"} that answers the {@type "token"}
 *        corresponding to the identifier of the source {@type "variable"} or
 *        constant.
 * @returns "expression phrase"
 *          Either a {@type "variable use phrase"}, in most cases; or a {@type
 *          "literal phrase"}, iff the referent is a local constant whose
 *          initializing expression is a {@type "literal phrase"}.
 * @category "Avail Syntax" "Variables"
 */

/**
 * Construct and answer an {@type "expression-as-statement phrase"} that
 * represents a {@type "send phrase" send} of a {@type "⊤"}-valued {@type
 * "method definition"}.
 *
 * This macro is required for supplying {@type "⊤"}-valued {@type "send phrase"
 * sends} as {@type "statement"}s of a {@type "block phrase" block}, because the
 * compiler disallows {@type "⊤"}-valued arguments to {@type "send phrase"
 * sends}. The {@code "_!"} metacharacter combination quotes the {@type
 * "send phrase"} by wrapping it in a {@type "literal phrase"}, thus making it
 * eligible for passing as an argument to a macro.
 *
 * @macro "_!;"
 * @param "sendPhrase" "literal phrase⇒send phrase"
 *        A {@type "literal phrase"} that decorates a {@type "send phrase"}. The
 *        decorated {@type "send phrase" phrase} represents a send of a {@type
 *        "⊤"}-valued {@type "method definition"}.
 * @returns "expression-as-statement phrase"
 * @category "Avail Syntax"
 */

/**
 * Construct and answer a {@type "super cast phrase"} from the specified
 * {@type "expression phrase" argument expression} and {@type "any meta" type}.
 * At runtime, the {@type "send phrase" send} in which the resultant {@type
 * "super cast phrase"} is embedded will be resolved using the {@type "any meta"
 * type} specified here instead of the dynamic type of the corresponding
 * argument.
 *
 * @macro "(_::_†)"
 * @param "argPhrase" "expression phrase⇒any"
 *        An {@type "expression phrase"} that corresponds to the argument that
 *        should be super cast.
 * @param "argTypePhrase" "literal phrase⇒any meta"
 *        A {@type "literal phrase"} that specifies the {@type "any meta"
 *        supertype} of the value represented by {@param "argPhrase"} that
 *        should be used to rebase the resolution of the target {@type "method"}
 *        to a {@type "method definition"}.
 * @returns "super cast phrase"
 * @category "Avail Syntax"
 */

/**
 * Construct and answer a literal phrase based on the parsed string literal
 * token.
 *
 * @macro "…$"
 * @param "stringLiteralToken" "literal phrase⇒literal token⇒string"
 *        The {@type "literal phrase"} built by parsing the argument denoted
 *        by the macro metacharacters '…$'.
 * @returns "literal phrase→string"
 * @category "Avail Syntax"
 */

/**
 * Construct and answer a literal phrase based on the parsed non-negative
 * integer literal token.
 *
 * @macro "…#"
 * @param "integerLiteralPhrase" "literal phrase⇒literal token⇒whole number"
 *        The {@type "literal phrase"} built by parsing the argument denoted
 *        by the macro metacharacters '…#'.
 * @returns "literal phrase→whole number"
 * @category "Avail Syntax"
 */
