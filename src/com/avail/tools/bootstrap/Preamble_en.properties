#
# Preamble_en.properties
# Copyright © 1993-2015, The Avail Foundation, LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

propertiesCopyright=\
#\n\
# {0}.properties\n\
# Copyright © 1993-{1,date,yyyy}, The Avail Foundation, LLC.\n\
# All rights reserved.\n\
#\n\
# Redistribution and use in source and binary forms, with or without\n\
# modification, are permitted provided that the following conditions are met:\n\
#\n\
# * Redistributions of source code must retain the above copyright notice, this\n\
#   list of conditions and the following disclaimer.\n\
#\n\
# * Redistributions in binary form must reproduce the above copyright notice,\n\
#   this list of conditions and the following disclaimer in the documentation\n\
#   and/or other materials provided with the distribution.\n\
#\n\
# * Neither the name of the copyright holder nor the names of the contributors\n\
#   may be used to endorse or promote products derived from this software\n\
#   without specific prior written permission.\n\
#\n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n\
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\
# POSSIBILITY OF SUCH DAMAGE.\n\
#\n\

availCopyright=\
/*\n\
\ * {0}.avail\n\
\ * Copyright © 1993-{1,date,yyyy}, The Avail Foundation, LLC.\n\
\ * All rights reserved.\n\
\ *\n\
\ * Redistribution and use in source and binary forms, with or without\n\
\ * modification, are permitted provided that the following conditions are met:\n\
\ *\n\
\ * * Redistributions of source code must retain the above copyright notice, this\n\
\ *   list of conditions and the following disclaimer.\n\
\ *\n\
\ * * Redistributions in binary form must reproduce the above copyright notice,\n\
\ *   this list of conditions and the following disclaimer in the documentation\n\
\ *   and/or other materials provided with the distribution.\n\
\ *\n\
\ * * Neither the name of the copyright holder nor the names of the contributors\n\
\ *   may be used to endorse or promote products derived from this software\n\
\ *   without specific prior written permission.\n\
\ *\n\
\ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n\
\ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\
\ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\
\ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\
\ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\
\ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\
\ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\
\ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\
\ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\
\ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\
\ * POSSIBILITY OF SUCH DAMAGE.\n\
\ */\n\

generatedPropertiesNotice=\
#\n\
# GENERATED FILE\n\
# * Generator: {0}\n\
# * Last Versioned As: $$Revision$$\n\
#\n\
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be\n\
# modified manually.\n\
#\n\

specialObjectCommentTemplate=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n{0}\
\ */\n
specialObjectCommentTypeTemplate=\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n
specialObjectCommentValueTemplate=\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n

methodCommentTemplate=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "'{'0}"\n{0}{1}{2}\
\ */\n
methodCommentParameterTemplate=\
\ * @param "{0}" "{1}"\n\
\ *        TODO\n
methodCommentReturnsTemplate=\
\ * @returns "{0}"\n\
\ *    TODO\n
methodCommentRaisesTemplate=\
\ * @raises "{0}"\n

generatedModuleNotice=\
/*\n\
\ * GENERATED FILE\n\
\ * * Generator: {0}\n\
\ * * Last Versioned As: $$Revision$$\n\
\ *\n\
\ * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.\n\
\ */\n\

originModuleName=Origin
originModuleHeader=\
Module "{0}"\n\
Versions{1}\n\
Extends\n\
Uses\n\
Names\n\
\t"{3}",\n\
\t"{4}",\n\
\t"{5}",\n\
{6}\
Pragma\n\
\t"check=version={2}",\n\
\t"method=SimpleMethodDeclaration={3}",\n\
\t"macro=SpecialObject={4}",\n\
\t"macro=BootstrapDefineSpecialObjectMacro={5}",\n\
{7}\
Body\n\
\n\
/**\n\
\ * Construct and answer a '{'@type "block phrase"} from the supplied components.\n\
\ *\n\
\ * @macro\n\
\ *     "\\\n\
\ *          \\|[§\\\n\
\ *              \\|««…:_†§‡,»`|»?\\\n\
\ *              \\|«Primitive…«(…:_†)»?§;»?\\\n\
\ *              \\|«`$…«:_†»?;§»?\\\n\
\ *              \\|«_!§»\\\n\
\ *              \\|«_!»?\\\n\
\ *          \\|]§\\\n\
\ *          \\|«:_†»?\\\n\
\ *          \\|«^«_†‡,»»?"\n\
\ * @param "argPhrases" "list phrase⇒(<token, any meta…|>?*)"\n\
\ *        A '{'@type "list phrase"} corresponding to the '{'@type "argument phrase"\n\
\ *        argument declarations}. Zero or many '{'@type "argument phrase"}s are\n\
\ *        permitted.\n\
\ * @param "primitivePhrase"\n\
\ *        "list phrase⇒(<literal token⇒natural number, <token, any meta…|>?>?)"\n\
\ *        A '{'@type "list phrase"} that includes the parts of the primitive\n\
\ *        declaration (primitive number, primitive failure reason, primitive\n\
\ *        failure reason type). Zero or one primitive declaration is permitted.\n\
\ * @param "labelPhrase" "list phrase⇒(<token, any meta?…|>?)"\n\
\ *        A '{'@type "list phrase"} that includes the parts of the\n\
\ *        '{'@type "label phrase" label declaration} (label name, label return\n\
\ *        type). The label return type is optional, and will be inferred from\n\
\ *        the enclosing '{'@type "block phrase" block}''s return type if absent.\n\
\ *        Zero or more label declaration is permitted.\n\
\ * @param "bodyPhrase" "list phrase⇒(statement*)"\n\
\ *        A '{'@type "list phrase"} corresponding to the '{'@type "statement"}s that\n\
\ *        comprise the body. Zero or many '{'@type "statement"}s are permitted.\n\
\ * @param "returnPhrase" "list phrase⇒(any?)"\n\
\ *        A '{'@type "list phrase"} corresponding to the value-producing return\n\
\ *        '{'@type "expression phrase" expression}. Zero or one return '{'@type\n\
\ *        "expression phrase" expression} is permitted; if omitted, then the\n\
\ *        return type is inferred to be '{'@type "⊤"}.\n\
\ * @param "returnTypePhrase" "list phrase⇒(any meta?)"\n\
\ *        A '{'@type "list phrase"} corresponding to the return type declaration.\n\
\ *        Zero or one return type declaration is permitted; if omitted, then the\n\
\ *        return type is inferred to be '{'@type "_∪_" type union} of the type\n\
\ *        indicated by '{'@param "returnPhrase"} and the label return type.\n\
\ * @param "exceptionTypesPhrase" "list phrase⇒(exception*)"\n\
\ *        A '{'@type "list phrase"} corresponding to the declared '{'@type\n\
\ *        "exception"}s. Zero or many '{'@type "exception"}s may be declared.\n\
\ * @returns "block phrase"\n\
\ * @category "Avail Syntax" "Functions"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a '{'@type "local variable phrase" local variable\n\
\ * declaration} from the supplied identifier and '{'@type "any meta" type}.\n\
\ *\n\
\ * If this macro is evaluated in the module scope, then the compiler will\n\
\ * automatically convert the result into an equivalent '{'@type\n\
\ * "module variable phrase" module variable declaration} prior to code\n\
\ * generation.\n\
\ *\n\
\ * @macro "…:_†;"\n\
\ * @param "varNamePhrase" "literal phrase⇒token"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "token"}\n\
\ *        corresponding to the identifier of the declared '{'@type "variable"}.\n\
\ * @param "varTypePhrase" "literal phrase⇒any meta"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "type"} of the\n\
\ *        declared '{'@type "variable"}.\n\
\ * @returns "local variable phrase"\n\
\ * @category "Avail Syntax" "Variables"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a '{'@type "local constant phrase" local constant\n\
\ * definition} from the supplied identifier and '{'@type "expression phrase"\n\
\ * expression}.\n\
\ *\n\
\ * If this macro is evaluated in the module scope, then the compiler will\n\
\ * automatically convert the result into an equivalent '{'@type\n\
\ * "module constant phrase" module constant declaration} prior to code\n\
\ * generation.\n\
\ *\n\
\ * @macro "…::=_;"\n\
\ * @param "constNamePhrase" "literal phrase⇒token"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "token"}\n\
\ *        corresponding to the identifier of the defined constant.\n\
\ * @param "constValuePhrase" "expression phrase⇒any"\n\
\ *        An '{'@type "expression phrase"} that answers the value to which the\n\
\ *        defined constant is permanently bound.\n\
\ * @returns "local constant phrase"\n\
\ * @category "Avail Syntax" "Variables"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a '{'@type "local variable phrase" local variable\n\
\ * declaration} from the supplied identifier, '{'@type "any meta" type}, and\n\
\ * initial value '{'@type "expression phrase" expression}.\n\
\ *\n\
\ * If this macro is evaluated in the module scope, then the compiler will\n\
\ * automatically convert the result into an equivalent '{'@type\n\
\ * "module variable phrase" module variable declaration} prior to code\n\
\ * generation.\n\
\ *\n\
\ * @macro "…:_†:=_;"\n\
\ * @param "varNamePhrase" "literal phrase⇒token"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "token"}\n\
\ *        corresponding to the identifier of the declared '{'@type "variable"}.\n\
\ * @param "varTypePhrase" "literal phrase⇒any meta"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "type"} of the\n\
\ *        declared '{'@type "variable"}.\n\
\ * @param "valuePhrase" "expression phrase⇒any"\n\
\ *        An '{'@type "expression phrase"} that answers the value to which the\n\
\ *        declared variable is initially bound.\n\
\ * @returns "local variable phrase"\n\
\ * @category "Avail Syntax" "Variables"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer an '{'@type "assignment phrase"} (wrapped inside an\n\
\ * '{'@type "expression-as-statement phrase"}.\n\
\ *\n\
\ * @macro "…:=_;"\n\
\ * @param "varNamePhrase" "literal phrase⇒token"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "token"}\n\
\ *        corresponding to the identifier of the target '{'@type "variable"}.\n\
\ * @param "valuePhrase" "expression phrase⇒any"\n\
\ *        An '{'@type "expression phrase"} that answers the value to which the\n\
\ *        target variable should be rebound.\n\
\ * @returns "expression-as-statement phrase"\n\
\ *          An '{'@type "expression-as-statement phrase"} that decorates an\n\
\ *          '{'@type "assignment phrase"}.\n\
\ * @category "Avail Syntax" "Variables"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a '{'@type "variable use phrase" use} of the identified\n\
\ * '{'@type "variable"} or constant.\n\
\ *\n\
\ * @macro "…"\n\
\ * @param "varNamePhrase" "literal phrase⇒token"\n\
\ *        A '{'@type "literal phrase"} that answers the '{'@type "token"}\n\
\ *        corresponding to the identifier of the source '{'@type "variable"} or\n\
\ *        constant.\n\
\ * @returns "variable use phrase"\n\
\ * @category "Avail Syntax" "Variables"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer an '{'@type "expression-as-statement phrase"} that\n\
\ * represents a '{'@type "send phrase" send} of a '{'@type "⊤"}-valued '{'@type\n\
\ * "method definition"'}'.\n\
\ *\n\
\ * This macro is required for supplying '{'@type "⊤"}-valued '{'@type "send phrase"\n\
\ * sends} as '{'@type "statement"}s of a '{'@type "block phrase" block}, because the\n\
\ * compiler disallows '{'@type "⊤"}-valued arguments to '{'@type "send phrase"\n\
\ * sends}. The '{'@code "_!"} metacharacter combination quotes the '{'@type\n\
\ * "send phrase"} by wrapping it in a '{'@type "literal phrase"}, thus making it\n\
\ * eligible for passing as an argument to a macro.\n\
\ *\n\
\ * @macro "_!;"\n\
\ * @param "sendPhrase" "literal phrase⇒send phrase"\n\
\ *        A '{'@type "literal phrase"} that decorates a '{'@type "send phrase"}. The\n\
\ *        decorated '{'@type "send phrase" phrase} represents a send of a '{'@type\n\
\ *        "⊤"}-valued '{'@type "method definition"}.\n\
\ * @returns "expression-as-statement phrase"\n\
\ * @category "Avail Syntax"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a '{'@type "super cast phrase"} from the specified\n\
\ * '{'@type "expression phrase" argument expression} and '{'@type "any meta" type}.\n\
\ * At runtime, the '{'@type "send phrase" send} in which the resultant '{'@type\n\
\ * "super cast phrase"} is embedded will be resolved using the '{'@type "any meta"\n\
\ * type} specified here instead of the dynamic type of the corresponding\n\
\ * argument.\n\
\ *\n\
\ * @macro "(_::_†)"\n\
\ * @param "argPhrase" "expression phrase⇒any"\n\
\ *        An '{'@type "expression phrase"} that corresponds to the argument that\n\
\ *        should be super cast.\n\
\ * @param "argTypePhrase" "literal phrase⇒any meta"\n\
\ *        A '{'@type "literal phrase"} that specifies the '{'@type "any meta"\n\
\ *        supertype} of the value represented by '{'@param "argPhrase"} that\n\
\ *        should be used to rebase the resolution of the target '{'@type "method"}\n\
\ *        to a '{'@type "method definition"}.\n\
\ * @returns "super cast phrase"\n\
\ * @category "Avail Syntax"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a literal phrase based on the parsed string literal\n\
\ * token.\n\
\ *\n\
\ * @macro "…$"\n\
\ * @param "stringLiteralToken" "literal phrase⇒literal token⇒string"\n\
\ *        The '{'@type "literal phrase"} built by parsing the argument denoted\n\
\ *        by the macro metacharacters ''…$''.\n\
\ * @returns "literal phrase→string"\n\
\ * @category "Avail Syntax"\n\
\ */\n\
\n\
\/**\n\
\ * Construct and answer a literal phrase based on the parsed non-negative\n\
\ * integer literal token.\n\
\ *\n\
\ * @macro "…#"\n\
\ * @param "integerLiteralPhrase" "literal phrase⇒literal token⇒whole number"\n\
\ *        The '{'@type "literal phrase"} built by parsing the argument denoted\n\
\ *        by the macro metacharacters ''…#''.\n\
\ * @returns "literal phrase→whole number"\n\
\ * @category "Avail Syntax"\n\
\ */

specialObjectsModuleName=Special Objects
primitivesModuleName=Primitives
infalliblePrimitivesModuleName=Infallible Primitives
falliblePrimitivesModuleName=Fallible Primitives
errorCodesModuleName=Error Codes
generalModuleHeader=\
Module "{0}"\n\
Versions{1}\n\
Extends{2}\n\
Uses{3}\n\
Names{4}\n\
Body\n\

representativeModuleName=Bootstrap
bootstrapDefiningMethod=Primitive_is_
bootstrapSpecialObject=special object_
bootstrapDefineSpecialObjectMacro=Special object_is_;
bootstrapMacroNames=\t"\\\n\
\t\t\\|[§\\\n\
\t\t\t\\|««…:_†§‡,»`|»?\\\n\
\t\t\t\\|«Primitive…«(…:_†)»?§;»?\\\n\
\t\t\t\\|«`$…«:_†»?;§»?\\\n\
\t\t\t\\|«_!§»\\\n\
\t\t\t\\|«_!»?\\\n\
\t\t\\|]§\\\n\
\t\t\\|«:_†»?\\\n\
\t\t\\|«^«_†‡,»»?",\n\
\t"…:_†;",\n\
\t"…::=_;",\n\
\t"…:_†:=_;",\n\
\t"…:=_;",\n\
\t"…",\n\
\t"_!;",\n\
\t"(_::_†)",\n\
\t"…$",\n\
\t"…#"\n
bootstrapMacros=\t"macro=\\\n\
\t\t\\|BootstrapPrefixStartOfBlock,\\\n\
\t\t\\|BootstrapPrefixBlockArgument,\\\n\
\t\t\\|BootstrapPrefixPrimitiveDeclaration,\\\n\
\t\t\\|BootstrapPrefixLabelDeclaration,\\\n\
\t\t\\|BootstrapPrefixPostStatement,\\\n\
\t\t\\|BootstrapPrefixEndOfBlockBody,\\\n\
\t\t\\|BootstrapBlockMacro=\\\n\
\t\t\t\\|[§\\\n\
\t\t\t\t\\|««…:_†§‡,»`|»?\\\n\
\t\t\t\t\\|«Primitive…«(…:_†)»?§;»?\\\n\
\t\t\t\t\\|«`$…«:_†»?;§»?\\\n\
\t\t\t\t\\|«_!§»\\\n\
\t\t\t\t\\|«_!»?\\\n\
\t\t\t\\|]§\\\n\
\t\t\t\\|«:_†»?\\\n\
\t\t\t\\|«^«_†‡,»»?",\n\
\t"macro=BootstrapVariableDeclarationMacro=…:_†;",\n\
\t"macro=BootstrapConstantDeclarationMacro=…::=_;",\n\
\t"macro=BootstrapInitializingVariableDeclarationMacro=…:_†:=_;",\n\
\t"macro=BootstrapAssignmentStatementMacro=…:=_;",\n\
\t"macro=BootstrapVariableUseMacro=…",\n\
\t"macro=BootstrapSendAsStatementMacro=_!;",\n\
\t"macro=BootstrapSuperCastMacro=(_::_†)",\n\
\t"macro=BootstrapStringLiteral=…$",\n\
\t"macro=BootstrapIntegerLiteral=…#"\n
definingSpecialObjectUse=Special object {0} is {1};
definingMethodUse=Primitive {0} is{1}
specialObjectUse=special object {0}
parameterPrefix=arg
primitiveKeyword=Primitive
primitiveFailureMethod=Private fail primitive with_
primitiveFailureMethodUse=Private fail primitive with {0}
primitiveFailureVariableName=failureCode
primitiveFailureFunctionName=_fail_primitive
primitiveFailureFunctionSetterMethod=Set early failure function to_
primitiveFailureFunctionGetterMethod=early failure function
invokePrimitiveFailureFunctionMethod=Private invoke_with«_‡,»
invokePrimitiveFailureFunctionMethodUse=Private invoke {0} with {1}
primitiveSemanticRestriction=Private semantic restriction_is_
primitiveSemanticRestrictionUse=Private semantic restriction {0} is {1}
