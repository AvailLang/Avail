/*
 * build.gradle
 * Copyright Â© 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.3.72' // $kotlin_version
	id 'com.github.johnrengelman.shadow' version '5.2.0' // $shadow_version
	id 'org.jetbrains.dokka' version '0.10.1'
}

group 'org.availlang'
version '1.4'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		jvmTarget = '1.8'
		freeCompilerArgs = ['-Xjvm-default=compatibility']
	}
}

dependencies {
	// Kotlin.
	implementation group: 'org.jetbrains.kotlin',
		name: 'kotlin-stdlib-jdk8',
		version: "$kotlin_version"

	// JSR-305 null analysis framework.
	implementation group: 'com.google.code.findbugs',
		name: 'jsr305',
		version: "$jsr_version"

	// ObjectWeb JVM code generation/analysis framework.
	implementation group: 'org.ow2.asm', name: 'asm', version: "$asm_version"
	implementation group: 'org.ow2.asm',
		name: 'asm-analysis',
		version: "$asm_version"
	implementation group: 'org.ow2.asm',
		name: 'asm-tree',
		version: "$asm_version"
	implementation group: 'org.ow2.asm',
		name: 'asm-util',
		version: "$asm_version"

	// JUnit 5.
	testRuntimeOnly group: 'org.junit.jupiter',
		name: 'junit-jupiter-engine',
		version: "$junit_version"
	testImplementation group: 'org.junit.jupiter',
		name: 'junit-jupiter-api',
		version: "$junit_version"
	testImplementation group: 'org.junit.jupiter',
		name: 'junit-jupiter-params',
		version: "$junit_version"
}

// Compute the Avail roots. This is needed to properly configure "test".
ext.computeAvailRoots = {
	def pathRepos = "$projectDir/repositories"
	def pathRootsSrc = "$projectDir/distro/src"
	def roots = "avail=$pathRepos/avail.repo,$pathRootsSrc/avail"
	roots += ";experimental=$pathRepos/experimental.repo,$projectDir/experimental/even-newer-avail"
	roots += ";examples=$pathRepos/examples.repo,$pathRootsSrc/examples"
	roots += ";website=$pathRepos/website.repo,$pathRootsSrc/website"
	roots
}

test {
	useJUnitPlatform()
	minHeapSize = "4g"
	maxHeapSize = "6g"
	enableAssertions = true
	systemProperty "availRoots", computeAvailRoots()
}

// Capture the time at which the build began and record it into a resource file.
task generateBuildTime {
	def pathAvailBuildResources = "$buildDir/resources/main/resources"
	def pathToBuildTime = "$pathAvailBuildResources/build-time.txt"
	outputs.files pathToBuildTime

	doLast {
		def formatter = DateTimeFormatter
			.ofPattern("yyyyMMdd.HHmmss.SSS")
			.withLocale(Locale.default)
			.withZone(ZoneId.systemDefault())
		def now = formatter.format(Instant.now())

		file(pathToBuildTime).text = "$now\n"
	}
}

// DOCUMENTATION TASKS

// Remove generated documentation files
task cleanDocs {
	description 'Cleaning up previously generated documentation website'
	delete 'documentation/docs/src_docs'
	delete 'documentation/site'
}
cleanDocs.dependsOn clean

// Creates documentation/docs/index.md from README.md
task copyReadMeToDocs(type: Copy) {
	from file("README.md")
	rename { String fileName ->
		"index.md"
	}
	into file("documentation/docs")
}
copyReadMeToDocs.dependsOn cleanDocs

// Generate Kotlin documentation
dokka {
	outputFormat='gfm'
	outputDirectory='documentation/docs/src_docs'
	subProjects = [
		"avail-bootstrap",
		"avail-cli",
		"avail-server",
		"avail-workbench",
		"indexed-file-analyzer",
		"unicode-catalog"
	]
}

task dokkaHTML(type: org.jetbrains.dokka.gradle.DokkaTask) {
	outputFormat = 'html'
	outputDirectory = "$buildDir/dokka"
}

// Install MkDocs and other dependencies
task installDocsToolsMac(type:Exec) {
	description 'Installing documenation website dependencies'
	commandLine './documentation/docs.sh', 'install'
}

// END DOCUMENTATION TASKS

// Generate the list of all primitives, which a running Avail system uses during
// setup to reflectively identify the complete catalog of primitives.
task generatePrimitivesList {
	// Un-Windows the path, if necessary.
	def pathAvailBuildMain =
		"$buildDir/classes/kotlin/main".replaceAll('\\\\', '/')
	def allPrimitives = fileTree("$pathAvailBuildMain/com/avail/interpreter")
	def pathToPrimitivesList =
		file("$pathAvailBuildMain/com/avail/interpreter/All_Primitives.txt")
	allPrimitives.include "**/P_*.class"
	allPrimitives.exclude '**/*$*.class'
	allPrimitives.builtBy "compileJava"
	inputs.files allPrimitives
	outputs.files pathToPrimitivesList

	doLast {
		def allPrimitiveNames = allPrimitives.collect {
			it.absolutePath
				.replaceAll('\\\\', '/')
				.replaceFirst("^$pathAvailBuildMain/", "")
				.replaceFirst('\\.class', "\n")
				.replaceAll("/", ".")
		}.sort()

		pathToPrimitivesList.text = allPrimitiveNames.join("")
	}
}

// Update the dependencies of "classes".
classes.dependsOn generateBuildTime
classes.dependsOn generatePrimitivesList

// Copy the JAR into the distribution directory.
task releaseAvail(type: Copy) {
	group = 'release'
	from shadowJar.outputs.files
	into file("$projectDir/distro/lib")
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Update the dependencies of "assemble".
assemble.dependsOn releaseAvail

// Remove released libraries.
task scrubReleases(type: Delete) {
	delete fileTree("$projectDir/distro/lib") {
		include '**/*.jar'
	}
}

// Update the dependencies of "clean".
clean.dependsOn scrubReleases

// Show the release banner upon final completion of the recursive build.
gradle.buildFinished {
	if (!('build' in gradle.startParameter.taskNames)
		|| it.getFailure() != null)
	{
		return
	}
	println """
ATTENTION ==========================================================
Be sure to set AVAIL_HOME to:

\t$projectDir/distro

And update your path to include:

\t$projectDir/distro/bin

For example, a user of bash might include something like the
following in the appropriate shell config file:

\texport AVAIL_HOME=$projectDir/distro
\texport PATH=\$PATH:$projectDir/distro/bin

Once your path has been updated, from any directory you can launch
the Avail workbench like this:

\tavail-dev

Or the Avail server like this:

\tavail-server

(The server is currently hard-wired to run on port 40000. This will
change at some point.)

To develop Avail code, you will also need to set AVAIL_ROOTS to a
valid module root path. If AVAIL_ROOTS is not set, then avail-dev
temporarily sets it to:

\tavail=\$HOME/.avail/repos/avail.repo,$projectDir/distro/src/avail;\\
\texamples=\$HOME/.avail/repos/examples.repo,$projectDir/distro/src/examples

This is convenient for experimenting with Avail, but must be
extended with custom module roots as you develop your own modules.
====================================================================
"""
}
