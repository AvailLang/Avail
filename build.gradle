/*
 * build.gradle
 * Copyright Â© 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.5.30-M1' // $kotlin_version
	id 'com.github.johnrengelman.shadow' version '6.0.0' // $shadow_version
	id 'org.jetbrains.dokka' version '1.5.0'
	id 'maven-publish'
	id 'publishing'
}

ext.versionToPublish = {
	def formatter = DateTimeFormatter
		.ofPattern("yyyyMMdd.HHmmss")
		.withLocale(Locale.default)
		.withZone(ZoneId.of("UTC"))
	def timeString = formatter.format(Instant.now())
	"1.6.0.$timeString"
}()

allprojects {
	group 'org.availlang'
	version versionToPublish

	sourceCompatibility = 16

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	// Capture the time at which the build began, writing it to a resource file.
	task generateBuildTime {
		def pathWorkbenchBuildResources =
				buildDir.toString() + "/resources/main/resources"
		String pathToBuildTime = "$pathWorkbenchBuildResources/build-time.txt"
		outputs.files pathToBuildTime

		doLast {
			def formatter = DateTimeFormatter
					.ofPattern("yyyyMMdd.HHmmss.SSS")
					.withLocale(Locale.default)
					.withZone(ZoneId.systemDefault())
			def now = formatter.format(Instant.now())
			file(pathToBuildTime).text = "$now\n"
		}
	}
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "16"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = "16"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testApi project(":avail-test-utility")

	// Kotlin.
	api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

	// JSR-305 null analysis framework.
	api "com.google.code.findbugs:jsr305:$jsr_version"

	// Type renderer annotations, for debugger view.  Doesn't actually work.
	compileOnly("org.jetbrains:annotations:$kotlin_annotations")

	// ObjectWeb JVM code generation/analysis framework.
	api "org.ow2.asm:asm:$asm_version"
	api "org.ow2.asm:asm-analysis:$asm_version"
	api "org.ow2.asm:asm-tree:$asm_version"
	api "org.ow2.asm:asm-util:$asm_version"

	// Java's file-watcher mechanism is garbage, so use this instead.
	api "io.methvin:directory-watcher:$directory_watcher_version"

	// https://tika.apache.org for file MIME type detection
	implementation "org.apache.tika:tika-core:$tika_version"

	// JUnit 5.
	testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit_version")
	testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

// Compute the Avail roots. This is needed to properly configure "test".
def computeAvailRoots = {
	def pathRootsSrc = projectDir.toString() + "/distro/src"
	def roots = [
			["avail", "$pathRootsSrc/avail"],
			["builder-tests", "$pathRootsSrc/builder-tests"],
			["examples", "$pathRootsSrc/examples"],
			["website", "$pathRootsSrc/website"]
	]
	return roots.collect {
		"${it[0]}=${it[1]}"
	}.join(";")
}()

test {
	useJUnitPlatform()
	minHeapSize = "4g"
	maxHeapSize = "6g"
	enableAssertions = true
	systemProperty "availRoots", computeAvailRoots
}

// DOCUMENTATION TASKS

// Remove generated documentation files
task cleanDocs {
	description 'Cleaning up previously generated documentation website'
	delete 'documentation/docs/src_docs'
	delete 'documentation/site'
}
cleanDocs.dependsOn clean

// Creates documentation/docs/index.md from README.md
task copyReadMeToDocs(type: Copy) {
	from file("README.md")
	rename { String fileName ->
		"index.md"
	}
	into file("documentation/docs")
}
copyReadMeToDocs.dependsOn cleanDocs

// Generate Kotlin documentation
dokkaGfm {
	outputDirectory = file 'documentation/docs/src_docs'
}

dokkaHtml {
	outputDirectory = file "$buildDir/dokka"
}

// Install MkDocs and other dependencies
task installDocsToolsMac(type:Exec) {
	description 'Installing documentation website dependencies'
	commandLine './documentation/docs.sh', 'install'
}

// END DOCUMENTATION TASKS

// Generate the list of all primitives, which a running Avail system uses during
// setup to reflectively identify the complete catalog of primitives.
task generatePrimitivesList {
	// Un-Windows the path, if necessary.
	def pathAvailBuildMain =
		"$buildDir/classes/kotlin/main".replaceAll('\\\\', '/')
	def allPrimitives = fileTree("$pathAvailBuildMain/com/avail/interpreter")
	def pathToPrimitivesList =
		file("$pathAvailBuildMain/com/avail/interpreter/All_Primitives.txt")
	allPrimitives.include "**/P_*.class"
	allPrimitives.exclude '**/*$*.class'
	allPrimitives.builtBy "compileKotlin"
	inputs.files allPrimitives
	outputs.files pathToPrimitivesList

	doLast {
		def allPrimitiveNames = allPrimitives.collect {
			it.absolutePath
				.replaceAll("\\\\", '/')
				.replaceFirst(/^$pathAvailBuildMain\//, "")
				.replaceFirst(/\.class/, "\n")
				.replaceAll("/", ".")
		}.sort()

		pathToPrimitivesList.text = allPrimitiveNames.join("")
	}
}

// Update the dependencies of "classes".
classes.dependsOn generateBuildTime
classes.dependsOn generatePrimitivesList

jar.doFirst {
	delete fileTree("$projectDir/build/libs") {
		include "**/*.jar"
		exclude "**/*-all.jar"
	}
}

shadowJar.doFirst {
	delete fileTree("$projectDir/build/libs") {
		include "**/*-all.jar"
	}
}

// Copy the JAR into the distribution directory.
task releaseAvail(type: Copy) {
	group = 'release'
	from shadowJar.outputs.files
	into file("$projectDir/distro/lib")
	rename '.*', 'avail.jar'
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Update the dependencies of "assemble".
assemble.dependsOn releaseAvail

// Remove released libraries.
task scrubReleases(type: Delete) {
	// distro/lib
	delete fileTree("$projectDir/distro/lib") {
		include '**/*.jar'
	}
	// And the publication staging directory, build/libs
	delete fileTree("$projectDir/build/libs") {
		include '**/*.jar'
	}
}

// Update the dependencies of "clean".
clean.dependsOn scrubReleases

// Show the release banner upon final completion of the recursive build.
gradle.buildFinished {
	if (!('build' in gradle.startParameter.taskNames)
		|| it.getFailure() != null)
	{
		return
	}
	println """
ATTENTION ==========================================================
Be sure to set AVAIL_HOME to:

\t$projectDir/distro

And update your path to include:

\t$projectDir/distro/bin

For example, a user of bash might include something like the
following in the appropriate shell config file:

\texport AVAIL_HOME=$projectDir/distro
\texport PATH=\$PATH:$projectDir/distro/bin

Once your path has been updated, from any directory you can launch
the Avail workbench like this:

\tavail-dev

Or the Avail server like this:

\tavail-server

(The server is currently hard-wired to run on port 40000. This will
change at some point.)

To develop Avail code, you will also need to set AVAIL_ROOTS to a
valid module root path. If AVAIL_ROOTS is not set, then avail-dev
temporarily sets it to:

\tavail=$projectDir/distro/src/avail;\\
\texamples=$projectDir/distro/src/examples

This is convenient for experimenting with Avail, but must be
extended with custom module roots as you develop your own modules.
====================================================================
"""
}

allprojects {
	if (project.name != 'avail-stdlib') {
		task sourceJar(type: Jar) {
			description = 'Creates sources JAR.'
			archiveClassifier.set("sources")
			from sourceSets.main.allSource
			duplicatesStrategy = DuplicatesStrategy.INCLUDE
		}
	}
}

ext.credentialsWarning = "Missing credentials.  To publish, you'll need to " +
	"create a GitHub token:" +
	"\n" +
	(
		"https://help.github.com/en/actions/" +
			"configuring-and-managing-workflows/" +
			"authenticating-with-the-github_token") +
	"\n" +
	"Then set GITHUB_USER and GITHUB_TOKEN variables to hold your github " +
	"username and the (generated hexadecimal) token, respectively, in " +
	"~/.bash_profile or other appropriate login script." +
	"\n" +
	'Remember to restart IntelliJ after this change.'

ext.github_username = System.getenv("GITHUB_USER")
ext.github_password = System.getenv("GITHUB_TOKEN")

publishing {
	repositories {
		maven {
			name = "GitHub"
			url = uri("https://maven.pkg.github.com/AvailLang/Avail")
			credentials {
				username = github_username
				password = github_password
			}
		}
	}

	publications {
		avail(MavenPublication) {
			from components.java
			artifact sourceJar
		}
	}
}

// Remove libraries from the staging directory after successful publication.
// Otherwise they'll gradually build up in there.
task cleanUpStagingDirectory(type: Delete) {
	delete fileTree("$projectDir/build/libs") {
		include '**/*.jar'
	}
	dependsOn publishAvailPublicationToGitHubRepository
}

publish.dependsOn cleanUpStagingDirectory

publish.doFirst {
	if (github_username == null || github_password == null)
	{
		System.err.println(credentialsWarning)
	}
}
