/*
 * build.gradle
 * Copyright © 1993-2019, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
	id 'java'
}

group 'org.availlang'
version '1.4'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	// Avail.
	implementation rootProject

	// JSR-305 null analysis framework.
	implementation group: 'com.google.code.findbugs',
		name: 'jsr305',
		version: "$jsr_version"
}

// Capture the time at which the build began and record it into a resource file.
task generateBuildTime {
	def pathWorkbenchBuildResources =
		"$buildDir/resources/main/resources/workbench"
	def pathToBuildTime = "$pathWorkbenchBuildResources/build-time.txt"
	outputs.files pathToBuildTime

	doLast {
		def formatter = DateTimeFormatter
			.ofPattern("yyyyMMdd.HHmmss.SSS")
			.withLocale(Locale.default)
			.withZone(ZoneId.systemDefault())
		def now = formatter.format(Instant.now())

		file(pathToBuildTime).text = "$now\n"
	}
}

// Update the dependencies of "classes".
classes.dependsOn generateBuildTime

// Produce a fat JAR for the Avail workbench.
jar {
	manifest {
		attributes 'Main-Class': 'com.avail.environment.AvailWorkbench'
	}

	from {
		configurations.compileClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

// Copy the JAR into the distribution directory.
task releaseAvailWorkbench (type: Copy) {
	group = 'release'
	from jar.outputs.files
	into file("${rootProject.projectDir}/distro/lib")
}

// Update the dependencies of "assemble".
assemble.dependsOn releaseAvailWorkbench

// Build the Avail workbench as an OS X application. Note that the result will
// not work for the combination of Mojave and Java 11; we will need to actually
// package a complete JRE, but that's a problem for another day …
task osx {
	def appSrc = fileTree("$projectDir/osx")
	def appDst = "${rootProject.projectDir}/distro/Apps/Avail Workbench.app"
	inputs.files appSrc
	outputs.files appDst

	group = 'build'
	dependsOn assemble

	doLast {
		mkdir appDst

		copy {
			from appSrc
			into file(appDst)
		}

		def resDir = "$projectDir/src/main/resources/resources/avail-workbench"
		def resSrc = file("$resDir/AvailHammer.icns")
		def resDst = file("$appDst/Contents/Resources")
		copy {
			from resSrc
			into resDst
		}

		def jarSrc = jar.outputs.files
		def jarDst = file("$appDst/Contents/Java")
		mkdir jarDst
		copy {
			from jarSrc
			into jarDst
		}

		exec {
			def launcher = "$appDst/Contents/MacOS/JavaAppLauncher"
			commandLine 'chmod', '+x', launcher
		}

		exec {
			commandLine 'setfile', '-a', 'B', appDst
		}
	}
}
