/*
 * build.gradle
 * Copyright © 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm'
	id 'com.github.johnrengelman.shadow'
	id 'org.jetbrains.dokka'
	id 'maven-publish'
	id 'publishing'
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Avail.
	api rootProject

	// Kotlin.
	api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

	// JSR-305 null analysis framework.
	api "com.google.code.findbugs:jsr305:$jsr_version"

	// Dark mode look & feel.  Embed the jar's contents in the fat shadow jar.
	// This was based on the Darcula module.
	implementation "com.github.weisj:darklaf-core:$darklaf_version"
}

// Update the dependencies of "classes".
classes.dependsOn generateBuildTime

shadowJar {
	dependencies {
		exclude(rootProject.path)
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Produce a jar for the Avail workbench.  It should have a Gradle dependency on
// the core Avail VM module.
jar {
	manifest.attributes.put 'Main-Class', 'com.avail.environment.AvailWorkbench'
}

// Copy the JAR into the distribution directory.
task releaseAvailWorkbench(type: Copy) {
	group = 'release'
	from shadowJar.outputs.files
	into file("${rootProject.projectDir}/distro/lib")
	rename '.*', 'avail-workbench.jar'
}

// Update the dependencies of "assemble".
assemble.dependsOn releaseAvailWorkbench

// Build the Avail workbench as an OS X application. Note that the result will
// not work for the combination of Mojave and Java 11; we will need to actually
// package a complete JRE, but that's a problem for another day …
task osx {
	def appSrc = fileTree("$projectDir/osx")
	def appDst = rootProject.projectDir.toString() +
			"/distro/Apps/Avail Workbench.app"
	def resDir = projectDir.toString() +
			"/src/main/resources/resources/workbench"
	def resSrc = file("$resDir/AvailHammer.icns")
	def resDst = file("$appDst/Contents/Resources")
	def jarSrc = shadowJar.outputs.files
	def jarDst = file("$appDst/Contents/Java")
	inputs.files appSrc, resSrc, resDst
	outputs.dir appDst

	group = 'build'
	dependsOn assemble

	doLast {
		mkdir appDst
		copy {
			from appSrc
			into file(appDst)
			duplicatesStrategy = DuplicatesStrategy.INCLUDE
		}
		copy {
			from resSrc
			into resDst
			duplicatesStrategy = DuplicatesStrategy.INCLUDE
		}
		mkdir jarDst
		copy {
			from jarSrc
			into jarDst
			rename '.*', 'avail-workbench.jar'
			duplicatesStrategy = DuplicatesStrategy.INCLUDE
		}
		exec {
			String launcher = "$appDst/Contents/MacOS/JavaAppLauncher"
			commandLine 'chmod', '+x', launcher
		}
		exec {
			commandLine 'setfile', '-a', 'B', appDst
		}
	}
}

// Generate documentation
dokkaGfm {
	// Outputting to documentation/docs/src-docs directly causes the contents of
	// the directory to be deleted. Moving the directory post generation is the
	// work around.
	doLast {
		ant.move file: "${buildDir}/dokka/avail-workbench",
			todir: "../documentation/docs/src_docs"
	}
}

dokkaHtml {
	outputDirectory = file "$buildDir/dokka"
}

publishing {
	repositories {
		maven {
			name = "GitHub"
			url = uri("https://maven.pkg.github.com/AvailLang/Avail")
			credentials {
				username = github_username
				password = github_password
			}
		}
	}

	publications {
		workbench(MavenPublication) {
			from components.java
			artifact sourceJar
		}
	}
}
