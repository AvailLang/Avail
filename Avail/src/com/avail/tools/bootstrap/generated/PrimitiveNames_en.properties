#
# PrimitiveNames_en.properties
# Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.PrimitiveNamesGenerator
# * Last Generated On: 2012.05.03 13:40:41.291 -0500
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

#   1 : _=2
P_001_Addition=_+_
P_001_Addition_0=augend
P_001_Addition_1=addend
P_001_Addition_comment=\
/**\n\
\ * Compute and answer the sum of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The augend.\n\
\ *    {1} - The addend.\n\
\ * Returns:\n\
\ *    The sum of the augend and the addend.\n\
\ */\n
#   2 : _=2
P_002_Subtraction=_-_
P_002_Subtraction_0=minuend
P_002_Subtraction_1=subtrahend
P_002_Subtraction_comment=\
/**\n\
\ * Compute and answer the difference of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The difference of the minuend and the subtrahend.\n\
\ */\n
#   3 : _=2
P_003_Multiplication=_×_
P_003_Multiplication_0=multiplicand
P_003_Multiplication_1=multiplier
P_003_Multiplication_comment=\
/**\n\
\ * Compute and answer the product of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The multiplicand.\n\
\ *    {1} - The multiplier.\n\
\ * Returns:\n\
\ *    The product of the multiplicand and the multiplier.\n\
\ */\n
#   4 : _=2
P_004_Division=_÷_
P_004_Division_0=dividend
P_004_Division_1=divisor
P_004_Division_comment=\
/**\n\
\ * Compute and answer the quotient of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    The quotient of the dividend and the divisor.\n\
\ */\n
#   5 : _=2
P_005_LessThan=_<_
P_005_LessThan_0=
P_005_LessThan_1=
P_005_LessThan_comment=\
/**\n\
\ * Is the first argument strictly less than the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is strictly less than the second argument,\n\
\ *    `false` otherwise.\n\
\ */\n
#   6 : _=2
P_006_LessOrEqual=_≤_
P_006_LessOrEqual_0=
P_006_LessOrEqual_1=
P_006_LessOrEqual_comment=\
/**\n\
\ * Is the first argument less than or equal to the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is less than or equal to the second\n\
\ *    argument, `false` otherwise.\n\
\ */\n
#   7 : _=4
P_007_CreateIntegerRange=integer range from_(inclusive=_)to_(inclusive=_)
P_007_CreateIntegerRange_0=lowerBound
P_007_CreateIntegerRange_1=lowerBoundInclusive
P_007_CreateIntegerRange_2=upperBound
P_007_CreateIntegerRange_3=upperBoundInclusive
P_007_CreateIntegerRange_comment=\
/**\n\
\ * Construct and answer an integral range type whose lower bound is `{0}`\n\
\ * and whose upper bound is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The lower bound.\n\
\ *    {1} -\n\
\ *       `true` if the lower bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ *    {2} - The upper bound.\n\
\ *    {3} -\n\
\ *       `true` if the upper bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ * Returns:\n\
\ *    The requested integral range type.\n\
\ */\n
#   8 : _=1
P_008_LowerBound=_'s⁇genuine lower bound
P_008_LowerBound_0=range
P_008_LowerBound_comment=\
/**\n\
\ * Answer the lower bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The lower bound of the argument.\n\
\ */\n
#   9 : _=1
P_009_UpperBound=_'s⁇genuine upper bound
P_009_UpperBound_0=range
P_009_UpperBound_comment=\
/**\n\
\ * Answer the upper bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The upper  bound of the argument.\n\
\ */\n
#  10 : _=1
P_010_GetValue=↓_
P_010_GetValue_0=var
P_010_GetValue_comment=\
/**\n\
\ * Answer the value contained within the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value contained within the specified variable.\n\
\ */\n
#  11 : _=2
P_011_SetValue=↓_:=_
P_011_SetValue_0=var
P_011_SetValue_1=value
P_011_SetValue_comment=\
/**\n\
\ * Store `{1}` into the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The value that should be stored into `{0}`.\n\
\ */\n
#  12 : _=1
P_012_ClearValue=Clear_
P_012_ClearValue_0=var
P_012_ClearValue_comment=\
/**\n\
\ * Clear the specified variable. This resets it to the unassigned state.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ */\n
#  13 : _=1
P_013_CreateVariableType=↑_
P_013_CreateVariableType_0=containmentType
P_013_CreateVariableType_comment=\
/**\n\
\ * Construct and answer a variable type with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    The requested variable type.\n\
\ */\n
#  14 : _=1
P_014_VariableReadType=_'s⁇read type
P_014_VariableReadType_0=varType
P_014_VariableReadType_comment=\
/**\n\
\ * Answer the read type of the specified variable type. All values read from\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be read from\n\
\ *    instances of `{0}`.\n\
\ */\n
#  15 : _=2
P_015_Swap=swap_and_
P_015_Swap_0=
P_015_Swap_1=
P_015_Swap_comment=\
/**\n\
\ * Exchange the contents of the two variables. This is more efficient than\n\
\ * using an intermediate variable, and permits additional optimizations by the\n\
\ * virtual machine.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - A variable.\n\
\ */\n
#  16 : _=1
P_016_CreateVariable=new↑_
P_016_CreateVariable_0=containmentType
P_016_CreateVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ */\n
#  17 : _=1
P_017_HasNoValue=_is unassigned
P_017_HasNoValue_0=var
P_017_HasNoValue_comment=\
/**\n\
\ * Is the specified variable unassigned?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    `true` if the variable does not contain a value (i.e. because it has\n\
\ *    never previously been assigned), `false` otherwise.\n\
\ */\n
#  18 : _=1
P_018_GetClearing=eject_
P_018_GetClearing_0=var
P_018_GetClearing_comment=\
/**\n\
\ * Eject and answer the contents of the specified variable. The variable is\n\
\ * in the unassigned state after the primitive completes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value ejected from the variable.\n\
\ */\n
#  19 : _=1
P_019_VariableWriteType=_'s⁇write type
P_019_VariableWriteType_0=varType
P_019_VariableWriteType_comment=\
/**\n\
\ * Answer the write type of the specified variable type. All values written to\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be written to\n\
\ *    instances of `{0}`.\n\
\ */\n
#  20 : _=0
P_020_CurrentTimeMilliseconds=milliseconds since the Epoch
P_020_CurrentTimeMilliseconds_comment=\
/**\n\
\ * Answer the number of milliseconds which have elapsed since midnight\n\
\ * Coordinated Universal Time (UTC) of Thursday, January 1, 1970 (i.e. the Unix\n\
\ * Epoch).\n\
\ *\n\
\ * Returns:\n\
\ *    The current time as the number of milliseconds which have elapsed since\n\
\ *    the Unix Epoch.\n\
\ */\n
#  23 : _=0
P_023_IsTerminationRequested=termination requested
P_023_IsTerminationRequested_comment=\
/**\n\
\ * Has termination of the current fiber been requested?\n\
\ *\n\
\ * Returns:\n\
\ *    `true` if termination of the current fiber has been requested, `false`\n\
\ *    otherwise.\n\
\ */\n
#  24 : _=1
P_024_RequestTermination=request termination of_
P_024_RequestTermination_0=victim
P_024_RequestTermination_comment=\
/**\n\
\ * Request termination of the specified fiber. Termination is consensual only;\n\
\ * cooperation of the fiber is required to affect termination.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
#  25 : _=0
P_025_CurrentProcess=current fiber
P_025_CurrentProcess_comment=\
/**\n\
\ * Answer the current fiber.\n\
\ *\n\
\ * Returns:\n\
\ *    The current fiber.\n\
\ */\n
#  26 : _=2
P_026_LookupProcessVariable=_[_]
P_026_LookupProcessVariable_0=aFiber
P_026_LookupProcessVariable_1=key
P_026_LookupProcessVariable_comment=\
/**\n\
\ * Answer the value bound to `{1}` in the specified fiber''s environment. Since\n\
\ * the fiber''s environment essentially contains fiber-local variables (i.e.\n\
\ * bindings from atoms to arbitrary values), this operation effectively reads a\n\
\ * fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` within the fiber's environment.\n\
\ */\n
#  27 : _=3
P_027_SetProcessVariable=_[_]:=_
P_027_SetProcessVariable_0=aFiber
P_027_SetProcessVariable_1=key
P_027_SetProcessVariable_2=value
P_027_SetProcessVariable_comment=\
/**\n\
\ * Set the value bound to `{1}` in the specified fiber''s environment,\n\
\ * overwriting any previous value. Since the fiber''s environment essentially\n\
\ * contains fiber-local variables (i.e. bindings from atoms to arbitrary\n\
\ * values), this operation effectively writes a fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be (over)written.\n\
\ *    {2} - The new value.\n\
\ */\n
#  28 : _=1
P_028_InstanceCount=|_|
P_028_InstanceCount_0=aType
P_028_InstanceCount_comment=\
/**\n\
\ * Answer the number of instances of the specified type. This is `∞` for all\n\
\ * types except for enumerations.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The cardinality of the membership of the type.\n\
\ */\n
#  29 : _=1
P_029_Instances=_'s⁇instances
P_029_Instances_0=enum
P_029_Instances_comment=\
/**\n\
\ * Answer the instances of the enumeration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An enumeration.\n\
\ * Returns:\n\
\ *    A set whose members are the instances of the enumeration.\n\
\ */\n
#  30 : _=1
P_030_Type=_'s⁇type
P_030_Type_0=value
P_030_Type_comment=\
/**\n\
\ * Answer the precise instance type of the supplied value. This is the most\n\
\ * specific possible type that describes the value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ * Returns:\n\
\ *    The precise instance type of the supplied value.\n\
\ */\n
#  31 : _=2
P_031_TypeUnion=_∪_
P_031_TypeUnion_0=
P_031_TypeUnion_1=
P_031_TypeUnion_comment=\
/**\n\
\ * Compute and answer the type union of the two types. This is the most\n\
\ * specific type that is a supertype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type union of the arguments.\n\
\ */\n
#  32 : _=2
P_032_TypeIntersection=_∩_
P_032_TypeIntersection_0=
P_032_TypeIntersection_1=
P_032_TypeIntersection_comment=\
/**\n\
\ * Compute and answer the type intersection of the two types. This is the most\n\
\ * general type that is a subtype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type intersection of the arguments.\n\
\ */\n
#  33 : _=2
P_033_IsSubtypeOf=_⊆_
P_033_IsSubtypeOf_0=
P_033_IsSubtypeOf_1=
P_033_IsSubtypeOf_comment=\
/**\n\
\ * Is the first argument a subtype of the second argument? This does not\n\
\ * implement the proper subtype relation, so the first argument is considered\n\
\ * a subtype of the second argument also if it is equal to the second argument.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    `true` if the first argument is a subtype of, or the same type as, the\n\
\ *    second argument, `false` otherwise.\n\
\ */\n
#  34 : _=2
P_034_CreateFunctionType=function accepting_and returning_
P_034_CreateFunctionType_0=parameterTypes
P_034_CreateFunctionType_1=returnType
P_034_CreateFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified parameter types and\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The parameter types.\n\
\ *    {1} - The return type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type accept arguments\n\
\ *    whose types conform to the parameter types and whose return value\n\
\ *    conforms to the return type.\n\
\ */\n
#  35 : _=1
P_035_ParamType=_'s⁇parameters'type
P_035_ParamType_0=functionType
P_035_ParamType_comment=\
/**\n\
\ * Answer a tuple type that describes the parameter types of the specified\n\
\ * function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    A fixed-size tuple type whose element types correspond to the parameter\n\
\ *    types of the argument.\n\
\ */\n
#  36 : _=2
P_036_ParamTypeAt=_[_]
P_036_ParamTypeAt_0=functionType
P_036_ParamTypeAt_1=index
P_036_ParamTypeAt_comment=\
/**\n\
\ * Answer the `{1}`-th parameter type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ *    {1} - The one-based index of the desired parameter type.\n\
\ * Returns:\n\
\ *    The `{1}`-th parameter type of the argument.\n\
\ */\n
#  37 : _=1
P_037_ReturnType=_'s⁇return type
P_037_ReturnType_0=functionType
P_037_ReturnType_comment=\
/**\n\
\ * Answer the return type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The return type of the argument.\n\
\ */\n
#  38 : _=1
P_038_UnionOfTupleOfTypes=∪_
P_038_UnionOfTupleOfTypes_0=tupleOfTypes
P_038_UnionOfTupleOfTypes_comment=\
/**\n\
\ * Compute and answer the type union of the elements of the given tuple of\n\
\ * types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of types.\n\
\ * Returns:\n\
\ *    The type union of the elements of the argument.\n\
\ */\n
#  39 : _=1
P_039_CreateGeneralFunctionType=[`…]→_
P_039_CreateGeneralFunctionType_0=returnType
P_039_CreateGeneralFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified return type.\n\
\ * Instances of this type include any function that returns a value of the\n\
\ * specified return type, irrespective of the number or types of its parameters.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type answer values of the\n\
\ *    specified return type.\n\
\ */\n
#  40 : _=2
P_040_InvokeWithTuple=invoke~_with_
P_040_InvokeWithTuple_0=aFunction
P_040_InvokeWithTuple_1=arguments
P_040_InvokeWithTuple_comment=\
/**\n\
\ * Invoke the function with the given arguments. Answer its result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ *    {1} - The tuple of arguments.\n\
\ * Returns:\n\
\ *    The value produced by applying the arguments to the function.\n\
\ */\n
#  43 : _=3
P_043_IfThenElse=if~_then_else_
P_043_IfThenElse_0=predicate
P_043_IfThenElse_1=trueFunction
P_043_IfThenElse_2=falseFunction
P_043_IfThenElse_comment=\
/**\n\
\ * Given a predicate value and two functions, invoke one of them and answer its\n\
\ * result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ *    {2} - The function to invoke if `{1}` is `false`.\n\
\ * Returns:\n\
\ *    If `{0}` is `true`, then the value produced by invoking\n\
\ *    `{1}`; otherwise, the value produced by invoking `{2}`.\n\
\ */\n
#  44 : _=2
P_044_IfThen=If_then_
P_044_IfThen_0=predicate
P_044_IfThen_1=trueBlock
P_044_IfThen_comment=\
/**\n\
\ * Given a predicate value and a function, conditionally invoke the specified\n\
\ * function.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ */\n
#  45 : _=2
P_045_ShortCircuitHelper=
P_045_ShortCircuitHelper_0=
P_045_ShortCircuitHelper_1=
P_045_ShortCircuitHelper_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
#  49 : _=5
P_049_CreateContinuation=$_@pc=_stack=_[_]caller=_
P_049_CreateContinuation_0=aFunction
P_049_CreateContinuation_1=programCounter
P_049_CreateContinuation_2=stack
P_049_CreateContinuation_3=stackPointer
P_049_CreateContinuation_4=caller
P_049_CreateContinuation_comment=\
/**\n\
\ * Construct and answer a continuation whose current function, Level One\n\
\ * program counter, local stack, local stack pointer, and calling continuation\n\
\ * are specified by the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The new continuation''s current function.\n\
\ *    {1} - `{0}`''s program counter. This is the index of the\n\
\ *       next Level One instruction to execute when the new continuation is\n\
\ *       resumed.\n\
\ *    {2} - `{0}`''s stack. This tuple contains the arguments, local\n\
\ *       variables, and temporaries.\n\
\ *    {3} - `{0}`''s stack pointer. This is the index of the\n\
\ *       top of the stack.\n\
\ *    {4} - A variable holding the new continuation''s calling continuation.\n\
\ *       If the variable is unassigned, then create a root continuation (i.e.\n\
\ *       one without a caller).\n\
\ * Returns:\n\
\ *    The requested continuation.\n\
\ */\n
#  50 : _=1
P_050_ContinuationTypeToFunctionType=_'s⁇function type
P_050_ContinuationTypeToFunctionType_0=aContinuation
P_050_ContinuationTypeToFunctionType_comment=\
/**\n\
\ * Answer the type of the function represented by the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function''s type.\n\
\ */\n
#  51 : _=1
P_051_FunctionTypeToContinuationType=$_
P_051_FunctionTypeToContinuationType_0=functionType
P_051_FunctionTypeToContinuationType_comment=\
/**\n\
\ * Compute and answer a continuation type capable of representing a current\n\
\ * function of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The requested continuation type.\n\
\ */\n
#  52 : _=1
P_052_ContinuationCaller=_'s⁇caller
P_052_ContinuationCaller_0=aContinuation
P_052_ContinuationCaller_comment=\
/**\n\
\ * Construct and answer a variable that holds the caller of the specified\n\
\ * continuation. This variable will be unassigned if the continuation has no\n\
\ * caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    A variable that, if assigned, holds the argument''s caller. If unassigned,\n\
\ *    then the argument has no caller.\n\
\ */\n
#  53 : _=1
P_053_ContinuationFunction=_'s⁇function
P_053_ContinuationFunction_0=aContinuation
P_053_ContinuationFunction_comment=\
/**\n\
\ * Answer the current function of the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function. This is the function whose execution\n\
\ *    will be resumed if the continuation is resumed.\n\
\ */\n
#  54 : _=1
P_054_ContinuationPC=_'s⁇program counter
P_054_ContinuationPC_0=aContinuation
P_054_ContinuationPC_comment=\
/**\n\
\ * Answer the program counter of the specified continuation. Using the current\n\
\ * function''s tuple of Level One nybblecodes, this is the index of the next\n\
\ * instruction to be performed (if the continuation is resumed).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s Level One program counter.\n\
\ */\n
#  55 : _=1
P_055_ContinuationStackPointer=_'s⁇stack pointer
P_055_ContinuationStackPointer_0=aContinuation
P_055_ContinuationStackPointer_comment=\
/**\n\
\ * Answer the stack pointer of the specified continuation. This is the index of\n\
\ * the top of the local stack. For an empty stack, this value equals the size of\n\
\ * the stack plus one. The stack grows downward.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack pointer.\n\
\ */\n
#  56 : _=2
P_056_RestartContinuationWithArguments=Restart_with_
P_056_RestartContinuationWithArguments_0=aContinuation
P_056_RestartContinuationWithArguments_1=arguments
P_056_RestartContinuationWithArguments_comment=\
/**\n\
\ * Restart the continuation with the specified arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with the given arguments instead of the original arguments. The\n\
\ * current continuation (in which this primitive was invoked) is completely\n\
\ * replaced by the restarted continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ *    {1} - The new arguments with which to restart `{0}`.\n\
\ */\n
#  57 : _=2
P_057_ExitContinuationWithResult=Exit_with_
P_057_ExitContinuationWithResult_0=aContinuation
P_057_ExitContinuationWithResult_1=value
P_057_ExitContinuationWithResult_comment=\
/**\n\
\ * Exit the continuation and answer the specified value to the continuation''s\n\
\ * caller. Execution proceeds as though the continuation had just returned from\n\
\ * its current function with the supplied value. The current continuation (in\n\
\ * which this primitive was invoked) is completely replaced by the specified\n\
\ * continuation''s resumed caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to exit.\n\
\ *    {1} - The value with which to exit `{0}`.\n\
\ */\n
#  58 : _=1
P_058_RestartContinuation=Restart_
P_058_RestartContinuation_0=aContinuation
P_058_RestartContinuation_comment=\
/**\n\
\ * Restart the continuation with its original arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with its original arguments. The current continuation (in which\n\
\ * this primitive was invoked) is completely replaced by the restarted\n\
\ * continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ */\n
#  59 : _=1
P_059_ContinuationStackData=_'s⁇stack
P_059_ContinuationStackData_0=aContinuation
P_059_ContinuationStackData_comment=\
/**\n\
\ * Answer the stack of the specified continuation. This tuple contains the\n\
\ * arguments, local variables, and temporaries. Any null values, forbidden to\n\
\ * leak through into observable Avail macrostate, are replaced with an\n\
\ * unassigned variable whose containment type is ⊥. Note that such a variable\n\
\ * cannot be constructed either syntactically nor through a variable\n\
\ * construction primitive.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack.\n\
\ */\n
#  60 : _=2
P_060_Equality=_=_
P_060_Equality_0=
P_060_Equality_1=
P_060_Equality_comment=\
/**\n\
\ * Are the arguments equal?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value.\n\
\ *    {1} - A value.\n\
\ * Returns:\n\
\ *    `true` if the arguments are equal, `false` otherwise.\n\
\ */\n
#  61 : _=1
P_061_MapToObject=_→object
P_061_MapToObject_0=fieldsToValues
P_061_MapToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and\n\
\ *       whose values are the corresponding field values.\n\
\ * Returns:\n\
\ *    The requested object.\n\
\ */\n
#  62 : _=1
P_062_ObjectToMap=_→map
P_062_ObjectToMap_0=anObject
P_062_ObjectToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object whose fields should be the keys of the new map and\n\
\ *       whose values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  63 : _=1
P_063_MapToObjectType=_→object type
P_063_MapToObjectType_0=fieldsToTypes
P_063_MapToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and\n\
\ *       whose values are the corresponding field types.\n\
\ * Returns:\n\
\ *    The requested object type.\n\
\ */\n
#  64 : _=1
P_064_ObjectTypeToMap=_→map
P_064_ObjectTypeToMap_0=anObjectType
P_064_ObjectTypeToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type whose fields should be the keys of the new\n\
\ *       map and whose values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  65 : _=1
P_065_CreateEnumeration=enumeration of_
P_065_CreateEnumeration_0=instances
P_065_CreateEnumeration_comment=\
/**\n\
\ * Construct and answer an enumeration whose instances are fully determined by\n\
\ * the membership of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The complete set of instances of the enumeration.\n\
\ * Returns:\n\
\ *    The requested enumeration.\n\
\ */\n
#  68 : _=2
P_068_RecordNewTypeName=_'s⁇name:=_
P_068_RecordNewTypeName_0=anObjectType
P_068_RecordNewTypeName_1=name
P_068_RecordNewTypeName_comment=\
/**\n\
\ * For the purpose of debugging, bind a name to an object type. This name will\n\
\ * be used for subtypes that do not bind a more specific name to describe their\n\
\ * own subtypes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ *    {1} - The name that should be bound to the object type. This will replace\n\
\ *       a previously bound name.\n\
\ */\n
#  69 : _=1
P_069_TypeNames=_'s⁇names
P_069_TypeNames_0=anObjectType
P_069_TypeNames_comment=\
/**\n\
\ * Answer the set of locally most-specific names bound to the specified object\n\
\ * type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ * Returns:\n\
\ *    The set of locally most-specific names bound to the specified object\n\
\ *    type.\n\
\ */\n
#  71 : _=2
P_071_CreateStubFunction=new_applying_
P_071_CreateStubFunction_0=aFunctionType
P_071_CreateStubFunction_1=functionToApply
P_071_CreateStubFunction_comment=\
/**\n\
\ * Construct and answer a function that is an instance of `{0}`\n\
\ * and applies `{1}` when itself applied with the appropriate\n\
\ * number and types of arguments. The new function answers whatever\n\
\ * `{1}` answers.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The desired function type.\n\
\ *    {1} - The function that the new function will apply when\n\
\ *       itself applied with the correct number and types of arguments.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  72 : _=1
P_072_CompiledCodeOfFunction=_'s⁇implementation
P_072_CompiledCodeOfFunction_0=aFunction
P_072_CompiledCodeOfFunction_comment=\
/**\n\
\ * Answer the implementation of the specified function. A function''s\n\
\ * implementation comprises its nybblecodes, its literals, its primitive\n\
\ * linkage (if any), its function type, and various statistics.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s implementation.\n\
\ */\n
#  73 : _=1
P_073_OuterVariables=_'s⁇outer variables
P_073_OuterVariables_0=aFunction
P_073_OuterVariables_comment=\
/**\n\
\ * Answer all variables captured by the specified function. For functions\n\
\ * compiled directly from source code (i.e. the vast majority of them), these\n\
\ * variables are lexically captured.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s outer variables.\n\
\ */\n
#  74 : _=2
P_074_CreateFunction=function from_and_
P_074_CreateFunction_0=implementation
P_074_CreateFunction_1=outerVariables
P_074_CreateFunction_comment=\
/**\n\
\ * Construct and answer a function given the specified compiled code and tuple\n\
\ * of captured variables.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The compiled code that describes the algorithm.\n\
\ *    {1} - The tuple of outer variables.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  80 : _=1
P_080_MapSize=|_|
P_080_MapSize_0=aMap
P_080_MapSize_comment=\
/**\n\
\ * Answer the cardinality of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
#  81 : _=2
P_081_KeyInMap=_∈_
P_081_KeyInMap_0=key
P_081_KeyInMap_1=aMap
P_081_KeyInMap_comment=\
/**\n\
\ * Is `{0}` a member of the set of keys of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose membership should be queried.\n\
\ *    {1} - A map.\n\
\ * Returns:\n\
\ *    `true` if `{0}` if a key of `{1}`, `false` otherwise.\n\
\ */\n
#  82 : _=2
P_082_MapAtKey=_[_]
P_082_MapAtKey_0=aMap
P_082_MapAtKey_1=key
P_082_MapAtKey_comment=\
/**\n\
\ * Answer the value bound to `{0}` in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - The key whose bound value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` in `{0}`.\n\
\ */\n
#  83 : _=3
P_083_MapReplacingKey=_+_→_
P_083_MapReplacingKey_0=aMap
P_083_MapReplacingKey_1=key
P_083_MapReplacingKey_2=value
P_083_MapReplacingKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it contains a binding from\n\
\ * `{1}` to `{2}`; any value previously bound to `{1}` is "forgotten" in the\n\
\ * new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key.\n\
\ *    {2} - The new value for the key.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  84 : _=2
P_084_MapWithoutKey=_-_
P_084_MapWithoutKey_0=aMap
P_084_MapWithoutKey_1=key
P_084_MapWithoutKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it does not contain a\n\
\ * binding for `{1}`; any such previous binding is "forgotten" in the new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key whose binding should be omitted.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  85 : _=1
P_085_CreateMap=_→map
P_085_CreateMap_0=bindings
P_085_CreateMap_comment=\
/**\n\
\ * Construct and answer a map from the supplied tuple of bindings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of bindings. Each element of the argument is a\n\
\ *       2-tuple that represents a binding. The first element of each 2-tuple is\n\
\ *       a key, the second element is the value that should be bound to that key\n\
\ *       in the resultant map.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  86 : _=1
P_086_MapKeysAsSet=_'s⁇keys
P_086_MapKeysAsSet_0=aMap
P_086_MapKeysAsSet_comment=\
/**\n\
\ * Answer the set of keys of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s keys.\n\
\ */\n
#  87 : _=3
P_087_CreateMapType={_→_|_}
P_087_CreateMapType_0=keyType
P_087_CreateMapType_1=valueType
P_087_CreateMapType_2=cardinalityType
P_087_CreateMapType_comment=\
/**\n\
\ * Construct and answer a map type with the specified key type, value type, and\n\
\ * range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type to which all keys of instances must conform.\n\
\ *    {1} - A type to which all values of instances must conform.\n\
\ *    {2} - The range of cardinalities to which all instances must\n\
\ *       conform.\n\
\ * Returns:\n\
\ *    The requested map type.\n\
\ */\n
#  88 : _=1
P_088_MapTypeSizes=||_||
P_088_MapTypeSizes_0=aMapType
P_088_MapTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * map type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
#  89 : _=1
P_089_MapTypeKeyType=_'s⁇key type
P_089_MapTypeKeyType_0=aMapType
P_089_MapTypeKeyType_comment=\
/**\n\
\ * Answer the most specific type to which the keys of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s key type.\n\
\ */\n
#  90 : _=1
P_090_MapTypeValueType=_'s⁇value type
P_090_MapTypeValueType_0=aMapType
P_090_MapTypeValueType_comment=\
/**\n\
\ * Answer the most specific type to which the values of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s value type.\n\
\ */\n
#  91 : _=1
P_091_MapValuesAsTuple=_'s⁇values
P_091_MapValuesAsTuple_0=aMapType
P_091_MapValuesAsTuple_comment=\
/**\n\
\ * Answer a tuple containing the values of the specified map. The values are\n\
\ * arranged in no particular order.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s values.\n\
\ */\n
#  92 : _=1
P_092_MapBindings=_'s⁇bindings
P_092_MapBindings_0=aMapType
P_092_MapBindings_comment=\
/**\n\
\ * Answer a tuple containing the bindings of the specified map. A binding is a\n\
\ * 2-tuple of key and value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s bindings.\n\
\ */\n
# 100 : _=1
P_100_SetSize=|_|
P_100_SetSize_0=aSet
P_100_SetSize_comment=\
/**\n\
\ * Answer the cardinality of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 101 : _=2
P_101_ElementInSet=_∈_
P_101_ElementInSet_0=element
P_101_ElementInSet_1=aSet
P_101_ElementInSet_comment=\
/**\n\
\ * Is `{0}` an element of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is an element of `{1}`, `false` otherwise.\n\
\ */\n
# 102 : _=2
P_102_SetUnion=_∪_
P_102_SetUnion_0=
P_102_SetUnion_1=
P_102_SetUnion_comment=\
/**\n\
\ * Compute and answer the set union of the arguments. This is a set that\n\
\ * contains the elements of both sets.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set union of the arguments.\n\
\ */\n
# 103 : _=2
P_103_SetIntersection=_∩_
P_103_SetIntersection_0=
P_103_SetIntersection_1=
P_103_SetIntersection_comment=\
/**\n\
\ * Compute and answer the set intersection of the arguments. This is a set that\n\
\ * contains only those elements present in each set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set intersection of the arguments.\n\
\ */\n
# 104 : _=2
P_104_SetDifference=_\\\\_
P_104_SetDifference_0=minuend
P_104_SetDifference_1=subtrahend
P_104_SetDifference_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of `{0}` and\n\
\ * `{1}` (also the relative complement of `{1}` in `{0}`).\n\
\ * This is a set that contains only those elements present in `{0}`\n\
\ * but not in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The asymmetric set difference of `{0}` and `{1}`.\n\
\ */\n
# 105 : _=2
P_105_SetWith=_+_
P_105_SetWith_0=aSet
P_105_SetWith_1=newElement
P_105_SetWith_comment=\
/**\n\
\ * Compute and answer the set union of the specified set and a set containing\n\
\ * the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` but also contains\n\
\ *    `{1}`.\n\
\ */\n
# 106 : _=2
P_106_SetWithout=_-_
P_106_SetWithout_0=aSet
P_106_SetWithout_1=oldElement
P_106_SetWithout_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of the specified set and a\n\
\ * set containing the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must not be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` except that it does\n\
\ *    not contain `{1}`.\n\
\ */\n
# 107 : _=2
P_107_SetIsSubset=_⊆_
P_107_SetIsSubset_0=
P_107_SetIsSubset_1=
P_107_SetIsSubset_comment=\
/**\n\
\ * Is `{0}` a subset of or equal to `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is a subset of or equal to `{1}`, `false` otherwise.\n\
\ */\n
# 109 : _=1
P_109_TupleToSet=_→set
P_109_TupleToSet_0=aTuple
P_109_TupleToSet_comment=\
/**\n\
\ * Construct and answer a set that uniquely (by definition) contains the same\n\
\ * elements as the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The requested set.\n\
\ */\n
# 110 : _=1
P_110_SetToTuple=_→tuple
P_110_SetToTuple_0=aSet
P_110_SetToTuple_comment=\
/**\n\
\ * Construct and answer a tuple that arbitrarily orders the elements of the\n\
\ * specified set. The conversion is unstable, and thus different calls given\n\
\ * the same argument may produce different orderings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 111 : _=2
P_111_CreateSetType={_|_}
P_111_CreateSetType_0=elementType
P_111_CreateSetType_1=cardinalityType
P_111_CreateSetType_comment=\
/**\n\
\ * Construct and answer a set type with the specified element type and range of\n\
\ * cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The element type.\n\
\ *    {1} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested set type. Instances have elements that conform to\n\
\ *    `{0}` and cardinalities that conform to `{1}`.\n\
\ */\n
# 112 : _=1
P_112_SetTypeSizes=||_||
P_112_SetTypeSizes_0=aSetType
P_112_SetTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * set type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 113 : _=1
P_113_SetTypeElementType=_'s⁇element type
P_113_SetTypeElementType_0=aSetType
P_113_SetTypeElementType_comment=\
/**\n\
\ * Answer the element type of the specified set type. This is the most specific\n\
\ * type to which all elements of instances must conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s element type.\n\
\ */\n
# 120 : _=1
P_120_CreateAtom=new atom_
P_120_CreateAtom_0=debugName
P_120_CreateAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A name to associate with the atom for debugging purposes.\n\
\ *       This name does not participate in atom comparison.\n\
\ * Returns:\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive.\n\
\ */\n
# 121 : _=1
P_121_AtomName=_'s⁇name
P_121_AtomName_0=anAtom
P_121_AtomName_comment=\
/**\n\
\ * Answer the debug name of the specified atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    The argument''s debug name.\n\
\ */\n
# 122 : _=2
P_122_AtomHasProperty=_∈_
P_122_AtomHasProperty_0=anAtom
P_122_AtomHasProperty_1=key
P_122_AtomHasProperty_comment=\
/**\n\
\ * Does `{0}` have a property whose key is `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ * Returns:\n\
\ *    `true` if `{0}` has a property whose key is `{1}`, `false` otherwise.\n\
\ */\n
# 123 : _=2
P_123_AtomGetProperty=_[_]
P_123_AtomGetProperty_0=anAtom
P_123_AtomGetProperty_1=key
P_123_AtomGetProperty_comment=\
/**\n\
\ * Assuming that `{0}` has a property whose key is `{1}`, then answer\n\
\ * the property value associated with the `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ * Returns:\n\
\ *    The property value bound to the key.\n\
\ */\n
# 124 : _=3
P_124_AtomSetProperty=_[_]:=_
P_124_AtomSetProperty_0=anAtom
P_124_AtomSetProperty_1=key
P_124_AtomSetProperty_2=value
P_124_AtomSetProperty_comment=\
/**\n\
\ * For `{0}`, establish a property binding from `{1}` to `{2}`.\n\
\ * Any previous property binding for `{1}` is replaced.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ *    {2} - The property value.\n\
\ */\n
# 125 : _=2
P_125_AtomRemoveProperty=_-_
P_125_AtomRemoveProperty_0=anAtom
P_125_AtomRemoveProperty_1=key
P_125_AtomRemoveProperty_comment=\
/**\n\
\ * If `{0}` has a property whose key is `{1}`, then remove the property.\n\
\ * Otherwise do nothing.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - A property key.\n\
\ */\n
# 126 : _=0
P_126_SpecialAtoms=special atoms
P_126_SpecialAtoms_comment=\
/**\n\
\ * Answer a set containing all atoms well-known to the Avail virtual machine.\n\
\ * These atoms cannot serve as properties, nor have properties added, queried,\n\
\ * modified, or removed.\n\
\ *\n\
\ * Returns:\n\
\ *    The special atoms.\n\
\ */\n
# 130 : _=1
P_130_TupleSize=|_|
P_130_TupleSize_0=aTuple
P_130_TupleSize_comment=\
/**\n\
\ * Answer the cardinality of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 131 : _=2
P_131_TupleAt=_[_]
P_131_TupleAt_0=aTuple
P_131_TupleAt_1=index
P_131_TupleAt_comment=\
/**\n\
\ * Answer the `{1}`-th element of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The index of the desired element.\n\
\ * Returns:\n\
\ *    The requested element.\n\
\ */\n
# 132 : _=3
P_132_TupleReplaceAt=_[_]→_
P_132_TupleReplaceAt_0=aTuple
P_132_TupleReplaceAt_1=index
P_132_TupleReplaceAt_2=value
P_132_TupleReplaceAt_comment=\
/**\n\
\ * Construct and answer a tuple based on the one provided but such that its\n\
\ * `{1}`-th element is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based index of the element that should (potentially)\n\
\ *       differ in the resultant tuple.\n\
\ *    {2} - The "replacement" value.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 135 : _=3
P_135_ExtractSubtuple=_[_.._]
P_135_ExtractSubtuple_0=aTuple
P_135_ExtractSubtuple_1=sliceStart
P_135_ExtractSubtuple_2=sliceEnd
P_135_ExtractSubtuple_comment=\
/**\n\
\ * Construct and answer a slice (i.e. subtuple) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based start index (inclusive) of the desired slice.\n\
\ *    {2} - The one-based end index (inclusive) of the desired slice.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 136 : _=1
P_136_ConcatenateTuples=concatenate_
P_136_ConcatenateTuples_0=tupleOfTuples
P_136_ConcatenateTuples_comment=\
/**\n\
\ * Construct and answer a tuple that is the left-to-right concatenation of all\n\
\ * elements (i.e. tuples) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of tuples.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 137 : _=3
P_137_CreateTupleType=<_,_`…|_>
P_137_CreateTupleType_0=leadingTypes
P_137_CreateTupleType_1=defaultType
P_137_CreateTupleType_2=cardinalityType
P_137_CreateTupleType_comment=\
/**\n\
\ * Construct and answer a tuple type with the specified leading element types,\n\
\ * default element type, and range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The leading types.\n\
\ *    {1} - The default type.\n\
\ *    {2} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 138 : _=1
P_138_TupleTypeSizes=||_||
P_138_TupleTypeSizes_0=aTupleType
P_138_TupleTypeSizes_comment=\
/**\n\
\ * Answer the range of allowed cardinalities of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 139 : _=1
P_139_TupleTypeLeadingTypes=_'s⁇leading types
P_139_TupleTypeLeadingTypes_0=aTupleType
P_139_TupleTypeLeadingTypes_comment=\
/**\n\
\ * Answer a tuple containing the leading element types of instances of the\n\
\ * specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s leading element types.\n\
\ */\n
# 140 : _=1
P_140_TupleTypeDefaultType=_'s⁇default type
P_140_TupleTypeDefaultType_0=aTupleType
P_140_TupleTypeDefaultType_comment=\
/**\n\
\ * Answer the default element type of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s default element type.\n\
\ */\n
# 141 : _=2
P_141_TupleTypeAt=_[_]
P_141_TupleTypeAt_0=aTupleType
P_141_TupleTypeAt_1=index
P_141_TupleTypeAt_comment=\
/**\n\
\ * Answer the element type of the `{1}`-th element of instances of the\n\
\ * specified type. If `{1}` is out of bounds, then answer ⊥.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The index of the desired element type.\n\
\ * Returns:\n\
\ *    The requested element type, or ⊥ if `{1}` is out of bounds.\n\
\ */\n
# 142 : _=3
P_142_TupleTypeSequenceOfTypes=_[_.._]
P_142_TupleTypeSequenceOfTypes_0=aTupleType
P_142_TupleTypeSequenceOfTypes_1=sliceStart
P_142_TupleTypeSequenceOfTypes_2=sliceEnd
P_142_TupleTypeSequenceOfTypes_comment=\
/**\n\
\ * Compute and answer a tuple containing the requested element types. Indices\n\
\ * that are out of bounds report ⊥ as their element type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the slice.\n\
\ *    {2} - The one-based index (inclusive) of the end of the slice.\n\
\ * Returns:\n\
\ *    The requested slice of element types.\n\
\ */\n
# 143 : _=3
P_143_TupleTypeAtThrough=∪_[_.._]
P_143_TupleTypeAtThrough_0=aTupleType
P_143_TupleTypeAtThrough_1=startIndex
P_143_TupleTypeAtThrough_2=endIndex
P_143_TupleTypeAtThrough_comment=\
/**\n\
\ * Compute and answer the type union of the indicated range of element types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the range.\n\
\ *    {2} - The one-based index (inclusive) of the end of the range.\n\
\ * Returns:\n\
\ *    The type union of all element types in the specified range.\n\
\ */\n
# 144 : _=2
P_144_TupleTypeConcatenate=_++_
P_144_TupleTypeConcatenate_0=
P_144_TupleTypeConcatenate_1=
P_144_TupleTypeConcatenate_comment=\
/**\n\
\ * Compute and answer the concatenation of the specified tuple types. This is\n\
\ * the most specific type that encompasses all possible concatenations of the\n\
\ * instances of the two types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - A tuple type.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 150 : _=1
P_150_TupleToObjectType=_→object type
P_150_TupleToObjectType_0=fieldDefinitions
P_150_TupleToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple whose elements are 2-tuples. Each 2-tuple's\n\
\ *       first element is an atom (i.e., the field identifier) and its second\n\
\ *       element is the value type permitted by the field.\n\
\ * Returns:\n\
\ *    The requested object type.\n\
\ */\n
# 151 : _=1
P_151_ObjectTypeToTuple=_→tuple
P_151_ObjectTypeToTuple_0=anObjectType
P_151_ObjectTypeToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ * Returns:\n\
\ *    A tuple that represents the composition of the object type. Its elements\n\
\ *    are 2-tuples. Each 2-tuple's first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is the value type permitted by the\n\
\ *    field.\n\
\ */\n
# 152 : _=1
P_152_TupleToObject=_→object
P_152_TupleToObject_0=fieldAssignments
P_152_TupleToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple whose elements are 2-tuples. Each 2-tuple's\n\
\ *       first element is an atom (i.e., the field identifier) and its second\n\
\ *       element is associated value.\n\
\ * Returns:\n\
\ *    The requested object.\n\
\ */\n
# 153 : _=1
P_153_ObjectToTuple=_→tuple
P_153_ObjectToTuple_0=anObject
P_153_ObjectToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object.\n\
\ * Returns:\n\
\ *    A tuple that represents the composition of the object. Its elements are\n\
\ *    2-tuples. Each 2-tuple's first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is associated value.\n\
\ */\n
# 160 : _=1
P_160_FileOpenRead=
P_160_FileOpenRead_0=
P_160_FileOpenRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 161 : _=2
P_161_FileOpenWrite=
P_161_FileOpenWrite_0=
P_161_FileOpenWrite_1=
P_161_FileOpenWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 162 : _=1
P_162_FileOpenReadWrite=
P_162_FileOpenReadWrite_0=
P_162_FileOpenReadWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 163 : _=1
P_163_FileClose=
P_163_FileClose_0=
P_163_FileClose_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 164 : _=2
P_164_FileRead=
P_164_FileRead_0=
P_164_FileRead_1=
P_164_FileRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 165 : _=2
P_165_FileWrite=
P_165_FileWrite_0=
P_165_FileWrite_1=
P_165_FileWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 166 : _=1
P_166_FileSize=
P_166_FileSize_0=
P_166_FileSize_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 167 : _=1
P_167_FilePosition=
P_167_FilePosition_0=
P_167_FilePosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 168 : _=2
P_168_FileSetPosition=
P_168_FileSetPosition_0=
P_168_FileSetPosition_1=
P_168_FileSetPosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 169 : _=1
P_169_FileSync=
P_169_FileSync_0=
P_169_FileSync_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 170 : _=1
P_170_FileExists=
P_170_FileExists_0=
P_170_FileExists_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 171 : _=1
P_171_FileCanRead=
P_171_FileCanRead_0=
P_171_FileCanRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 172 : _=1
P_172_FileCanWrite=
P_172_FileCanWrite_0=
P_172_FileCanWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 173 : _=1
P_173_FileCanExecute=
P_173_FileCanExecute_0=
P_173_FileCanExecute_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 174 : _=2
P_174_FileRename=
P_174_FileRename_0=
P_174_FileRename_1=
P_174_FileRename_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 175 : _=1
P_175_FileUnlink=
P_175_FileUnlink_0=
P_175_FileUnlink_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 180 : _=1
P_180_CompiledCodeNumArgs=_'s⁇arity
P_180_CompiledCodeNumArgs_0=aFunctionImplementation
P_180_CompiledCodeNumArgs_comment=\
/**\n\
\ * Answer the arity of a function implementation. This is the number of\n\
\ * parameters accepted by the function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s arity.\n\
\ */\n
# 181 : _=1
P_181_CompiledCodeNumLocals=|_'s⁇local variables|
P_181_CompiledCodeNumLocals_0=aFunctionImplementation
P_181_CompiledCodeNumLocals_comment=\
/**\n\
\ * Answer the number of local variables used by a function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The number of locals used by the argument.\n\
\ */\n
# 182 : _=1
P_182_CompiledCodeNumOuters=|_'s⁇outer variables|
P_182_CompiledCodeNumOuters_0=aFunctionImplementation
P_182_CompiledCodeNumOuters_comment=\
/**\n\
\ * Answer the number of outer variables used by a function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The number of outers used by the argument.\n\
\ */\n
# 183 : _=1
P_183_CompiledCodeNumStackSlots=_'s⁇maximum stack depth
P_183_CompiledCodeNumStackSlots_0=aFunctionImplementation
P_183_CompiledCodeNumStackSlots_comment=\
/**\n\
\ * Answer the maximum stack depth of a function implementation. This does not\n\
\ * account for arguments and local variables (which occupy the "bottom" stack\n\
\ * slots).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s maximum stack depth.\n\
\ */\n
# 184 : _=1
P_184_CompiledCodeNybbles=_'s⁇nybblecodes
P_184_CompiledCodeNybbles_0=aFunctionImplementation
P_184_CompiledCodeNybbles_comment=\
/**\n\
\ * Answer the Level One instructions that describe a function implementation''s\n\
\ * algorithm as a tuple of nybblecodes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s nybblecodes.\n\
\ */\n
# 185 : _=1
P_185_CompiledCodeFunctionType=_'s⁇function type
P_185_CompiledCodeFunctionType_0=aFunctionImplementation
P_185_CompiledCodeFunctionType_comment=\
/**\n\
\ * Answer the function type of any function that could close the specified\n\
\ * function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s function type.\n\
\ */\n
# 186 : _=1
P_186_CompiledCodePrimitiveNumber=_'s⁇primitive number
P_186_CompiledCodePrimitiveNumber_0=aFunctionImplementation
P_186_CompiledCodePrimitiveNumber_comment=\
/**\n\
\ * Answer the primitive number of the primitive linked to the specified\n\
\ * function implementation. If the function implementation does not have\n\
\ * primitive linkage, then answer `0`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s primitive number, or `0` if the argument does not have\n\
\ *    primitive linkage.\n\
\ */\n
# 187 : _=1
P_187_CompiledCodeLiterals=_'s⁇literals
P_187_CompiledCodeLiterals_0=aFunctionImplementation
P_187_CompiledCodeLiterals_comment=\
/**\n\
\ * Answer the literals that support a function implementation''s algorithm.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    A tuple containing the argument''s supporting literals.\n\
\ */\n
# 188 : _=7
P_188_CreateCompiledCode=_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)
P_188_CreateCompiledCode_0=nybblecodes
P_188_CreateCompiledCode_1=primitiveNumber
P_188_CreateCompiledCode_2=aFunctionType
P_188_CreateCompiledCode_3=literals
P_188_CreateCompiledCode_4=localsCount
P_188_CreateCompiledCode_5=outersCount
P_188_CreateCompiledCode_6=maximumStackDepth
P_188_CreateCompiledCode_comment=\
/**\n\
\ * Construct and answer a function implementation from the specified arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The Level One instructions as a tuple of nybblecodes.\n\
\ *    {1} - The primitive number, or `0` if the result should\n\
\ *       not have primitive linkage.\n\
\ *    {2} - The function type of any function able to close the\n\
\ *       result.\n\
\ *    {3} - The literals used by the algorithm.\n\
\ *    {4} - The number of local variables used by the algorithm.\n\
\ *    {5} - The number of outer variables used by the algorithm.\n\
\ *    {6} - The maximum stack depth.\n\
\ * Returns:\n\
\ *    The requested function implementation.\n\
\ */\n
# 200 : _=2
P_200_CatchException=try_catch_
P_200_CatchException_0=body
P_200_CatchException_1=handler
P_200_CatchException_comment=\
/**\n\
\ * Execute `{0}`. If an exception is raised, the virtual machine will scan the\n\
\ * current fiber''s chain of continuations to identify invocations of this\n\
\ * primitive. The handler nearest to the end of the continuation chain, i.e.\n\
\ * closest to the raise of the exception, that accepts an argument of the\n\
\ * correct type is invoked with the exception. So `{1}` will potentially\n\
\ * run if code run (directly or indirectly) by `{0}` throws an exception of\n\
\ * the correct type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The protected function.\n\
\ *    {1} - The exception handler.\n\
\ */\n
# 201 : _=1
P_201_RaiseException=Raise_
P_201_RaiseException_0=exception
P_201_RaiseException_comment=\
/**\n\
\ * Raise `{0}` as an exception. The virtual machine scans the current\n\
\ * fiber''s chain of continuations to identify an invocation of `try_catch_`\n\
\ * (primitive 200). Extract the second argument from that continuation. This is\n\
\ * an arity-one exception handling function. If it accepts `{0}`, then\n\
\ * discard all continuations after this one and then invoke the handler with\n\
\ * `{0}`. If the handler does not accept the argument, then the\n\
\ * virtual machine continues scanning the chain of continuations for correctly\n\
\ * typed exception handling functions. If no suitable exception handling\n\
\ * function is found, then the primitive fails.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An exception.\n\
\ * Returns:\n\
\ *    ⊥.\n\
\ */\n
# 207 : _=1
P_207_CompleteMessages=
P_207_CompleteMessages_0=
P_207_CompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 208 : _=1
P_208_IncompleteMessages=
P_208_IncompleteMessages_0=
P_208_IncompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 211 : _=1
P_211_BundleMessage=
P_211_BundleMessage_0=
P_211_BundleMessage_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 212 : _=1
P_212_BundleMessageParts=
P_212_BundleMessageParts_0=
P_212_BundleMessageParts_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 213 : _=1
P_213_BundleSignatures=
P_213_BundleSignatures_0=
P_213_BundleSignatures_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 214 : _=1
P_214_BundleHasRestrictions=
P_214_BundleHasRestrictions_0=
P_214_BundleHasRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 215 : _=1
P_215_BundleRestrictions=
P_215_BundleRestrictions_0=
P_215_BundleRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 216 : _=1
P_216_SignatureBodyType=
P_216_SignatureBodyType_0=
P_216_SignatureBodyType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 217 : _=1
P_217_SignatureBodyBlock=
P_217_SignatureBodyBlock_0=
P_217_SignatureBodyBlock_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 220 : _=1
P_220_MethodFromName=
P_220_MethodFromName_0=
P_220_MethodFromName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 221 : _=1
P_221_MethodName=
P_221_MethodName_0=
P_221_MethodName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 245 : _=1
P_245_LookupName=
P_245_LookupName_0=
P_245_LookupName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 247 : _=2
P_247_SemanticRestrictions=semantic restrictions for_given_
P_247_SemanticRestrictions_0=aMethod
P_247_SemanticRestrictions_1=arguments
P_247_SemanticRestrictions_comment=\
/**\n\
\ * Compute and answer the semantic restrictions that would run at a call site\n\
\ * of `{0}` applied with the specified tuple of arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method.\n\
\ *    {1} - The tuple of arguments that should be used to filter the\n\
\ *       semantic restrictions.\n\
\ * Returns:\n\
\ *    The requested semantic restrictions.\n\
\ */\n
# 248 : _=2
P_248_AddSemanticRestriction=Semantic restriction_is_
P_248_AddSemanticRestriction_0=methodName
P_248_AddSemanticRestriction_1=restriction
P_248_AddSemanticRestriction_comment=\
/**\n\
\ * Define the specified semantic restriction. Henceforth whenever the method\n\
\ * named by `{0}` is invoked with arguments accepted by `{1}`,\n\
\ * then apply `{1}` with the most specific available types of the actual\n\
\ * arguments. This is determined by the compiler at the method''s call site.\n\
\ *\n\
\ * A semantic restriction has two responsibilities. First, it may reject a\n\
\ * method invocation on any appropriate semantic grounds by calling\n\
\ * `Reject parse,expected:_`. Second, it may strengthen the type of value\n\
\ * produced at the call site by answering a subtype of the method''s declared\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to which the semantic restriction\n\
\ *       applies.\n\
\ *    {1} - The restriction function.\n\
\ */\n
# 249 : _=2
P_249_SimpleMacroDeclaration=Macro_is_
P_249_SimpleMacroDeclaration_0=macroName
P_249_SimpleMacroDeclaration_1=body
P_249_SimpleMacroDeclaration_comment=\
/**\n\
\ * Define a macro with the specified name and body. A macro is a method invoked\n\
\ * directly by the compiler as a consequence of parsing a sequence of tokens.\n\
\ * The arguments of a macro are parse nodes that structurally represent the\n\
\ * corresponding lexical expressions. The result of a macro is a parse node that\n\
\ * completely replaces the macro invocation; the compiler proceeds as if it had\n\
\ * built this parse node from the original tokens instead of the macro\n\
\ * invocation parse node.\n\
\ *\n\
\ * Macro definitions are parametric by parameter types. They participate in\n\
\ * multiply polymorphic dispatch just as do methods.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the macro to define.\n\
\ *    {1} - The function that implements the macro.\n\
\ */\n
# 250 : _=1
P_250_IsPrimitiveDefined=_is a primitive
P_250_IsPrimitiveDefined_0=primitiveNumber
P_250_IsPrimitiveDefined_comment=\
/**\n\
\ * Does the argument denote a valid primitive?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A potential primitive number.\n\
\ * Returns:\n\
\ *    `true` if the argument denotes a valid primitive, `false` otherwise.\n\
\ */\n
# 251 : _=2
P_251_AbstractMethodDeclaration=Abstract method_is_
P_251_AbstractMethodDeclaration_0=methodName
P_251_AbstractMethodDeclaration_1=aFunctionType
P_251_AbstractMethodDeclaration_comment=\
/**\n\
\ * Declare an abstract method with the specified name and signature. A concrete\n\
\ * implementation is one whose parameter types and return type are strictly more\n\
\ * specific than the corresponding types of the abstract signature.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the abstract method to declare.\n\
\ *    {1} - The signature.\n\
\ */\n
# 252 : _=2
P_252_ForwardMethodDeclaration=Forward method_is_
P_252_ForwardMethodDeclaration_0=methodName
P_252_ForwardMethodDeclaration_1=aFunctionType
P_252_ForwardMethodDeclaration_comment=\
/**\n\
\ * Declare the intention to locally define a method with the specified name and\n\
\ * signature. If no such method is defined before compilation of the containing\n\
\ * module completes, then the compiler will emit an appropriate error message.\n\
\ *\n\
\ * Recursive methods must be forward declared. Mutually recursive methods must\n\
\ * forward declare all but the lexically first participant in the recursion.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to forward declare.\n\
\ *    {1} - The signature.\n\
\ */\n
# 254 : _=0
P_254_ReadFromConsole=read character
P_254_ReadFromConsole_comment=\
/**\n\
\ * Read the next character from the console.\n\
\ *\n\
\ * Returns:\n\
\ *    The next character from the console.\n\
\ */\n
# 255 : _=2
P_255_GrammaticalRestriction=Grammatical restriction_is_
P_255_GrammaticalRestriction_0=methodsToRestrict
P_255_GrammaticalRestriction_1=exclusions
P_255_GrammaticalRestriction_comment=\
/**\n\
\ * Define the indicated grammatical restrictions. Each method name in\n\
\ * `{0}` must accept the same number of arguments, though not\n\
\ * necessarily the same types (or the same order of types). Each element `e` of\n\
\ * `{1}`, itself a set of method names, corresponds to an argument\n\
\ * position `n` of any method name in `{0}`. The compiler rejects\n\
\ * parses of source text that invoke methods named in `e` when they occur\n\
\ * grammatically at argument position `n` of an invocation of any method named\n\
\ * in `{0}`.\n\
\ *\n\
\ * Note that "argument position" corresponds to a blank, not to a top-level\n\
\ * repeating sequence (indicated by guillemet notation).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set of method names, each of which should be\n\
\ *       restricted.\n\
\ *    {1} - A tuple of sets of method names. The method names in the\n\
\ *       `n`-th set are restricted from occurring grammatically at the `n`-th\n\
\ *       argument position of any invocation of a method named in\n\
\ *       `{0}`.\n\
\ */\n
# 256 : _=1
P_256_EmergencyExit=Terminate:_
P_256_EmergencyExit_0=value
P_256_EmergencyExit_comment=\
/**\n\
\ * Terminate the current fiber. Use the specified value to provide contextual\n\
\ * debugging information.\n\
\ *\n\
\ * This method must not leak beyond the bootstrap package. Termination of\n\
\ * fibers is dangerous because it avoids cleaning up active continuations and\n\
\ * ergo promotes deadlock (by failing to relinquish held locks). Only\n\
\ * cooperative termination, e.g. interrupt queues, is supported in ordinary\n\
\ * system or application code. This method is provided only for early detection\n\
\ * of serious failures in bootstrap code. Real failures in system code outside\n\
\ * of the bootstrap package use Avail's usual exception handling machinery.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value, provided to establish context for debugging.\n\
\ */\n
# 257 : _=0
P_257_BreakPoint=Breakpoint
P_257_BreakPoint_comment=\
/**\n\
\ * Cause the Avail virtual machine to raise an\n\
\ * `org.availlang.exceptions.AvailBreakpointException` that a Java debugger\n\
\ * can trap upon raise.\n\
\ * \n\
\ * This method exists to facilitate debugging of the Avail virtual machine, and\n\
\ * will be withdrawn once the implementation is considered sufficiently stable.\n\
\ */\n
# 258 : _=1
P_258_PrintToConsole=Print:_
P_258_PrintToConsole_0=text
P_258_PrintToConsole_comment=\
/**\n\
\ * Print the argument to the application''s standard output stream.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A string.\n\
\ */\n
# 259 : _=1
P_259_ToString=primitive description of_
P_259_ToString_0=value
P_259_ToString_comment=\
/**\n\
\ * Produce a primitive description of the argument. This description is\n\
\ * mechanically constructed by the Avail virtual machine. It may not contain\n\
\ * appropriately localized text, and is intended to provide\n\
\ * implementation-specific information that serves only to assist the\n\
\ * Avail virtual machine developers in debugging the implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value.\n\
\ * Returns:\n\
\ *    A mechanically constructed, possibly non-localized,\n\
\ *    implementation-specific description of the argument.\n\
\ */\n
# 260 : _=2
P_260_Assert=Assert:_(_)
P_260_Assert_0=predicate
P_260_Assert_1=message
P_260_Assert_comment=\
/**\n\
\ * Early assertion mechanism. This is obsolete once exceptions are available.\n\
\ * Raise a special exception in the virtual machine that may be trapped to\n\
\ * facilitate debugging. This exception will provided access to `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A boolean, usually derived from a more complex predicate\n\
\ *       expression.\n\
\ *    {1} - Text describing the assertion failure, ignored unless\n\
\ *       `{0}` is `false`.\n\
\ */\n
# 280 : _=1
P_280_AsFloat=_→float
P_280_AsFloat_0=aNumber
P_280_AsFloat_comment=\
/**\n\
\ * Compute and answer the numeric argument as a single-precision floating point\n\
\ * number.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ * Returns:\n\
\ *    A `float` whose value approximates the argument.\n\
\ */\n
# 281 : _=1
P_281_AsDouble=_→double
P_281_AsDouble_0=aNumeric
P_281_AsDouble_comment=\
/**\n\
\ * Compute and answer the numeric argument as a double-precision floating point\n\
\ * number.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ * Returns:\n\
\ *    A `double` whose value approximates the argument.\n\
\ */\n
# 286 : _=1
P_286_FloatLn=ln_
P_286_FloatLn_0=x
P_286_FloatLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    An approximation of ln `{0}`.\n\
\ */\n
# 287 : _=2
P_287_FloatExp=_^_
P_287_FloatExp_0=eulerNumber
P_287_FloatExp_1=x
P_287_FloatExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^`{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - Euler''s number.\n\
\ *    {1} - The exponent.\n\
\ * Returns:\n\
\ *    An approximation of e^`{1}`.\n\
\ */\n
# 288 : _=2
P_288_FloatModulus=_mod_
P_288_FloatModulus_0=dividend
P_288_FloatModulus_1=divisor
P_288_FloatModulus_comment=\
/**\n\
\ * Compute and answer an approximation of `{0}` modulo `{1}`, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    An approximation of `0` mod `{1}`.\n\
\ */\n
# 289 : _=1
P_289_FloatTruncatedAsInteger=_→extended integer
P_289_FloatTruncatedAsInteger_0=aFloat
P_289_FloatTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 291 : _=3
P_291_FloatTimesTwoPower=_⨉_^_
P_291_FloatTimesTwoPower_0=a
P_291_FloatTimesTwoPower_1=two
P_291_FloatTimesTwoPower_2=b
P_291_FloatTimesTwoPower_comment=\
/**\n\
\ * Compute and answer `{0}`⨉(2^`{1}`) without loss of precision or\n\
\ * intermediate overflow. This scales `{0}` by a power of two (`2`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ *    {1} - The number two (`2`).\n\
\ *    {2} - The scaling factor.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 292 : _=1
P_292_FloatFloor=⎣_⎦
P_292_FloatFloor_0=x
P_292_FloatFloor_comment=\
/**\n\
\ * Compute and answer the largest integral single-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the floor of\n\
\ *    `{0}`.\n\
\ */\n
# 293 : _=1
P_293_FloatCeiling=⎡_⎤
P_293_FloatCeiling_0=x
P_293_FloatCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral single-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the ceiling of\n\
\ *    `{0}`.\n\
\ */\n
# 316 : _=1
P_316_DoubleLn=ln_
P_316_DoubleLn_0=x
P_316_DoubleLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    An approximation of ln `{0}`.\n\
\ */\n
# 317 : _=2
P_317_DoubleExp=_^_
P_317_DoubleExp_0=eulerNumber
P_317_DoubleExp_1=x
P_317_DoubleExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^`{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - Euler''s number.\n\
\ *    {1} - The exponent.\n\
\ * Returns:\n\
\ *    An approximation of e^`{1}`.\n\
\ */\n
# 318 : _=2
P_318_DoubleModulus=_mod_
P_318_DoubleModulus_0=dividend
P_318_DoubleModulus_1=divisor
P_318_DoubleModulus_comment=\
/**\n\
\ * Compute and answer an approximation of `{0}` modulo `{1}`, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    An approximation of `0` mod `{1}`.\n\
\ */\n
# 319 : _=1
P_319_DoubleTruncatedAsInteger=_→extended integer
P_319_DoubleTruncatedAsInteger_0=aDouble
P_319_DoubleTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 321 : _=3
P_321_DoubleTimesTwoPower=_⨉_^_
P_321_DoubleTimesTwoPower_0=a
P_321_DoubleTimesTwoPower_1=two
P_321_DoubleTimesTwoPower_2=b
P_321_DoubleTimesTwoPower_comment=\
/**\n\
\ * Compute and answer `{0}`⨉(2^`{1}`) without loss of precision or\n\
\ * intermediate overflow. This scales `{0}` by a power of two (`2`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ *    {1} - The number two (`2`).\n\
\ *    {2} - The scaling factor.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 322 : _=1
P_322_DoubleFloor=⎣_⎦
P_322_DoubleFloor_0=x
P_322_DoubleFloor_comment=\
/**\n\
\ * Compute and answer the largest integral double-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the floor of\n\
\ *    `{0}`.\n\
\ */\n
# 323 : _=1
P_323_DoubleCeiling=⎡_⎤
P_323_DoubleCeiling_0=x
P_323_DoubleCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral double-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the ceiling of\n\
\ *    `{0}`.\n\
\ */\n
# 330 : _=1
P_330_CharacterCodePoint=_→code point
P_330_CharacterCodePoint_0=aCharacter
P_330_CharacterCodePoint_comment=\
/**\n\
\ * Answer the argument as a Unicode code point.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A character.\n\
\ * Returns:\n\
\ *    The Unicode code point that encodes the argument.\n\
\ */\n
# 331 : _=1
P_331_CharacterFromCodePoint=_→character
P_331_CharacterFromCodePoint_0=codePoint
P_331_CharacterFromCodePoint_comment=\
/**\n\
\ * Answer the argument as a character.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A Unicode code point.\n\
\ * Returns:\n\
\ *    The character encoded by the argument.\n\
\ */\n
# 350 : _=2
P_350_MacroInnerAssignment=
P_350_MacroInnerAssignment_0=
P_350_MacroInnerAssignment_1=
P_350_MacroInnerAssignment_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 351 : _=1
P_351_ParseNodeExpressionType=_'s⁇semantic type
P_351_ParseNodeExpressionType_0=node
P_351_ParseNodeExpressionType_comment=\
/**\n\
\ * Answer the semantic type of the specified phrase. This is the type of value\n\
\ * produced when the content of the phrase is evaluated (by the compiler and/or\n\
\ * runtime).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A phrase.\n\
\ * Returns:\n\
\ *    A type that describes all values producible by evaluations of the\n\
\ *    argument.\n\
\ */\n
# 352 : _=1
P_352_RejectParsing=Reject parse,expected:_
P_352_RejectParsing_0=expected
P_352_RejectParsing_comment=\
/**\n\
\ * Reject the current parse. This causes the compiler to reject the\n\
\ * interpretation of the program text that resulted in execution of the code\n\
\ * that invoked this method. The argument is a description of the parse\n\
\ * rejection, but in positive terms that primarily assert what the caller was\n\
\ * expecting (on the compiler''s behalf). It is, of course, also useful to state\n\
\ * what was actually discovered.\n\
\ *\n\
\ * Note that the Avail compiler attempts, in parallel, many different parses of\n\
\ * a statement. If the only parses syntactically accepted by the compiler are\n\
\ * semantically rejected by callers of this method, then and only then is the\n\
\ * statement deemed invalid and the arguments of such calls emitted by the\n\
\ * compiler as error messages to assist the programmer in correcting the\n\
\ * rejected statement.\n\
\ *\n\
\ * This method may only be invoked from the body of a macro function or a\n\
\ * semantic restriction function: it should only be invoked by the Avail\n\
\ * compiler, never by a semantically valid Avail program.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A description of the cause of rejection, worded to sound good\n\
\ *       after "Expected...".\n\
\ */\n
# 353 : _=2
P_353_MacroAssignmentStatement=
P_353_MacroAssignmentStatement_0=
P_353_MacroAssignmentStatement_1=
P_353_MacroAssignmentStatement_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 354 : _=1
P_354_MacroReference=
P_354_MacroReference_0=
P_354_MacroReference_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 355 : _=2
P_355_CreateParseNodeType=_→_
P_355_CreateParseNodeType_0=aPhrase
P_355_CreateParseNodeType_1=semanticType
P_355_CreateParseNodeType_comment=\
/**\n\
\ * Construct and answer a phrase type with the specified semantic type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A phrase type.\n\
\ *    {1} - The semantic type of values producible by phrases that\n\
\ *       are instances of the answer.\n\
\ * Returns:\n\
\ *    The requested phrase type.\n\
\ */\n
# 356 : _=1
P_356_TokenLexeme=_'s⁇lexeme
P_356_TokenLexeme_0=aToken
P_356_TokenLexeme_comment=\
/**\n\
\ * Answer the lexeme of the specified token. This is the source text that\n\
\ * produced the token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The source text of `{0}`.\n\
\ */\n
# 357 : _=1
P_357_TokenStart=_'s⁇starting position
P_357_TokenStart_0=aToken
P_357_TokenStart_comment=\
/**\n\
\ * Answer the zero-based starting position of the specified token within the\n\
\ * module that supplied it.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The zero-based starting position of `{0}`.\n\
\ */\n
# 358 : _=1
P_358_TokenLineNumber=_'s⁇line number
P_358_TokenLineNumber_0=aToken
P_358_TokenLineNumber_comment=\
/**\n\
\ * Answer the one-based line number of the specified token within the module\n\
\ * that supplied it.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The one-based line number of `{0}`.\n\
\ */\n
# 359 : _=1
P_359_LiteralTokenValue=_'s⁇value
P_359_LiteralTokenValue_0=aLiteralToken
P_359_LiteralTokenValue_comment=\
/**\n\
\ * Answer the literal value associated with the specified token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A literal token.\n\
\ * Returns:\n\
\ *    The literal value produced by `{0}`.\n\
\ */\n
# 500 : _=2
P_500_CreatePojoType=_<«_‡,»>
P_500_CreatePojoType_0=javaName
P_500_CreatePojoType_1=typeParameters
P_500_CreatePojoType_comment=\
/**\n\
\ * Construct and answer a fully parameterized pojo type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fully qualified name of the Java class or interface.\n\
\ *    {1} - The type arguments. The cardinality of this tuple\n\
\ *       must agree with the number of type parameters required by the Java\n\
\ *       class or interface.\n\
\ * Returns:\n\
\ *    The requested pojo type.\n\
\ */\n
# 501 : _=2
P_501_CreatePojoArrayType=_[_]
P_501_CreatePojoArrayType_0=elementType
P_501_CreatePojoArrayType_1=cardinalityRequirement
P_501_CreatePojoArrayType_comment=\
/**\n\
\ * Construct and answer a pojo array type whose element type is `{0}`\n\
\ * and whose cardinality requirement is `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The type of the elements of instances.\n\
\ *    {1} - The range of sizes of instances.\n\
\ * Returns:\n\
\ *    The requested pojo array type.\n\
\ */\n
# 502 : _=2
P_502_CreatePojoConstructorFunction=constructor_<«_‡,»>
P_502_CreatePojoConstructorFunction_0=aPojoType
P_502_CreatePojoConstructorFunction_1=parameterTypes
P_502_CreatePojoConstructorFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, constructs a new pojo of\n\
\ * the specified type.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java constructor,\n\
\ * if any, that accepts the specified number and types of arguments. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective constructor lookup and invocation, the following marshaling\n\
\ * rules are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The parameter types accepted by the desired constructor.\n\
\ * Returns:\n\
\ *    The requested constructor invocation function.\n\
\ */\n
# 504 : _=2
P_504_BindPojoInstanceField=_._→variable
P_504_BindPojoInstanceField_0=aPojo
P_504_BindPojoInstanceField_1=fieldName
P_504_BindPojoInstanceField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the instance field uniquely specified by the given pojo and field\n\
\ * name.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The pojo whose instance field should be bound to the answered\n\
\ *       variable.\n\
\ *    {1} - The name of the desired field.\n\
\ * Returns:\n\
\ *    A variable bound to the specified instance field.\n\
\ */\n
# 505 : _=2
P_505_BindPojoStaticField=_._→variable
P_505_BindPojoStaticField_0=aPojoType
P_505_BindPojoStaticField_1=fieldName
P_505_BindPojoStaticField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the static field specified by the given pojo type and field\n\
\ * name.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type whose static field should be bound to the\n\
\ *       answered variable.\n\
\ *    {1} - The name of the desired field.\n\
\ * Returns:\n\
\ *    A variable bound to the specified static field.\n\
\ */\n
# 506 : _=3
P_506_CreatePojoInstanceMethodFunction=method_._(«_‡,»)
P_506_CreatePojoInstanceMethodFunction_0=aPojoType
P_506_CreatePojoInstanceMethodFunction_1=methodName
P_506_CreatePojoInstanceMethodFunction_2=parameterTypes
P_506_CreatePojoInstanceMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * instance method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. The receiver is specified as the first argument. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective method lookup and invocation, the following marshaling rules\n\
\ * are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The name of the desired method.\n\
\ *    {2} - The parameter types accepted by the desired method.\n\
\ * Returns:\n\
\ *    The requested instance method invocation function.\n\
\ */\n
# 508 : _=3
P_508_CreatePojoStaticMethodFunction=static method_._(«_‡,»)
P_508_CreatePojoStaticMethodFunction_0=aPojoType
P_508_CreatePojoStaticMethodFunction_1=methodName
P_508_CreatePojoStaticMethodFunction_2=parameterTypes
P_508_CreatePojoStaticMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * static method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. To establish type conformance between Avail types and\n\
\ * Java types for the purpose of reflective method lookup and invocation, the\n\
\ * following marshaling rules are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The name of the desired method.\n\
\ *    {2} - The parameter types accepted by the desired method.\n\
\ * Returns:\n\
\ *    The requested static method invocation function.\n\
\ */\n
# 510 : _=2
P_510_CreatePojoArray=new_[_]
P_510_CreatePojoArray_0=elementType
P_510_CreatePojoArray_1=length
P_510_CreatePojoArray_comment=\
/**\n\
\ * Compute and answer a pojo array with the specified element type and length.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The element type.\n\
\ *    {1} - The number of elements.\n\
\ * Returns:\n\
\ *    A new pojo array that can store and answer `{1}` elements conforming\n\
\ *    to `{0}`.\n\
\ */\n
# 511 : _=1
P_511_PojoArrayLength=|_|
P_511_PojoArrayLength_0=anArray
P_511_PojoArrayLength_comment=\
/**\n\
\ * Answer the number of elements contained by the specified pojo array.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ * Returns:\n\
\ *    The size of the argument.\n\
\ */\n
# 512 : _=2
P_512_PojoArrayGet=_[_]
P_512_PojoArrayGet_0=anArray
P_512_PojoArrayGet_1=index
P_512_PojoArrayGet_comment=\
/**\n\
\ * Answer the `{1}`-th element of the specified pojo array.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ *    {1} - A one-based index into the pojo array.\n\
\ * Returns:\n\
\ *    The `{1}`-th element of `{0}`.\n\
\ */\n
# 513 : _=3
P_513_PojoArraySet=_[_]:=_
P_513_PojoArraySet_0=anArray
P_513_PojoArraySet_1=index
P_513_PojoArraySet_2=value
P_513_PojoArraySet_comment=\
/**\n\
\ * Mutate the specified pojo array such that its `{1}`-th element is\n\
\ * overwritten by `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ *    {1} - A one-based index into the pojo array.\n\
\ *    {2} - The value that should be written into the pojo array.\n\
\ */\n
