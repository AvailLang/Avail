#
# PrimitiveNames_en.properties
# Copyright (c) 2011, Mark van Gulik.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.PrimitiveNamesGenerator
# * Last Generated On: 2011.12.22 19:17:58.256 -0600
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# _=2
prim1_Addition=_+_
prim1_Addition_0=augend
prim1_Addition_1=addend
prim1_Addition_comment=\
/**\n\
\ * Compute and answer the sum of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The augend.\n\
\ *    {1} - The addend.\n\
\ * Returns:\n\
\ *    The sum of the augend and the addend.\n\
\ */\n
# _=2
prim2_Subtraction=_-_
prim2_Subtraction_0=minuend
prim2_Subtraction_1=subtrahend
prim2_Subtraction_comment=\
/**\n\
\ * Compute and answer the difference of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The difference of the minuend and the subtrahend.\n\
\ */\n
# _=2
prim3_Multiplication=_×_
prim3_Multiplication_0=multiplicand
prim3_Multiplication_1=multiplier
prim3_Multiplication_comment=\
/**\n\
\ * Compute and answer the product of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The multiplicand.\n\
\ *    {1} - The multiplier.\n\
\ * Returns:\n\
\ *    The product of the multiplicand and the multiplier.\n\
\ */\n
# _=2
prim4_Division=_÷_
prim4_Division_0=dividend
prim4_Division_1=divisor
prim4_Division_comment=\
/**\n\
\ * Compute and answer the quotient of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    The quotient of the dividend and the divisor.\n\
\ */\n
# _=2
prim5_LessThan=_<_
prim5_LessThan_comment=\
/**\n\
\ * Is the first argument strictly less than the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is strictly less than the second argument,\n\
\ *    `false` otherwise.\n\
\ */\n
# _=2
prim6_LessOrEqual=_≤_
prim6_LessOrEqual_comment=\
/**\n\
\ * Is the first argument less than or equal to the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is less than or equal to the second\n\
\ *    argument, `false` otherwise.\n\
\ */\n
# _=4
prim7_CreateIntegerRange=integer range from_(inclusive=_)to_(inclusive=_)
prim7_CreateIntegerRange_0=lowerBound
prim7_CreateIntegerRange_1=lowerBoundInclusive
prim7_CreateIntegerRange_2=upperBound
prim7_CreateIntegerRange_3=upperBoundInclusive
prim7_CreateIntegerRange_comment=\
/**\n\
\ * Construct and answer an integral range type whose lower bound is `{0}`\n\
\ * and whose upper bound is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The lower bound.\n\
\ *    {1} -\n\
\ *       `true` if the lower bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ *    {2} - The upper bound.\n\
\ *    {3} -\n\
\ *       `true` if the upper bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ * Returns:\n\
\ *    The requested integral range type.\n\
\ */\n
# _=1
prim8_LowerBound=_'s lower bound
prim8_LowerBound_0=range
prim8_LowerBound_comment=\
/**\n\
\ * Answer the lower bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The lower bound of the argument.\n\
\ */\n
# _=1
prim9_UpperBound=_'s upper bound
prim9_UpperBound_0=range
prim9_UpperBound_comment=\
/**\n\
\ * Answer the upper bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The upper  bound of the argument.\n\
\ */\n
# _=1
prim10_GetValue=↓_
prim10_GetValue_0=var
prim10_GetValue_comment=\
/**\n\
\ * Answer the value contained within the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value contained within the specified variable.\n\
\ */\n
# _=2
prim11_SetValue=↓_:=_
prim11_SetValue_0=var
prim11_SetValue_1=value
prim11_SetValue_comment=\
/**\n\
\ * Store `{1}` into the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The value that should be stored into `{0}`.\n\
\ */\n
# _=1
prim12_ClearValue=clear_
prim12_ClearValue_0=var
prim12_ClearValue_comment=\
/**\n\
\ * Clear the specified variable. This resets it to the unassigned state.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ */\n
# _=1
prim13_CreateVariableType=↑_
prim13_CreateVariableType_0=containmentType
prim13_CreateVariableType_comment=\
/**\n\
\ * Construct and answer a variable type with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    The requested variable type.\n\
\ */\n
# _=1
prim14_VariableReadType=_'s read type
prim14_VariableReadType_0=varType
prim14_VariableReadType_comment=\
/**\n\
\ * Answer the read type of the specified variable type. All values read from\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be read from\n\
\ *    instances of `{0}`.\n\
\ */\n
# _=2
prim15_Swap=swap_and_
prim15_Swap_comment=\
/**\n\
\ * Exchange the contents of the two variables. This is more efficient than\n\
\ * using an intermediate variable, and permits additional optimizations by the\n\
\ * virtual machine.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - A variable.\n\
\ */\n
# _=1
prim16_CreateVariable=new ↑_
prim16_CreateVariable_0=containmentType
prim16_CreateVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ */\n
# _=1
prim17_HasNoValue=_is unassigned
prim17_HasNoValue_0=var
prim17_HasNoValue_comment=\
/**\n\
\ * Does the specified variable contain a value?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    `true` if the variable contains a value (i.e. because it has previously\n\
\ *    been assigned), `false` otherwise.\n\
\ */\n
# _=1
prim18_GetClearing=eject_
prim18_GetClearing_0=var
prim18_GetClearing_comment=\
/**\n\
\ * Eject and answer the contents of the specified variable. The variable is\n\
\ * in the unassigned state after the primitive completes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value ejected from the variable.\n\
\ */\n
# _=1
prim19_VariableWriteType=_'s write type
prim19_VariableWriteType_0=varType
prim19_VariableWriteType_comment=\
/**\n\
\ * Answer the write type of the specified variable type. All values written to\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be written to\n\
\ *    instances of `{0}`.\n\
\ */\n
# _=0
prim23_IsTerminationRequested=termination requested
prim23_IsTerminationRequested_comment=\
/**\n\
\ * Has termination of the current fiber been requested?\n\
\ *\n\
\ * Returns:\n\
\ *    `true` if termination of the current fiber has been requested, `false`\n\
\ *    otherwise.\n\
\ */\n
# _=1
prim24_RequestTermination=request termination of_
prim24_RequestTermination_0=victim
prim24_RequestTermination_comment=\
/**\n\
\ * Request termination of the specified fiber. Termination is consensual only;\n\
\ * cooperation of the fiber is required to affect termination.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
# _=0
prim25_CurrentProcess=current fiber
prim25_CurrentProcess_comment=\
/**\n\
\ * Answer the current fiber.\n\
\ *\n\
\ * Returns:\n\
\ *    The current fiber.\n\
\ */\n
# _=2
prim26_LookupProcessVariable=_[_]
prim26_LookupProcessVariable_0=aFiber
prim26_LookupProcessVariable_1=key
prim26_LookupProcessVariable_comment=\
/**\n\
\ * Answer the value bound to `{1}` in the specified fiber''s environment. Since\n\
\ * the fiber''s environment essentially contains fiber-local variables (i.e.\n\
\ * bindings from atoms to arbitrary values), this operation effectively reads a\n\
\ * fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` within the fiber's environment.\n\
\ */\n
# _=3
prim27_SetProcessVariable=_[_]:=_
prim27_SetProcessVariable_0=aFiber
prim27_SetProcessVariable_1=key
prim27_SetProcessVariable_2=value
prim27_SetProcessVariable_comment=\
/**\n\
\ * Set the value bound to `{1}` in the specified fiber''s environment,\n\
\ * overwriting any previous value. Since the fiber''s environment essentially\n\
\ * contains fiber-local variables (i.e. bindings from atoms to arbitrary\n\
\ * values), this operation effectively writes a fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be (over)written.\n\
\ *    {2} - The new value.\n\
\ */\n
# _=1
prim29_Instances=_'s instances
prim29_Instances_0=enum
prim29_Instances_comment=\
/**\n\
\ * Answer the instances of the enumeration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An enumeration.\n\
\ * Returns:\n\
\ *    A set whose members are the instances of the enumeration.\n\
\ */\n
# _=1
prim30_Type=_'s type
prim30_Type_0=value
prim30_Type_comment=\
/**\n\
\ * Answer the precise instance type of the supplied value. This is the most\n\
\ * specific possible type that describes the value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ * Returns:\n\
\ *    The precise instance type of the supplied value.\n\
\ */\n
# _=2
prim31_TypeUnion=_∪_
prim31_TypeUnion_comment=\
/**\n\
\ * Compute and answer the type union of the two types. This is the most\n\
\ * specific type that is a supertype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type union of the arguments.\n\
\ */\n
# _=2
prim32_TypeIntersection=_∩_
prim32_TypeIntersection_comment=\
/**\n\
\ * Compute and answer the type intersection of the two types. This is the most\n\
\ * general type that is a subtype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type intersection of the arguments.\n\
\ */\n
# _=2
prim33_IsSubtypeOf=_≤_
prim33_IsSubtypeOf_comment=\
/**\n\
\ * Is the first argument a subtype of the second argument? This does not\n\
\ * implement the proper subtype relation, so the first argument is considered\n\
\ * a subtype of the second argument also if it is equal to the second argument.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    `true` if the first argument is a subtype of, or the same type as, the\n\
\ *    second argument, `false` otherwise.\n\
\ */\n
# _=2
prim34_CreateFunctionType=function type accepting_and returning_
prim34_CreateFunctionType_0=parameterTypes
prim34_CreateFunctionType_1=returnType
prim34_CreateFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified parameter types and\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The parameter types.\n\
\ *    {1} - The return type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type accept arguments\n\
\ *    whose types conform to the parameter types and whose return value\n\
\ *    conforms to the return type.\n\
\ */\n
# _=1
prim35_ParamType=_'s parameters' type
# _=2
prim36_ParamTypeAt=_'s parameter_'s type
# _=1
prim37_ReturnType=_'s return type
# _=1
prim38_UnionOfTupleOfTypes=union of types in_
# _=1
prim39_CreateGeneralFunctionType=⊶[…]→_
# _=2
prim40_InvokeWithTuple=invoke_with_
# _=3
prim43_IfThenElse=if_then_else_
# _=2
prim44_IfThen=if_then_
# _=2
prim45_ShortCircuitHelper=ignore_and evaluate_
# _=5
prim49_CreateContinuation=
# _=1
prim50_ContinuationTypeToFunctionType=_'s function type
# _=1
prim51_FunctionTypeToContinuationType=$_
# _=1
prim52_ContinuationCaller=
# _=1
prim53_ContinuationFunction=
# _=1
prim54_ContinuationPC=
# _=1
prim55_ContinuationStackPointer=
# _=2
prim56_RestartContinuationWithArguments=restart_with_
# _=2
prim57_ExitContinuationWithResult=exit_with_
# _=1
prim58_RestartContinuation=restart_
# _=1
prim59_ContinuationStackData=
# _=2
prim60_Equality=_=_
# _=1
prim61_MapToObject=_as private unvalidated object
# _=1
prim62_ObjectToMap=_as map
# _=1
prim63_MapToObjectType=_as object type
# _=1
prim64_ObjectTypeToMap=_as map
# _=1
prim65_CreateEnumeration=
# _=1
prim66_CreateEnumerationType=enum of_
# _=1
prim67_NameOfPrimitiveType=_'s name
# _=2
prim68_RecordNewTypeName=give type_the name_
# _=1
prim69_TypeNames=_'s names
# _=2
prim70_CreateConstantBlock=
# _=4
prim71_CreateStubInvokingWithFirstArgAndCallArgsAsTuple=
# _=1
prim72_CompiledCodeOfFunction=_'s compiled code
# _=1
prim73_OuterVariables=_'s outer variables
# _=2
prim74_CreateFunction=
# _=1
prim80_MapSize=
# _=2
prim81_MapHasKey=
# _=2
prim82_MapAtKey=
# _=3
prim83_MapReplacingKey=
# _=2
prim84_MapWithoutKey=
# _=0
prim85_CreateEmptyMap=
# _=1
prim86_MapKeysAsSet=
# _=3
prim87_CreateMapType=
# _=1
prim88_MapTypeSizes=
# _=1
prim89_MapTypeKeyType=
# _=1
prim90_MapTypeValueType=
# _=1
prim91_MapValuesAsTuple=
# _=1
prim100_SetSize=
# _=2
prim101_SetHasElement=
# _=2
prim102_SetUnion=
# _=2
prim103_SetIntersection=
# _=2
prim104_SetDifference=
# _=2
prim105_SetWith=
# _=2
prim106_SetWithout=
# _=2
prim107_SetIsSubset=
# _=0
prim108_CreateEmptySet=
# _=1
prim109_TupleToSet=
# _=1
prim110_SetToTuple=
# _=2
prim111_CreateSetType=
# _=1
prim112_SetTypeSizes=
# _=1
prim113_SetTypeElementType=
# _=1
prim120_CreateAtom=
# _=1
prim121_AtomName=
# _=2
prim122_AtomHasProperty=
# _=2
prim123_AtomGetProperty=
# _=3
prim124_AtomSetProperty=
# _=2
prim125_AtomRemoveProperty=
# _=1
prim130_TupleSize=
# _=2
prim131_TupleAt=
# _=3
prim132_TupleReplaceAt=
# _=3
prim135_ExtractSubtuple=
# _=1
prim136_ConcatenateTuples=
# _=3
prim137_CreateTupleType_sizeRange_typeTuple_defaultType=
# _=1
prim138_TupleTypeSizes=
# _=1
prim139_TupleTypeLeadingTypes=
# _=1
prim140_TupleTypeDefaultType=
# _=2
prim141_TupleTypeAt=
# _=3
prim142_TupleTypeSequenceOfTypes=
# _=3
prim143_TupleTypeAtThrough=
# _=2
prim144_TupleTypeConcatenate=
# _=2
prim145_CompareTupleTypesForCorrespondingElementInstantiation=
# _=1
prim160_FileOpenRead=
# _=2
prim161_FileOpenWrite=
# _=1
prim162_FileOpenReadWrite=
# _=1
prim163_FileClose=
# _=2
prim164_FileRead=
# _=2
prim165_FileWrite=
# _=1
prim166_FileSize=
# _=1
prim167_FilePosition=
# _=2
prim168_FileSetPosition=
# _=1
prim169_FileSync=
# _=1
prim170_FileExists=
# _=1
prim171_FileCanRead=
# _=1
prim172_FileCanWrite=
# _=1
prim173_FileCanExecute=
# _=2
prim174_FileRename=
# _=1
prim175_FileUnlink=
# _=1
prim180_CompiledCodeNumArgs=
# _=1
prim181_CompiledCodeNumLocals=
# _=1
prim182_CompiledCodeNumOuters=
# _=1
prim183_CompiledCodeNumStackSlots=
# _=1
prim184_CompiledCodeNybbles=
# _=1
prim185_CompiledCodeFunctionType=
# _=1
prim186_CompiledCodePrimitiveNumber=
# _=1
prim187_CompiledCodeLiterals=
# _=7
prim188_CreateCompiledCode=
# _=2
prim200_CatchException=
# _=1
prim201_RaiseException=
# _=1
prim207_CompleteMessages=
# _=1
prim208_IncompleteMessages=
# _=1
prim209_CompleteMessagesStartingWith=
# _=1
prim210_IncompleteMessagesStartingWith=
# _=1
prim211_BundleMessage=
# _=1
prim212_BundleMessageParts=
# _=1
prim213_BundleSignatures=
# _=1
prim214_BundleHasRestrictions=
# _=1
prim215_BundleRestrictions=
# _=1
prim216_SignatureBodyType=
# _=1
prim217_SignatureBodyBlock=
# _=1
prim220_ImplementationSetFromName=
# _=1
prim221_ImplementationSetName=
# _=1
prim240_SpecialObject=
# _=1
prim245_LookupName=
# _=2
prim248_AddTypeRestriction=
# _=2
prim249_SimpleMacroDeclaration=
# _=1
prim250_IsPrimitiveDefined=
# _=2
prim251_AbstractMethodDeclaration=
# _=2
prim252_ForwardMethodDeclaration=
# _=2
prim253_SimpleMethodDeclaration=
# _=2
prim255_PrecedenceDeclaration=
# _=1
prim256_EmergencyExit=
# _=0
prim257_BreakPoint=
# _=1
prim258_PrintToConsole=
# _=1
prim259_ToString=
# _=0
prim260_CreateLibrarySpec=
# _=2
prim261_OpenLibrary=
# _=2
prim262_ParseDeclarations=
# _=2
prim263_ExtractEntryPoint=
# _=1
prim264_EntryPointFunctionType=
# _=2
prim265_InvokeEntryPoint=
# _=2
prim266_ReadIntegralType=
# _=3
prim267_WriteIntegralType=
# _=0
prim268_BigEndian=
# _=2
prim280_FloatAddition=
# _=2
prim281_FloatSubtraction=
# _=2
prim282_FloatMultiplication=
# _=2
prim283_FloatDivision=
# _=2
prim284_FloatLessThan=
# _=2
prim285_FloatLessOrEqual=
# _=1
prim286_FloatLn=
# _=1
prim287_FloatExp=
# _=2
prim288_FloatModulus=
# _=1
prim289_FloatTruncatedAsInteger=
# _=1
prim290_FloatFromInteger=
# _=2
prim291_FloatTimesTwoPower=
# _=2
prim310_DoubleAddition=
# _=2
prim311_DoubleSubtraction=
# _=2
prim312_DoubleMultiplication=
# _=2
prim313_DoubleDivision=
# _=2
prim314_DoubleLessThan=
# _=2
prim315_DoubleLessOrEqual=
# _=1
prim316_DoubleLn=
# _=1
prim317_DoubleExp=
# _=2
prim318_DoubleModulus=
# _=1
prim319_DoubleTruncatedAsInteger=
# _=1
prim320_DoubleFromInteger=
# _=2
prim321_DoubleTimesTwoPower=
# _=1
prim330_CharacterCodePoint=
# _=1
prim331_CharacterFromCodePoint=
# _=-1
prim340_PushConstant=
# _=2
prim350_MacroInnerAssignment=
# _=1
prim351_ParseNodeExpressionType=
# _=1
prim352_RejectParsing=
# _=2
prim353_MacroAssignmentStatement=
# _=1
prim354_MacroReference=
# _=2
prim355_CreateParseNodeType=
# _=1
prim360_AssertionFailed=
# _=2
prim500_CreatePojoType=
# _=1
prim501_CreatePojoArrayType=
# _=2
prim502_CreatePojoConstructorFunction=
# _=4
prim503_InvokePojoConstructor=
