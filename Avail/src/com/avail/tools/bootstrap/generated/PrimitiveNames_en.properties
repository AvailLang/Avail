#
# PrimitiveNames_en.properties
# Copyright (c) 2011, Mark van Gulik.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.PrimitiveNamesGenerator
# * Last Generated On: 2012.01.06 20:02:11.887 -0600
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

#   1 : _=2
prim1_Addition=_+_
prim1_Addition_0=augend
prim1_Addition_1=addend
prim1_Addition_comment=\
/**\n\
\ * Compute and answer the sum of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The augend.\n\
\ *    {1} - The addend.\n\
\ * Returns:\n\
\ *    The sum of the augend and the addend.\n\
\ */\n
#   2 : _=2
prim2_Subtraction=_-_
prim2_Subtraction_0=minuend
prim2_Subtraction_1=subtrahend
prim2_Subtraction_comment=\
/**\n\
\ * Compute and answer the difference of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The difference of the minuend and the subtrahend.\n\
\ */\n
#   3 : _=2
prim3_Multiplication=_×_
prim3_Multiplication_0=multiplicand
prim3_Multiplication_1=multiplier
prim3_Multiplication_comment=\
/**\n\
\ * Compute and answer the product of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The multiplicand.\n\
\ *    {1} - The multiplier.\n\
\ * Returns:\n\
\ *    The product of the multiplicand and the multiplier.\n\
\ */\n
#   4 : _=2
prim4_Division=_÷_
prim4_Division_0=dividend
prim4_Division_1=divisor
prim4_Division_comment=\
/**\n\
\ * Compute and answer the quotient of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    The quotient of the dividend and the divisor.\n\
\ */\n
#   5 : _=2
prim5_LessThan=_<_
prim5_LessThan_0=
prim5_LessThan_1=
prim5_LessThan_comment=\
/**\n\
\ * Is the first argument strictly less than the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is strictly less than the second argument,\n\
\ *    `false` otherwise.\n\
\ */\n
#   6 : _=2
prim6_LessOrEqual=_≤_
prim6_LessOrEqual_0=
prim6_LessOrEqual_1=
prim6_LessOrEqual_comment=\
/**\n\
\ * Is the first argument less than or equal to the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is less than or equal to the second\n\
\ *    argument, `false` otherwise.\n\
\ */\n
#   7 : _=4
prim7_CreateIntegerRange=integer range from_(inclusive=_)to_(inclusive=_)
prim7_CreateIntegerRange_0=lowerBound
prim7_CreateIntegerRange_1=lowerBoundInclusive
prim7_CreateIntegerRange_2=upperBound
prim7_CreateIntegerRange_3=upperBoundInclusive
prim7_CreateIntegerRange_comment=\
/**\n\
\ * Construct and answer an integral range type whose lower bound is `{0}`\n\
\ * and whose upper bound is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The lower bound.\n\
\ *    {1} -\n\
\ *       `true` if the lower bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ *    {2} - The upper bound.\n\
\ *    {3} -\n\
\ *       `true` if the upper bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ * Returns:\n\
\ *    The requested integral range type.\n\
\ */\n
#   8 : _=1
prim8_LowerBound=_'s lower bound
prim8_LowerBound_0=range
prim8_LowerBound_comment=\
/**\n\
\ * Answer the lower bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The lower bound of the argument.\n\
\ */\n
#   9 : _=1
prim9_UpperBound=_'s upper bound
prim9_UpperBound_0=range
prim9_UpperBound_comment=\
/**\n\
\ * Answer the upper bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The upper  bound of the argument.\n\
\ */\n
#  10 : _=1
prim10_GetValue=↓_
prim10_GetValue_0=var
prim10_GetValue_comment=\
/**\n\
\ * Answer the value contained within the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value contained within the specified variable.\n\
\ */\n
#  11 : _=2
prim11_SetValue=↓_:=_
prim11_SetValue_0=var
prim11_SetValue_1=value
prim11_SetValue_comment=\
/**\n\
\ * Store `{1}` into the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The value that should be stored into `{0}`.\n\
\ */\n
#  12 : _=1
prim12_ClearValue=clear_
prim12_ClearValue_0=var
prim12_ClearValue_comment=\
/**\n\
\ * Clear the specified variable. This resets it to the unassigned state.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ */\n
#  13 : _=1
prim13_CreateVariableType=↑_
prim13_CreateVariableType_0=containmentType
prim13_CreateVariableType_comment=\
/**\n\
\ * Construct and answer a variable type with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    The requested variable type.\n\
\ */\n
#  14 : _=1
prim14_VariableReadType=_'s read type
prim14_VariableReadType_0=varType
prim14_VariableReadType_comment=\
/**\n\
\ * Answer the read type of the specified variable type. All values read from\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be read from\n\
\ *    instances of `{0}`.\n\
\ */\n
#  15 : _=2
prim15_Swap=swap_and_
prim15_Swap_0=
prim15_Swap_1=
prim15_Swap_comment=\
/**\n\
\ * Exchange the contents of the two variables. This is more efficient than\n\
\ * using an intermediate variable, and permits additional optimizations by the\n\
\ * virtual machine.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - A variable.\n\
\ */\n
#  16 : _=1
prim16_CreateVariable=new ↑_
prim16_CreateVariable_0=containmentType
prim16_CreateVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ */\n
#  17 : _=1
prim17_HasNoValue=_is unassigned
prim17_HasNoValue_0=var
prim17_HasNoValue_comment=\
/**\n\
\ * Does the specified variable contain a value?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    `true` if the variable contains a value (i.e. because it has previously\n\
\ *    been assigned), `false` otherwise.\n\
\ */\n
#  18 : _=1
prim18_GetClearing=eject_
prim18_GetClearing_0=var
prim18_GetClearing_comment=\
/**\n\
\ * Eject and answer the contents of the specified variable. The variable is\n\
\ * in the unassigned state after the primitive completes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value ejected from the variable.\n\
\ */\n
#  19 : _=1
prim19_VariableWriteType=_'s write type
prim19_VariableWriteType_0=varType
prim19_VariableWriteType_comment=\
/**\n\
\ * Answer the write type of the specified variable type. All values written to\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be written to\n\
\ *    instances of `{0}`.\n\
\ */\n
#  20 : _=0
prim20_CurrentTimeMilliseconds=milliseconds since the Epoch
prim20_CurrentTimeMilliseconds_comment=\
/**\n\
\ * Answer the number of milliseconds which have elapsed since midnight\n\
\ * Coordinated Universal Time (UTC) of Thursday, January 1, 1970 (i.e. the Unix\n\
\ * Epoch).\n\
\ *\n\
\ * Returns:\n\
\ *    The current time as the number of milliseconds which have elapsed since\n\
\ *    the Unix Epoch.\n\
\ */\n
#  23 : _=0
prim23_IsTerminationRequested=termination requested
prim23_IsTerminationRequested_comment=\
/**\n\
\ * Has termination of the current fiber been requested?\n\
\ *\n\
\ * Returns:\n\
\ *    `true` if termination of the current fiber has been requested, `false`\n\
\ *    otherwise.\n\
\ */\n
#  24 : _=1
prim24_RequestTermination=request termination of_
prim24_RequestTermination_0=victim
prim24_RequestTermination_comment=\
/**\n\
\ * Request termination of the specified fiber. Termination is consensual only;\n\
\ * cooperation of the fiber is required to affect termination.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
#  25 : _=0
prim25_CurrentProcess=current fiber
prim25_CurrentProcess_comment=\
/**\n\
\ * Answer the current fiber.\n\
\ *\n\
\ * Returns:\n\
\ *    The current fiber.\n\
\ */\n
#  26 : _=2
prim26_LookupProcessVariable=_[_]
prim26_LookupProcessVariable_0=aFiber
prim26_LookupProcessVariable_1=key
prim26_LookupProcessVariable_comment=\
/**\n\
\ * Answer the value bound to `{1}` in the specified fiber''s environment. Since\n\
\ * the fiber''s environment essentially contains fiber-local variables (i.e.\n\
\ * bindings from atoms to arbitrary values), this operation effectively reads a\n\
\ * fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` within the fiber's environment.\n\
\ */\n
#  27 : _=3
prim27_SetProcessVariable=_[_]:=_
prim27_SetProcessVariable_0=aFiber
prim27_SetProcessVariable_1=key
prim27_SetProcessVariable_2=value
prim27_SetProcessVariable_comment=\
/**\n\
\ * Set the value bound to `{1}` in the specified fiber''s environment,\n\
\ * overwriting any previous value. Since the fiber''s environment essentially\n\
\ * contains fiber-local variables (i.e. bindings from atoms to arbitrary\n\
\ * values), this operation effectively writes a fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber whose environment should be consulted.\n\
\ *    {1} - The key whose value should be (over)written.\n\
\ *    {2} - The new value.\n\
\ */\n
#  29 : _=1
prim29_Instances=_'s instances
prim29_Instances_0=enum
prim29_Instances_comment=\
/**\n\
\ * Answer the instances of the enumeration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An enumeration.\n\
\ * Returns:\n\
\ *    A set whose members are the instances of the enumeration.\n\
\ */\n
#  30 : _=1
prim30_Type=_'s type
prim30_Type_0=value
prim30_Type_comment=\
/**\n\
\ * Answer the precise instance type of the supplied value. This is the most\n\
\ * specific possible type that describes the value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ * Returns:\n\
\ *    The precise instance type of the supplied value.\n\
\ */\n
#  31 : _=2
prim31_TypeUnion=_∪_
prim31_TypeUnion_0=
prim31_TypeUnion_1=
prim31_TypeUnion_comment=\
/**\n\
\ * Compute and answer the type union of the two types. This is the most\n\
\ * specific type that is a supertype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type union of the arguments.\n\
\ */\n
#  32 : _=2
prim32_TypeIntersection=_∩_
prim32_TypeIntersection_0=
prim32_TypeIntersection_1=
prim32_TypeIntersection_comment=\
/**\n\
\ * Compute and answer the type intersection of the two types. This is the most\n\
\ * general type that is a subtype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type intersection of the arguments.\n\
\ */\n
#  33 : _=2
prim33_IsSubtypeOf=_≤_
prim33_IsSubtypeOf_0=
prim33_IsSubtypeOf_1=
prim33_IsSubtypeOf_comment=\
/**\n\
\ * Is the first argument a subtype of the second argument? This does not\n\
\ * implement the proper subtype relation, so the first argument is considered\n\
\ * a subtype of the second argument also if it is equal to the second argument.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    `true` if the first argument is a subtype of, or the same type as, the\n\
\ *    second argument, `false` otherwise.\n\
\ */\n
#  34 : _=2
prim34_CreateFunctionType=function type accepting_and returning_
prim34_CreateFunctionType_0=parameterTypes
prim34_CreateFunctionType_1=returnType
prim34_CreateFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified parameter types and\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The parameter types.\n\
\ *    {1} - The return type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type accept arguments\n\
\ *    whose types conform to the parameter types and whose return value\n\
\ *    conforms to the return type.\n\
\ */\n
#  35 : _=1
prim35_ParamType=_'s parameters' type
prim35_ParamType_0=functionType
prim35_ParamType_comment=\
/**\n\
\ * Answer a tuple type that describes the parameter types of the specified\n\
\ * function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    A fixed-size tuple type whose element types correspond to the parameter\n\
\ *    types of the argument.\n\
\ */\n
#  36 : _=2
prim36_ParamTypeAt=_[_]
prim36_ParamTypeAt_0=functionType
prim36_ParamTypeAt_1=index
prim36_ParamTypeAt_comment=\
/**\n\
\ * Answer the `{1}`-th parameter type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ *    {1} - The one-based index of the desired parameter type.\n\
\ * Returns:\n\
\ *    The `{1}`-th parameter type of the argument.\n\
\ */\n
#  37 : _=1
prim37_ReturnType=_'s return type
prim37_ReturnType_0=functionType
prim37_ReturnType_comment=\
/**\n\
\ * Answer the return type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The return type of the argument.\n\
\ */\n
#  38 : _=1
prim38_UnionOfTupleOfTypes=∪_
prim38_UnionOfTupleOfTypes_0=tupleOfTypes
prim38_UnionOfTupleOfTypes_comment=\
/**\n\
\ * Compute and answer the type union of the elements of the given tuple of\n\
\ * types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of types.\n\
\ * Returns:\n\
\ *    The type union of the elements of the argument.\n\
\ */\n
#  39 : _=1
prim39_CreateGeneralFunctionType=[`…]→_
prim39_CreateGeneralFunctionType_0=returnType
prim39_CreateGeneralFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified return type.\n\
\ * Instances of this type include any function that returns a value of the\n\
\ * specified return type, irrespective of the number or types of its parameters.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type answer values of the\n\
\ *    specified return type.\n\
\ */\n
#  40 : _=2
prim40_InvokeWithTuple=invoke_with_
prim40_InvokeWithTuple_0=aFunction
prim40_InvokeWithTuple_1=arguments
prim40_InvokeWithTuple_comment=\
/**\n\
\ * Invoke the function with the given arguments. Answer its result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ *    {1} - The tuple of arguments.\n\
\ * Returns:\n\
\ *    The value produced by applying the arguments to the function.\n\
\ */\n
#  43 : _=3
prim43_IfThenElse=if_then_else_
prim43_IfThenElse_0=predicate
prim43_IfThenElse_1=trueFunction
prim43_IfThenElse_2=falseFunction
prim43_IfThenElse_comment=\
/**\n\
\ * Given a predicate value and two functions, invoke one of them and answer its\n\
\ * result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ *    {2} - The function to invoke if `{1}` is `false`.\n\
\ * Returns:\n\
\ *    If `{0}` is `true`, then the value produced by invoking\n\
\ *    `{1}`; otherwise, the value produced by invoking `{2}`.\n\
\ */\n
#  44 : _=2
prim44_IfThen=if_then_
prim44_IfThen_0=predicate
prim44_IfThen_1=trueBlock
prim44_IfThen_comment=\
/**\n\
\ * Given a predicate value and a function, conditionally invoke the specified\n\
\ * function.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ */\n
#  45 : _=2
prim45_ShortCircuitHelper=ignore_and evaluate_
prim45_ShortCircuitHelper_0=
prim45_ShortCircuitHelper_1=
prim45_ShortCircuitHelper_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
#  49 : _=5
prim49_CreateContinuation=$_@pc=_stack=_[_]caller=_
prim49_CreateContinuation_0=aFunction
prim49_CreateContinuation_1=programCounter
prim49_CreateContinuation_2=stack
prim49_CreateContinuation_3=stackPointer
prim49_CreateContinuation_4=caller
prim49_CreateContinuation_comment=\
/**\n\
\ * Construct and answer a continuation whose current function, Level One\n\
\ * program counter, local stack, local stack pointer, and calling continuation\n\
\ * are specified by the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The new continuation''s current function.\n\
\ *    {1} - `{0}`''s program counter. This is the index of the\n\
\ *       next Level One instruction to execute when the new continuation is\n\
\ *       resumed.\n\
\ *    {2} - `{0}`''s stack. This tuple contains the arguments, local\n\
\ *       variables, and temporaries.\n\
\ *    {3} - `{0}`''s stack pointer. This is the index of the\n\
\ *       top of the stack.\n\
\ *    {4} - A variable holding the new continuation''s calling continuation.\n\
\ *       If the variable is unassigned, then create a root continuation (i.e.\n\
\ *       one without a caller).\n\
\ * Returns:\n\
\ *    The requested continuation.\n\
\ */\n
#  50 : _=1
prim50_ContinuationTypeToFunctionType=_'s function type
prim50_ContinuationTypeToFunctionType_0=aContinuation
prim50_ContinuationTypeToFunctionType_comment=\
/**\n\
\ * Answer the type of the function represented by the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function''s type.\n\
\ */\n
#  51 : _=1
prim51_FunctionTypeToContinuationType=$_
prim51_FunctionTypeToContinuationType_0=functionType
prim51_FunctionTypeToContinuationType_comment=\
/**\n\
\ * Compute and answer a continuation type capable of representing a current\n\
\ * function of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The requested continuation type.\n\
\ */\n
#  52 : _=1
prim52_ContinuationCaller=_'s caller
prim52_ContinuationCaller_0=aContinuation
prim52_ContinuationCaller_comment=\
/**\n\
\ * Construct and answer a variable that holds the caller of the specified\n\
\ * continuation. This variable will be unassigned if the continuation has no\n\
\ * caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    A variable that, if assigned, holds the argument''s caller. If unassigned,\n\
\ *    then the argument has no caller.\n\
\ */\n
#  53 : _=1
prim53_ContinuationFunction=_'s function
prim53_ContinuationFunction_0=aContinuation
prim53_ContinuationFunction_comment=\
/**\n\
\ * Answer the current function of the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function. This is the function whose execution\n\
\ *    will be resumed if the continuation is resumed.\n\
\ */\n
#  54 : _=1
prim54_ContinuationPC=_'s program counter
prim54_ContinuationPC_0=aContinuation
prim54_ContinuationPC_comment=\
/**\n\
\ * Answer the program counter of the specified continuation. Using the current\n\
\ * function''s tuple of Level One nybblecodes, this is the index of the next\n\
\ * instruction to be performed (if the continuation is resumed).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s Level One program counter.\n\
\ */\n
#  55 : _=1
prim55_ContinuationStackPointer=_'s stack pointer
prim55_ContinuationStackPointer_0=aContinuation
prim55_ContinuationStackPointer_comment=\
/**\n\
\ * Answer the stack pointer of the specified continuation. This is the index of\n\
\ * the top of the local stack. For an empty stack, this value equals the size of\n\
\ * the stack plus one. The stack grows downward.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack pointer.\n\
\ */\n
#  56 : _=2
prim56_RestartContinuationWithArguments=restart_with_
prim56_RestartContinuationWithArguments_0=aContinuation
prim56_RestartContinuationWithArguments_1=arguments
prim56_RestartContinuationWithArguments_comment=\
/**\n\
\ * Restart the continuation with the specified arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with the given arguments instead of the original arguments. The\n\
\ * current continuation (in which this primitive was invoked) is completely\n\
\ * replaced by the restarted continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ *    {1} - The new arguments with which to restart `{0}`.\n\
\ */\n
#  57 : _=2
prim57_ExitContinuationWithResult=exit_with_
prim57_ExitContinuationWithResult_0=aContinuation
prim57_ExitContinuationWithResult_1=value
prim57_ExitContinuationWithResult_comment=\
/**\n\
\ * Exit the continuation and answer the specified value to the continuation''s\n\
\ * caller. Execution proceeds as though the continuation''s had just returned\n\
\ * from its current function with the supplied value. The current continuation\n\
\ * (in which this primitive was invoked) is completely replaced by the specified\n\
\ * continuation''s resumed caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to exit.\n\
\ *    {1} - The value with which to exit `{0}`.\n\
\ */\n
#  58 : _=1
prim58_RestartContinuation=restart_
prim58_RestartContinuation_0=aContinuation
prim58_RestartContinuation_comment=\
/**\n\
\ * Restart the continuation with its original arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with its original arguments. The current continuation (in which\n\
\ * this primitive was invoked) is completely replaced by the restarted\n\
\ * continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ */\n
#  59 : _=1
prim59_ContinuationStackData=_'s stack
prim59_ContinuationStackData_0=aContinuation
prim59_ContinuationStackData_comment=\
/**\n\
\ * Answer the stack of the specified continuation. This tuple contains the\n\
\ * arguments, local variables, and temporaries. Any null values, forbidden to\n\
\ * leak through into observable Avail macrostate, are replaced with an\n\
\ * unassigned variable whose containment type is ⊥. Note that such a variable\n\
\ * cannot be constructed either syntactically nor through a variable\n\
\ * construction primitive.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack.\n\
\ */\n
#  60 : _=2
prim60_Equality=_=_
prim60_Equality_0=
prim60_Equality_1=
prim60_Equality_comment=\
/**\n\
\ * Are the arguments equal?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value.\n\
\ *    {1} - A value.\n\
\ * Returns:\n\
\ *    `true` if the arguments are equal, `false` otherwise.\n\
\ */\n
#  61 : _=1
prim61_MapToObject=_as object
prim61_MapToObject_0=fieldsToValues
prim61_MapToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and whose values\n\
\ *       are the corresponding field values.\n\
\ * Returns:\n\
\ *    The requested object.\n\
\ */\n
#  62 : _=1
prim62_ObjectToMap=_as map
prim62_ObjectToMap_0=anObject
prim62_ObjectToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object whose fields should be the keys of the new map and whose\n\
\ *       values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  63 : _=1
prim63_MapToObjectType=_as object type
prim63_MapToObjectType_0=fieldsToTypes
prim63_MapToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and whose values\n\
\ *       are the corresponding field types.\n\
\ * Returns:\n\
\ *    The requested object type.\n\
\ */\n
#  64 : _=1
prim64_ObjectTypeToMap=_as map
prim64_ObjectTypeToMap_0=anObjectType
prim64_ObjectTypeToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type whose fields should be the keys of the new map and\n\
\ *       whose values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  65 : _=1
prim65_CreateEnumeration=enumeration of_
prim65_CreateEnumeration_0=instances
prim65_CreateEnumeration_comment=\
/**\n\
\ * Construct and answer an enumeration whose instances are fully determined by\n\
\ * the membership of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The complete set of instances of the enumeration.\n\
\ * Returns:\n\
\ *    The requested enumeration.\n\
\ */\n
#  66 : _=1
prim66_CreateEnumerationType=enumeration of_
prim66_CreateEnumerationType_0=instanceType
prim66_CreateEnumerationType_comment=\
/**\n\
\ * Construct and answer an enumeration meta whose instances' instances are\n\
\ * universally subtypes of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The complete set of instances of the enumeration.\n\
\ * Returns:\n\
\ *    The requested enumeration meta.\n\
\ */\n
#  68 : _=2
prim68_RecordNewTypeName=_'s name:=_
prim68_RecordNewTypeName_0=anObjectType
prim68_RecordNewTypeName_1=name
prim68_RecordNewTypeName_comment=\
/**\n\
\ * For the purpose of debugging, bind a name to an object type. This name will\n\
\ * be used for subtypes that do not bind a more specific name to describe their\n\
\ * own subtypes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ *    {1} - The name that should be bound to the object type. This will replace\n\
\ *       a previously bound name.\n\
\ */\n
#  69 : _=1
prim69_TypeNames=_'s names
prim69_TypeNames_0=anObjectType
prim69_TypeNames_comment=\
/**\n\
\ * Answer the set of locally most-specific names bound to the specified object\n\
\ * type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ * Returns:\n\
\ *    The set of locally most-specific names bound to the specified object\n\
\ *    type.\n\
\ */\n
#  71 : _=2
prim71_CreateStubFunction=new_applying_
prim71_CreateStubFunction_0=aFunctionType
prim71_CreateStubFunction_1=functionToApply
prim71_CreateStubFunction_comment=\
/**\n\
\ * Construct and answer a function that is an instance of `{0}`\n\
\ * and applies `{1}` when itself applied with the appropriate\n\
\ * number and types of arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The desired function type.\n\
\ *    {1} - The function that the new function will apply when\n\
\ *       itself applied with the correct number and types of arguments.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  72 : _=1
prim72_CompiledCodeOfFunction=_'s implementation
prim72_CompiledCodeOfFunction_0=aFunction
prim72_CompiledCodeOfFunction_comment=\
/**\n\
\ * Answer the implementation of the specified function. A function''s\n\
\ * implementation comprises its nybblecodes, its literals, its primitive\n\
\ * linkage (if any)\n\
, its function type, and various statistics.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s implementation.\n\
\ */\n
#  73 : _=1
prim73_OuterVariables=_'s outer variables
prim73_OuterVariables_0=aFunction
prim73_OuterVariables_comment=\
/**\n\
\ * Answer all variables captured by the specified function. For functions\n\
\ * compiled directly from source code (i.e. the vast majority of them), these\n\
\ * variables are lexically captured.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s outer variables.\n\
\ */\n
#  74 : _=2
prim74_CreateFunction=function from_and_
prim74_CreateFunction_0=implementation
prim74_CreateFunction_1=outerVariables
prim74_CreateFunction_comment=\
/**\n\
\ * Construct and answer a function given the specified compiled code and tuple\n\
\ * of captured variables.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The compiled code that describes the algorithm.\n\
\ *    {1} - The tuple of outer variables.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  80 : _=1
prim80_MapSize=|_|
prim80_MapSize_0=aMap
prim80_MapSize_comment=\
/**\n\
\ * Answer the cardinality of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
#  81 : _=2
prim81_KeyInMap=_∈_
prim81_KeyInMap_0=key
prim81_KeyInMap_1=aMap
prim81_KeyInMap_comment=\
/**\n\
\ * Is `{0}` a member of the set of keys of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose membership should be queried.\n\
\ *    {1} - A map.\n\
\ * Returns:\n\
\ *    `true` if `{0}` if a key of `{1}`, `false` otherwise.\n\
\ */\n
#  82 : _=2
prim82_MapAtKey=_[_]
prim82_MapAtKey_0=aMap
prim82_MapAtKey_1=key
prim82_MapAtKey_comment=\
/**\n\
\ * Answer the value bound to `{0}` in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - The key whose bound value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` in `{0}`.\n\
\ */\n
#  83 : _=3
prim83_MapReplacingKey=_[_]:=_
prim83_MapReplacingKey_0=aMap
prim83_MapReplacingKey_1=key
prim83_MapReplacingKey_2=value
prim83_MapReplacingKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it contains a binding from\n\
\ * `{1}` to `{2}`; any value previously bound to `{1}` is "forgotten" in the\n\
\ * new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key.\n\
\ *    {2} - The new value for the key.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  84 : _=2
prim84_MapWithoutKey=_-_
prim84_MapWithoutKey_0=aMap
prim84_MapWithoutKey_1=key
prim84_MapWithoutKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it does not contain a\n\
\ * binding for `{1}`; any such previous binding is "forgotten" in the new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key whose binding should be omitted.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  85 : _=1
prim85_CreateMap=_as map
prim85_CreateMap_0=bindings
prim85_CreateMap_comment=\
/**\n\
\ * Construct and answer a map from the supplied tuple of bindings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of bindings. Each element of the argument is a\n\
\ *       2-tuple that represents a binding. The first element of each 2-tuple is\n\
\ *       a key, the second element is the value that should be bound to that key\n\
\ *       in the resultant map.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  86 : _=1
prim86_MapKeysAsSet=_'s keys
prim86_MapKeysAsSet_0=aMap
prim86_MapKeysAsSet_comment=\
/**\n\
\ * Answer the set of keys of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s keys.\n\
\ */\n
#  87 : _=3
prim87_CreateMapType={_→_|_}
prim87_CreateMapType_0=keyType
prim87_CreateMapType_1=valueType
prim87_CreateMapType_2=cardinalityType
prim87_CreateMapType_comment=\
/**\n\
\ * Construct and answer a map type with the specified key type, value type, and\n\
\ * range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type to which all keys of instances must conform.\n\
\ *    {1} - A type to which all values of instances must conform.\n\
\ *    {2} - The range of cardinalities to which all instances must conform.\n\
\ * Returns:\n\
\ *    The requested map type.\n\
\ */\n
#  88 : _=1
prim88_MapTypeSizes=|_|
prim88_MapTypeSizes_0=aMapType
prim88_MapTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * map type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
#  89 : _=1
prim89_MapTypeKeyType=_'s key type
prim89_MapTypeKeyType_0=aMapType
prim89_MapTypeKeyType_comment=\
/**\n\
\ * Answer the most specific type to which the keys of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s key type.\n\
\ */\n
#  90 : _=1
prim90_MapTypeValueType=_'s value type
prim90_MapTypeValueType_0=aMapType
prim90_MapTypeValueType_comment=\
/**\n\
\ * Answer the most specific type to which the values of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s value type.\n\
\ */\n
#  91 : _=1
prim91_MapValuesAsTuple=_'s values
prim91_MapValuesAsTuple_0=aMapType
prim91_MapValuesAsTuple_comment=\
/**\n\
\ * Answer a tuple containing the values of the specified map. The values are\n\
\ * arranged in no particular order.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s values.\n\
\ */\n
#  92 : _=1
prim92_MapBindings=_'s bindings
prim92_MapBindings_0=aMapType
prim92_MapBindings_comment=\
/**\n\
\ * Answer a tuple containing the bindings of the specified map. A binding is a\n\
\ * 2-tuple of key and value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s bindings.\n\
\ */\n
# 100 : _=1
prim100_SetSize=|_|
prim100_SetSize_0=aSet
prim100_SetSize_comment=\
/**\n\
\ * Answer the cardinality of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 101 : _=2
prim101_ElementInSet=_∈_
prim101_ElementInSet_0=element
prim101_ElementInSet_1=aSet
prim101_ElementInSet_comment=\
/**\n\
\ * Is `{0}` an element of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is an element of `{1}`, `false` otherwise.\n\
\ */\n
# 102 : _=2
prim102_SetUnion=_∪_
prim102_SetUnion_0=
prim102_SetUnion_1=
prim102_SetUnion_comment=\
/**\n\
\ * Compute and answer the set union of the arguments. This is a set that contains\n\
\ * the elements of both sets.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set union of the arguments.\n\
\ */\n
# 103 : _=2
prim103_SetIntersection=_∩_
prim103_SetIntersection_0=
prim103_SetIntersection_1=
prim103_SetIntersection_comment=\
/**\n\
\ * Compute and answer the set intersection of the arguments. This is a set that\n\
\ * contains only those elements present in each set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set intersection of the arguments.\n\
\ */\n
# 104 : _=2
prim104_SetDifference=_\\\\_
prim104_SetDifference_0=minuend
prim104_SetDifference_1=subtrahend
prim104_SetDifference_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of `{0}` and\n\
\ * `{1}` (also the relative complement of `{1}` in `{0}`). This\n\
\ * is a set that contains only those elements present in `{0}`\n\
\ * but not in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The asymmetric set difference of `{0}` and `{1}`.\n\
\ */\n
# 105 : _=2
prim105_SetWith=_+_
prim105_SetWith_0=aSet
prim105_SetWith_1=newElement
prim105_SetWith_comment=\
/**\n\
\ * Compute and answer the set union of the specified set and a set containing\n\
\ * the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` but also contains\n\
\ *    `{1}`.\n\
\ */\n
# 106 : _=2
prim106_SetWithout=_-_
prim106_SetWithout_0=aSet
prim106_SetWithout_1=oldElement
prim106_SetWithout_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of the specified set and a\n\
\ * set containing the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must not be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` except that it does\n\
\ *    not contain `{1}`.\n\
\ */\n
# 107 : _=2
prim107_SetIsSubset=_⊆_
prim107_SetIsSubset_0=
prim107_SetIsSubset_1=
prim107_SetIsSubset_comment=\
/**\n\
\ * Is `{0}` a subset of or equal to `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is a subset of or equal to `{1}`, `false` otherwise.\n\
\ */\n
# 109 : _=1
prim109_TupleToSet=_as set
prim109_TupleToSet_0=aTuple
prim109_TupleToSet_comment=\
/**\n\
\ * Construct and answer a set that uniquely (by definition) contains the same\n\
\ * elements as the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The requested set.\n\
\ */\n
# 110 : _=1
prim110_SetToTuple=_as tuple
prim110_SetToTuple_0=aSet
prim110_SetToTuple_comment=\
/**\n\
\ * Construct and answer a tuple that arbitrarily orders the elements of the\n\
\ * specified set. The conversion is unstable, and thus different calls given\n\
\ * the same argument may produce different orderings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 111 : _=2
prim111_CreateSetType={_|_}
prim111_CreateSetType_0=elementType
prim111_CreateSetType_1=cardinalityType
prim111_CreateSetType_comment=\
/**\n\
\ * Construct and answer a set type with the specified element type and range of\n\
\ * cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The element type.\n\
\ *    {1} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested set type. Instances have elements that conform to `{0}` and\n\
\ *    cardinalities that conform to `{1}`.\n\
\ */\n
# 112 : _=1
prim112_SetTypeSizes=|_|
prim112_SetTypeSizes_0=aSetType
prim112_SetTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * set type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 113 : _=1
prim113_SetTypeElementType=_'s element type
prim113_SetTypeElementType_0=aSetType
prim113_SetTypeElementType_comment=\
/**\n\
\ * Answer the element type of the specified set type. This is the most specific\n\
\ * type to which all elements of instances must conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s element type.\n\
\ */\n
# 120 : _=1
prim120_CreateAtom=new atom_
prim120_CreateAtom_0=debugName
prim120_CreateAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A name to associate with the atom for debugging purposes.\n\
\ *       This name does not participate in atom comparison.\n\
\ * Returns:\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive.\n\
\ */\n
# 121 : _=1
prim121_AtomName=_'s name
prim121_AtomName_0=anAtom
prim121_AtomName_comment=\
/**\n\
\ * Answer the debug name of the specified atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    The argument''s debug name.\n\
\ */\n
# 122 : _=2
prim122_AtomHasProperty=_∈_
prim122_AtomHasProperty_0=anAtom
prim122_AtomHasProperty_1=key
prim122_AtomHasProperty_comment=\
/**\n\
\ * Does `{0}` have a property whose key is `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ * Returns:\n\
\ *    `true` if `{0}` has a property whose key is `{1}`, `false` otherwise.\n\
\ */\n
# 123 : _=2
prim123_AtomGetProperty=_[_]
prim123_AtomGetProperty_0=anAtom
prim123_AtomGetProperty_1=key
prim123_AtomGetProperty_comment=\
/**\n\
\ * Assuming that `{0}` has a property whose key is `{1}`, then answer\n\
\ * the property value associated with the `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ * Returns:\n\
\ *    The property value bound to the key.\n\
\ */\n
# 124 : _=3
prim124_AtomSetProperty=_[_]:=_
prim124_AtomSetProperty_0=anAtom
prim124_AtomSetProperty_1=key
prim124_AtomSetProperty_2=value
prim124_AtomSetProperty_comment=\
/**\n\
\ * For `{0}`, establish a property binding from `{1}` to `{2}`.\n\
\ * Any previous property binding for `{1}` is replaced.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ *    {2} - The property value.\n\
\ */\n
# 125 : _=2
prim125_AtomRemoveProperty=_-_
prim125_AtomRemoveProperty_0=anAtom
prim125_AtomRemoveProperty_1=key
prim125_AtomRemoveProperty_comment=\
/**\n\
\ * If `{0}` has a property whose key is `{1}`, then remove the property.\n\
\ * Otherwise do nothing.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - A property key.\n\
\ */\n
# 130 : _=1
prim130_TupleSize=|_|
prim130_TupleSize_0=aTuple
prim130_TupleSize_comment=\
/**\n\
\ * Answer the cardinality of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 131 : _=2
prim131_TupleAt=_[_]
prim131_TupleAt_0=aTuple
prim131_TupleAt_1=index
prim131_TupleAt_comment=\
/**\n\
\ * Answer the `{1}`-th element of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The index of the desired element.\n\
\ * Returns:\n\
\ *    The requested element.\n\
\ */\n
# 132 : _=3
prim132_TupleReplaceAt=_[_]:=_
prim132_TupleReplaceAt_0=aTuple
prim132_TupleReplaceAt_1=index
prim132_TupleReplaceAt_2=value
prim132_TupleReplaceAt_comment=\
/**\n\
\ * Construct and answer a tuple based on the one provided but such that its\n\
\ * `{1}`-th element is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based index of the element that should (potentially) differ\n\
\ *       in the resultant tuple.\n\
\ *    {2} - The "replacement" value.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 135 : _=3
prim135_ExtractSubtuple=_[_.._]
prim135_ExtractSubtuple_0=aTuple
prim135_ExtractSubtuple_1=sliceStart
prim135_ExtractSubtuple_2=sliceEnd
prim135_ExtractSubtuple_comment=\
/**\n\
\ * Construct and answer a slice (i.e. subtuple) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based start index (inclusive) of the desired slice.\n\
\ *    {2} - The one-based end index (inclusive) of the desired slice.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 136 : _=1
prim136_ConcatenateTuples=concatenate_
prim136_ConcatenateTuples_0=tupleOfTuples
prim136_ConcatenateTuples_comment=\
/**\n\
\ * Construct and answer a tuple that is the left-to-right concatenation of all\n\
\ * elements (i.e. tuples) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of tuples.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 137 : _=3
prim137_CreateTupleType=<_,_`…|_>
prim137_CreateTupleType_0=leadingTypes
prim137_CreateTupleType_1=defaultType
prim137_CreateTupleType_2=cardinalityType
prim137_CreateTupleType_comment=\
/**\n\
\ * Construct and answer a tuple type with the specified leading element types,\n\
\ * default element type, and range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The leading types.\n\
\ *    {1} - The default type.\n\
\ *    {2} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 138 : _=1
prim138_TupleTypeSizes=|_|
prim138_TupleTypeSizes_0=aTupleType
prim138_TupleTypeSizes_comment=\
/**\n\
\ * Answer the range of allowed cardinalities of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 139 : _=1
prim139_TupleTypeLeadingTypes=_'s leading types
prim139_TupleTypeLeadingTypes_0=aTupleType
prim139_TupleTypeLeadingTypes_comment=\
/**\n\
\ * Answer a tuple containing the leading element types of instances of the\n\
\ * specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s leading element types.\n\
\ */\n
# 140 : _=1
prim140_TupleTypeDefaultType=_'s default type
prim140_TupleTypeDefaultType_0=aTupleType
prim140_TupleTypeDefaultType_comment=\
/**\n\
\ * Answer the default element type of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s default element type.\n\
\ */\n
# 141 : _=2
prim141_TupleTypeAt=_[_]
prim141_TupleTypeAt_0=aTupleType
prim141_TupleTypeAt_1=index
prim141_TupleTypeAt_comment=\
/**\n\
\ * Answer the element type of the `{1}`-th element of instances of the\n\
\ * specified type. If `{1}` is out of bounds, then answer ⊥.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The index of the desired element type.\n\
\ * Returns:\n\
\ *    The requested element type, or ⊥ if `{1}` is out of bounds.\n\
\ */\n
# 142 : _=3
prim142_TupleTypeSequenceOfTypes=_[_.._]
prim142_TupleTypeSequenceOfTypes_0=aTupleType
prim142_TupleTypeSequenceOfTypes_1=sliceStart
prim142_TupleTypeSequenceOfTypes_2=sliceEnd
prim142_TupleTypeSequenceOfTypes_comment=\
/**\n\
\ * Compute and answer a tuple containing the requested element types. Indices\n\
\ * that are out of bounds report ⊥ as their element type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the slice.\n\
\ *    {2} - The one-based index (inclusive) of the end of the slice.\n\
\ * Returns:\n\
\ *    The requested slice of element types.\n\
\ */\n
# 143 : _=3
prim143_TupleTypeAtThrough=∪_[_.._]
prim143_TupleTypeAtThrough_0=aTupleType
prim143_TupleTypeAtThrough_1=startIndex
prim143_TupleTypeAtThrough_2=endIndex
prim143_TupleTypeAtThrough_comment=\
/**\n\
\ * Compute and answer the type union of the indicated range of element types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the range.\n\
\ *    {2} - The one-based index (inclusive) of the end of the range.\n\
\ * Returns:\n\
\ *    The type union of all element types in the specified range.\n\
\ */\n
# 144 : _=2
prim144_TupleTypeConcatenate=concatenate_
prim144_TupleTypeConcatenate_0=
prim144_TupleTypeConcatenate_1=
prim144_TupleTypeConcatenate_comment=\
/**\n\
\ * Compute and answer the concatenation of the specified tuple types. This is\n\
\ * the most specific type that encompasses all possible concatenations of the\n\
\ * instances of the two types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - A tuple type.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 160 : _=1
prim160_FileOpenRead=
prim160_FileOpenRead_0=
prim160_FileOpenRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 161 : _=2
prim161_FileOpenWrite=
prim161_FileOpenWrite_0=
prim161_FileOpenWrite_1=
prim161_FileOpenWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 162 : _=1
prim162_FileOpenReadWrite=
prim162_FileOpenReadWrite_0=
prim162_FileOpenReadWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 163 : _=1
prim163_FileClose=
prim163_FileClose_0=
prim163_FileClose_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 164 : _=2
prim164_FileRead=
prim164_FileRead_0=
prim164_FileRead_1=
prim164_FileRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 165 : _=2
prim165_FileWrite=
prim165_FileWrite_0=
prim165_FileWrite_1=
prim165_FileWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 166 : _=1
prim166_FileSize=
prim166_FileSize_0=
prim166_FileSize_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 167 : _=1
prim167_FilePosition=
prim167_FilePosition_0=
prim167_FilePosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 168 : _=2
prim168_FileSetPosition=
prim168_FileSetPosition_0=
prim168_FileSetPosition_1=
prim168_FileSetPosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 169 : _=1
prim169_FileSync=
prim169_FileSync_0=
prim169_FileSync_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 170 : _=1
prim170_FileExists=
prim170_FileExists_0=
prim170_FileExists_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 171 : _=1
prim171_FileCanRead=
prim171_FileCanRead_0=
prim171_FileCanRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 172 : _=1
prim172_FileCanWrite=
prim172_FileCanWrite_0=
prim172_FileCanWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 173 : _=1
prim173_FileCanExecute=
prim173_FileCanExecute_0=
prim173_FileCanExecute_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 174 : _=2
prim174_FileRename=
prim174_FileRename_0=
prim174_FileRename_1=
prim174_FileRename_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 175 : _=1
prim175_FileUnlink=
prim175_FileUnlink_0=
prim175_FileUnlink_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 180 : _=1
prim180_CompiledCodeNumArgs=_'s arity
prim180_CompiledCodeNumArgs_0=aFunctionImplementation
prim180_CompiledCodeNumArgs_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 181 : _=1
prim181_CompiledCodeNumLocals=
prim181_CompiledCodeNumLocals_0=
prim181_CompiledCodeNumLocals_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 182 : _=1
prim182_CompiledCodeNumOuters=
prim182_CompiledCodeNumOuters_0=
prim182_CompiledCodeNumOuters_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 183 : _=1
prim183_CompiledCodeNumStackSlots=
prim183_CompiledCodeNumStackSlots_0=
prim183_CompiledCodeNumStackSlots_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 184 : _=1
prim184_CompiledCodeNybbles=
prim184_CompiledCodeNybbles_0=
prim184_CompiledCodeNybbles_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 185 : _=1
prim185_CompiledCodeFunctionType=
prim185_CompiledCodeFunctionType_0=
prim185_CompiledCodeFunctionType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 186 : _=1
prim186_CompiledCodePrimitiveNumber=
prim186_CompiledCodePrimitiveNumber_0=
prim186_CompiledCodePrimitiveNumber_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 187 : _=1
prim187_CompiledCodeLiterals=
prim187_CompiledCodeLiterals_0=
prim187_CompiledCodeLiterals_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 188 : _=7
prim188_CreateCompiledCode=
prim188_CreateCompiledCode_0=
prim188_CreateCompiledCode_1=
prim188_CreateCompiledCode_2=
prim188_CreateCompiledCode_3=
prim188_CreateCompiledCode_4=
prim188_CreateCompiledCode_5=
prim188_CreateCompiledCode_6=
prim188_CreateCompiledCode_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ *    {5} -\n\
\ *    {6} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 200 : _=2
prim200_CatchException=
prim200_CatchException_0=
prim200_CatchException_1=
prim200_CatchException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 201 : _=1
prim201_RaiseException=
prim201_RaiseException_0=
prim201_RaiseException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 207 : _=1
prim207_CompleteMessages=
prim207_CompleteMessages_0=
prim207_CompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 208 : _=1
prim208_IncompleteMessages=
prim208_IncompleteMessages_0=
prim208_IncompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 209 : _=1
prim209_CompleteMessagesStartingWith=
prim209_CompleteMessagesStartingWith_0=
prim209_CompleteMessagesStartingWith_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 210 : _=1
prim210_IncompleteMessagesStartingWith=
prim210_IncompleteMessagesStartingWith_0=
prim210_IncompleteMessagesStartingWith_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 211 : _=1
prim211_BundleMessage=
prim211_BundleMessage_0=
prim211_BundleMessage_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 212 : _=1
prim212_BundleMessageParts=
prim212_BundleMessageParts_0=
prim212_BundleMessageParts_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 213 : _=1
prim213_BundleSignatures=
prim213_BundleSignatures_0=
prim213_BundleSignatures_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 214 : _=1
prim214_BundleHasRestrictions=
prim214_BundleHasRestrictions_0=
prim214_BundleHasRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 215 : _=1
prim215_BundleRestrictions=
prim215_BundleRestrictions_0=
prim215_BundleRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 216 : _=1
prim216_SignatureBodyType=
prim216_SignatureBodyType_0=
prim216_SignatureBodyType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 217 : _=1
prim217_SignatureBodyBlock=
prim217_SignatureBodyBlock_0=
prim217_SignatureBodyBlock_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 220 : _=1
prim220_MethodFromName=
prim220_MethodFromName_0=
prim220_MethodFromName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 221 : _=1
prim221_MethodName=
prim221_MethodName_0=
prim221_MethodName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 240 : _=1
prim240_SpecialObject=
prim240_SpecialObject_0=
prim240_SpecialObject_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 245 : _=1
prim245_LookupName=
prim245_LookupName_0=
prim245_LookupName_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 248 : _=2
prim248_AddTypeRestriction=
prim248_AddTypeRestriction_0=
prim248_AddTypeRestriction_1=
prim248_AddTypeRestriction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 249 : _=2
prim249_SimpleMacroDeclaration=
prim249_SimpleMacroDeclaration_0=
prim249_SimpleMacroDeclaration_1=
prim249_SimpleMacroDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 250 : _=1
prim250_IsPrimitiveDefined=
prim250_IsPrimitiveDefined_0=
prim250_IsPrimitiveDefined_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 251 : _=2
prim251_AbstractMethodDeclaration=
prim251_AbstractMethodDeclaration_0=
prim251_AbstractMethodDeclaration_1=
prim251_AbstractMethodDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 252 : _=2
prim252_ForwardMethodDeclaration=
prim252_ForwardMethodDeclaration_0=
prim252_ForwardMethodDeclaration_1=
prim252_ForwardMethodDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 253 : _=2
prim253_SimpleMethodDeclaration=
prim253_SimpleMethodDeclaration_0=
prim253_SimpleMethodDeclaration_1=
prim253_SimpleMethodDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 254 : _=0
prim254_ReadFromConsole=
prim254_ReadFromConsole_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 255 : _=2
prim255_PrecedenceDeclaration=
prim255_PrecedenceDeclaration_0=
prim255_PrecedenceDeclaration_1=
prim255_PrecedenceDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 256 : _=1
prim256_EmergencyExit=
prim256_EmergencyExit_0=
prim256_EmergencyExit_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 257 : _=0
prim257_BreakPoint=
prim257_BreakPoint_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ */\n
# 258 : _=1
prim258_PrintToConsole=
prim258_PrintToConsole_0=
prim258_PrintToConsole_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 259 : _=1
prim259_ToString=
prim259_ToString_0=
prim259_ToString_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 260 : _=0
prim260_CreateLibrarySpec=
prim260_CreateLibrarySpec_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 261 : _=2
prim261_OpenLibrary=
prim261_OpenLibrary_0=
prim261_OpenLibrary_1=
prim261_OpenLibrary_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 262 : _=2
prim262_ParseDeclarations=
prim262_ParseDeclarations_0=
prim262_ParseDeclarations_1=
prim262_ParseDeclarations_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 263 : _=2
prim263_ExtractEntryPoint=
prim263_ExtractEntryPoint_0=
prim263_ExtractEntryPoint_1=
prim263_ExtractEntryPoint_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 264 : _=1
prim264_EntryPointFunctionType=
prim264_EntryPointFunctionType_0=
prim264_EntryPointFunctionType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 265 : _=2
prim265_InvokeEntryPoint=
prim265_InvokeEntryPoint_0=
prim265_InvokeEntryPoint_1=
prim265_InvokeEntryPoint_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 266 : _=2
prim266_ReadIntegralType=
prim266_ReadIntegralType_0=
prim266_ReadIntegralType_1=
prim266_ReadIntegralType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 267 : _=3
prim267_WriteIntegralType=
prim267_WriteIntegralType_0=
prim267_WriteIntegralType_1=
prim267_WriteIntegralType_2=
prim267_WriteIntegralType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 268 : _=0
prim268_BigEndian=
prim268_BigEndian_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 280 : _=1
prim280_AsFloat=
prim280_AsFloat_0=
prim280_AsFloat_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 281 : _=1
prim281_AsDouble=
prim281_AsDouble_0=
prim281_AsDouble_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 286 : _=1
prim286_FloatLn=
prim286_FloatLn_0=
prim286_FloatLn_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 287 : _=1
prim287_FloatExp=
prim287_FloatExp_0=
prim287_FloatExp_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 288 : _=2
prim288_FloatModulus=
prim288_FloatModulus_0=
prim288_FloatModulus_1=
prim288_FloatModulus_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 289 : _=1
prim289_FloatTruncatedAsInteger=
prim289_FloatTruncatedAsInteger_0=
prim289_FloatTruncatedAsInteger_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 290 : _=1
prim290_FloatFromInteger=
prim290_FloatFromInteger_0=
prim290_FloatFromInteger_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 291 : _=2
prim291_FloatTimesTwoPower=
prim291_FloatTimesTwoPower_0=
prim291_FloatTimesTwoPower_1=
prim291_FloatTimesTwoPower_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 292 : _=1
prim292_FloatFloor=
prim292_FloatFloor_0=
prim292_FloatFloor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 310 : _=2
prim310_DoubleAddition=
prim310_DoubleAddition_0=
prim310_DoubleAddition_1=
prim310_DoubleAddition_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 311 : _=2
prim311_DoubleSubtraction=
prim311_DoubleSubtraction_0=
prim311_DoubleSubtraction_1=
prim311_DoubleSubtraction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 312 : _=2
prim312_DoubleMultiplication=
prim312_DoubleMultiplication_0=
prim312_DoubleMultiplication_1=
prim312_DoubleMultiplication_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 313 : _=2
prim313_DoubleDivision=
prim313_DoubleDivision_0=
prim313_DoubleDivision_1=
prim313_DoubleDivision_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 314 : _=2
prim314_DoubleLessThan=
prim314_DoubleLessThan_0=
prim314_DoubleLessThan_1=
prim314_DoubleLessThan_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 315 : _=2
prim315_DoubleLessOrEqual=
prim315_DoubleLessOrEqual_0=
prim315_DoubleLessOrEqual_1=
prim315_DoubleLessOrEqual_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 316 : _=1
prim316_DoubleLn=
prim316_DoubleLn_0=
prim316_DoubleLn_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 317 : _=1
prim317_DoubleExp=
prim317_DoubleExp_0=
prim317_DoubleExp_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 318 : _=2
prim318_DoubleModulus=
prim318_DoubleModulus_0=
prim318_DoubleModulus_1=
prim318_DoubleModulus_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 319 : _=1
prim319_DoubleTruncatedAsInteger=
prim319_DoubleTruncatedAsInteger_0=
prim319_DoubleTruncatedAsInteger_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 320 : _=1
prim320_DoubleFromInteger=
prim320_DoubleFromInteger_0=
prim320_DoubleFromInteger_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 321 : _=2
prim321_DoubleTimesTwoPower=
prim321_DoubleTimesTwoPower_0=
prim321_DoubleTimesTwoPower_1=
prim321_DoubleTimesTwoPower_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 322 : _=1
prim322_FloatFloor=
prim322_FloatFloor_0=
prim322_FloatFloor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 330 : _=1
prim330_CharacterCodePoint=
prim330_CharacterCodePoint_0=
prim330_CharacterCodePoint_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 331 : _=1
prim331_CharacterFromCodePoint=
prim331_CharacterFromCodePoint_0=
prim331_CharacterFromCodePoint_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 350 : _=2
prim350_MacroInnerAssignment=
prim350_MacroInnerAssignment_0=
prim350_MacroInnerAssignment_1=
prim350_MacroInnerAssignment_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 351 : _=1
prim351_ParseNodeExpressionType=
prim351_ParseNodeExpressionType_0=
prim351_ParseNodeExpressionType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 352 : _=1
prim352_RejectParsing=
prim352_RejectParsing_0=
prim352_RejectParsing_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 353 : _=2
prim353_MacroAssignmentStatement=
prim353_MacroAssignmentStatement_0=
prim353_MacroAssignmentStatement_1=
prim353_MacroAssignmentStatement_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 354 : _=1
prim354_MacroReference=
prim354_MacroReference_0=
prim354_MacroReference_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 355 : _=2
prim355_CreateParseNodeType=
prim355_CreateParseNodeType_0=
prim355_CreateParseNodeType_1=
prim355_CreateParseNodeType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 360 : _=1
prim360_AssertionFailed=
prim360_AssertionFailed_0=
prim360_AssertionFailed_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 500 : _=2
prim500_CreatePojoType=
prim500_CreatePojoType_0=
prim500_CreatePojoType_1=
prim500_CreatePojoType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 501 : _=1
prim501_CreatePojoArrayType=
prim501_CreatePojoArrayType_0=
prim501_CreatePojoArrayType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 502 : _=2
prim502_CreatePojoConstructorFunction=
prim502_CreatePojoConstructorFunction_0=
prim502_CreatePojoConstructorFunction_1=
prim502_CreatePojoConstructorFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
