#
# PrimitiveNames_en.properties
# Copyright © 1993-2014, The Avail Foundation, LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.PrimitiveNamesGenerator
# * Last Versioned As: $$Revision$$
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

#   1 : _=2
P_001_Addition=_+_
P_001_Addition_0=augend
P_001_Addition_1=addend
P_001_Addition_comment=\
/**\n\
\ * Compute and answer the sum of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The augend.\n\
\ *    {1} - The addend.\n\
\ * Returns:\n\
\ *    The sum of the augend and the addend.\n\
\ */\n
#   2 : _=2
P_002_Subtraction=_-_
P_002_Subtraction_0=minuend
P_002_Subtraction_1=subtrahend
P_002_Subtraction_comment=\
/**\n\
\ * Compute and answer the difference of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The difference of the minuend and the subtrahend.\n\
\ */\n
#   3 : _=2
P_003_Multiplication=_×_
P_003_Multiplication_0=multiplicand
P_003_Multiplication_1=multiplier
P_003_Multiplication_comment=\
/**\n\
\ * Compute and answer the product of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The multiplicand.\n\
\ *    {1} - The multiplier.\n\
\ * Returns:\n\
\ *    The product of the multiplicand and the multiplier.\n\
\ */\n
#   4 : _=2
P_004_Division=_÷_
P_004_Division_0=dividend
P_004_Division_1=divisor
P_004_Division_comment=\
/**\n\
\ * Compute and answer the quotient of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    The quotient of the dividend and the divisor.\n\
\ */\n
#   5 : _=2
P_005_LessThan=_<_
P_005_LessThan_0=
P_005_LessThan_1=
P_005_LessThan_comment=\
/**\n\
\ * Is the first argument strictly less than the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is strictly less than the second argument,\n\
\ *    `false` otherwise.\n\
\ */\n
#   6 : _=2
P_006_LessOrEqual=_≤_
P_006_LessOrEqual_0=
P_006_LessOrEqual_1=
P_006_LessOrEqual_comment=\
/**\n\
\ * Is the first argument less than or equal to the second argument?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ *    {1} - A number.\n\
\ * Returns:\n\
\ *    `true` if the first argument is less than or equal to the second\n\
\ *    argument, `false` otherwise.\n\
\ */\n
#   7 : _=4
P_007_CreateIntegerRange=integer range from_(inclusive=_)to_(inclusive=_)
P_007_CreateIntegerRange_0=lowerBound
P_007_CreateIntegerRange_1=lowerBoundInclusive
P_007_CreateIntegerRange_2=upperBound
P_007_CreateIntegerRange_3=upperBoundInclusive
P_007_CreateIntegerRange_comment=\
/**\n\
\ * Construct and answer an integral range type whose lower bound is `{0}`\n\
\ * and whose upper bound is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The lower bound.\n\
\ *    {1} -\n\
\ *       `true` if the lower bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ *    {2} - The upper bound.\n\
\ *    {3} -\n\
\ *       `true` if the upper bound should be adjudged inclusive, `false`\n\
\ *       otherwise.\n\
\ * Returns:\n\
\ *    The requested integral range type.\n\
\ */\n
#   8 : _=1
P_008_LowerBound=_'s⁇genuine lower bound
P_008_LowerBound_0=range
P_008_LowerBound_comment=\
/**\n\
\ * Answer the lower bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The lower bound of the argument.\n\
\ */\n
#   9 : _=1
P_009_UpperBound=_'s⁇genuine upper bound
P_009_UpperBound_0=range
P_009_UpperBound_comment=\
/**\n\
\ * Answer the upper bound of the specified integral range type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integral range type.\n\
\ * Returns:\n\
\ *    The upper bound of the argument.\n\
\ */\n
#  10 : _=1
P_010_GetValue=↓_
P_010_GetValue_0=var
P_010_GetValue_comment=\
/**\n\
\ * Answer the value contained within the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value contained within the specified variable.\n\
\ */\n
#  11 : _=2
P_011_SetValue=↓_`?=_
P_011_SetValue_0=var
P_011_SetValue_1=value
P_011_SetValue_comment=\
/**\n\
\ * Store `{1}` into the specified variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The value that should be stored into `{0}`.\n\
\ */\n
#  12 : _=1
P_012_ClearValue=Clear_
P_012_ClearValue_0=var
P_012_ClearValue_comment=\
/**\n\
\ * Clear the specified variable. This resets it to the unassigned state.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ */\n
#  13 : _=1
P_013_CreateVariableType=↑_
P_013_CreateVariableType_0=containmentType
P_013_CreateVariableType_comment=\
/**\n\
\ * Construct and answer a variable type with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    The requested variable type.\n\
\ */\n
#  14 : _=1
P_014_VariableReadType=_'s⁇read type
P_014_VariableReadType_0=varType
P_014_VariableReadType_comment=\
/**\n\
\ * Answer the read type of the specified variable type. All values read from\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be read from\n\
\ *    instances of `{0}`.\n\
\ */\n
#  15 : _=2
P_015_Swap=swap_and_
P_015_Swap_0=
P_015_Swap_1=
P_015_Swap_comment=\
/**\n\
\ * Exchange the contents of the two variables. This is more efficient than\n\
\ * using an intermediate variable, and permits additional optimizations by the\n\
\ * virtual machine.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - A variable.\n\
\ */\n
#  16 : _=1
P_016_CreateVariable=new↑_
P_016_CreateVariable_0=containmentType
P_016_CreateVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The containment type.\n\
\ * Returns:\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ */\n
#  17 : _=1
P_017_HasNoValue=_is unassigned
P_017_HasNoValue_0=var
P_017_HasNoValue_comment=\
/**\n\
\ * Is the specified variable unassigned?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    `true` if the variable does not contain a value (i.e. because it has\n\
\ *    never previously been assigned), `false` otherwise.\n\
\ */\n
#  18 : _=1
P_018_GetClearing=eject_
P_018_GetClearing_0=var
P_018_GetClearing_comment=\
/**\n\
\ * Eject and answer the contents of the specified variable. The variable is\n\
\ * in the unassigned state after the primitive completes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ * Returns:\n\
\ *    The value ejected from the variable.\n\
\ */\n
#  19 : _=1
P_019_VariableWriteType=_'s⁇write type
P_019_VariableWriteType_0=varType
P_019_VariableWriteType_comment=\
/**\n\
\ * Answer the write type of the specified variable type. All values written to\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable type.\n\
\ * Returns:\n\
\ *    The most general type that describes values that can be written to\n\
\ *    instances of `{0}`.\n\
\ */\n
#  20 : _=2
P_020_AtomicGetAndSet=atomically read_and store_
P_020_AtomicGetAndSet_0=var
P_020_AtomicGetAndSet_1=newValue
P_020_AtomicGetAndSet_comment=\
/**\n\
\ * Atomically read the value of `{0}` and store `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The new value to store into `{0}`.\n\
\ * Returns:\n\
\ *    The value originally stored in `{0}`.\n\
\ */\n
#  21 : _=3
P_021_AtomicCompareAndSwap=atomically compare_to_and,⁇if equal,⁇store_
P_021_AtomicCompareAndSwap_0=var
P_021_AtomicCompareAndSwap_1=reference
P_021_AtomicCompareAndSwap_2=newValue
P_021_AtomicCompareAndSwap_comment=\
/**\n\
\ * Atomically read the value of `{0}`, compare it to `{1}`, and, if\n\
\ * they are discovered to be equal, store `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - The value against which the content of `{0}` should be\n\
\ *       compared.\n\
\ *    {2} - The new value to conditionally store into `{0}`.\n\
\ * Returns:\n\
\ *    `true` if the operation succeeded and `{2}` was stored into `{0}`,\n\
\ *    `false` otherwise.\n\
\ */\n
#  22 : _=2
P_022_AtomicFetchAndAdd=atomically read_and add_
P_022_AtomicFetchAndAdd_0=var
P_022_AtomicFetchAndAdd_1=addend
P_022_AtomicFetchAndAdd_comment=\
/**\n\
\ * Atomically compute the sum of the value stored in `{0}` and `{1}`,\n\
\ * and store the sum back into `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable containing the augend.\n\
\ *    {1} - The addend.\n\
\ * Returns:\n\
\ *    The augend, i.e., the value originally stored in `{0}`.\n\
\ */\n
#  23 : _=3
P_023_AddWriteReactor=
P_023_AddWriteReactor_0=
P_023_AddWriteReactor_1=
P_023_AddWriteReactor_2=
P_023_AddWriteReactor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
#  24 : _=2
P_024_RemoveWriteReactor=
P_024_RemoveWriteReactor_0=
P_024_RemoveWriteReactor_1=
P_024_RemoveWriteReactor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
#  25 : _=0
P_025_TraceVariableReadsBeforeWrites=
P_025_TraceVariableReadsBeforeWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ */\n
#  26 : _=2
P_026_DisableTraceVariableReadsBeforeWrites=
P_026_DisableTraceVariableReadsBeforeWrites_0=
P_026_DisableTraceVariableReadsBeforeWrites_1=
P_026_DisableTraceVariableReadsBeforeWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
#  27 : _=0
P_027_CurrentTimeMilliseconds=milliseconds since the Epoch
P_027_CurrentTimeMilliseconds_comment=\
/**\n\
\ * Answer the number of milliseconds which have elapsed since midnight\n\
\ * Coordinated Universal Time (UTC) of Thursday, January 1, 1970 (i.e. the Unix\n\
\ * Epoch).\n\
\ *\n\
\ * Returns:\n\
\ *    The current time as the number of milliseconds which have elapsed since\n\
\ *    the Unix Epoch.\n\
\ */\n
#  28 : _=1
P_028_InstanceCount=`|_`|
P_028_InstanceCount_0=aType
P_028_InstanceCount_comment=\
/**\n\
\ * Answer the number of instances of the specified type. This is `∞` for all\n\
\ * types except for enumerations.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The cardinality of the membership of the type.\n\
\ */\n
#  29 : _=1
P_029_Instances=_'s⁇instances
P_029_Instances_0=enum
P_029_Instances_comment=\
/**\n\
\ * Answer the instances of the enumeration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An enumeration.\n\
\ * Returns:\n\
\ *    A set whose members are the instances of the enumeration.\n\
\ */\n
#  30 : _=1
P_030_Type=_'s⁇type
P_030_Type_0=value
P_030_Type_comment=\
/**\n\
\ * Answer the precise instance type of the supplied value. This is the most\n\
\ * specific possible type that describes the value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ * Returns:\n\
\ *    The precise instance type of the supplied value.\n\
\ */\n
#  31 : _=2
P_031_TypeUnion=_∪_
P_031_TypeUnion_0=
P_031_TypeUnion_1=
P_031_TypeUnion_comment=\
/**\n\
\ * Compute and answer the type union of the two types. This is the most\n\
\ * specific type that is a supertype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type union of the arguments.\n\
\ */\n
#  32 : _=2
P_032_TypeIntersection=_∩_
P_032_TypeIntersection_0=
P_032_TypeIntersection_1=
P_032_TypeIntersection_comment=\
/**\n\
\ * Compute and answer the type intersection of the two types. This is the most\n\
\ * general type that is a subtype of both types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    The type intersection of the arguments.\n\
\ */\n
#  33 : _=2
P_033_IsSubtypeOf=_⊆_
P_033_IsSubtypeOf_0=
P_033_IsSubtypeOf_1=
P_033_IsSubtypeOf_comment=\
/**\n\
\ * Is the first argument a subtype of the second argument? This does not\n\
\ * implement the proper subtype relation, so the first argument is considered\n\
\ * a subtype of the second argument also if it is equal to the second argument.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ *    {1} - A type.\n\
\ * Returns:\n\
\ *    `true` if the first argument is a subtype of, or the same type as, the\n\
\ *    second argument, `false` otherwise.\n\
\ */\n
#  34 : _=2
P_034_CreateFunctionType=function accepting_and returning_
P_034_CreateFunctionType_0=parameterTypes
P_034_CreateFunctionType_1=returnType
P_034_CreateFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified parameter types and\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The parameter types.\n\
\ *    {1} - The return type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type accept arguments\n\
\ *    whose types conform to the parameter types and whose return value\n\
\ *    conforms to the return type.\n\
\ */\n
#  35 : _=1
P_035_ParamsType=_'s⁇parameters'type
P_035_ParamsType_0=functionType
P_035_ParamsType_comment=\
/**\n\
\ * Answer a tuple type that describes the parameter types of the specified\n\
\ * function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    A fixed-size tuple type whose element types correspond to the parameter\n\
\ *    types of the argument.\n\
\ */\n
#  36 : _=2
P_036_ParamTypeAt=_[_]
P_036_ParamTypeAt_0=functionType
P_036_ParamTypeAt_1=index
P_036_ParamTypeAt_comment=\
/**\n\
\ * Answer the `{1}`-th parameter type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ *    {1} - The one-based index of the desired parameter type.\n\
\ * Returns:\n\
\ *    The `{1}`-th parameter type of the argument.\n\
\ */\n
#  37 : _=1
P_037_ReturnType=_'s⁇return type
P_037_ReturnType_0=functionType
P_037_ReturnType_comment=\
/**\n\
\ * Answer the return type of the specified function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The return type of the argument.\n\
\ */\n
#  38 : _=1
P_038_UnionOfTupleOfTypes=∪_
P_038_UnionOfTupleOfTypes_0=tupleOfTypes
P_038_UnionOfTupleOfTypes_comment=\
/**\n\
\ * Compute and answer the type union of the elements of the given tuple of\n\
\ * types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of types.\n\
\ * Returns:\n\
\ *    The type union of the elements of the argument.\n\
\ */\n
#  39 : _=1
P_039_CreateGeneralFunctionType=[`…]→_
P_039_CreateGeneralFunctionType_0=returnType
P_039_CreateGeneralFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified return type.\n\
\ * Instances of this type include any function that returns a value of the\n\
\ * specified return type, irrespective of the number or types of its parameters.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The requested function type. Instances of this type answer values of the\n\
\ *    specified return type.\n\
\ */\n
#  40 : _=2
P_040_InvokeWithTuple=Invoke|invoke_with_
P_040_InvokeWithTuple_0=aFunction
P_040_InvokeWithTuple_1=arguments
P_040_InvokeWithTuple_comment=\
/**\n\
\ * Invoke the function with the given arguments. Answer its result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ *    {1} - The tuple of arguments.\n\
\ * Returns:\n\
\ *    The value produced by applying the arguments to the function.\n\
\ */\n
#  41 : _=0
P_041_TraceVariableWrites=
P_041_TraceVariableWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ */\n
#  42 : _=0
P_042_DisableTraceVariableWrites=
P_042_DisableTraceVariableWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
#  43 : _=3
P_043_IfThenElse=If|if_then_else_
P_043_IfThenElse_0=predicate
P_043_IfThenElse_1=trueFunction
P_043_IfThenElse_2=falseFunction
P_043_IfThenElse_comment=\
/**\n\
\ * Given a predicate value and two functions, invoke one of them and answer its\n\
\ * result.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ *    {2} - The function to invoke if `{1}` is `false`.\n\
\ * Returns:\n\
\ *    If `{0}` is `true`, then the value produced by invoking\n\
\ *    `{1}`; otherwise, the value produced by invoking `{2}`.\n\
\ */\n
#  44 : _=2
P_044_IfThen=If_then_
P_044_IfThen_0=predicate
P_044_IfThen_1=trueBlock
P_044_IfThen_comment=\
/**\n\
\ * Given a predicate value and a function, conditionally invoke the specified\n\
\ * function.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A predicate value.\n\
\ *    {1} - The function to invoke if `{0}` is `true`.\n\
\ */\n
#  45 : _=2
P_045_ShortCircuitHelper=
P_045_ShortCircuitHelper_0=ignored
P_045_ShortCircuitHelper_1=function
P_045_ShortCircuitHelper_comment=\
/**\n\
\ * Evaluate the second argument, a zero-argument function. This is useful for\n\
\ * short-circuit evaluation of fundamental boolean operations.  It has the\n\
\ * advantage that an intermediate stack frame does not have to be created for\n\
\ * the function evaluation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value to be ignored.\n\
\ *    {1} - The function to always invoke.\n\
\ * Returns:\n\
\ *    The result of the function evaluation.\n\
\ */\n
#  46 : _=0
P_046_CurrentTimeNanoseconds=high-precision timer value
P_046_CurrentTimeNanoseconds_comment=\
/**\n\
\ * Answer the current value of the high-precision timer. The answer has\n\
\ * nanosecond precision, but not necessarily nanosecond resolution; the actual\n\
\ * resolution is implementation-dependent. The high-precision timer does not\n\
\ * have a fixed reference frame, so it should generally only be used to measure\n\
\ * the time elapsed between two invocations.\n\
\ *\n\
\ * Returns:\n\
\ *    The current value of the high-precision timer, in nanoseconds.\n\
\ */\n
#  48 : _=1
P_048_ContinueContinuation=Resume_
P_048_ContinueContinuation_0=aContinuation
P_048_ContinueContinuation_comment=\
/**\n\
\ * Resume the specified continuation. The current continuation (in which this\n\
\ * primitive was invoked) is completely replaced by the resumed continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ */\n
#  49 : _=5
P_049_CreateContinuation=$_@pc=_stack=_[_]caller=_
P_049_CreateContinuation_0=aFunction
P_049_CreateContinuation_1=programCounter
P_049_CreateContinuation_2=stack
P_049_CreateContinuation_3=stackPointer
P_049_CreateContinuation_4=caller
P_049_CreateContinuation_comment=\
/**\n\
\ * Construct and answer a continuation whose current function, Level One\n\
\ * program counter, local stack, local stack pointer, and calling continuation\n\
\ * are specified by the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The new continuation''s current function.\n\
\ *    {1} - `{0}`''s program counter. This is the index of the\n\
\ *       next Level One instruction to execute when the new continuation is\n\
\ *       resumed.\n\
\ *    {2} - `{0}`''s stack. This tuple contains the arguments, local\n\
\ *       variables, and temporaries.\n\
\ *    {3} - `{0}`''s stack pointer. This is the index of the\n\
\ *       top of the stack.\n\
\ *    {4} - A variable holding the new continuation''s calling continuation.\n\
\ *       If the variable is unassigned, then create a root continuation (i.e.\n\
\ *       one without a caller).\n\
\ * Returns:\n\
\ *    The requested continuation.\n\
\ */\n
#  50 : _=1
P_050_ContinuationTypeToFunctionType=_'s⁇function type
P_050_ContinuationTypeToFunctionType_0=aContinuation
P_050_ContinuationTypeToFunctionType_comment=\
/**\n\
\ * Answer the type of the function represented by the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function''s type.\n\
\ */\n
#  51 : _=1
P_051_FunctionTypeToContinuationType=$_
P_051_FunctionTypeToContinuationType_0=functionType
P_051_FunctionTypeToContinuationType_comment=\
/**\n\
\ * Compute and answer a continuation type capable of representing a current\n\
\ * function of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function type.\n\
\ * Returns:\n\
\ *    The requested continuation type.\n\
\ */\n
#  52 : _=1
P_052_ContinuationCaller=_'s⁇caller
P_052_ContinuationCaller_0=aContinuation
P_052_ContinuationCaller_comment=\
/**\n\
\ * Construct and answer a variable that holds the caller of the specified\n\
\ * continuation. This variable will be unassigned if the continuation has no\n\
\ * caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    A variable that, if assigned, holds the argument''s caller. If unassigned,\n\
\ *    then the argument has no caller.\n\
\ */\n
#  53 : _=1
P_053_ContinuationFunction=_'s⁇function
P_053_ContinuationFunction_0=aContinuation
P_053_ContinuationFunction_comment=\
/**\n\
\ * Answer the current function of the specified continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s current function. This is the function whose execution\n\
\ *    will be resumed if the continuation is resumed.\n\
\ */\n
#  54 : _=1
P_054_ContinuationPC=_'s⁇program counter
P_054_ContinuationPC_0=aContinuation
P_054_ContinuationPC_comment=\
/**\n\
\ * Answer the program counter of the specified continuation. Using the current\n\
\ * function''s tuple of Level One nybblecodes, this is the index of the next\n\
\ * instruction to be performed (if the continuation is resumed).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s Level One program counter.\n\
\ */\n
#  55 : _=1
P_055_ContinuationStackPointer=_'s⁇stack pointer
P_055_ContinuationStackPointer_0=aContinuation
P_055_ContinuationStackPointer_comment=\
/**\n\
\ * Answer the stack pointer of the specified continuation. This is the index of\n\
\ * the top of the local stack. For an empty stack, this value equals the size of\n\
\ * the stack plus one. The stack grows downward.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack pointer.\n\
\ */\n
#  56 : _=2
P_056_RestartContinuationWithArguments=Restart_with_
P_056_RestartContinuationWithArguments_0=aContinuation
P_056_RestartContinuationWithArguments_1=arguments
P_056_RestartContinuationWithArguments_comment=\
/**\n\
\ * Restart the continuation with the specified arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with the given arguments instead of the original arguments. The\n\
\ * current continuation (in which this primitive was invoked) is completely\n\
\ * replaced by the restarted continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ *    {1} - The new arguments with which to restart `{0}`.\n\
\ */\n
#  57 : _=2
P_057_ExitContinuationWithResult=Exit_with_
P_057_ExitContinuationWithResult_0=aContinuation
P_057_ExitContinuationWithResult_1=value
P_057_ExitContinuationWithResult_comment=\
/**\n\
\ * Exit the continuation and answer the specified value to the continuation''s\n\
\ * caller. Execution proceeds as though the continuation had just returned from\n\
\ * its current function with the supplied value. The current continuation (in\n\
\ * which this primitive was invoked) is completely replaced by the specified\n\
\ * continuation''s resumed caller.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to exit.\n\
\ *    {1} - The value with which to exit `{0}`.\n\
\ */\n
#  58 : _=1
P_058_RestartContinuation=Restart_
P_058_RestartContinuation_0=aContinuation
P_058_RestartContinuation_comment=\
/**\n\
\ * Restart the continuation with its original arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with its original arguments. The current continuation (in which\n\
\ * this primitive was invoked) is completely replaced by the restarted\n\
\ * continuation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The continuation to restart.\n\
\ */\n
#  59 : _=1
P_059_ContinuationStackData=_'s⁇stack
P_059_ContinuationStackData_0=aContinuation
P_059_ContinuationStackData_comment=\
/**\n\
\ * Answer the stack of the specified continuation. This tuple contains the\n\
\ * arguments, local variables, and temporaries. Any null values, forbidden to\n\
\ * leak through into observable Avail macrostate, are replaced with an\n\
\ * unassigned variable whose containment type is ⊥. Note that such a variable\n\
\ * cannot be constructed either syntactically nor through a variable\n\
\ * construction primitive.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A continuation.\n\
\ * Returns:\n\
\ *    The argument''s stack.\n\
\ */\n
#  60 : _=2
P_060_Equality=_=_
P_060_Equality_0=
P_060_Equality_1=
P_060_Equality_comment=\
/**\n\
\ * Are the arguments equal?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value.\n\
\ *    {1} - A value.\n\
\ * Returns:\n\
\ *    `true` if the arguments are equal, `false` otherwise.\n\
\ */\n
#  61 : _=1
P_061_MapToObject=_→object
P_061_MapToObject_0=fieldsToValues
P_061_MapToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and\n\
\ *       whose values are the corresponding field values.\n\
\ * Returns:\n\
\ *    The requested object.\n\
\ */\n
#  62 : _=1
P_062_ObjectToMap=_→map
P_062_ObjectToMap_0=anObject
P_062_ObjectToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object whose fields should be the keys of the new map and\n\
\ *       whose values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  63 : _=1
P_063_MapToObjectType=_→object type
P_063_MapToObjectType_0=fieldsToTypes
P_063_MapToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map whose keys are the fields of the new object and\n\
\ *       whose values are the corresponding field types.\n\
\ * Returns:\n\
\ *    The requested object type.\n\
\ */\n
#  64 : _=1
P_064_ObjectTypeToMap=_→map
P_064_ObjectTypeToMap_0=anObjectType
P_064_ObjectTypeToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type whose fields should be the keys of the new\n\
\ *       map and whose values are the corresponding values.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  65 : _=1
P_065_CreateEnumeration=enumeration of_
P_065_CreateEnumeration_0=instances
P_065_CreateEnumeration_comment=\
/**\n\
\ * Construct and answer an enumeration whose instances are fully determined by\n\
\ * the membership of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The complete set of instances of the enumeration.\n\
\ * Returns:\n\
\ *    The requested enumeration.\n\
\ */\n
#  66 : _=2
P_066_GetObjectField=_[_]
P_066_GetObjectField_0=object
P_066_GetObjectField_1=field
P_066_GetObjectField_comment=\
/**\n\
\ * Extract a field''s value from an object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object.\n\
\ *    {1} - The field for which to extract the value.\n\
\ * Returns:\n\
\ *    The field''s value.\n\
\ */\n
#  67 : _=2
P_067_GetObjectTypeField=_[_]
P_067_GetObjectTypeField_0=objectType
P_067_GetObjectTypeField_1=field
P_067_GetObjectTypeField_comment=\
/**\n\
\ * Extract a field''s type from an object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ *    {1} - The field for which to extract the type.\n\
\ * Returns:\n\
\ *    The field''s constraining type.\n\
\ */\n
#  68 : _=2
P_068_RecordNewTypeName=_'s⁇name:=_
P_068_RecordNewTypeName_0=anObjectType
P_068_RecordNewTypeName_1=name
P_068_RecordNewTypeName_comment=\
/**\n\
\ * For the purpose of debugging, bind a name to an object type. This name will\n\
\ * be used for subtypes that do not bind a more specific name to describe their\n\
\ * own subtypes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ *    {1} - The name that should be bound to the object type. This will replace\n\
\ *       a previously bound name.\n\
\ */\n
#  69 : _=1
P_069_TypeNames=_'s⁇names
P_069_TypeNames_0=anObjectType
P_069_TypeNames_comment=\
/**\n\
\ * Answer the set of locally most-specific names bound to the specified object\n\
\ * type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ * Returns:\n\
\ *    The set of locally most-specific names bound to the specified object\n\
\ *    type.\n\
\ */\n
#  71 : _=2
P_071_CreateStubFunction=new_applying_
P_071_CreateStubFunction_0=aFunctionType
P_071_CreateStubFunction_1=functionToApply
P_071_CreateStubFunction_comment=\
/**\n\
\ * Construct and answer a function that is an instance of `{0}`\n\
\ * and applies `{1}` when itself applied with the appropriate\n\
\ * number and types of arguments. The new function answers whatever\n\
\ * `{1}` answers.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The desired function type.\n\
\ *    {1} - The function that the new function will apply when\n\
\ *       itself applied with the correct number and types of arguments.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  72 : _=1
P_072_CompiledCodeOfFunction=_'s⁇implementation
P_072_CompiledCodeOfFunction_0=aFunction
P_072_CompiledCodeOfFunction_comment=\
/**\n\
\ * Answer the implementation of the specified function. A function''s\n\
\ * implementation comprises its nybblecodes, its literals, its primitive\n\
\ * linkage (if any), its function type, and various statistics.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s implementation.\n\
\ */\n
#  73 : _=1
P_073_OuterVariables=_'s⁇outer variables
P_073_OuterVariables_0=aFunction
P_073_OuterVariables_comment=\
/**\n\
\ * Answer all variables captured by the specified function. For functions\n\
\ * compiled directly from source code (i.e. the vast majority of them), these\n\
\ * variables are lexically captured.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ * Returns:\n\
\ *    The argument''s outer variables.\n\
\ */\n
#  74 : _=2
P_074_CreateFunction=function from_and_
P_074_CreateFunction_0=implementation
P_074_CreateFunction_1=outerVariables
P_074_CreateFunction_comment=\
/**\n\
\ * Construct and answer a function given the specified compiled code and tuple\n\
\ * of captured variables.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The compiled code that describes the algorithm.\n\
\ *    {1} - The tuple of outer variables.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
#  75 : _=1
P_075_SetUnassignedVariableAccessFunction=
P_075_SetUnassignedVariableAccessFunction_0=
P_075_SetUnassignedVariableAccessFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
#  76 : _=1
P_076_SetResultDisagreedWithExpectedTypeFunction=
P_076_SetResultDisagreedWithExpectedTypeFunction_0=
P_076_SetResultDisagreedWithExpectedTypeFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
#  77 : _=1
P_077_SetImplicitObserveFunction=
P_077_SetImplicitObserveFunction_0=
P_077_SetImplicitObserveFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
#  78 : _=1
P_078_SetInvalidMessageSendFunction=
P_078_SetInvalidMessageSendFunction_0=
P_078_SetInvalidMessageSendFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
#  80 : _=1
P_080_MapSize=`|_`|
P_080_MapSize_0=aMap
P_080_MapSize_comment=\
/**\n\
\ * Answer the cardinality of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
#  81 : _=2
P_081_KeyInMap=_∈_
P_081_KeyInMap_0=key
P_081_KeyInMap_1=aMap
P_081_KeyInMap_comment=\
/**\n\
\ * Is `{0}` a member of the set of keys of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose membership should be queried.\n\
\ *    {1} - A map.\n\
\ * Returns:\n\
\ *    `true` if `{0}` if a key of `{1}`, `false` otherwise.\n\
\ */\n
#  82 : _=2
P_082_MapAtKey=_[_]
P_082_MapAtKey_0=aMap
P_082_MapAtKey_1=key
P_082_MapAtKey_comment=\
/**\n\
\ * Answer the value bound to `{0}` in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - The key whose bound value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{1}` in `{0}`.\n\
\ */\n
#  83 : _=3
P_083_MapReplacingKey=_+_→_
P_083_MapReplacingKey_0=aMap
P_083_MapReplacingKey_1=key
P_083_MapReplacingKey_2=value
P_083_MapReplacingKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it contains a binding from\n\
\ * `{1}` to `{2}`; any value previously bound to `{1}` is "forgotten" in the\n\
\ * new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key.\n\
\ *    {2} - The new value for the key.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  84 : _=2
P_084_MapWithoutKey=_-_
P_084_MapWithoutKey_0=aMap
P_084_MapWithoutKey_1=key
P_084_MapWithoutKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it does not contain a\n\
\ * binding for `{1}`; any such previous binding is "forgotten" in the new map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ *    {1} - A key whose binding should be omitted.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  85 : _=1
P_085_CreateMap=_→map
P_085_CreateMap_0=bindings
P_085_CreateMap_comment=\
/**\n\
\ * Construct and answer a map from the supplied tuple of bindings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of bindings. Each element of the argument is a\n\
\ *       2-tuple that represents a binding. The first element of each 2-tuple is\n\
\ *       a key, the second element is the value that should be bound to that key\n\
\ *       in the resultant map.\n\
\ * Returns:\n\
\ *    The requested map.\n\
\ */\n
#  86 : _=1
P_086_MapKeysAsSet=_'s⁇keys
P_086_MapKeysAsSet_0=aMap
P_086_MapKeysAsSet_comment=\
/**\n\
\ * Answer the set of keys of the specified map.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s keys.\n\
\ */\n
#  87 : _=3
P_087_CreateMapType={_→_`|_}
P_087_CreateMapType_0=keyType
P_087_CreateMapType_1=valueType
P_087_CreateMapType_2=cardinalityType
P_087_CreateMapType_comment=\
/**\n\
\ * Construct and answer a map type with the specified key type, value type, and\n\
\ * range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type to which all keys of instances must conform.\n\
\ *    {1} - A type to which all values of instances must conform.\n\
\ *    {2} - The range of cardinalities to which all instances must\n\
\ *       conform.\n\
\ * Returns:\n\
\ *    The requested map type.\n\
\ */\n
#  88 : _=1
P_088_MapTypeSizes=`|`|_`|`|
P_088_MapTypeSizes_0=aMapType
P_088_MapTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * map type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
#  89 : _=1
P_089_MapTypeKeyType=_'s⁇key type
P_089_MapTypeKeyType_0=aMapType
P_089_MapTypeKeyType_comment=\
/**\n\
\ * Answer the most specific type to which the keys of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s key type.\n\
\ */\n
#  90 : _=1
P_090_MapTypeValueType=_'s⁇value type
P_090_MapTypeValueType_0=aMapType
P_090_MapTypeValueType_comment=\
/**\n\
\ * Answer the most specific type to which the values of all instances must\n\
\ * conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map type.\n\
\ * Returns:\n\
\ *    The argument''s value type.\n\
\ */\n
#  91 : _=1
P_091_MapValuesAsTuple=_'s⁇values
P_091_MapValuesAsTuple_0=aMapType
P_091_MapValuesAsTuple_comment=\
/**\n\
\ * Answer a tuple containing the values of the specified map. The values are\n\
\ * arranged in no particular order.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s values.\n\
\ */\n
#  92 : _=1
P_092_MapBindings=_'s⁇bindings
P_092_MapBindings_0=aMapType
P_092_MapBindings_comment=\
/**\n\
\ * Answer a tuple containing the bindings of the specified map. A binding is a\n\
\ * 2-tuple of key and value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A map.\n\
\ * Returns:\n\
\ *    The argument''s bindings.\n\
\ */\n
#  95 : _=2
P_095_BitShift=_<<_
P_095_BitShift_0=baseInteger
P_095_BitShift_1=shiftFactor
P_095_BitShift_comment=\
/**\n\
\ * Given any integer B and a shift factor S, shift B to the left S bits.  If S\n\
\ * is negative then treat it as a right shift of the corresponding positive\n\
\ * amount.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integer to shift.\n\
\ *    {1} - How many bits to shift left (or right if negative).\n\
\ * Returns:\n\
\ *    ⎣{0} × 2<sup>{1}</sup>⎦\n\
\ */\n
#  96 : _=3
P_096_BitShiftWithTruncation=_<<_keeping_bits
P_096_BitShiftWithTruncation_0=baseInteger
P_096_BitShiftWithTruncation_1=shiftFactor
P_096_BitShiftWithTruncation_2=truncationBits
P_096_BitShiftWithTruncation_comment=\
/**\n\
\ * Given a positive integer B, a shift factor S, and a truncation bit count T,\n\
\ * shift B to the left by S bits (treating a negative factor as a right shift),\n\
\ * then truncate the result to the bottom T bits by zeroing the rest.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A non-negative integer to shift and mask.\n\
\ *    {1} - How many bit positions to shift left by (negative for a\n\
\ *       right shift).\n\
\ *    {2} - The number of low-order bits to preserve after the shift\n\
\ *       (must be ≥ 0).\n\
\ * Returns:\n\
\ *    ⎣{0} × 2<sup>{1}</sup>⎦ mod 2<sup>{2}</sup>\n\
\ */\n
#  97 : _=2
P_097_BitwiseAnd=_bit∧_
P_097_BitwiseAnd_0=
P_097_BitwiseAnd_1=
P_097_BitwiseAnd_comment=\
/**\n\
\ * Compute and answer the bitwise AND of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integer.\n\
\ *    {1} - An integer.\n\
\ * Returns:\n\
\ *    The bitwise AND of `{0}` and `{1}`.\n\
\ */\n
#  98 : _=2
P_098_BitwiseOr=_bit∨_
P_098_BitwiseOr_0=
P_098_BitwiseOr_1=
P_098_BitwiseOr_comment=\
/**\n\
\ * Compute and answer the bitwise OR of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An integer.\n\
\ *    {1} - An integer.\n\
\ * Returns:\n\
\ *    The bitwise OR of `{0}` and `{1}`.\n\
\ */\n
#  99 : _=2
P_099_BitwiseXor=_bit⊕_
P_099_BitwiseXor_0=
P_099_BitwiseXor_1=
P_099_BitwiseXor_comment=\
/**\n\
\ * Compute and answer the bitwise XOR of the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0}  An integer.\n\
\ *    {1} -An integer.\n\
\ * Returns:\n\
\ *    The bitwise XOR of `{0}` and `{1}`.\n\
\ */\n
# 100 : _=1
P_100_SetSize=`|_`|
P_100_SetSize_0=aSet
P_100_SetSize_comment=\
/**\n\
\ * Answer the cardinality of the specified set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 101 : _=2
P_101_ElementInSet=_∈_
P_101_ElementInSet_0=element
P_101_ElementInSet_1=aSet
P_101_ElementInSet_comment=\
/**\n\
\ * Is `{0}` an element of `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An arbitrary value.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is an element of `{1}`, `false` otherwise.\n\
\ */\n
# 102 : _=2
P_102_SetUnion=_∪_
P_102_SetUnion_0=
P_102_SetUnion_1=
P_102_SetUnion_comment=\
/**\n\
\ * Compute and answer the set union of the arguments. This is a set that\n\
\ * contains the elements of both sets.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set union of the arguments.\n\
\ */\n
# 103 : _=2
P_103_SetIntersection=_∩_
P_103_SetIntersection_0=
P_103_SetIntersection_1=
P_103_SetIntersection_comment=\
/**\n\
\ * Compute and answer the set intersection of the arguments. This is a set that\n\
\ * contains only those elements present in each set.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    The set intersection of the arguments.\n\
\ */\n
# 104 : _=2
P_104_SetDifference=_\\\\_
P_104_SetDifference_0=minuend
P_104_SetDifference_1=subtrahend
P_104_SetDifference_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of `{0}` and\n\
\ * `{1}` (also the relative complement of `{1}` in `{0}`).\n\
\ * This is a set that contains only those elements present in `{0}`\n\
\ * but not in `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minuend.\n\
\ *    {1} - The subtrahend.\n\
\ * Returns:\n\
\ *    The asymmetric set difference of `{0}` and `{1}`.\n\
\ */\n
# 105 : _=2
P_105_SetWith=_+_
P_105_SetWith_0=aSet
P_105_SetWith_1=newElement
P_105_SetWith_comment=\
/**\n\
\ * Compute and answer the set union of the specified set and a set containing\n\
\ * the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` but also contains\n\
\ *    `{1}`.\n\
\ */\n
# 106 : _=2
P_106_SetWithout=_-_
P_106_SetWithout_0=aSet
P_106_SetWithout_1=oldElement
P_106_SetWithout_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of the specified set and a\n\
\ * set containing the supplied element.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - The element that must not be present in the resultant set.\n\
\ * Returns:\n\
\ *    A set that contains the same elements as `{0}` except that it does\n\
\ *    not contain `{1}`.\n\
\ */\n
# 107 : _=2
P_107_SetIsSubset=_⊆_
P_107_SetIsSubset_0=
P_107_SetIsSubset_1=
P_107_SetIsSubset_comment=\
/**\n\
\ * Is `{0}` a subset of or equal to `{1}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ *    {1} - A set.\n\
\ * Returns:\n\
\ *    `true` if `{0}` is a subset of or equal to `{1}`, `false` otherwise.\n\
\ */\n
# 109 : _=1
P_109_TupleToSet=_→set
P_109_TupleToSet_0=aTuple
P_109_TupleToSet_comment=\
/**\n\
\ * Construct and answer a set that uniquely (by definition) contains the same\n\
\ * elements as the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The requested set.\n\
\ */\n
# 110 : _=1
P_110_SetToTuple=_→tuple
P_110_SetToTuple_0=aSet
P_110_SetToTuple_comment=\
/**\n\
\ * Construct and answer a tuple that arbitrarily orders the elements of the\n\
\ * specified set. The conversion is unstable, and thus different calls given\n\
\ * the same argument may produce different orderings.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 111 : _=2
P_111_CreateSetType={_`|_}
P_111_CreateSetType_0=elementType
P_111_CreateSetType_1=cardinalityType
P_111_CreateSetType_comment=\
/**\n\
\ * Construct and answer a set type with the specified element type and range of\n\
\ * cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The element type.\n\
\ *    {1} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested set type. Instances have elements that conform to\n\
\ *    `{0}` and cardinalities that conform to `{1}`.\n\
\ */\n
# 112 : _=1
P_112_SetTypeSizes=`|`|_`|`|
P_112_SetTypeSizes_0=aSetType
P_112_SetTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * set type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 113 : _=1
P_113_SetTypeElementType=_'s⁇element|member type
P_113_SetTypeElementType_0=aSetType
P_113_SetTypeElementType_comment=\
/**\n\
\ * Answer the element type of the specified set type. This is the most specific\n\
\ * type to which all elements of instances must conform.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set type.\n\
\ * Returns:\n\
\ *    The argument''s element type.\n\
\ */\n
# 120 : _=1
P_120_CreateAtom=new atom named_
P_120_CreateAtom_0=debugName
P_120_CreateAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A name to associate with the atom for debugging purposes.\n\
\ *       This name does not participate in atom comparison.\n\
\ * Returns:\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive.\n\
\ */\n
# 121 : _=1
P_121_AtomName=_'s⁇name
P_121_AtomName_0=anAtom
P_121_AtomName_comment=\
/**\n\
\ * Answer the debug name of the specified atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    The argument''s debug name.\n\
\ */\n
# 122 : _=2
P_122_AtomHasProperty=_∈_
P_122_AtomHasProperty_0=key
P_122_AtomHasProperty_1=anAtom
P_122_AtomHasProperty_comment=\
/**\n\
\ * Does `{1}` have a property whose key is `{0}`?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The property key.\n\
\ *    {1} - An atom.\n\
\ * Returns:\n\
\ *    `true` if `{1}` has a property whose key is `{0}`, `false` otherwise.\n\
\ */\n
# 123 : _=2
P_123_AtomGetProperty=_[_]
P_123_AtomGetProperty_0=anAtom
P_123_AtomGetProperty_1=key
P_123_AtomGetProperty_comment=\
/**\n\
\ * Assuming that `{0}` has a property whose key is `{1}`, then answer\n\
\ * the property value associated with the `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ * Returns:\n\
\ *    The property value bound to the key.\n\
\ */\n
# 124 : _=3
P_124_AtomSetProperty=_[_]:=_
P_124_AtomSetProperty_0=anAtom
P_124_AtomSetProperty_1=key
P_124_AtomSetProperty_2=value
P_124_AtomSetProperty_comment=\
/**\n\
\ * For `{0}`, establish a property binding from `{1}` to `{2}`.\n\
\ * Any previous property binding for `{1}` is replaced.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - The property key.\n\
\ *    {2} - The property value.\n\
\ */\n
# 125 : _=2
P_125_AtomRemoveProperty=Remove_[_]
P_125_AtomRemoveProperty_0=anAtom
P_125_AtomRemoveProperty_1=key
P_125_AtomRemoveProperty_comment=\
/**\n\
\ * Remove from `{0}` the property whose key is `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ *    {1} - A property key.\n\
\ */\n
# 126 : _=0
P_126_SpecialAtoms=special atoms
P_126_SpecialAtoms_comment=\
/**\n\
\ * Answer a set containing all atoms well-known to the Avail virtual machine.\n\
\ * These atoms cannot serve as properties, nor have properties added, queried,\n\
\ * modified, or removed.\n\
\ *\n\
\ * Returns:\n\
\ *    The special atoms.\n\
\ */\n
# 127 : _=1
P_127_AtomIssuingModule=_'s⁇issuing module
P_127_AtomIssuingModule_0=anAtom
P_127_AtomIssuingModule_comment=\
/**\n\
\ * Answer the module that issued the specified atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    The requested module.\n\
\ */\n
# 130 : _=1
P_130_TupleSize=`|_`|
P_130_TupleSize_0=aTuple
P_130_TupleSize_comment=\
/**\n\
\ * Answer the cardinality of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ * Returns:\n\
\ *    The argument''s cardinality.\n\
\ */\n
# 131 : _=2
P_131_TupleAt=_[_]
P_131_TupleAt_0=aTuple
P_131_TupleAt_1=index
P_131_TupleAt_comment=\
/**\n\
\ * Answer the `{1}`-th element of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based index of the desired element.\n\
\ * Returns:\n\
\ *    The requested element.\n\
\ */\n
# 132 : _=3
P_132_TupleReplaceAt=_[_]→_
P_132_TupleReplaceAt_0=aTuple
P_132_TupleReplaceAt_1=index
P_132_TupleReplaceAt_2=value
P_132_TupleReplaceAt_comment=\
/**\n\
\ * Construct and answer a tuple based on the one provided but such that its\n\
\ * `{1}`-th element is `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based index of the element that should (potentially)\n\
\ *       differ in the resultant tuple.\n\
\ *    {2} - The "replacement" value.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 133 : _=3
P_133_IntegerIntervalTuple=_to_by_
P_133_IntegerIntervalTuple_0=start
P_133_IntegerIntervalTuple_1=end
P_133_IntegerIntervalTuple_2=delta
P_133_IntegerIntervalTuple_comment=\
/**\n\
\ * Construct and answer an integer interval tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The first value in the tuple.\n\
\ *    {1} - The last allowed value in the tuple. This value will only be the\n\
\ *       last value in the tuple if the difference between the first and last\n\
\ *       values is a multiple of the step size.\n\
\ *    {2} - The step size of the interval.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 135 : _=3
P_135_ExtractSubtuple=_[_.._]
P_135_ExtractSubtuple_0=aTuple
P_135_ExtractSubtuple_1=sliceStart
P_135_ExtractSubtuple_2=sliceEnd
P_135_ExtractSubtuple_comment=\
/**\n\
\ * Construct and answer a slice (i.e. subtuple) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple.\n\
\ *    {1} - The one-based start index (inclusive) of the desired slice.\n\
\ *    {2} - The one-based end index (inclusive) of the desired slice.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 136 : _=1
P_136_ConcatenateTuples=concatenate_
P_136_ConcatenateTuples_0=tupleOfTuples
P_136_ConcatenateTuples_comment=\
/**\n\
\ * Construct and answer a tuple that is the left-to-right concatenation of all\n\
\ * elements (i.e. tuples) of the specified tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of tuples.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 137 : _=3
P_137_CreateTupleType=<_,_`…`|_>
P_137_CreateTupleType_0=leadingTypes
P_137_CreateTupleType_1=defaultType
P_137_CreateTupleType_2=cardinalityType
P_137_CreateTupleType_comment=\
/**\n\
\ * Construct and answer a tuple type with the specified leading element types,\n\
\ * default element type, and range of cardinalities.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The leading types.\n\
\ *    {1} - The default type.\n\
\ *    {2} - The range of allowed cardinalities.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 138 : _=1
P_138_TupleTypeSizes=`|`|_`|`|
P_138_TupleTypeSizes_0=aTupleType
P_138_TupleTypeSizes_comment=\
/**\n\
\ * Answer the range of allowed cardinalities of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# 139 : _=1
P_139_TupleTypeLeadingTypes=_'s⁇leading types
P_139_TupleTypeLeadingTypes_0=aTupleType
P_139_TupleTypeLeadingTypes_comment=\
/**\n\
\ * Answer a tuple containing the leading element types of instances of the\n\
\ * specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s leading element types.\n\
\ */\n
# 140 : _=1
P_140_TupleTypeDefaultType=_'s⁇default type
P_140_TupleTypeDefaultType_0=aTupleType
P_140_TupleTypeDefaultType_comment=\
/**\n\
\ * Answer the default element type of instances of the specified type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ * Returns:\n\
\ *    The argument''s default element type.\n\
\ */\n
# 141 : _=2
P_141_TupleTypeAt=_[_]
P_141_TupleTypeAt_0=aTupleType
P_141_TupleTypeAt_1=index
P_141_TupleTypeAt_comment=\
/**\n\
\ * Answer the element type of the `{1}`-th element of instances of the\n\
\ * specified type. If `{1}` is out of bounds, then answer ⊥.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The index of the desired element type.\n\
\ * Returns:\n\
\ *    The requested element type, or ⊥ if `{1}` is out of bounds.\n\
\ */\n
# 142 : _=3
P_142_TupleTypeSequenceOfTypes=_[_.._]
P_142_TupleTypeSequenceOfTypes_0=aTupleType
P_142_TupleTypeSequenceOfTypes_1=sliceStart
P_142_TupleTypeSequenceOfTypes_2=sliceEnd
P_142_TupleTypeSequenceOfTypes_comment=\
/**\n\
\ * Compute and answer a tuple containing the requested element types. Indices\n\
\ * that are out of bounds report ⊥ as their element type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the slice.\n\
\ *    {2} - The one-based index (inclusive) of the end of the slice.\n\
\ * Returns:\n\
\ *    The requested slice of element types.\n\
\ */\n
# 143 : _=3
P_143_TupleTypeAtThrough=∪_[_.._]
P_143_TupleTypeAtThrough_0=aTupleType
P_143_TupleTypeAtThrough_1=startIndex
P_143_TupleTypeAtThrough_2=endIndex
P_143_TupleTypeAtThrough_comment=\
/**\n\
\ * Compute and answer the type union of the indicated range of element types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - The one-based index (inclusive) of the start of the range.\n\
\ *    {2} - The one-based index (inclusive) of the end of the range.\n\
\ * Returns:\n\
\ *    The type union of all element types in the specified range.\n\
\ */\n
# 144 : _=2
P_144_TupleTypeConcatenate=_++_
P_144_TupleTypeConcatenate_0=
P_144_TupleTypeConcatenate_1=
P_144_TupleTypeConcatenate_comment=\
/**\n\
\ * Compute and answer the concatenation of the specified tuple types. This is\n\
\ * the most specific type that encompasses all possible concatenations of the\n\
\ * instances of the two types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple type.\n\
\ *    {1} - A tuple type.\n\
\ * Returns:\n\
\ *    The requested tuple type.\n\
\ */\n
# 150 : _=1
P_150_TupleToObjectType=_→object type
P_150_TupleToObjectType_0=fieldDefinitions
P_150_TupleToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple whose elements are 2-tuples. Each 2-tuple''s\n\
\ *       first element is an atom (i.e., the field identifier) and its second\n\
\ *       element is the value type permitted by the field.\n\
\ * Returns:\n\
\ *    The requested object type.\n\
\ */\n
# 151 : _=1
P_151_ObjectTypeToTuple=_→tuple
P_151_ObjectTypeToTuple_0=anObjectType
P_151_ObjectTypeToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object type.\n\
\ * Returns:\n\
\ *    A tuple that represents the composition of the object type. Its elements\n\
\ *    are 2-tuples. Each 2-tuple''s first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is the value type permitted by the\n\
\ *    field.\n\
\ */\n
# 152 : _=1
P_152_TupleToObject=_→object
P_152_TupleToObject_0=fieldAssignments
P_152_TupleToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple whose elements are 2-tuples. Each 2-tuple''s\n\
\ *       first element is an atom (i.e., the field identifier) and its second\n\
\ *       element is associated value.\n\
\ * Returns:\n\
\ *    The requested object.\n\
\ */\n
# 153 : _=1
P_153_ObjectToTuple=_→tuple
P_153_ObjectToTuple_0=anObject
P_153_ObjectToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An object.\n\
\ * Returns:\n\
\ *    A tuple that represents the composition of the object. Its elements are\n\
\ *    2-tuples. Each 2-tuple''s first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is associated value.\n\
\ */\n
# 160 : _=3
P_160_FileOpen=
P_160_FileOpen_0=
P_160_FileOpen_1=
P_160_FileOpen_2=
P_160_FileOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 161 : _=1
P_161_FileClose=
P_161_FileClose_0=
P_161_FileClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 164 : _=2
P_164_FileRead=
P_164_FileRead_0=
P_164_FileRead_1=
P_164_FileRead_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 165 : _=2
P_165_FileWrite=
P_165_FileWrite_0=
P_165_FileWrite_1=
P_165_FileWrite_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 166 : _=1
P_166_FileSize=
P_166_FileSize_0=
P_166_FileSize_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 167 : _=1
P_167_FilePosition=
P_167_FilePosition_0=
P_167_FilePosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 168 : _=2
P_168_FileSetPosition=
P_168_FileSetPosition_0=
P_168_FileSetPosition_1=
P_168_FileSetPosition_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 169 : _=1
P_169_FileSync=
P_169_FileSync_0=
P_169_FileSync_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 174 : _=2
P_174_FileRename=
P_174_FileRename_0=
P_174_FileRename_1=
P_174_FileRename_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 175 : _=4
P_175_FileUnlink=
P_175_FileUnlink_0=
P_175_FileUnlink_1=
P_175_FileUnlink_2=
P_175_FileUnlink_3=
P_175_FileUnlink_comment=\
/**\n\
\ * DEPRECATED.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 176 : _=2
P_176_FileSetSize=
P_176_FileSetSize_0=
P_176_FileSetSize_1=
P_176_FileSetSize_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 177 : _=3
P_177_FileMove=
P_177_FileMove_0=
P_177_FileMove_1=
P_177_FileMove_2=
P_177_FileMove_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 178 : _=5
P_178_FileCopy=
P_178_FileCopy_0=
P_178_FileCopy_1=
P_178_FileCopy_2=
P_178_FileCopy_3=
P_178_FileCopy_4=
P_178_FileCopy_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ */\n
# 180 : _=1
P_180_CompiledCodeNumArgs=_'s⁇arity
P_180_CompiledCodeNumArgs_0=aFunctionImplementation
P_180_CompiledCodeNumArgs_comment=\
/**\n\
\ * Answer the arity of a function implementation. This is the number of\n\
\ * parameters accepted by the function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s arity.\n\
\ */\n
# 181 : _=1
P_181_CompiledCodeNumLocals=`|_'s⁇local variables`|
P_181_CompiledCodeNumLocals_0=aFunctionImplementation
P_181_CompiledCodeNumLocals_comment=\
/**\n\
\ * Answer the number of local variables used by a function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The number of locals used by the argument.\n\
\ */\n
# 182 : _=1
P_182_CompiledCodeNumOuters=`|_'s⁇outer variables`|
P_182_CompiledCodeNumOuters_0=aFunctionImplementation
P_182_CompiledCodeNumOuters_comment=\
/**\n\
\ * Answer the number of outer variables used by a function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The number of outers used by the argument.\n\
\ */\n
# 183 : _=1
P_183_CompiledCodeNumStackSlots=_'s⁇maximum stack depth
P_183_CompiledCodeNumStackSlots_0=aFunctionImplementation
P_183_CompiledCodeNumStackSlots_comment=\
/**\n\
\ * Answer the maximum stack depth of a function implementation. This does not\n\
\ * account for arguments and local variables (which occupy the "bottom" stack\n\
\ * slots).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s maximum stack depth.\n\
\ */\n
# 184 : _=1
P_184_CompiledCodeNybbles=_'s⁇nybblecodes
P_184_CompiledCodeNybbles_0=aFunctionImplementation
P_184_CompiledCodeNybbles_comment=\
/**\n\
\ * Answer the Level One instructions that describe a function implementation''s\n\
\ * algorithm as a tuple of nybblecodes.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s nybblecodes.\n\
\ */\n
# 185 : _=1
P_185_CompiledCodeFunctionType=_'s⁇function type
P_185_CompiledCodeFunctionType_0=aFunctionImplementation
P_185_CompiledCodeFunctionType_comment=\
/**\n\
\ * Answer the function type of any function that could close the specified\n\
\ * function implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s function type.\n\
\ */\n
# 186 : _=1
P_186_CompiledCodePrimitiveNumber=_'s⁇primitive number
P_186_CompiledCodePrimitiveNumber_0=aFunctionImplementation
P_186_CompiledCodePrimitiveNumber_comment=\
/**\n\
\ * Answer the primitive number of the primitive linked to the specified\n\
\ * function implementation. If the function implementation does not have\n\
\ * primitive linkage, then answer `0`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    The argument''s primitive number, or `0` if the argument does not have\n\
\ *    primitive linkage.\n\
\ */\n
# 187 : _=1
P_187_CompiledCodeLiterals=_'s⁇literals
P_187_CompiledCodeLiterals_0=aFunctionImplementation
P_187_CompiledCodeLiterals_comment=\
/**\n\
\ * Answer the literals that support a function implementation''s algorithm.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function implementation.\n\
\ * Returns:\n\
\ *    A tuple containing the argument''s supporting literals.\n\
\ */\n
# 188 : _=7
P_188_CreateCompiledCode=_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)
P_188_CreateCompiledCode_0=nybblecodes
P_188_CreateCompiledCode_1=primitiveNumber
P_188_CreateCompiledCode_2=aFunctionType
P_188_CreateCompiledCode_3=literals
P_188_CreateCompiledCode_4=localsCount
P_188_CreateCompiledCode_5=outersCount
P_188_CreateCompiledCode_6=maximumStackDepth
P_188_CreateCompiledCode_comment=\
/**\n\
\ * Construct and answer a function implementation from the specified arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The Level One instructions as a tuple of nybblecodes.\n\
\ *    {1} - The primitive number, or `0` if the result should\n\
\ *       not have primitive linkage.\n\
\ *    {2} - The function type of any function able to close the\n\
\ *       result.\n\
\ *    {3} - The literals used by the algorithm.\n\
\ *    {4} - The number of local variables used by the algorithm.\n\
\ *    {5} - The number of outer variables used by the algorithm.\n\
\ *    {6} - The maximum stack depth.\n\
\ * Returns:\n\
\ *    The requested function implementation.\n\
\ */\n
# 200 : _=3
P_200_CatchException=
P_200_CatchException_0=
P_200_CatchException_1=
P_200_CatchException_2=
P_200_CatchException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 201 : _=1
P_201_RaiseException=
P_201_RaiseException_0=
P_201_RaiseException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 202 : _=1
P_202_MarkNearestCatch=
P_202_MarkNearestCatch_0=
P_202_MarkNearestCatch_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ */\n
# 203 : _=1
P_203_ExceptionStackDump=
P_203_ExceptionStackDump_0=
P_203_ExceptionStackDump_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 207 : _=1
P_207_CompleteMessages=
P_207_CompleteMessages_0=
P_207_CompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 208 : _=1
P_208_IncompleteMessages=
P_208_IncompleteMessages_0=
P_208_IncompleteMessages_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 211 : _=1
P_211_BundleMessage=
P_211_BundleMessage_0=
P_211_BundleMessage_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 212 : _=1
P_212_BundleMessageParts=
P_212_BundleMessageParts_0=
P_212_BundleMessageParts_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 213 : _=1
P_213_BundleSignatures=
P_213_BundleSignatures_0=
P_213_BundleSignatures_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 214 : _=1
P_214_BundleHasRestrictions=
P_214_BundleHasRestrictions_0=
P_214_BundleHasRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 215 : _=1
P_215_BundleRestrictions=
P_215_BundleRestrictions_0=
P_215_BundleRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 216 : _=1
P_216_DefinitionBodySignature=_'s⁇function type
P_216_DefinitionBodySignature_0=aDefinition
P_216_DefinitionBodySignature_comment=\
/**\n\
\ * Answer the specified definition''s function type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - Any definition (method, macro, abstract, forward).\n\
\ * Returns:\n\
\ *    The requested function type.\n\
\ */\n
# 217 : _=1
P_217_MethodDefinitionBody=_'s⁇function
P_217_MethodDefinitionBody_0=aDefinition
P_217_MethodDefinitionBody_comment=\
/**\n\
\ * Answer the specified method definition''s function.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method definition.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
# 220 : _=1
P_220_MethodFromName=method for_
P_220_MethodFromName_0=anAtom
P_220_MethodFromName_comment=\
/**\n\
\ * Answer the method uniquely named by the specified atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    The requested method.\n\
\ */\n
# 221 : _=1
P_221_MessageBundleName=_'s⁇atom
P_221_MessageBundleName_0=aMessageBundle
P_221_MessageBundleName_comment=\
/**\n\
\ * Answer the atom that uniquely identifies the specified message bundle.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A message bundle for some method.\n\
\ * Returns:\n\
\ *    The requested atom.\n\
\ */\n
# 222 : _=2
P_222_DefinitionForArgumentTypes=method definition of_for_
P_222_DefinitionForArgumentTypes_0=methodName
P_222_DefinitionForArgumentTypes_1=parameterTypes
P_222_DefinitionForArgumentTypes_comment=\
/**\n\
\ * Lookup a definition of the method with the given name, given the\n\
\ * tuple of parameter types.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method.\n\
\ *    {1} - A tuple of parameter types. This must agree in length\n\
\ *       with the number of parameters expected by the method.\n\
\ * Returns:\n\
\ *    The unique definition of `{0}` that best accords with the\n\
\ *    specified parameter types.\n\
\ */\n
# 223 : _=1
P_223_BundleParametersCount=`|_'s⁇parameters`|
P_223_BundleParametersCount_0=aMessageBundle
P_223_BundleParametersCount_comment=\
/**\n\
\ * Answer the number of parameters required by the specified method.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method.\n\
\ * Returns:\n\
\ *    The number of parameters required by the specified method.\n\
\ */\n
# 224 : _=1
P_224_MethodNameParametersCount=`|message_'s⁇parameters`|
P_224_MethodNameParametersCount_0=methodName
P_224_MethodNameParametersCount_comment=\
/**\n\
\ * Compute and answer the number of parameters required by a valid send of a\n\
\ * message `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method name.\n\
\ * Returns:\n\
\ *    The number of parameters required to send the specified message.\n\
\ */\n
# 225 : _=1
P_225_MethodNameContainsGroups=message_contains groups
P_225_MethodNameContainsGroups_0=methodName
P_225_MethodNameContainsGroups_comment=\
/**\n\
\ * Does the specified message contain any lexical groups?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method name.\n\
\ * Returns:\n\
\ *    `true` if the specified message contains lexical groups, or `false`\n\
\ *    otherwise.\n\
\ */\n
# 226 : _=2
P_226_SealMethod=Seal method_at_
P_226_SealMethod_0=methodName
P_226_SealMethod_1=signature
P_226_SealMethod_comment=\
/**\n\
\ * Seal the named method at the specified signature. No further definitions\n\
\ * may be added at or below this signature. This facility is provided to secure\n\
\ * methods against dangerous, unscrupulous, or confusing extensions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to seal.\n\
\ *    {1} - A tuple of parameter types. This is the signature at which the\n\
\ *       seal will be placed.\n\
\ */\n
# 227 : _=2
P_227_AbstractMethodDeclarationForAtom=Abstract method_is_
P_227_AbstractMethodDeclarationForAtom_0=methodName
P_227_AbstractMethodDeclarationForAtom_1=signature
P_227_AbstractMethodDeclarationForAtom_comment=\
/**\n\
\ * Declare an abstract method with the specified name and signature. A concrete\n\
\ * definition is one whose parameter types and return type are strictly more\n\
\ * specific than the corresponding types of the abstract signature.\n\
\ *\n\
\ * Only extend the grammar of the current module if the atom was introduced by\n\
\ * the current module.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The atom that uniquely names the abstract method to declare.\n\
\ *    {1} - The signature.\n\
\ */\n
# 228 : _=2
P_228_MethodDeclarationFromAtom=
P_228_MethodDeclarationFromAtom_0=
P_228_MethodDeclarationFromAtom_1=
P_228_MethodDeclarationFromAtom_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 229 : _=2
P_229_BundleHasDefinitionForArgumentTypes=_has definition for_
P_229_BundleHasDefinitionForArgumentTypes_0=methodName
P_229_BundleHasDefinitionForArgumentTypes_1=parameterTypes
P_229_BundleHasDefinitionForArgumentTypes_comment=\
/**\n\
\ * Does the method whose bundle has the specified name have a unique definition\n\
\ * for the given tuple of parameter types?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method name (an atom).\n\
\ *    {1} - A tuple of parameter types. This must agree in length\n\
\ *       with the number of parameters expected by the method.\n\
\ * Returns:\n\
\ *    `true` if `{0}` has a unique definition for the specified parameter\n\
\ *    types, `false` otherwise.\n\
\ */\n
# 230 : _=1
P_230_ExistsMethodWithName=method exists named_
P_230_ExistsMethodWithName_0=trueName
P_230_ExistsMethodWithName_comment=\
/**\n\
\ * Is there a method bound to the specified name?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An atom.\n\
\ * Returns:\n\
\ *    `true` if `{0}` names a method, `false` otherwise.\n\
\ */\n
# 231 : _=2
P_231_AddSemanticRestrictionForAtom=Semantic restriction_is_
P_231_AddSemanticRestrictionForAtom_0=methodName
P_231_AddSemanticRestrictionForAtom_1=restriction
P_231_AddSemanticRestrictionForAtom_comment=\
/**\n\
\ * Define the specified semantic restriction. Henceforth whenever the method\n\
\ * named by `{0}` is invoked with arguments accepted by `{1}`,\n\
\ * then apply `{1}` with the most specific available types of the actual\n\
\ * arguments. This is determined by the compiler at the method''s call site.\n\
\ *\n\
\ * A semantic restriction has two responsibilities. First, it may reject a\n\
\ * method invocation on any appropriate semantic grounds by calling\n\
\ * `Reject parse,expected:_`. Second, it may strengthen the type of value\n\
\ * produced at the call site by answering a subtype of the method''s declared\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to which the semantic restriction\n\
\ *       applies.\n\
\ *    {1} - The restriction function.\n\
\ */\n
# 232 : _=2
P_232_SealMethodByAtom=Seal method_at_
P_232_SealMethodByAtom_0=methodName
P_232_SealMethodByAtom_1=signature
P_232_SealMethodByAtom_comment=\
/**\n\
\ * Seal the named method at the specified signature. No further definitions\n\
\ * may be added at or below this signature. This facility is provided to secure\n\
\ * methods against dangerous, unscrupulous, or confusing extensions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The atom that uniquely designates the method to seal.\n\
\ *    {1} - A tuple of parameter types. This is the signature at which the\n\
\ *       seal will be placed.\n\
\ */\n
# 233 : _=1
P_233_AddUnloadFunction=After the current module is unloaded,⁇do_
P_233_AddUnloadFunction_0=aFunction
P_233_AddUnloadFunction_comment=\
/**\n\
\ * Register the given function for callback after the module undergoing\n\
\ * compilation has been unloaded.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The post-unload function.\n\
\ */\n
# 239 : _=1
P_239_Seals=_'s⁇seals
P_239_Seals_0=aMethod
P_239_Seals_comment=\
/**\n\
\ * Answer all seals applied to the specified method.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method.\n\
\ * Returns:\n\
\ *    A tuple comprising the seals applied to `{0}`.\n\
\ */\n
# 241 : _=0
P_241_CurrentModule=current module
P_241_CurrentModule_comment=\
/**\n\
\ * Answer the module currently undergoing compilation.\n\
\ *\n\
\ * Returns:\n\
\ *    The module currently undergoing compilation.\n\
\ */\n
# 242 : _=1
P_242_NewNames=_'s⁇public names
P_242_NewNames_0=aModule
P_242_NewNames_comment=\
/**\n\
\ * Answer the public names introduced by the specified module.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A module.\n\
\ * Returns:\n\
\ *    A set containing the public names introduced by `{0}`.\n\
\ */\n
# 243 : _=1
P_243_ModuleName=_'s⁇name
P_243_ModuleName_0=aModule
P_243_ModuleName_comment=\
/**\n\
\ * Answer the fully qualified name of the specified module.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A module.\n\
\ * Returns:\n\
\ *    The fully qualified name of `{0}`.\n\
\ */\n
# 244 : _=1
P_244_AdjustDebugSetting=
P_244_AdjustDebugSetting_0=
P_244_AdjustDebugSetting_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 245 : _=1
P_245_LookupName=atom for_
P_245_LookupName_0=localName
P_245_LookupName_comment=\
/**\n\
\ * Answer the atom referenced by the specified name in the module currently\n\
\ * undergoing compilation. If this name already refers to an atom in scope,\n\
\ * i.e., either one 1) imported through the "Uses" or "Extends" sections of the\n\
\ * current module''s header, 2) introduced by the "Names" section of the\n\
\ * current module''s header, or 3) introduced by dynamic publication then answer\n\
\ * this atom. Otherwise, privately introduce a new atom.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name by which this atom is known locally.\n\
\ * Returns:\n\
\ *    The requested atom.\n\
\ */\n
# 246 : _=1
P_246_PublishName=Publish new name:_
P_246_PublishName_0=newName
P_246_PublishName_comment=\
/**\n\
\ * Dynamically introduce `{0}` as a public name. This has the same effect as\n\
\ * listing in the "Names" section of the current module, i.e., the module\n\
\ * currently undergoing compilation. This facilitates code generation in some\n\
\ * circumstances. This operation may only be invoked during compilation, i.e.,\n\
\ * as the result of parsing or executing a top-level statement.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name that should be introduced.\n\
\ */\n
# 247 : _=2
P_247_SemanticRestrictions=semantic restrictions for_given_
P_247_SemanticRestrictions_0=aMethod
P_247_SemanticRestrictions_1=arguments
P_247_SemanticRestrictions_comment=\
/**\n\
\ * Compute and answer the semantic restrictions that would run at a call site\n\
\ * of `{0}` applied with the specified tuple of arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A method.\n\
\ *    {1} - The tuple of arguments that should be used to filter the\n\
\ *       semantic restrictions.\n\
\ * Returns:\n\
\ *    The requested semantic restrictions.\n\
\ */\n
# 248 : _=2
P_248_AddSemanticRestriction=Semantic restriction_is_
P_248_AddSemanticRestriction_0=methodName
P_248_AddSemanticRestriction_1=restriction
P_248_AddSemanticRestriction_comment=\
/**\n\
\ * Define the specified semantic restriction. Henceforth whenever the method\n\
\ * named by `{0}` is invoked with arguments accepted by `{1}`,\n\
\ * then apply `{1}` with the most specific available types of the actual\n\
\ * arguments. This is determined by the compiler at the method''s call site.\n\
\ *\n\
\ * A semantic restriction has two responsibilities. First, it may reject a\n\
\ * method invocation on any appropriate semantic grounds by calling\n\
\ * `Reject parse,expected:_`. Second, it may strengthen the type of value\n\
\ * produced at the call site by answering a subtype of the method''s declared\n\
\ * return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to which the semantic restriction\n\
\ *       applies.\n\
\ *    {1} - The restriction function.\n\
\ */\n
# 249 : _=3
P_249_SimpleMacroDeclaration=Macro_is«_,»_
P_249_SimpleMacroDeclaration_0=macroName
P_249_SimpleMacroDeclaration_1=prefixFunctions
P_249_SimpleMacroDeclaration_2=body
P_249_SimpleMacroDeclaration_comment=\
/**\n\
\ * Define a macro with the specified name and body. A macro is a method invoked\n\
\ * directly by the compiler as a consequence of parsing a sequence of tokens.\n\
\ * The arguments of a macro are parse nodes that structurally represent the\n\
\ * corresponding lexical expressions. The result of a macro is a parse node that\n\
\ * completely replaces the macro invocation; the compiler proceeds as if it had\n\
\ * built this parse node from the original tokens instead of the macro\n\
\ * invocation parse node.\n\
\ *\n\
\ * If a macro name contains the section sign (§), it must have a prefix function\n\
\ * for each occurrence of that character in the name.  The prefix function will\n\
\ * be invoked each time that character is "reached" in the method name while\n\
\ * parsing a potential call site, giving the macro the opportunity to alter the\n\
\ * current variable scope and other parsing state.\n\
\ *\n\
\ * Macro definitions are parametric by parameter types. They participate in\n\
\ * multiply polymorphic dispatch just as do methods.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the macro to define.\n\
\ *    {1} - A tuple of zero or more prefix functions.\n\
\ *    {2} - The function that implements the macro.\n\
\ */\n
# 250 : _=1
P_250_IsPrimitiveDefined=_is a primitive
P_250_IsPrimitiveDefined_0=primitiveNumber
P_250_IsPrimitiveDefined_comment=\
/**\n\
\ * Does the argument denote a valid primitive?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A potential primitive number.\n\
\ * Returns:\n\
\ *    `true` if the argument denotes a valid primitive, `false` otherwise.\n\
\ */\n
# 251 : _=2
P_251_AbstractMethodDeclaration=Abstract method_is_
P_251_AbstractMethodDeclaration_0=methodName
P_251_AbstractMethodDeclaration_1=aFunctionType
P_251_AbstractMethodDeclaration_comment=\
/**\n\
\ * Declare an abstract method with the specified name and signature. A concrete\n\
\ * definition is one whose parameter types and return type are strictly more\n\
\ * specific than the corresponding types of the abstract signature.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the abstract method to declare.\n\
\ *    {1} - The signature.\n\
\ */\n
# 252 : _=2
P_252_ForwardMethodDeclaration=Forward method_is_
P_252_ForwardMethodDeclaration_0=methodName
P_252_ForwardMethodDeclaration_1=aFunctionType
P_252_ForwardMethodDeclaration_comment=\
/**\n\
\ * Declare the intention to locally define a method with the specified name and\n\
\ * signature. If no such method is defined before compilation of the containing\n\
\ * module completes, then the compiler will emit an appropriate error message.\n\
\ *\n\
\ * Recursive methods must be forward declared. Mutually recursive methods must\n\
\ * forward declare all but the lexically first participant in the recursion.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to forward declare.\n\
\ *    {1} - The signature.\n\
\ */\n
# 253 : _=2
P_253_SimpleMethodDeclaration=
P_253_SimpleMethodDeclaration_0=
P_253_SimpleMethodDeclaration_1=
P_253_SimpleMethodDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 254 : _=0
P_254_ReadFromStandardInput=next character
P_254_ReadFromStandardInput_comment=\
/**\n\
\ * Read the next character from the standard input stream.\n\
\ *\n\
\ * Returns:\n\
\ *    The next character from the standard input stream.\n\
\ */\n
# 255 : _=2
P_255_GrammaticalRestriction=Grammatical restriction_is_
P_255_GrammaticalRestriction_0=methodsToRestrict
P_255_GrammaticalRestriction_1=exclusions
P_255_GrammaticalRestriction_comment=\
/**\n\
\ * Define the indicated grammatical restrictions. Each method name in\n\
\ * `{0}` must accept the same number of arguments, though not\n\
\ * necessarily the same types (or the same order of types). Each element `e` of\n\
\ * `{1}`, itself a set of method names, corresponds to an argument\n\
\ * position `n` of any method name in `{0}`. The compiler rejects\n\
\ * parses of source text that invoke methods named in `e` when they occur\n\
\ * grammatically at argument position `n` of an invocation of any method named\n\
\ * in `{0}`.\n\
\ *\n\
\ * Note that "argument position" corresponds to a blank, not to a top-level\n\
\ * repeating sequence (indicated by guillemet notation).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set of method names, each of which should be\n\
\ *       restricted.\n\
\ *    {1} - A tuple of sets of method names. The method names in the\n\
\ *       `n`-th set are restricted from occurring grammatically at the `n`-th\n\
\ *       argument position of any invocation of a method named in\n\
\ *       `{0}`.\n\
\ */\n
# 256 : _=1
P_256_EmergencyExit=Crash:_
P_256_EmergencyExit_0=value
P_256_EmergencyExit_comment=\
/**\n\
\ * Crash the current fiber. Use the specified value to provide contextual\n\
\ * debugging information.\n\
\ *\n\
\ * This method must not leak beyond the bootstrap package. Termination of\n\
\ * fibers is dangerous because it avoids cleaning up active continuations and\n\
\ * ergo promotes deadlock (by failing to relinquish held locks). Only\n\
\ * cooperative termination, e.g. interrupt queues, is supported in ordinary\n\
\ * system or application code. This method is provided only for early detection\n\
\ * of serious failures in bootstrap code. Real failures in system code outside\n\
\ * of the bootstrap package use Avail''s usual exception handling machinery.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value, provided to establish context for debugging.\n\
\ */\n
# 257 : _=0
P_257_BreakPoint=Breakpoint
P_257_BreakPoint_comment=\
/**\n\
\ * Cause the Avail virtual machine to raise an\n\
\ * `org.availlang.exceptions.AvailBreakpointException` that a Java debugger\n\
\ * can trap upon raise.\n\
\ * \n\
\ * This method exists to facilitate debugging of the Avail virtual machine, and\n\
\ * will be withdrawn once the implementation is considered sufficiently stable.\n\
\ */\n
# 258 : _=1
P_258_PrintToConsole=Print:_
P_258_PrintToConsole_0=text
P_258_PrintToConsole_comment=\
/**\n\
\ * Print the argument to the application''s standard output stream.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A string.\n\
\ */\n
# 259 : _=1
P_259_ToString=primitive description of_
P_259_ToString_0=value
P_259_ToString_comment=\
/**\n\
\ * Produce a primitive description of the argument. This description is\n\
\ * mechanically constructed by the Avail virtual machine. It may not contain\n\
\ * appropriately localized text, and is intended to provide\n\
\ * implementation-specific information that serves only to assist the\n\
\ * Avail virtual machine developers in debugging the implementation.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A value.\n\
\ * Returns:\n\
\ *    A mechanically constructed, possibly non-localized,\n\
\ *    implementation-specific description of the argument.\n\
\ */\n
# 260 : _=2
P_260_Assert=Assert:_(_)
P_260_Assert_0=predicate
P_260_Assert_1=message
P_260_Assert_comment=\
/**\n\
\ * Early assertion mechanism. This is obsolete once exceptions are available.\n\
\ * Raise a special exception in the virtual machine that may be trapped to\n\
\ * facilitate debugging. This exception will provided access to `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A boolean, usually derived from a more complex predicate\n\
\ *       expression.\n\
\ *    {1} - Text describing the assertion failure, ignored unless\n\
\ *       `{0}` is `false`.\n\
\ */\n
# 261 : _=1
P_261_MarkStandardInputStream=Mark for_character|characters of read ahead
P_261_MarkStandardInputStream_0=count
P_261_MarkStandardInputStream_comment=\
/**\n\
\ * Mark the standard input stream to allow at least `{0}` of read ahead.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The requested number of characters of read ahead.\n\
\ */\n
# 262 : _=0
P_262_ResetStandardInputStream=Reset to mark
P_262_ResetStandardInputStream_comment=\
/**\n\
\ * Reset the standard input stream to the previously set mark.\n\
\ *\n\
\ */\n
# 264 : _=2
P_264_GrammaticalRestrictionFromAtoms=Grammatical restriction_is_
P_264_GrammaticalRestrictionFromAtoms_0=methodsToRestrict
P_264_GrammaticalRestrictionFromAtoms_1=exclusions
P_264_GrammaticalRestrictionFromAtoms_comment=\
/**\n\
\ * Define the indicated grammatical restrictions. Each method name in\n\
\ * `{0}` must accept the same number of arguments, though not\n\
\ * necessarily the same types (or the same order of types). Each element `e` of\n\
\ * `{1}`, itself a set of method names, corresponds to an argument\n\
\ * position `n` of any method name in `{0}`. The compiler rejects\n\
\ * parses of source text that invoke methods named in `e` when they occur\n\
\ * grammatically at argument position `n` of an invocation of any method named\n\
\ * in `{0}`.\n\
\ *\n\
\ * Note that "argument position" corresponds to a blank, not to a top-level\n\
\ * repeating sequence (indicated by guillemet notation).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A set of method names, each of which should be\n\
\ *       restricted.\n\
\ *    {1} - A tuple of sets of method names. The method names in the\n\
\ *       `n`-th set are restricted from occurring grammatically at the `n`-th\n\
\ *       argument position of any invocation of a method named in\n\
\ *       `{0}`.\n\
\ */\n
# 265 : _=1
P_265_PrintToErrorConsole=Error:_
P_265_PrintToErrorConsole_0=text
P_265_PrintToErrorConsole_comment=\
/**\n\
\ * Print the argument to the application''s standard error stream.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A string.\n\
\ */\n
# 280 : _=1
P_280_AsFloat=_→float
P_280_AsFloat_0=aNumber
P_280_AsFloat_comment=\
/**\n\
\ * Compute and answer the numeric argument as a single-precision floating point\n\
\ * number.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ * Returns:\n\
\ *    A `float` whose value approximates the argument.\n\
\ */\n
# 281 : _=1
P_281_AsDouble=_→double
P_281_AsDouble_0=aNumeric
P_281_AsDouble_comment=\
/**\n\
\ * Compute and answer the numeric argument as a double-precision floating point\n\
\ * number.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A number.\n\
\ * Returns:\n\
\ *    A `double` whose value approximates the argument.\n\
\ */\n
# 286 : _=1
P_286_FloatLn=ln_
P_286_FloatLn_0=x
P_286_FloatLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    An approximation of ln `{0}`.\n\
\ */\n
# 287 : _=2
P_287_FloatExp=_^_
P_287_FloatExp_0=eulerNumber
P_287_FloatExp_1=x
P_287_FloatExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^`{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - Euler''s number.\n\
\ *    {1} - The exponent.\n\
\ * Returns:\n\
\ *    An approximation of e^`{1}`.\n\
\ */\n
# 288 : _=2
P_288_FloatModulus=_mod_
P_288_FloatModulus_0=dividend
P_288_FloatModulus_1=divisor
P_288_FloatModulus_comment=\
/**\n\
\ * Compute and answer an approximation of `{0}` modulo `{1}`, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    An approximation of `{0}` mod `{1}`.\n\
\ */\n
# 289 : _=1
P_289_FloatTruncatedAsInteger=_→extended integer
P_289_FloatTruncatedAsInteger_0=aFloat
P_289_FloatTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 291 : _=3
P_291_FloatTimesTwoPower=_⨉_^_
P_291_FloatTimesTwoPower_0=a
P_291_FloatTimesTwoPower_1=two
P_291_FloatTimesTwoPower_2=b
P_291_FloatTimesTwoPower_comment=\
/**\n\
\ * Compute and answer `{0}`⨉(2^`{1}`) without loss of precision or\n\
\ * intermediate overflow. This scales `{0}` by a power of two (`2`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ *    {1} - The number two (`2`).\n\
\ *    {2} - The scaling factor.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 292 : _=1
P_292_FloatFloor=⎣_⎦
P_292_FloatFloor_0=x
P_292_FloatFloor_comment=\
/**\n\
\ * Compute and answer the largest integral single-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the floor of\n\
\ *    `{0}`.\n\
\ */\n
# 293 : _=1
P_293_FloatCeiling=⎡_⎤
P_293_FloatCeiling_0=x
P_293_FloatCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral single-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the ceiling of\n\
\ *    `{0}`.\n\
\ */\n
# 316 : _=1
P_316_DoubleLn=ln_
P_316_DoubleLn_0=x
P_316_DoubleLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    An approximation of ln `{0}`.\n\
\ */\n
# 317 : _=2
P_317_DoubleExp=_^_
P_317_DoubleExp_0=eulerNumber
P_317_DoubleExp_1=x
P_317_DoubleExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^`{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - Euler''s number.\n\
\ *    {1} - The exponent.\n\
\ * Returns:\n\
\ *    An approximation of e^`{1}`.\n\
\ */\n
# 318 : _=2
P_318_DoubleModulus=_mod_
P_318_DoubleModulus_0=dividend
P_318_DoubleModulus_1=divisor
P_318_DoubleModulus_comment=\
/**\n\
\ * Compute and answer an approximation of `{0}` modulo `{1}`, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The dividend.\n\
\ *    {1} - The divisor.\n\
\ * Returns:\n\
\ *    An approximation of `0` mod `{1}`.\n\
\ */\n
# 319 : _=1
P_319_DoubleTruncatedAsInteger=_→extended integer
P_319_DoubleTruncatedAsInteger_0=aDouble
P_319_DoubleTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 321 : _=3
P_321_DoubleTimesTwoPower=_⨉_^_
P_321_DoubleTimesTwoPower_0=a
P_321_DoubleTimesTwoPower_1=two
P_321_DoubleTimesTwoPower_2=b
P_321_DoubleTimesTwoPower_comment=\
/**\n\
\ * Compute and answer `{0}`⨉(2^`{1}`) without loss of precision or\n\
\ * intermediate overflow. This scales `{0}` by a power of two (`2`).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A single-precision floating point number.\n\
\ *    {1} - The number two (`2`).\n\
\ *    {2} - The scaling factor.\n\
\ * Returns:\n\
\ *    The requested value.\n\
\ */\n
# 322 : _=1
P_322_DoubleFloor=⎣_⎦
P_322_DoubleFloor_0=x
P_322_DoubleFloor_comment=\
/**\n\
\ * Compute and answer the largest integral double-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the floor of\n\
\ *    `{0}`.\n\
\ */\n
# 323 : _=1
P_323_DoubleCeiling=⎡_⎤
P_323_DoubleCeiling_0=x
P_323_DoubleCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral double-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A double-precision floating point number.\n\
\ * Returns:\n\
\ *    If the `0` is ±∞ or not-a-number, then `{0}`, otherwise the ceiling of\n\
\ *    `{0}`.\n\
\ */\n
# 330 : _=1
P_330_CharacterCodePoint=_'s⁇code point
P_330_CharacterCodePoint_0=aCharacter
P_330_CharacterCodePoint_comment=\
/**\n\
\ * Answer the argument''s Unicode code point.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A character.\n\
\ * Returns:\n\
\ *    The Unicode code point that encodes the argument.\n\
\ */\n
# 331 : _=1
P_331_CharacterFromCodePoint=_→character
P_331_CharacterFromCodePoint_0=codePoint
P_331_CharacterFromCodePoint_comment=\
/**\n\
\ * Answer the argument as a character.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A Unicode code point.\n\
\ * Returns:\n\
\ *    The character encoded by the argument.\n\
\ */\n
# 349 : _=1
P_349_ParseNodeTypeExpressionType=_'s⁇semantic type
P_349_ParseNodeTypeExpressionType_0=phraseType
P_349_ParseNodeTypeExpressionType_comment=\
/**\n\
\ * Answer the semantic type of the specified phrase type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A phrase type.\n\
\ * Returns:\n\
\ *    The requested semantic type.\n\
\ */\n
# 350 : _=2
P_350_CreateAssignmentExpression=`«(_:=_)`»
P_350_CreateAssignmentExpression_0=variableUse
P_350_CreateAssignmentExpression_1=valueExpression
P_350_CreateAssignmentExpression_comment=\
/**\n\
\ * Construct and answer an assignment expression.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable use expression.\n\
\ *    {1} - An expression.\n\
\ * Returns:\n\
\ *    An expression that describes assigning to the variable indicated by\n\
\ *    `{0}` the result of running `{1}`. The result yields the same\n\
\ *    answer as `{1}`.\n\
\ */\n
# 351 : _=1
P_351_ParseNodeExpressionType=_'s⁇semantic type
P_351_ParseNodeExpressionType_0=node
P_351_ParseNodeExpressionType_comment=\
/**\n\
\ * Answer the semantic type of the specified phrase. This is the type of value\n\
\ * produced when the content of the phrase is evaluated (by the compiler and/or\n\
\ * runtime).\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A phrase.\n\
\ * Returns:\n\
\ *    A type that describes all values producible by evaluations of the\n\
\ *    argument.\n\
\ */\n
# 352 : _=1
P_352_RejectParsing=Reject parse,expected:_
P_352_RejectParsing_0=expected
P_352_RejectParsing_comment=\
/**\n\
\ * Reject the current parse. This causes the compiler to reject the\n\
\ * interpretation of the program text that resulted in execution of the code\n\
\ * that invoked this method. The argument is a description of the parse\n\
\ * rejection, but in positive terms that primarily assert what the caller was\n\
\ * expecting (on the compiler''s behalf). It is, of course, also useful to state\n\
\ * what was actually discovered.\n\
\ *\n\
\ * Note that the Avail compiler attempts, in parallel, many different parses of\n\
\ * a statement. If the only parses syntactically accepted by the compiler are\n\
\ * semantically rejected by callers of this method, then and only then is the\n\
\ * statement deemed invalid and the arguments of such calls emitted by the\n\
\ * compiler as error messages to assist the programmer in correcting the\n\
\ * rejected statement.\n\
\ *\n\
\ * This method may only be invoked from the body of a macro function or a\n\
\ * semantic restriction function: it should only be invoked by the Avail\n\
\ * compiler, never by a semantically valid Avail program.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A description of the cause of rejection, worded to sound good\n\
\ *       after "Expected...".\n\
\ */\n
# 353 : _=2
P_353_CreateAssignmentStatement=`«_:=_`»
P_353_CreateAssignmentStatement_0=variableUse
P_353_CreateAssignmentStatement_1=valueExpression
P_353_CreateAssignmentStatement_comment=\
/**\n\
\ * Construct and answer an assignment statement.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable use expression.\n\
\ *    {1} - An expression.\n\
\ * Returns:\n\
\ *    A statement that describes assigning to the variable indicated by\n\
\ *    `{0}` the result of running `{1}`.\n\
\ */\n
# 354 : _=1
P_354_CreateReferenceExpression=`«↑_`»
P_354_CreateReferenceExpression_0=variableUse
P_354_CreateReferenceExpression_comment=\
/**\n\
\ * Construct and answer a value reference expression.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable use expression.\n\
\ * Returns:\n\
\ *    A variable reference expression that answers the variable described by\n\
\ *    `{0}`.\n\
\ */\n
# 355 : _=2
P_355_CreateParseNodeType=_⇒_
P_355_CreateParseNodeType_0=aPhrase
P_355_CreateParseNodeType_1=semanticType
P_355_CreateParseNodeType_comment=\
/**\n\
\ * Construct and answer a phrase type with the specified semantic type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A phrase type.\n\
\ *    {1} - The semantic type of values producible by phrases that\n\
\ *       are instances of the answer.\n\
\ * Returns:\n\
\ *    The requested phrase type.\n\
\ */\n
# 356 : _=1
P_356_TokenLexeme=_'s⁇lexeme
P_356_TokenLexeme_0=aToken
P_356_TokenLexeme_comment=\
/**\n\
\ * Answer the lexeme of the specified token. This is the source text that\n\
\ * produced the token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The source text of `{0}`.\n\
\ */\n
# 357 : _=1
P_357_TokenStart=_'s⁇starting position
P_357_TokenStart_0=aToken
P_357_TokenStart_comment=\
/**\n\
\ * Answer the zero-based starting position of the specified token within the\n\
\ * module that supplied it.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The zero-based starting position of `{0}`.\n\
\ */\n
# 358 : _=1
P_358_TokenLineNumber=_'s⁇line number
P_358_TokenLineNumber_0=aToken
P_358_TokenLineNumber_comment=\
/**\n\
\ * Answer the one-based line number of the specified token within the module\n\
\ * that supplied it.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A token.\n\
\ * Returns:\n\
\ *    The one-based line number of `{0}`.\n\
\ */\n
# 359 : _=1
P_359_LiteralTokenValue=_'s⁇value
P_359_LiteralTokenValue_0=aLiteralToken
P_359_LiteralTokenValue_comment=\
/**\n\
\ * Answer the literal value associated with the specified token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A literal token.\n\
\ * Returns:\n\
\ *    The literal value produced by `{0}`.\n\
\ */\n
# 360 : _=2
P_360_CreateLiteralToken=``_``(_)
P_360_CreateLiteralToken_0=value
P_360_CreateLiteralToken_1=fakeText
P_360_CreateLiteralToken_comment=\
/**\n\
\ * Construct and answer a (synthetic) literal token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The value of the literal.\n\
\ *    {1} - The "source" text of the literal.\n\
\ * Returns:\n\
\ *    The requested literal token.\n\
\ */\n
# 361 : _=5
P_361_CreateBlockExpression=`«[_`|Primitive__]:_^_`»
P_361_CreateBlockExpression_0=argumentDeclarations
P_361_CreateBlockExpression_1=primitiveNumber
P_361_CreateBlockExpression_2=statements
P_361_CreateBlockExpression_3=returnType
P_361_CreateBlockExpression_4=exceptions
P_361_CreateBlockExpression_comment=\
/**\n\
\ * Construct and answer a block from the specified tuple of argument\n\
\ * declarations, primitive linkage number, tuple of statements, return type, and\n\
\ * set of declared exceptions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of argument declarations.\n\
\ *    {1} - The primitive linkage number, or 0 for no primitive\n\
\ *       linkage.\n\
\ *    {2} - A tuple of statements. Each element except for the last must\n\
\ *       be an assignment, declaration, label, sequence, or ⊤-valued send.\n\
\ *    {3} - The return type.\n\
\ *    {4} - The set of exceptions that may be raised.\n\
\ * Returns:\n\
\ *    The requested block.\n\
\ */\n
# 362 : _=1
P_362_GenerateFunctionForBlock=generate_
P_362_GenerateFunctionForBlock_0=aBlock
P_362_GenerateFunctionForBlock_comment=\
/**\n\
\ * Generate and answer a function from the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block. Note that the block is treated as a top-level\n\
\ *       construct, so it must not refer to any outer variable declarations.\n\
\ * Returns:\n\
\ *    The requested function.\n\
\ */\n
# 363 : _=1
P_363_BlockArguments=_'s⁇arguments
P_363_BlockArguments_0=aBlock
P_363_BlockArguments_comment=\
/**\n\
\ * Answer the arguments of the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    A tuple of argument declarations.\n\
\ */\n
# 364 : _=1
P_364_BlockPrimitiveNumber=_'s⁇primitive number
P_364_BlockPrimitiveNumber_0=aBlock
P_364_BlockPrimitiveNumber_comment=\
/**\n\
\ * Answer the primitive linkage number of the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    The block''s primitive linkage number, or 0 if the block has no primitive\n\
\ *    linkage.\n\
\ */\n
# 365 : _=1
P_365_BlockStatements=_'s⁇statements
P_365_BlockStatements_0=aBlock
P_365_BlockStatements_comment=\
/**\n\
\ * Answer the statements of the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    A tuple of statements. These are either assignments, declarations, labels,\n\
\ *    sequences, or ⊤-valued sends.\n\
\ */\n
# 366 : _=1
P_366_BlockReturnType=_'s⁇return type
P_366_BlockReturnType_0=aBlock
P_366_BlockReturnType_comment=\
/**\n\
\ * Answer the return type of the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    The block''s return type.\n\
\ */\n
# 367 : _=1
P_367_BlockDeclaredExceptions=_'s⁇declared exceptions
P_367_BlockDeclaredExceptions_0=aBlock
P_367_BlockDeclaredExceptions_comment=\
/**\n\
\ * Answer the declared exceptions of the specified block.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    The block''s set of declared exceptions.\n\
\ */\n
# 368 : _=1
P_368_BlockNeededVariables=_'s⁇outer variables
P_368_BlockNeededVariables_0=aBlock
P_368_BlockNeededVariables_comment=\
/**\n\
\ * Answer the specified block''s outer variables.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A block.\n\
\ * Returns:\n\
\ *    A tuple of declarations of outer variables required to complete the\n\
\ *    meaning of the block.\n\
\ */\n
# 369 : _=1
P_369_AssignmentTarget=_'s⁇target
P_369_AssignmentTarget_0=anAssignment
P_369_AssignmentTarget_comment=\
/**\n\
\ * Answer the specified assignment''s target variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An assignment.\n\
\ * Returns:\n\
\ *    The assignment''s target variable.\n\
\ */\n
# 370 : _=1
P_370_AssignmentValue=_'s⁇value
P_370_AssignmentValue_0=anAssignment
P_370_AssignmentValue_comment=\
/**\n\
\ * Answer the specified assignment''s value expression.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - An assignment.\n\
\ * Returns:\n\
\ *    The assignment''s value expression.\n\
\ */\n
# 371 : _=1
P_371_ReferenceTarget=_'s⁇referent
P_371_ReferenceTarget_0=aReference
P_371_ReferenceTarget_comment=\
/**\n\
\ * Answer the specified variable reference''s referent.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable reference.\n\
\ * Returns:\n\
\ *    The variable use referenced by the argument.\n\
\ */\n
# 372 : _=2
P_372_CreateArgumentDeclaration=arg`«_:_`»
P_372_CreateArgumentDeclaration_0=name
P_372_CreateArgumentDeclaration_1=declaredType
P_372_CreateArgumentDeclaration_comment=\
/**\n\
\ * Construct and answer an argument declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new constant.\n\
\ *    {1} - The declared type of the named constant.\n\
\ * Returns:\n\
\ *    The requested argument declaration.\n\
\ */\n
# 373 : _=2
P_373_CreateLabelDeclaration=`«$_:_`»
P_373_CreateLabelDeclaration_0=name
P_373_CreateLabelDeclaration_1=declaredType
P_373_CreateLabelDeclaration_comment=\
/**\n\
\ * Construct and answer a label declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new constant.\n\
\ *    {1} - The declared type of the named constant.\n\
\ * Returns:\n\
\ *    The requested label declaration.\n\
\ */\n
# 374 : _=2
P_374_CreateLocalConstantDeclaration=`«_::=_`»
P_374_CreateLocalConstantDeclaration_0=name
P_374_CreateLocalConstantDeclaration_1=declaredType
P_374_CreateLocalConstantDeclaration_comment=\
/**\n\
\ * Construct and answer a local constant declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new constant.\n\
\ *    {1} - The initialization expression for the new constant.\n\
\ * Returns:\n\
\ *    The requested local constant declaration.\n\
\ */\n
# 375 : _=2
P_375_CreatePrimitiveFailureVariableDeclaration=primfail`«_:_`»
P_375_CreatePrimitiveFailureVariableDeclaration_0=name
P_375_CreatePrimitiveFailureVariableDeclaration_1=declaredType
P_375_CreatePrimitiveFailureVariableDeclaration_comment=\
/**\n\
\ * Construct and answer a primitive failure local constant declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new constant.\n\
\ *    {1} - The declared type of the named constant.\n\
\ * Returns:\n\
\ *    The requested primitive failure local constant declaration.\n\
\ */\n
# 376 : _=2
P_376_CreateVariableExpression=`«_:_`»
P_376_CreateVariableExpression_0=name
P_376_CreateVariableExpression_1=declaredType
P_376_CreateVariableExpression_comment=\
/**\n\
\ * Construct and answer a local variable declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new variable.\n\
\ *    {1} - The declared type of the named variable.\n\
\ * Returns:\n\
\ *    The requested local variable declaration.\n\
\ */\n
# 377 : _=3
P_377_CreateInitializingVariableDeclaration=`«_:_:=_`»
P_377_CreateInitializingVariableDeclaration_0=name
P_377_CreateInitializingVariableDeclaration_1=declaredType
P_377_CreateInitializingVariableDeclaration_2=initializer
P_377_CreateInitializingVariableDeclaration_comment=\
/**\n\
\ * Construct and answer an initialized local variable declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the new variable.\n\
\ *    {1} - The declared type of the named variable.\n\
\ *    {2} - The initialization expression.\n\
\ * Returns:\n\
\ *    The requested initialized local variable declaration.\n\
\ */\n
# 378 : _=1
P_378_DeclarationToken=_'s⁇token
P_378_DeclarationToken_0=aDeclaration
P_378_DeclarationToken_comment=\
/**\n\
\ * Answer the token that names the entity introduced by the specified\n\
\ * declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A declaration.\n\
\ * Returns:\n\
\ *    The requested token.\n\
\ */\n
# 379 : _=1
P_379_DeclarationType=_'s⁇declared type
P_379_DeclarationType_0=aDeclaration
P_379_DeclarationType_comment=\
/**\n\
\ * Answer the declared type of the entity introduced by the specified\n\
\ * declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A declaration.\n\
\ * Returns:\n\
\ *    The requested type.\n\
\ */\n
# 380 : _=2
P_380_DeclarationInitializingExpression=↓_`?=_'s⁇initialization
P_380_DeclarationInitializingExpression_0=var
P_380_DeclarationInitializingExpression_1=aDeclaration
P_380_DeclarationInitializingExpression_comment=\
/**\n\
\ * If the specified declaration has an initialization expression, then store it\n\
\ * into `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable.\n\
\ *    {1} - A declaration.\n\
\ * Returns:\n\
\ *    `true` if `{1}` has an initialization expression and it was\n\
\ *    written into `{0}`, `false` otherwise.\n\
\ */\n
# 381 : _=1
P_381_CreateLiteralExpression=‘_’
P_381_CreateLiteralExpression_0=aLiteralToken
P_381_CreateLiteralExpression_comment=\
/**\n\
\ * Construct and answer a literal expression.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A literal token.\n\
\ * Returns:\n\
\ *    The requested literal expression.\n\
\ */\n
# 382 : _=1
P_382_LiteralExpressionToken=_'s⁇token
P_382_LiteralExpressionToken_0=aLiteral
P_382_LiteralExpressionToken_comment=\
/**\n\
\ * Answer the specified literal expression''s defining token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A literal expression.\n\
\ * Returns:\n\
\ *    The requested literal token.\n\
\ */\n
# 383 : _=3
P_383_CreateSendExpression=send_with_:_
P_383_CreateSendExpression_0=messageName
P_383_CreateSendExpression_1=argumentsList
P_383_CreateSendExpression_2=returnType
P_383_CreateSendExpression_comment=\
/**\n\
\ * Construct and answer a message send. `{0}` must be an atom which has\n\
\ * a message bundle.  The number and types of the argument expressions must\n\
\ * satisfy at least one of the method''s existing definitions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The name of the method to be invoked.\n\
\ *    {1} - The list phrase containing the argument expressions,\n\
\ *       corresponding left-to-right with the arguments of the method.\n\
\ *    {2} - The expected (strengthened) return type of the method send.\n\
\ * Returns:\n\
\ *    The requested message send.\n\
\ */\n
# 384 : _=1
P_384_SendMethod=_'s⁇method
P_384_SendMethod_0=aSend
P_384_SendMethod_comment=\
/**\n\
\ * Answer the target method of the specified message send.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A message send.\n\
\ * Returns:\n\
\ *    The requested method.\n\
\ */\n
# 385 : _=1
P_385_SendArgumentsList=_'s⁇arguments
P_385_SendArgumentsList_0=aSend
P_385_SendArgumentsList_comment=\
/**\n\
\ * Answer the specified message send''s list of argument expressions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A message send.\n\
\ * Returns:\n\
\ *    The requested list of argument expressions.\n\
\ */\n
# 386 : _=1
P_386_SendReturnType=_'s⁇return type
P_386_SendReturnType_0=aSend
P_386_SendReturnType_comment=\
/**\n\
\ * Answer the specified message send''s expected return type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A message send.\n\
\ * Returns:\n\
\ *    The requested type.\n\
\ */\n
# 387 : _=1
P_387_CreateSequenceOfStatements=seq`«_`»
P_387_CreateSequenceOfStatements_0=statements
P_387_CreateSequenceOfStatements_comment=\
/**\n\
\ * Construct and answer a sequence from the specified tuple of statements.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of statements.\n\
\ * Returns:\n\
\ *    The requested sequence.\n\
\ */\n
# 388 : _=1
P_388_SequenceStatements=_'s⁇statements
P_388_SequenceStatements_0=aSequence
P_388_SequenceStatements_comment=\
/**\n\
\ * Answer the tuple of statements that constitute the specified sequence.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A sequence.\n\
\ * Returns:\n\
\ *    The requested tuple of statements.\n\
\ */\n
# 392 : _=1
P_392_CreateListExpression=_→list phrase
P_392_CreateListExpression_0=aTuple
P_392_CreateListExpression_comment=\
/**\n\
\ * Construct and answer a list from the specified tuple of expressions.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple of expressions.\n\
\ * Returns:\n\
\ *    The requested list.\n\
\ */\n
# 393 : _=1
P_393_ListExpressions=_'s⁇expressions
P_393_ListExpressions_0=aList
P_393_ListExpressions_comment=\
/**\n\
\ * Answer the tuple of expressions that constitute the specified list.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A list.\n\
\ * Returns:\n\
\ *    The requested tuple of expressions.\n\
\ */\n
# 394 : _=2
P_394_CreateVariableUse=`«↓_`»(_)
P_394_CreateVariableUse_0=aDeclaration
P_394_CreateVariableUse_1=aToken
P_394_CreateVariableUse_comment=\
/**\n\
\ * Create a variable use expression from the specified token and declaration.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The declaration that created the referenced entity.\n\
\ *    {1} - A token that names the entity at the point of use.\n\
\ * Returns:\n\
\ *    The requested variable use expression.\n\
\ */\n
# 395 : _=1
P_395_VariableUseToken=_'s⁇token
P_395_VariableUseToken_0=use
P_395_VariableUseToken_comment=\
/**\n\
\ * Answer the specified variable use expression''s token.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable use expression.\n\
\ * Returns:\n\
\ *    The token that names the referenced entity at the point of use.\n\
\ */\n
# 396 : _=1
P_396_VariableUseDeclaration=_'s⁇declaration
P_396_VariableUseDeclaration_0=use
P_396_VariableUseDeclaration_comment=\
/**\n\
\ * Answer the declaration that introduced the entity referenced by the specified\n\
\ * variable use expression.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A variable use expression.\n\
\ * Returns:\n\
\ *    The requested declaration.\n\
\ */\n
# 397 : _=1
P_397_CreateLiteralTokenType=literal token⇒_
P_397_CreateLiteralTokenType_0=literalValue
P_397_CreateLiteralTokenType_comment=\
/**\n\
\ * Construct a suitably parameterized literal token type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The literal value''s type\n\
\ * Returns:\n\
\ *    A literal token type.\n\
\ */\n
# 398 : _=1
P_398_LiteralTokenTypeValueType=_'s⁇value type
P_398_LiteralTokenTypeValueType_0=literalTokenType
P_398_LiteralTokenTypeValueType_comment=\
/**\n\
\ * Extract this literal token type''s value type.  That''s the type of value\n\
\ * that a conforming literal token can produce.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The literal token type.\n\
\ * Returns:\n\
\ *    The type of value that such a literal token can produce.\n\
\ */\n
# 400 : _=1
P_400_BootstrapBlockAfterArgumentPrefix=
P_400_BootstrapBlockAfterArgumentPrefix_0=
P_400_BootstrapBlockAfterArgumentPrefix_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 401 : _=2
P_401_BootstrapArgumentMacro=
P_401_BootstrapArgumentMacro_0=
P_401_BootstrapArgumentMacro_1=
P_401_BootstrapArgumentMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 402 : _=2
P_402_BootstrapPrimitiveFailureDeclarationMacro=
P_402_BootstrapPrimitiveFailureDeclarationMacro_0=
P_402_BootstrapPrimitiveFailureDeclarationMacro_1=
P_402_BootstrapPrimitiveFailureDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 404 : _=7
P_404_BootstrapBlockMacro=
P_404_BootstrapBlockMacro_0=
P_404_BootstrapBlockMacro_1=
P_404_BootstrapBlockMacro_2=
P_404_BootstrapBlockMacro_3=
P_404_BootstrapBlockMacro_4=
P_404_BootstrapBlockMacro_5=
P_404_BootstrapBlockMacro_6=
P_404_BootstrapBlockMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ *    {5} -\n\
\ *    {6} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 405 : _=2
P_405_BootstrapVariableDeclarationMacro=
P_405_BootstrapVariableDeclarationMacro_0=
P_405_BootstrapVariableDeclarationMacro_1=
P_405_BootstrapVariableDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 406 : _=2
P_406_BootstrapConstantDeclarationMacro=
P_406_BootstrapConstantDeclarationMacro_0=
P_406_BootstrapConstantDeclarationMacro_1=
P_406_BootstrapConstantDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 407 : _=3
P_407_BootstrapInitializingVariableDeclarationMacro=
P_407_BootstrapInitializingVariableDeclarationMacro_0=
P_407_BootstrapInitializingVariableDeclarationMacro_1=
P_407_BootstrapInitializingVariableDeclarationMacro_2=
P_407_BootstrapInitializingVariableDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 408 : _=2
P_408_BootstrapAssignmentMacro=
P_408_BootstrapAssignmentMacro_0=
P_408_BootstrapAssignmentMacro_1=
P_408_BootstrapAssignmentMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 409 : _=1
P_409_BootstrapVariableReferenceMacro=
P_409_BootstrapVariableReferenceMacro_0=
P_409_BootstrapVariableReferenceMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 410 : _=1
P_410_BootstrapVariableUseMacro=
P_410_BootstrapVariableUseMacro_0=
P_410_BootstrapVariableUseMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 411 : _=1
P_411_BootstrapSendAsStatementMacro=
P_411_BootstrapSendAsStatementMacro_0=
P_411_BootstrapSendAsStatementMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 430 : _=2
P_430_FileExists=
P_430_FileExists_0=
P_430_FileExists_1=
P_430_FileExists_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 431 : _=1
P_431_FileCanRead=
P_431_FileCanRead_0=
P_431_FileCanRead_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 432 : _=1
P_432_FileCanWrite=
P_432_FileCanWrite_0=
P_432_FileCanWrite_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 433 : _=1
P_433_FileCanExecute=
P_433_FileCanExecute_0=
P_433_FileCanExecute_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 434 : _=2
P_434_FileGetPermissions=
P_434_FileGetPermissions_0=
P_434_FileGetPermissions_1=
P_434_FileGetPermissions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 435 : _=3
P_435_FileSetPermissions=
P_435_FileSetPermissions_0=
P_435_FileSetPermissions_1=
P_435_FileSetPermissions_2=
P_435_FileSetPermissions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 436 : _=2
P_436_FileMetadata=
P_436_FileMetadata_0=
P_436_FileMetadata_1=
P_436_FileMetadata_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 437 : _=2
P_437_FileGetOwner=
P_437_FileGetOwner_0=
P_437_FileGetOwner_1=
P_437_FileGetOwner_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 438 : _=3
P_438_FileSetOwner=
P_438_FileSetOwner_0=
P_438_FileSetOwner_1=
P_438_FileSetOwner_2=
P_438_FileSetOwner_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 439 : _=2
P_439_FileGetGroup=
P_439_FileGetGroup_0=
P_439_FileGetGroup_1=
P_439_FileGetGroup_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 440 : _=3
P_440_FileSetGroup=
P_440_FileSetGroup_0=
P_440_FileSetGroup_1=
P_440_FileSetGroup_2=
P_440_FileSetGroup_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 500 : _=2
P_500_CreatePojoType=_<«_‡,»>
P_500_CreatePojoType_0=javaName
P_500_CreatePojoType_1=typeParameters
P_500_CreatePojoType_comment=\
/**\n\
\ * Construct and answer a fully parameterized pojo type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fully qualified name of the Java class or interface.\n\
\ *    {1} - The type arguments. The cardinality of this tuple\n\
\ *       must agree with the number of type parameters required by the Java\n\
\ *       class or interface.\n\
\ * Returns:\n\
\ *    The requested pojo type.\n\
\ */\n
# 501 : _=2
P_501_CreatePojoArrayType=_[_]
P_501_CreatePojoArrayType_0=elementType
P_501_CreatePojoArrayType_1=cardinalityRequirement
P_501_CreatePojoArrayType_comment=\
/**\n\
\ * Construct and answer a pojo array type whose element type is `{0}`\n\
\ * and whose cardinality requirement is `{1}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The type of the elements of instances.\n\
\ *    {1} - The range of sizes of instances.\n\
\ * Returns:\n\
\ *    The requested pojo array type.\n\
\ */\n
# 502 : _=3
P_502_CreatePojoConstructorFunction=constructor_<«_‡,»>(fail with_)
P_502_CreatePojoConstructorFunction_0=aPojoType
P_502_CreatePojoConstructorFunction_1=parameterTypes
P_502_CreatePojoConstructorFunction_2=failFunction
P_502_CreatePojoConstructorFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, constructs a new pojo of\n\
\ * the specified type.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java constructor,\n\
\ * if any, that accepts the specified number and types of arguments. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective constructor lookup and invocation, the following marshaling\n\
\ * rules are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The parameter types accepted by the desired constructor.\n\
\ *    {2} - The function to apply if an invocation of the constructor\n\
\ *       throws a Java exception.\n\
\ * Returns:\n\
\ *    The requested constructor invocation function.\n\
\ */\n
# 504 : _=2
P_504_BindPojoInstanceField=_._→variable
P_504_BindPojoInstanceField_0=aPojo
P_504_BindPojoInstanceField_1=fieldName
P_504_BindPojoInstanceField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the instance field uniquely specified by the given pojo and field\n\
\ * name.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The pojo whose instance field should be bound to the answered\n\
\ *       variable.\n\
\ *    {1} - The name of the desired field.\n\
\ * Returns:\n\
\ *    A variable bound to the specified instance field.\n\
\ */\n
# 505 : _=2
P_505_BindPojoStaticField=_._→variable
P_505_BindPojoStaticField_0=aPojoType
P_505_BindPojoStaticField_1=fieldName
P_505_BindPojoStaticField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the static field specified by the given pojo type and field\n\
\ * name.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type whose static field should be bound to the\n\
\ *       answered variable.\n\
\ *    {1} - The name of the desired field.\n\
\ * Returns:\n\
\ *    A variable bound to the specified static field.\n\
\ */\n
# 506 : _=4
P_506_CreatePojoInstanceMethodFunction=method_._<«_‡,»>,⁇on failure do_
P_506_CreatePojoInstanceMethodFunction_0=aPojoType
P_506_CreatePojoInstanceMethodFunction_1=methodName
P_506_CreatePojoInstanceMethodFunction_2=parameterTypes
P_506_CreatePojoInstanceMethodFunction_3=failFunction
P_506_CreatePojoInstanceMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * instance method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. The receiver is specified as the first argument. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective method lookup and invocation, the following marshaling rules\n\
\ * are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The name of the desired method.\n\
\ *    {2} - The parameter types accepted by the desired method.\n\
\ *    {3} - The function to apply if an invocation of the method\n\
\ *       throws a Java exception.\n\
\ * Returns:\n\
\ *    The requested instance method invocation function.\n\
\ */\n
# 508 : _=4
P_508_CreatePojoStaticMethodFunction=static method_._<«_‡,»>,⁇on failure do_
P_508_CreatePojoStaticMethodFunction_0=aPojoType
P_508_CreatePojoStaticMethodFunction_1=methodName
P_508_CreatePojoStaticMethodFunction_2=parameterTypes
P_508_CreatePojoStaticMethodFunction_3=failFunction
P_508_CreatePojoStaticMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * static method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. To establish type conformance between Avail types and\n\
\ * Java types for the purpose of reflective method lookup and invocation, the\n\
\ * following marshaling rules are applied:\n\
\ *\n\
\ *    - `[-128..127]` is marshaled to Java byte (java.lang.Byte.TYPE).\n\
\ *    - `[-32768..32767]` is marshaled to Java short (java.lang.Short.TYPE).\n\
\ *    - `[-2^31..2^31-1]` is marshaled to Java int (java.lang.Integer.TYPE).\n\
\ *    - `[-2^63..2^63-1]` is marshaled to Java long (java.lang.Long.TYPE).\n\
\ *    - `boolean` is marshaled to Java boolean (java.lang.Boolean.TYPE).\n\
\ *    - `character` is marshaled to Java char (java.lang.Character.TYPE).\n\
\ *    - `float` is marshaled to Java float (java.lang.Float.TYPE).\n\
\ *    - `double` is marshaled to Java double (java.lang.Double.TYPE).\n\
\ *    - `string` is marshaled to java.lang.String.\n\
\ *    - `_[]` is marshaled to java.lang.reflect.Array.newInstance().getClass().\n\
\ *    - `_<«_‡,»>` is marshaled to the reflected Java class or interface.\n\
\ *    - All other values are marshaled to com.avail.descriptor.AvailObject.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo type.\n\
\ *    {1} - The name of the desired method.\n\
\ *    {2} - The parameter types accepted by the desired method.\n\
\ *    {3} - The function to apply if an invocation of the method\n\
\ *       throws a Java exception.\n\
\ * Returns:\n\
\ *    The requested static method invocation function.\n\
\ */\n
# 510 : _=2
P_510_CreatePojoArray=new_[_]
P_510_CreatePojoArray_0=elementType
P_510_CreatePojoArray_1=length
P_510_CreatePojoArray_comment=\
/**\n\
\ * Compute and answer a pojo array with the specified element type and length.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The element type.\n\
\ *    {1} - The number of elements.\n\
\ * Returns:\n\
\ *    A new pojo array that can store and answer `{1}` elements conforming\n\
\ *    to `{0}`.\n\
\ */\n
# 511 : _=1
P_511_PojoArrayLength=`|_`|
P_511_PojoArrayLength_0=anArray
P_511_PojoArrayLength_comment=\
/**\n\
\ * Answer the number of elements contained by the specified pojo array.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ * Returns:\n\
\ *    The size of the argument.\n\
\ */\n
# 512 : _=2
P_512_PojoArrayGet=_[_]
P_512_PojoArrayGet_0=anArray
P_512_PojoArrayGet_1=index
P_512_PojoArrayGet_comment=\
/**\n\
\ * Answer the `{1}`-th element of the specified pojo array.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ *    {1} - A one-based index into the pojo array.\n\
\ * Returns:\n\
\ *    The `{1}`-th element of `{0}`.\n\
\ */\n
# 513 : _=3
P_513_PojoArraySet=_[_]:=_
P_513_PojoArraySet_0=anArray
P_513_PojoArraySet_1=index
P_513_PojoArraySet_2=value
P_513_PojoArraySet_comment=\
/**\n\
\ * Mutate the specified pojo array such that its `{1}`-th element is\n\
\ * overwritten by `{2}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ *    {1} - A one-based index into the pojo array.\n\
\ *    {2} - The value that should be written into the pojo array.\n\
\ */\n
# 514 : _=1
P_514_PojoArrayTypeSizes=`|`|_`|`|
P_514_PojoArrayTypeSizes_0=pojoArrayType
P_514_PojoArrayTypeSizes_comment=\
/**\n\
\ * Answer the cardinality restriction of the specified pojo array type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array type.\n\
\ * Returns:\n\
\ *    The cardinality restriction of `{0}`.\n\
\ */\n
# 515 : _=1
P_515_PojoArrayTypeContentType=_'s⁇element type
P_515_PojoArrayTypeContentType_0=pojoArrayType
P_515_PojoArrayTypeContentType_comment=\
/**\n\
\ * Answer the element type of the specified pojo array type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array type.\n\
\ * Returns:\n\
\ *    The element type of `{0}`.\n\
\ */\n
# 516 : _=1
P_516_CreateTupleFromPojoArray=_→tuple
P_516_CreateTupleFromPojoArray_0=aPojoArray
P_516_CreateTupleFromPojoArray_comment=\
/**\n\
\ * Construct and answer a tuple whose elements are sourced from the specified\n\
\ * pojo array.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A pojo array.\n\
\ * Returns:\n\
\ *    The requested tuple.\n\
\ */\n
# 550 : _=1
P_550_ServerSocketOpen=
P_550_ServerSocketOpen_0=
P_550_ServerSocketOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 551 : _=2
P_551_ServerSocketSetOption=
P_551_ServerSocketSetOption_0=
P_551_ServerSocketSetOption_1=
P_551_ServerSocketSetOption_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 552 : _=4
P_552_ServerSocketIPv4Bind=
P_552_ServerSocketIPv4Bind_0=
P_552_ServerSocketIPv4Bind_1=
P_552_ServerSocketIPv4Bind_2=
P_552_ServerSocketIPv4Bind_3=
P_552_ServerSocketIPv4Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ */\n
# 553 : _=4
P_553_ServerSocketIPv6Bind=
P_553_ServerSocketIPv6Bind_0=
P_553_ServerSocketIPv6Bind_1=
P_553_ServerSocketIPv6Bind_2=
P_553_ServerSocketIPv6Bind_3=
P_553_ServerSocketIPv6Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ */\n
# 554 : _=5
P_554_ServerSocketAccept=
P_554_ServerSocketAccept_0=
P_554_ServerSocketAccept_1=
P_554_ServerSocketAccept_2=
P_554_ServerSocketAccept_3=
P_554_ServerSocketAccept_4=
P_554_ServerSocketAccept_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 555 : _=1
P_555_ServerSocketAddress=
P_555_ServerSocketAddress_0=
P_555_ServerSocketAddress_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 556 : _=1
P_556_ServerSocketClose=
P_556_ServerSocketClose_0=
P_556_ServerSocketClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 557 : _=1
P_557_SocketOpen=
P_557_SocketOpen_0=
P_557_SocketOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 558 : _=2
P_558_SocketSetOption=
P_558_SocketSetOption_0=
P_558_SocketSetOption_1=
P_558_SocketSetOption_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ */\n
# 559 : _=3
P_559_SocketIPv4Bind=
P_559_SocketIPv4Bind_0=
P_559_SocketIPv4Bind_1=
P_559_SocketIPv4Bind_2=
P_559_SocketIPv4Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 560 : _=3
P_560_SocketIPv6Bind=
P_560_SocketIPv6Bind_0=
P_560_SocketIPv6Bind_1=
P_560_SocketIPv6Bind_2=
P_560_SocketIPv6Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ */\n
# 561 : _=6
P_561_SocketIPv4Connect=
P_561_SocketIPv4Connect_0=
P_561_SocketIPv4Connect_1=
P_561_SocketIPv4Connect_2=
P_561_SocketIPv4Connect_3=
P_561_SocketIPv4Connect_4=
P_561_SocketIPv4Connect_5=
P_561_SocketIPv4Connect_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ *    {5} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 562 : _=6
P_562_SocketIPv6Connect=
P_562_SocketIPv6Connect_0=
P_562_SocketIPv6Connect_1=
P_562_SocketIPv6Connect_2=
P_562_SocketIPv6Connect_3=
P_562_SocketIPv6Connect_4=
P_562_SocketIPv6Connect_5=
P_562_SocketIPv6Connect_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ *    {5} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 563 : _=1
P_563_SocketShutdownInput=
P_563_SocketShutdownInput_0=
P_563_SocketShutdownInput_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 564 : _=1
P_564_SocketShutdownOutput=
P_564_SocketShutdownOutput_0=
P_564_SocketShutdownOutput_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 565 : _=5
P_565_SocketRead=
P_565_SocketRead_0=
P_565_SocketRead_1=
P_565_SocketRead_2=
P_565_SocketRead_3=
P_565_SocketRead_4=
P_565_SocketRead_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 566 : _=5
P_566_SocketWrite=
P_566_SocketWrite_0=
P_566_SocketWrite_1=
P_566_SocketWrite_2=
P_566_SocketWrite_3=
P_566_SocketWrite_4=
P_566_SocketWrite_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ *    {1} -\n\
\ *    {2} -\n\
\ *    {3} -\n\
\ *    {4} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 567 : _=1
P_567_SocketLocalPeer=
P_567_SocketLocalPeer_0=
P_567_SocketLocalPeer_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 568 : _=1
P_568_SocketRemotePeer=
P_568_SocketRemotePeer_0=
P_568_SocketRemotePeer_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 569 : _=1
P_569_SocketClose=
P_569_SocketClose_0=
P_569_SocketClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ */\n
# 600 : _=0
P_600_CurrentFiber=current fiber
P_600_CurrentFiber_comment=\
/**\n\
\ * Answer the current fiber.\n\
\ *\n\
\ * Returns:\n\
\ *    The current fiber.\n\
\ */\n
# 601 : _=1
P_601_GetFiberPriority=_'s⁇priority
P_601_GetFiberPriority_0=aFiber
P_601_GetFiberPriority_comment=\
/**\n\
\ * Extract the priority of a fiber. A fiber with higher priority may receive a\n\
\ * larger share of the available CPU time than one with a low priority.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber from which to extract the priority.\n\
\ * Returns:\n\
\ *    A whole number representing the priority of the fiber.\n\
\ */\n
# 602 : _=2
P_602_SetFiberPriority=_'s⁇priority:=_
P_602_SetFiberPriority_0=aFiber
P_602_SetFiberPriority_1=priority
P_602_SetFiberPriority_comment=\
/**\n\
\ * Modify the priority of a fiber. A fiber with higher priority may receive a\n\
\ * larger share of the available CPU time than one with a low priority.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The fiber to prioritize.\n\
\ *    {1} - The new priority.\n\
\ */\n
# 603 : _=1
P_603_IsFiberVariable=_∈current fiber
P_603_IsFiberVariable_0=key
P_603_IsFiberVariable_comment=\
/**\n\
\ * Does the current fiber''s environment have a value bound to `{0}`? This\n\
\ * effectively ascertains whether a fiber-local variable exists for the\n\
\ * specified fiber.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose existence should be queried.\n\
\ * Returns:\n\
\ *    `true` if the current fiber binds a value to `{0}`, `false` otherwise.\n\
\ */\n
# 604 : _=1
P_604_LookupFiberVariable=current fiber[_]
P_604_LookupFiberVariable_0=key
P_604_LookupFiberVariable_comment=\
/**\n\
\ * Answer the value bound to `{0}` in the current fiber''s environment. Since\n\
\ * the fiber''s environment essentially contains fiber-local variables (i.e.\n\
\ * bindings from atoms to arbitrary values), this operation effectively reads a\n\
\ * fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose value should be obtained.\n\
\ * Returns:\n\
\ *    The value bound to `{0}` within the current fiber''s environment.\n\
\ */\n
# 605 : _=2
P_605_SetFiberVariable=current fiber[_]:=_
P_605_SetFiberVariable_0=key
P_605_SetFiberVariable_1=value
P_605_SetFiberVariable_comment=\
/**\n\
\ * Set the value bound to `{0}` in the current fiber''s environment,\n\
\ * overwriting any previous value. Since the fiber''s environment essentially\n\
\ * contains fiber-local variables (i.e. bindings from atoms to arbitrary\n\
\ * values), this operation effectively writes a fiber-local variable.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose value should be (over)written.\n\
\ *    {1} - The new value.\n\
\ */\n
# 606 : _=1
P_606_RemoveFiberVariable=Remove current fiber[_]
P_606_RemoveFiberVariable_0=key
P_606_RemoveFiberVariable_comment=\
/**\n\
\ * Remove the binding indicated by `{0}` from the current fiber''s\n\
\ * environment.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The key whose binding should be removed.\n\
\ */\n
# 607 : _=0
P_607_IsTerminationRequested=termination requested
P_607_IsTerminationRequested_comment=\
/**\n\
\ * Has termination of the current fiber been requested? Answer the current value\n\
\ * of the appropriate interrupt request flag and simultaneously clear it.\n\
\ *\n\
\ * Returns:\n\
\ *    `true` if termination of the current fiber has been requested, `false`\n\
\ *    otherwise.\n\
\ */\n
# 608 : _=1
P_608_RequestTermination=Request termination of_
P_608_RequestTermination_0=victim
P_608_RequestTermination_comment=\
/**\n\
\ * Request termination of the specified fiber, unparking the fiber at the same\n\
\ * time. Termination is consensual only; cooperation of the fiber is required to\n\
\ * affect actual termination.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
# 609 : _=0
P_609_TerminateCurrentFiber=Terminate current fiber
P_609_TerminateCurrentFiber_comment=\
/**\n\
\ * Terminate the current fiber.\n\
\ */\n
# 610 : _=0
P_610_ParkCurrentFiber=Park current fiber
P_610_ParkCurrentFiber_comment=\
/**\n\
\ * Attempt to acquire the permit associated with the current fiber. If the\n\
\ * permit is available, then consume it and return immediately. If the permit is\n\
\ * not available, then park the current fiber. A fiber suspended in this fashion\n\
\ * may be resumed only by calling `Unpark_`. A newly unparked fiber should\n\
\ * always recheck the basis for its having parked, to see if it should park\n\
\ * again. Low-level synchronization mechanisms may require the ability to\n\
\ * spuriously unpark in order to ensure correctness.\n\
\ */\n
# 611 : _=1
P_611_UnparkFiber=Unpark_
P_611_UnparkFiber_0=aFiber
P_611_UnparkFiber_comment=\
/**\n\
\ * Unpark the specified fiber. If the permit associated with the fiber is\n\
\ * available, then simply continue. If the permit is not available, then restore\n\
\ * the permit and schedule resumption of the fiber. A newly unparked fiber\n\
\ * should always recheck the basis for its having parked, to see if it should\n\
\ * park again. Low-level synchronization mechanisms may require the ability to\n\
\ * spuriously unpark in order to ensure correctness.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
# 612 : _=0
P_612_Yield=Yield current fiber
P_612_Yield_comment=\
/**\n\
\ * Yield the current fiber. That is, give up the fiber''s time slice so that\n\
\ * other processes of higher or equal priority may run.\n\
\ */\n
# 613 : _=1
P_613_FiberName=_'s⁇name
P_613_FiberName_0=aFiber
P_613_FiberName_comment=\
/**\n\
\ * Answer the name of the specified fiber.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ * Returns:\n\
\ *    The fiber''s name.\n\
\ */\n
# 614 : _=2
P_614_SetFiberName=_'s⁇name:=_
P_614_SetFiberName_0=aFiber
P_614_SetFiberName_1=name
P_614_SetFiberName_comment=\
/**\n\
\ * Set the name of the specified fiber.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ *    {1} - The fiber''s new name.\n\
\ */\n
# 615 : _=3
P_615_ForkOrphan=Invoke_with_,⁇forked at priority_
P_615_ForkOrphan_0=aFunction
P_615_ForkOrphan_1=arguments
P_615_ForkOrphan_2=priority
P_615_ForkOrphan_comment=\
/**\n\
\ * Fork a new fiber at the specified priority. The new fiber will invoke the\n\
\ * given function with the supplied arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ *    {1} - The arguments to the function.\n\
\ *    {2} - The priority of the new fiber.\n\
\ */\n
# 616 : _=3
P_616_Fork=invoke_with_,⁇forked at priority_
P_616_Fork_0=aFunction
P_616_Fork_1=arguments
P_616_Fork_2=priority
P_616_Fork_comment=\
/**\n\
\ * Fork a new fiber at the specified priority. The new fiber will invoke the\n\
\ * given function with the supplied arguments.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A function.\n\
\ *    {1} - The arguments to the function.\n\
\ *    {2} - The priority of the new fiber.\n\
\ * Returns:\n\
\ *    The new fiber.\n\
\ */\n
# 617 : _=1
P_617_AttemptJoinFiber=Attempt to join_
P_617_AttemptJoinFiber_0=aFiber
P_617_AttemptJoinFiber_comment=\
/**\n\
\ * Attempt to join the specified fiber. If the fiber has already terminated,\n\
\ * then return immediately; otherwise, arrange to unpark the current fiber when\n\
\ * the specified fiber terminates and park the current fiber.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ */\n
# 618 : _=1
P_618_HasTerminated=_has terminated
P_618_HasTerminated_0=aFiber
P_618_HasTerminated_comment=\
/**\n\
\ * Has the specified fiber terminated?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ * Returns:\n\
\ *    `true` if the fiber has terminated, `false` otherwise.\n\
\ */\n
# 619 : _=1
P_619_HasResult=_has result
P_619_HasResult_0=aFiber
P_619_HasResult_comment=\
/**\n\
\ * Does the specified fiber have a result ready?\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ * Returns:\n\
\ *    `true` if the fiber has terminated and produced a result, `false`\n\
\ *    otherwise.\n\
\ */\n
# 620 : _=1
P_620_FiberResult=_'s⁇result
P_620_FiberResult_0=aFiber
P_620_FiberResult_comment=\
/**\n\
\ * Answer the result of running the specified fiber to successful completion.\n\
\ * This method may only be called safely after an affirmative answer from\n\
\ * `_has result`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber.\n\
\ * Returns:\n\
\ *    The result yielded by the specified fiber. This is the value produced by\n\
\ *    the fiber''s outermost continuation, i.e., its base function.\n\
\ */\n
# 621 : _=1
P_621_Sleep=Sleep for_millisecond|milliseconds
P_621_Sleep_0=delayMillis
P_621_Sleep_comment=\
/**\n\
\ * Cause the current fiber to sleep for the specified number of milliseconds.\n\
\ * The fiber will sleep for at least the specified amount of time, and a best\n\
\ * effort will be made to awaken the fiber as soon as the delay has expired.\n\
\ * No real-time guarantees are made.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minimum number of milliseconds to sleep.\n\
\ */\n
# 622 : _=4
P_622_DelayedForkOrphan=In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_
P_622_DelayedForkOrphan_0=delayMillis
P_622_DelayedForkOrphan_1=aFunction
P_622_DelayedForkOrphan_2=arguments
P_622_DelayedForkOrphan_3=priority
P_622_DelayedForkOrphan_comment=\
/**\n\
\ * When at least the specified number of milliseconds have elapsed, fork a new\n\
\ * fiber at the specified priority. The new fiber will invoke the given function\n\
\ * with the supplied arguments. A best effort will be made to start the fiber as\n\
\ * soon as the delay has expired, but no real-time guarantees are made.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minimum number of milliseconds to delay the start of the new\n\
\ *       fiber.\n\
\ *    {1} - A function.\n\
\ *    {2} - The arguments to the function.\n\
\ *    {3} - The priority of the new fiber.\n\
\ */\n
# 623 : _=4
P_623_DelayedFork=in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_
P_623_DelayedFork_0=delayMillis
P_623_DelayedFork_1=aFunction
P_623_DelayedFork_2=arguments
P_623_DelayedFork_3=priority
P_623_DelayedFork_comment=\
/**\n\
\ * When at least the specified number of milliseconds have elapsed, fork a new\n\
\ * fiber at the specified priority. The new fiber will invoke the given function\n\
\ * with the supplied arguments. A best effort will be made to start the fiber as\n\
\ * soon as the delay has expired, but no real-time guarantees are made.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The minimum number of milliseconds to delay the start of the new\n\
\ *       fiber.\n\
\ *    {1} - A function.\n\
\ *    {2} - The arguments to the function.\n\
\ *    {3} - The priority of the new fiber.\n\
\ * Returns:\n\
\ *    The new fiber.\n\
\ */\n
# 624 : _=1
P_624_CreateFiberHeritableAtom=new⁇heritable«fiber-local»⁇atom named_
P_624_CreateFiberHeritableAtom_0=debugName
P_624_CreateFiberHeritableAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal. When this atom occurs as a key within a fiber''s environment, any new\n\
\ * fibers created by this fiber will also include this key and the associated\n\
\ * value at creation time.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A name to associate with the atom for debugging purposes.\n\
\ *       This name does not participate in atom comparison.\n\
\ * Returns:\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive, that represents a heritable fiber-local\n\
\ *    variable.\n\
\ */\n
# 625 : _=0
P_625_IsApplyingSemanticRestriction=current fiber is applying a semantic restriction
P_625_IsApplyingSemanticRestriction_comment=\
/**\n\
\ * Ascertain whether the current fiber was forked (by the compiler) in order to\n\
\ * evaluate a semantic restriction.\n\
\ *\n\
\ * Returns:\n\
\ *    `true` if the current fiber is applying a semantic restriction, `false`\n\
\ *    otherwise.\n\
\ */\n
# 626 : _=1
P_626_CreateFiberType=fiber→_
P_626_CreateFiberType_0=resultType
P_626_CreateFiberType_comment=\
/**\n\
\ * Construct and answer a fiber type whose result type is `{0}`.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A type.\n\
\ * Returns:\n\
\ *    The requested fiber type.\n\
\ */\n
# 627 : _=1
P_627_FiberTypeResultType=_'s⁇result type
P_627_FiberTypeResultType_0=fiberType
P_627_FiberTypeResultType_comment=\
/**\n\
\ * Answer the result type of the specified fiber type.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A fiber type.\n\
\ * Returns:\n\
\ *    The argument''s result type.\n\
\ */\n
# 628 : _=1
P_628_GetContinuationOfOtherFiber=
P_628_GetContinuationOfOtherFiber_0=
P_628_GetContinuationOfOtherFiber_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} -\n\
\ * Returns:\n\
\ *    TODO\n\
\ */\n
# 700 : _=3
P_700_TupleReplaceAtNAry=_«[_]»→_
P_700_TupleReplaceAtNAry_0=aTuple
P_700_TupleReplaceAtNAry_1=pathTuple
P_700_TupleReplaceAtNAry_2=newValue
P_700_TupleReplaceAtNAry_comment=\
/**\n\
\ * Replace the value with a new value in the tuple at the location indicated\n\
\ * by the path tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The target tuple.\n\
\ *    {1} - The tuple providing the path to follow to reach the location\n\
\ *				to be updated.\n\
\ *    {2} - The replacement value.\n\
\ * Returns:\n\
\ *    a new tuple with the new value installed at the proposed location.\n\
\ */\n
# 701 : _=3
P_701_MapReplacingNAryKey=_«[_]»→_
P_701_MapReplacingNAryKey_0=aMap
P_701_MapReplacingNAryKey_1=pathTuple
P_701_MapReplacingNAryKey_2=newValue
P_701_MapReplacingNAryKey_comment=\
/**\n\
\ * Replace the value at the location indicated by the path tuple of the target\n\
\ * map with the new value.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - The target map.\n\
\ *    {1} - The tuple providing the path to follow to reach the location\n\
\ *				to be updated.\n\
\ *    {2} - The replacement value.\n\
\ * Returns:\n\
\ *    a new map with the new value installed at the proposed location\n\
\ */\n
# 702 : _=1
P_702_ReverseTuple=_reversed
P_702_ReverseTuple_0=aTuple
P_702_ReverseTuple_comment=\
/**\n\
\ * Reverses the order of the given tuple.\n\
\ *\n\
\ * Parameters:\n\
\ *    {0} - A tuple\n\
\ * Returns:\n\
\ *    A tuple that is the reverse of the original tuple\n\
\ */\n
