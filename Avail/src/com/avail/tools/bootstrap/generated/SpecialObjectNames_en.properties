#
# SpecialObjectNames_en.properties
# Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.SpecialObjectNamesGenerator
# * Last Generated On: 2012.02.24 12:30:20.832 -0600
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# any
specialObject1=any
specialObject1_comment=
# boolean
specialObject2=boolean
specialObject2_comment=
# character
specialObject3=character
specialObject3_comment=
# [...]→⊤
specialObject4=function
specialObject4_comment=
# ([...]→⊤)'s type
specialObject5=function meta
specialObject5_comment=
# ¢[...]→⊤
specialObject6=function implementation
specialObject6_comment=
# & : <--(⊤)/(⊥)-->
specialObject7=variable
specialObject7_comment=
# (& : <--(⊤)/(⊥)-->)'s type
specialObject8=variable meta
specialObject8_comment=
# $[...]→⊥
specialObject9=continuation
specialObject9_comment=
# ($[...]→⊥)'s type
specialObject10=continuation meta
specialObject10_comment=
# atom
specialObject11=atom
specialObject11_comment=
# double
specialObject12=double
specialObject12_comment=
# [-∞..∞]
specialObject13=extended integer
specialObject13_comment=
# (false)'s type
specialObject14=false type
specialObject14_comment=
# float
specialObject15=float
specialObject15_comment=
# number
specialObject16=number
specialObject16_comment=
# (-∞..∞)
specialObject17=integer
specialObject17_comment=
# ([-∞..∞])'s type
specialObject18=extended integer meta
specialObject18_comment=
# (map)'s type
specialObject19=map meta
specialObject19_comment=
# meta
specialObject20=meta
specialObject20_comment=
# enum type of any
specialObject21=enumeration meta
specialObject21_comment=
# Unnamed object type
specialObject22=object
specialObject22_comment=
# (Unnamed object type)'s type
specialObject23=object meta
specialObject23_comment=
# (enum type of any)'s type
specialObject24=enumeration meta meta
specialObject24_comment=
# process
specialObject25=fiber
specialObject25_comment=
# set
specialObject26=set
specialObject26_comment=
# (set)'s type
specialObject27=set meta
specialObject27_comment=
# string
specialObject28=string
specialObject28_comment=
# ⊥
specialObject29=⊥
specialObject29_alphabetic=bottom
specialObject29_comment=
# (⊥)'s type
specialObject30=⊥meta
specialObject30_alphabetic=bottom meta
specialObject30_comment=
# (true)'s type
specialObject31=true type
specialObject31_comment=
# tuple
specialObject32=tuple
specialObject32_comment=
# (tuple)'s type
specialObject33=tuple meta
specialObject33_comment=
# type
specialObject34=type
specialObject34_comment=
# ⊤
specialObject35=⊤
specialObject35_alphabetic=top
specialObject35_comment=\
/**\n\
\ * The abstract root of the Avail type lattice, pronounced "top". When\n\
\ * appearing as the return type of a function type, it indicates that the\n\
\ * function is a procedure (i.e. it does not produce a value).\n\
\ *\n\
\ * Returns:\n\
\ *    The root type.\n\
\ */\n
# [0..∞)
specialObject36=whole number
specialObject36_comment=
# [1..∞)
specialObject37=natural number
specialObject37_comment=
# [0..1114111]
specialObject38=code point
specialObject38_comment=
# map
specialObject39=map
specialObject39_comment=
# message bundle
specialObject40=message bundle
specialObject40_comment=
# signature
specialObject41=signature
specialObject41_comment=
# abstract signature
specialObject42=abstract signature
specialObject42_comment=
# forward signature
specialObject43=forward signature
specialObject43_comment=
# method signature
specialObject44=method signature
specialObject44_comment=
# message bundle tree
specialObject45=message bundle tree
specialObject45_comment=
# method
specialObject46=method
specialObject46_comment=
# parse node→⊤
specialObject50=phrase
specialObject50_comment=
# expression node→⊤
specialObject52=expression
specialObject52_comment=
# assignment node→⊤
specialObject53=assignment
specialObject53_comment=
# block node→⊤
specialObject54=block
specialObject54_comment=
# literal node→⊤
specialObject55=literal
specialObject55_comment=
# reference node→⊤
specialObject56=variable reference
specialObject56_comment=
# send node→⊤
specialObject57=send
specialObject57_comment=
# super cast node→⊤
specialObject58=super cast
specialObject58_comment=
# tuple node→⊤
specialObject59=list
specialObject59_comment=
# variable use node→⊤
specialObject60=variable use
specialObject60_comment=
# declaration node→⊤
specialObject61=declaration
specialObject61_comment=
# argument node→⊤
specialObject62=argument
specialObject62_comment=
# label node→⊤
specialObject63=label
specialObject63_comment=
# local variable node→⊤
specialObject64=local variable
specialObject64_comment=
# local constant node→⊤
specialObject65=local constant
specialObject65_comment=
# module variable node→⊤
specialObject66=module variable
specialObject66_comment=
# module constant node→⊤
specialObject67=module constant
specialObject67_comment=
# primitive failure reason node→⊤
specialObject68=primitive failure reason
specialObject68_comment=
# true
specialObject70=true
specialObject70_comment=
# false
specialObject71=false
specialObject71_comment=
# <string…|>
specialObject72=tuple of string
specialObject72_comment=
# <type…|>
specialObject73=tuple of type
specialObject73_comment=
# <{string|}…|>
specialObject74=tuple of set of string
specialObject74_comment=
# {string|}
specialObject75=set of string
specialObject75_comment=
# [[1..∞)]→⊥
specialObject76=primitive failure function
specialObject76_comment=
# ∅
specialObject77=∅
specialObject77_alphabetic=empty set
specialObject77_comment=
# -∞
specialObject78=-∞
specialObject78_alphabetic=negative infinity
specialObject78_comment=
# ∞
specialObject79=∞
specialObject79_alphabetic=positive infinity
specialObject79_comment=
# java.lang.Object
specialObject80=pojo
specialObject80_comment=
# pojo ⊥
specialObject81=null
specialObject81_comment=
# null ∈ pojo ⊥
specialObject82=pojo⊥
specialObject82_alphabetic=pojo bottom
specialObject82_comment=
# (pojo self)'s type
specialObject83=pojo self type
specialObject83_comment=
# (java.lang.Object)'s type
specialObject84=pojo meta
specialObject84_comment=
# (any[])'s type
specialObject85=pojo array meta
specialObject85_comment=
# [...]→java.lang.Object
specialObject86=pojo constructor
specialObject86_comment=
# any[]
specialObject87=pojo array
specialObject87_comment=
# pojo self
specialObject88=pojo self
specialObject88_comment=
# java.lang.Throwable
specialObject89=pojo exception
specialObject89_comment=
# []→⊤
specialObject90=nullary procedure
specialObject90_comment=
# []→boolean
specialObject91=predicate function
specialObject91_comment=
# & : $[...]→⊥
specialObject92=continuation variable
specialObject92_comment=
# {atom→any|}
specialObject93=field map
specialObject93_comment=
# {atom→type|}
specialObject94=field type map
specialObject94_comment=
# <<any…|2>…|>
specialObject95=key-value tuple
specialObject95_alphabetic=key value tuple
specialObject95_comment=
# {}
specialObject96=empty map
specialObject96_comment=
# {any→any|1..∞}
specialObject97=non-empty map
specialObject97_alphabetic=non empty map
specialObject97_comment=
# ([0..∞))'s type
specialObject98=whole number meta
specialObject98_comment=
# {any|1..∞}
specialObject99=non-empty set
specialObject99_alphabetic=non empty set
specialObject99_comment=
# <tuple…|>
specialObject100=tuple of tuple
specialObject100_comment=
# [0..15]
specialObject101=nybble
specialObject101_comment=
# <[0..15]…|>
specialObject102=tuple of nybble
specialObject102_comment=
# [0..65535]
specialObject103=unsigned short
specialObject103_comment=
# <>
specialObject104=empty tuple
specialObject104_comment=
# [⊥]→⊤
specialObject105=unary procedure
specialObject105_comment=
# (0)'s type
specialObject106=type of zero
specialObject106_comment=
# [...]→type
specialObject107=semantic restriction function
specialObject107_comment=
# <[...]→type…|>
specialObject108=tuple of semantic restriction function
specialObject108_comment=
# [...]→parse node→⊤
specialObject109=macro function
specialObject109_comment=
# (2)'s type
specialObject110=type of two
specialObject110_comment=
# 2.718281828459045
specialObject111=Euler number
specialObject111_comment=
# (2.718281828459045)'s type
specialObject112=type of Euler number
specialObject112_comment=
# (parse node→⊤)'s type
specialObject113=phrase meta
specialObject113_comment=
# {atom|}
specialObject114=set of atom
specialObject114_comment=
# token
specialObject115=token
specialObject115_comment=
# literal token
specialObject116=literal token
specialObject116_comment=
