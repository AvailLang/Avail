#
# SpecialObjectNames_en.properties
# Copyright (c) 2011, Mark van Gulik.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.SpecialObjectNamesGenerator
# * Last Generated On: 2012.01.06 22:44:38.632 -0600
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# ANY
specialObject1=any
specialObject1_comment=
# boolean
specialObject2=boolean
specialObject2_comment=
# CHARACTER
specialObject3=character
specialObject3_comment=
# [...]→⊤
specialObject4=function
specialObject4_comment=
# ([...]→⊤)'s type
specialObject5=function meta
specialObject5_comment=
# ¢[...]→⊤
specialObject6=function implementation
specialObject6_comment=
# & : <--(⊤)/(⊥)-->
specialObject7=variable
specialObject7_comment=
# (& : <--(⊤)/(⊥)-->)'s type
specialObject8=variable meta
specialObject8_comment=
# $[...]→⊥
specialObject9=continuation
specialObject9_comment=
# ($[...]→⊥)'s type
specialObject10=continuation meta
specialObject10_comment=
# ATOM
specialObject11=atom
specialObject11_comment=
# DOUBLE
specialObject12=double
specialObject12_comment=
# [-∞..∞]
specialObject13=extended integer
specialObject13_comment=
# (false)'s type
specialObject14=false type
specialObject14_comment=
# FLOAT
specialObject15=float
specialObject15_comment=
# NUMBER
specialObject16=number
specialObject16_comment=
# (-∞..∞)
specialObject17=integer
specialObject17_comment=
# ([-∞..∞])'s type
specialObject18=extended integer meta
specialObject18_comment=
# (map [0..∞) from ANY to ANY)'s type
specialObject19=map meta
specialObject19_comment=
# META
specialObject20=meta
specialObject20_comment=
# enum type of ANY
specialObject21=enumeration meta
specialObject21_comment=
# Unnamed object type
specialObject22=object
specialObject22_comment=
# (Unnamed object type)'s type
specialObject23=object meta
specialObject23_comment=
# (enum type of ANY)'s type
specialObject24=enumeration meta meta
specialObject24_comment=
# PROCESS
specialObject25=fiber
specialObject25_comment=
# set of ANY
specialObject26=set
specialObject26_comment=
# (set of ANY)'s type
specialObject27=set meta
specialObject27_comment=
# string
specialObject28=string
specialObject28_comment=
# ⊥
specialObject29=⊥
specialObject29_alphabetic=bottom
specialObject29_comment=
# (⊥)'s type
specialObject30=⊥ meta
specialObject30_alphabetic=bottom meta
specialObject30_comment=
# (true)'s type
specialObject31=true type
specialObject31_comment=
# tuple
specialObject32=tuple
specialObject32_comment=
# (tuple)'s type
specialObject33=tuple meta
specialObject33_comment=
# TYPE
specialObject34=type
specialObject34_comment=
# ⊤
specialObject35=⊤
specialObject35_alphabetic=top
specialObject35_comment=\
/**\n\
\ * The abstract root of the Avail type lattice, pronounced "top". When\n\
\ * appearing as the return type of a function type, it indicates that the\n\
\ * function is a procedure (i.e. it does not produce a value).\n\
\ *\n\
\ * Returns:\n\
\ *    The root type.\n\
\ */\n
# [0..∞)
specialObject36=whole number
specialObject36_comment=
# [1..∞)
specialObject37=natural number
specialObject37_comment=
# [0..1114111]
specialObject38=code point
specialObject38_comment=
# map [0..∞) from ANY to ANY
specialObject39=map
specialObject39_comment=
# MESSAGE_BUNDLE
specialObject40=message bundle
specialObject40_comment=
# SIGNATURE
specialObject41=signature
specialObject41_comment=
# ABSTRACT_SIGNATURE
specialObject42=abstract signature
specialObject42_comment=
# FORWARD_SIGNATURE
specialObject43=forward signature
specialObject43_comment=
# METHOD_SIGNATURE
specialObject44=method signature
specialObject44_comment=
# MESSAGE_BUNDLE_TREE
specialObject45=message bundle tree
specialObject45_comment=
# METHOD
specialObject46=method
specialObject46_comment=
# PARSE_NODE(⊤)
specialObject50=parse node
specialObject50_comment=
# MARKER_NODE(⊤)
specialObject51=marker node
specialObject51_comment=
# EXPRESSION_NODE(⊤)
specialObject52=expression node
specialObject52_comment=
# ASSIGNMENT_NODE(⊤)
specialObject53=assignment node
specialObject53_comment=
# BLOCK_NODE(⊤)
specialObject54=block node
specialObject54_comment=
# LITERAL_NODE(⊤)
specialObject55=literal node
specialObject55_comment=
# REFERENCE_NODE(⊤)
specialObject56=reference node
specialObject56_comment=
# SEND_NODE(⊤)
specialObject57=send node
specialObject57_comment=
# SUPER_CAST_NODE(⊤)
specialObject58=super cast node
specialObject58_comment=
# TUPLE_NODE(⊤)
specialObject59=tuple node
specialObject59_comment=
# VARIABLE_USE_NODE(⊤)
specialObject60=variable use node
specialObject60_comment=
# DECLARATION_NODE(⊤)
specialObject61=declaration node
specialObject61_comment=
# ARGUMENT_NODE(⊤)
specialObject62=argument node
specialObject62_comment=
# LABEL_NODE(⊤)
specialObject63=label node
specialObject63_comment=
# LOCAL_VARIABLE_NODE(⊤)
specialObject64=local variable node
specialObject64_comment=
# LOCAL_CONSTANT_NODE(⊤)
specialObject65=local constant node
specialObject65_comment=
# MODULE_VARIABLE_NODE(⊤)
specialObject66=module variable node
specialObject66_comment=
# MODULE_CONSTANT_NODE(⊤)
specialObject67=module constant node
specialObject67_comment=
# PRIMITIVE_FAILURE_REASON_NODE(⊤)
specialObject68=primitive failure reason node
specialObject68_comment=
# true
specialObject70=true
specialObject70_comment=
# false
specialObject71=false
specialObject71_comment=
# tuple of string
specialObject72=tuple of string
specialObject72_comment=
# tuple of TYPE
specialObject73=tuple of type
specialObject73_comment=
# tuple of set of string
specialObject74=tuple of set of string
specialObject74_comment=
# set of string
specialObject75=set of string
specialObject75_comment=
# [[1..∞)]→⊥
specialObject76=primitive failure function
specialObject76_comment=
# ∅
specialObject77=∅
specialObject77_alphabetic=empty set
specialObject77_comment=
# -∞
specialObject78=-∞
specialObject78_alphabetic=negative infinity
specialObject78_comment=
# ∞
specialObject79=∞
specialObject79_alphabetic=positive infinity
specialObject79_comment=
# java.lang.Object
specialObject80=pojo
specialObject80_comment=
# null
specialObject81=null
specialObject81_comment=
# null ∈ null
specialObject82=null type
specialObject82_comment=
# ($"self type"[1058836191])'s type
specialObject83=self type
specialObject83_comment=
# []→⊤
specialObject90=nullary procedure
specialObject90_comment=
# []→boolean
specialObject91=predicate function
specialObject91_comment=
# & : $[...]→⊥
specialObject92=continuation variable
specialObject92_comment=
# map [0..∞) from ATOM to ANY
specialObject93=field map
specialObject93_comment=
# map [0..∞) from ATOM to TYPE
specialObject94=field type map
specialObject94_comment=
# tuple of tuple like <ANY, ANY>
specialObject95=key-value tuple
specialObject95_alphabetic=key value tuple
specialObject95_comment=
# [→]
specialObject96=empty map
specialObject96_comment=
# map [1..∞) from ANY to ANY
specialObject97=non-empty map
specialObject97_alphabetic=non empty map
specialObject97_comment=
# ([0..∞))'s type
specialObject98=whole number meta
specialObject98_comment=
# set [1..∞) of ANY
specialObject99=non-empty set
specialObject99_comment=
# tuple of tuple
specialObject100=tuple of tuple
specialObject100_comment=
# [0..15]
specialObject101=nybble
specialObject101_comment=
# tuple of [0..15]
specialObject102=tuple of nybble
specialObject102_comment=
# [0..65535]
specialObject103=unsigned short
specialObject103_comment=
