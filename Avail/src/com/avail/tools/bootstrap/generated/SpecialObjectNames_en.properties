#
# SpecialObjectNames_en.properties
# Copyright (c) 2011, Mark van Gulik.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: com.avail.tools.bootstrap.SpecialObjectNamesGenerator
# * Last Generated On: 2011.12.22 19:18:02.052 -0600
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# ANY
specialObject1=any
# boolean
specialObject2=boolean
# CHARACTER
specialObject3=character
# [...]→⊤
specialObject4=function
# ([...]→⊤)'s type
specialObject5=function meta
# ¢[...]→⊤
specialObject6=compiled code
# & : <--(⊤)/(⊥)-->
specialObject7=variable
# (& : <--(⊤)/(⊥)-->)'s type
specialObject8=variable meta
# $[...]→⊥
specialObject9=continuation
# ($[...]→⊥)'s type
specialObject10=continuation meta
# ATOM
specialObject11=atom
# DOUBLE
specialObject12=double
# [-∞..∞]
specialObject13=extended integer
# (false)'s type
specialObject14=false type
# FLOAT
specialObject15=float
# NUMBER
specialObject16=number
# (-∞..∞)
specialObject17=integer
# ([-∞..∞])'s type
specialObject18=extended integer meta
# (map [0..∞) from ANY to ANY)'s type
specialObject19=map meta
# META
specialObject20=meta
# enum type of ANY
specialObject21=enumeration meta
# Unnamed object type
specialObject22=object
# (Unnamed object type)'s type
specialObject23=object meta
# PROCESS
specialObject25=fiber
# set of ANY
specialObject26=set
# (set of ANY)'s type
specialObject27=set meta
# string
specialObject28=string
# ⊥
specialObject29=⊥
specialObject29_alphabetic=bottom
# (⊥)'s type
specialObject30=⊥ meta
specialObject30_alphabetic=bottom meta
# (true)'s type
specialObject31=true type
# tuple
specialObject32=tuple
# (tuple)'s type
specialObject33=tuple meta
# TYPE
specialObject34=type
# ⊤
specialObject35=⊤
specialObject35_alphabetic=top
specialObject35_comment=\
/**\n\
\ * The abstract root of the Avail type lattice. Pronounced "top".\n\
\ *\n\
\ * Returns:\n\
\ *    The root type.\n\
\ */\n
# [0..∞)
specialObject36=whole number
# [1..∞)
specialObject37=natural number
# [0..1114111]
specialObject38=code point
# MESSAGE_BUNDLE
specialObject40=message bundle
# SIGNATURE
specialObject41=signature
# ABSTRACT_SIGNATURE
specialObject42=abstract signature
# FORWARD_SIGNATURE
specialObject43=forward signature
# METHOD_SIGNATURE
specialObject44=method signature
# MESSAGE_BUNDLE_TREE
specialObject45=message bundle tree
# IMPLEMENTATION_SET
specialObject46=implementation set
# PARSE_NODE(⊤)
specialObject50=parse node
# MARKER_NODE(⊤)
specialObject51=marker node
# EXPRESSION_NODE(⊤)
specialObject52=expression node
# ASSIGNMENT_NODE(⊤)
specialObject53=assignment node
# BLOCK_NODE(⊤)
specialObject54=block node
# LITERAL_NODE(⊤)
specialObject55=literal node
# REFERENCE_NODE(⊤)
specialObject56=reference node
# SEND_NODE(⊤)
specialObject57=send node
# SUPER_CAST_NODE(⊤)
specialObject58=super cast node
# TUPLE_NODE(⊤)
specialObject59=tuple node
# VARIABLE_USE_NODE(⊤)
specialObject60=variable use node
# DECLARATION_NODE(⊤)
specialObject61=declaration node
# ARGUMENT_NODE(⊤)
specialObject62=argument node
# LABEL_NODE(⊤)
specialObject63=label node
# LOCAL_VARIABLE_NODE(⊤)
specialObject64=local variable node
# LOCAL_CONSTANT_NODE(⊤)
specialObject65=local constant node
# MODULE_VARIABLE_NODE(⊤)
specialObject66=module variable node
# MODULE_CONSTANT_NODE(⊤)
specialObject67=module constant node
# PRIMITIVE_FAILURE_REASON_NODE(⊤)
specialObject68=primitive failure reason node
# true
specialObject70=true
# false
specialObject71=false
# tuple of string
specialObject72=tuple of string
# tuple of TYPE
specialObject73=tuple of type
# tuple of set of string
specialObject74=tuple of set of string
# set of string
specialObject75=set of string
# [[1..∞)]→⊥
specialObject76=primitive failure function
# -∞
specialObject78=-∞
specialObject78_alphabetic=negative infinity
# ∞
specialObject79=∞
specialObject79_alphabetic=positive infinity
# java.lang.Object
specialObject80=pojo
# null
specialObject81=null
# null ∈ null
specialObject82=null type
# ($"self type"[1939719248])'s type
specialObject83=self type
