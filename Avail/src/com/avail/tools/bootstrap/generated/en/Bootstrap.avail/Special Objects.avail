/*
 * Special Objects.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Versioned As: $$Revision$$
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

Module "Special Objects"
Versions
	"dev"
Extends
	"Origin"
Uses
Names
	/*  78 */ "-∞",
	/* 111 */ "Euler's number",
	/*  21 */ "VM error codes",
	/*  44 */ "abstract definition",
	/*   1 */ "any",
	/*  69 */ "any meta",
	/*  62 */ "argument phrase",
	/* 122 */ "argument tuple",
	/*  53 */ "assignment phrase",
	/*  11 */ "atom",
	/*  54 */ "block phrase",
	/*   2 */ "boolean",
	/* 129 */ "byte",
	/*   3 */ "character",
	/*  38 */ "code point",
	/*   9 */ "continuation",
	/*  10 */ "continuation meta",
	/*  92 */ "continuation variable",
	/*  61 */ "declaration phrase",
	/* 123 */ "declaration tuple",
	/*  43 */ "definition",
	/*  12 */ "double",
	/*  96 */ "empty map",
	/* 104 */ "empty tuple",
	/*  24 */ "exception",
	/*  52 */ "expression phrase",
	/* 126 */ "expression yielding any",
	/*  13 */ "extended integer",
	/*  18 */ "extended integer meta",
	/*  71 */ "false",
	/*  25 */ "fiber",
	/* 132 */ "fiber meta",
	/*  93 */ "field map",
	/* 120 */ "field tuple",
	/*  94 */ "field type map",
	/* 119 */ "field type tuple",
	/*  15 */ "float",
	/*  45 */ "forward definition",
	/*   4 */ "function",
	/*   6 */ "function implementation",
	/*   5 */ "function meta",
	/*  17 */ "integer",
	/*  95 */ "key-value tuple",
	/*  63 */ "label phrase",
	/*  59 */ "list phrase",
	/*  55 */ "literal phrase",
	/* 116 */ "literal token",
	/*  58 */ "literal token meta",
	/*  65 */ "local constant phrase",
	/*  64 */ "local variable phrase",
	/*  47 */ "macro definition",
	/* 109 */ "macro function",
	/*  39 */ "map",
	/*  19 */ "map meta",
	/*  40 */ "message bundle",
	/*  41 */ "message bundle tree",
	/*  42 */ "method",
	/*  46 */ "method definition",
	/*  20 */ "module",
	/*  67 */ "module constant phrase",
	/*  66 */ "module variable phrase",
	/*  37 */ "natural number",
	/*  97 */ "non-empty map",
	/*  99 */ "non-empty set",
	/* 136 */ "nonempty set of atom",
	/* 135 */ "nonempty set of string",
	/* 133 */ "nonempty string",
	/* 137 */ "nonempty tuple",
	/* 118 */ "nonnegative extended integer",
	/*  31 */ "nontype",
	/*  82 */ "null",
	/*  90 */ "nullary procedure",
	/*  16 */ "number",
	/* 101 */ "nybble",
	/*  22 */ "object",
	/*  23 */ "object meta",
	/*  50 */ "phrase",
	/* 113 */ "phrase meta",
	/* 121 */ "phrase tuple",
	/*  80 */ "pojo",
	/*  87 */ "pojo array",
	/*  85 */ "pojo array meta",
	/*  86 */ "pojo constructor",
	/*  89 */ "pojo exception",
	/* 127 */ "pojo failure function",
	/*  84 */ "pojo meta",
	/*  88 */ "pojo self",
	/*  83 */ "pojo self type",
	/*  81 */ "pojo⊥",
	/*  91 */ "predicate function",
	/*  76 */ "primitive failure function",
	/*  68 */ "primitive failure reason phrase",
	/* 131 */ "readable extended integer variable",
	/* 107 */ "semantic restriction function",
	/*  57 */ "send phrase",
	/*  51 */ "sequence phrase",
	/*  26 */ "set",
	/*  27 */ "set meta",
	/* 114 */ "set of atom",
	/* 134 */ "set of exception",
	/*  75 */ "set of string",
	/*  28 */ "string",
	/* 115 */ "token",
	/*  70 */ "true",
	/*  32 */ "tuple",
	/*  33 */ "tuple meta",
	/* 117 */ "tuple of any meta",
	/* 125 */ "tuple of expressions yielding any",
	/*  48 */ "tuple of functions",
	/* 138 */ "tuple of integer",
	/* 102 */ "tuple of nybble",
	/* 108 */ "tuple of semantic restriction function",
	/* 128 */ "tuple of set of atom",
	/*  74 */ "tuple of set of string",
	/*  72 */ "tuple of string",
	/* 100 */ "tuple of tuple",
	/* 130 */ "tuple of tuple of any meta",
	/*  73 */ "tuple of type",
	/* 139 */ "two or more tuple",
	/*  34 */ "type",
	/* 112 */ "type of Euler number",
	/*  14 */ "type of tuple of type of any",
	/* 110 */ "type of two",
	/* 106 */ "type of zero",
	/* 105 */ "unary procedure",
	/* 103 */ "unsigned short",
	/*   7 */ "variable",
	/*   8 */ "variable meta",
	/*  56 */ "variable reference phrase",
	/*  60 */ "variable use phrase",
	/*  36 */ "whole number",
	/*  98 */ "whole number meta",
	/* 124 */ "write-only expression variable",
	/*  77 */ "∅",
	/*  79 */ "∞",
	/*  35 */ "⊤",
	/*  29 */ "⊥",
	/*  30 */ "⊥meta"
Body

_any                                    ::= special object 1;
_boolean                                ::= special object 2;
_character                              ::= special object 3;
_function                               ::= special object 4;
_function_meta                          ::= special object 5;
_function_implementation                ::= special object 6;
_variable                               ::= special object 7;
_variable_meta                          ::= special object 8;
_continuation                           ::= special object 9;
_continuation_meta                      ::= special object 10;
_atom                                   ::= special object 11;
_double                                 ::= special object 12;
_extended_integer                       ::= special object 13;
_type_of_tuple_of_type_of_any           ::= special object 14;
_float                                  ::= special object 15;
_number                                 ::= special object 16;
_integer                                ::= special object 17;
_extended_integer_meta                  ::= special object 18;
_map_meta                               ::= special object 19;
_module                                 ::= special object 20;
_VM_error_codes                         ::= special object 21;
_object                                 ::= special object 22;
_object_meta                            ::= special object 23;
_exception                              ::= special object 24;
_fiber                                  ::= special object 25;
_set                                    ::= special object 26;
_set_meta                               ::= special object 27;
_string                                 ::= special object 28;
_bottom                                 ::= special object 29;
_bottom_meta                            ::= special object 30;
_nontype                                ::= special object 31;
_tuple                                  ::= special object 32;
_tuple_meta                             ::= special object 33;
_type                                   ::= special object 34;
_top                                    ::= special object 35;
_whole_number                           ::= special object 36;
_natural_number                         ::= special object 37;
_code_point                             ::= special object 38;
_map                                    ::= special object 39;
_message_bundle                         ::= special object 40;
_message_bundle_tree                    ::= special object 41;
_method                                 ::= special object 42;
_definition                             ::= special object 43;
_abstract_definition                    ::= special object 44;
_forward_definition                     ::= special object 45;
_method_definition                      ::= special object 46;
_macro_definition                       ::= special object 47;
_tuple_of_functions                     ::= special object 48;
_phrase                                 ::= special object 50;
_sequence_phrase                        ::= special object 51;
_expression_phrase                      ::= special object 52;
_assignment_phrase                      ::= special object 53;
_block_phrase                           ::= special object 54;
_literal_phrase                         ::= special object 55;
_variable_reference_phrase              ::= special object 56;
_send_phrase                            ::= special object 57;
_literal_token_meta                     ::= special object 58;
_list_phrase                            ::= special object 59;
_variable_use_phrase                    ::= special object 60;
_declaration_phrase                     ::= special object 61;
_argument_phrase                        ::= special object 62;
_label_phrase                           ::= special object 63;
_local_variable_phrase                  ::= special object 64;
_local_constant_phrase                  ::= special object 65;
_module_variable_phrase                 ::= special object 66;
_module_constant_phrase                 ::= special object 67;
_primitive_failure_reason_phrase        ::= special object 68;
_any_meta                               ::= special object 69;
_true                                   ::= special object 70;
_false                                  ::= special object 71;
_tuple_of_string                        ::= special object 72;
_tuple_of_type                          ::= special object 73;
_tuple_of_set_of_string                 ::= special object 74;
_set_of_string                          ::= special object 75;
_primitive_failure_function             ::= special object 76;
_empty_set                              ::= special object 77;
_negative_infinity                      ::= special object 78;
_positive_infinity                      ::= special object 79;
_pojo                                   ::= special object 80;
_pojo_bottom                            ::= special object 81;
_null                                   ::= special object 82;
_pojo_self_type                         ::= special object 83;
_pojo_meta                              ::= special object 84;
_pojo_array_meta                        ::= special object 85;
_pojo_constructor                       ::= special object 86;
_pojo_array                             ::= special object 87;
_pojo_self                              ::= special object 88;
_pojo_exception                         ::= special object 89;
_nullary_procedure                      ::= special object 90;
_predicate_function                     ::= special object 91;
_continuation_variable                  ::= special object 92;
_field_map                              ::= special object 93;
_field_type_map                         ::= special object 94;
_key_value_tuple                        ::= special object 95;
_empty_map                              ::= special object 96;
_non_empty_map                          ::= special object 97;
_whole_number_meta                      ::= special object 98;
_non_empty_set                          ::= special object 99;
_tuple_of_tuple                         ::= special object 100;
_nybble                                 ::= special object 101;
_tuple_of_nybble                        ::= special object 102;
_unsigned_short                         ::= special object 103;
_empty_tuple                            ::= special object 104;
_unary_procedure                        ::= special object 105;
_type_of_zero                           ::= special object 106;
_semantic_restriction_function          ::= special object 107;
_tuple_of_semantic_restriction_function ::= special object 108;
_macro_function                         ::= special object 109;
_type_of_two                            ::= special object 110;
_Euler_number                           ::= special object 111;
_type_of_Euler_number                   ::= special object 112;
_phrase_meta                            ::= special object 113;
_set_of_atom                            ::= special object 114;
_token                                  ::= special object 115;
_literal_token                          ::= special object 116;
_tuple_of_any_meta                      ::= special object 117;
_nonnegative_extended_integer           ::= special object 118;
_field_type_tuple                       ::= special object 119;
_field_tuple                            ::= special object 120;
_phrase_tuple                           ::= special object 121;
_argument_tuple                         ::= special object 122;
_declaration_tuple                      ::= special object 123;
_write_only_expression_variable         ::= special object 124;
_tuple_of_expressions_yielding_any      ::= special object 125;
_expression_yielding_any                ::= special object 126;
_pojo_failure_function                  ::= special object 127;
_tuple_of_set_of_atom                   ::= special object 128;
_byte                                   ::= special object 129;
_tuple_of_tuple_of_any_meta             ::= special object 130;
_readable_extended_integer_variable     ::= special object 131;
_fiber_meta                             ::= special object 132;
_nonempty_string                        ::= special object 133;
_set_of_exception                       ::= special object 134;
_nonempty_set_of_string                 ::= special object 135;
_nonempty_set_of_atom                   ::= special object 136;
_nonempty_tuple                         ::= special object 137;
_tuple_of_integer                       ::= special object 138;
_two_or_more_tuple                      ::= special object 139;

/**
 * The practical abstract root of the Avail type lattice. {@code "any"} is the
 * second most senior type, inferior only to {@method "⊤"}. It includes every
 * value available to an Avail program, i.e., every Avail value except for the
 * unexposed special value nil.
 *
 * {@code "any"} is made extremely useful by the interaction of polymorphism
 * and semantic restrictions. Many algorithms can be codified once in terms of
 * {@code "any"} and then strengthened via a semantic restriction that
 * extrapolates a stronger result subtype from the static input types.
 *
 * {@code "any"} is the most general type that may appear in the following
 * contexts:
 *
 * <ul>
 * <li>As a parameter type of a function type.</li>
 * <li>As the read type of a variable type.</li>
 * <li>As a leading type or the default type of a tuple type.</li>
 * <li>As the element type of a set type.</li>
 * <li>As the key type or value type of a map type.</li>
 * <li>As the field type of an object type.</li>
 * <li>As the type parameter of a pojo type.</li>
 * </ul>
 *
 * @category "Primitives" "Types"
 * @type "any"
 * @supertype "⊤"
 */
Primitive "any" is
[
	_any
];

/**
 * The enumeration of the special atoms {@method "true"} and {@method "false"}.
 * All primitive interrogatives use classical (Boolean) bivalence and obey the
 * three classical (Aristotelian) laws of thought.
 *
 * Bivalent logic assigns either {@method "true"} or {@method "false"} as the
 * unique truth value of every proposition. Every primitive interrogative, i.e.
 * {@method "boolean"}-valued primitive, stably answers either {@method
 * "true"} or {@method "false"} for a given set of arguments.
 *
 * The three classical laws of thought are:
 *
 * <ul>
 * <li><strong>The law of identity: P → P.</strong> For every primitive
 * interrogative {@code "prim_,_,_"}, then {@"prim A, B, C = prim A, B, C"}.
 * (All primitive interrogatives are stable.)</li>
 * <li><strong>The law of noncontradiction: ¬(P ∧ ¬P).</strong> For every
 * primitive interrogative {"@code "prim_,_,_"}, then {@method
 * "(prim A, B, C ∧ ¬prim A, B, C) = false"}.</li>
 * <li><strong>The law of excluded middle: P ∨ ¬P.</strong> For every primitive
 * interrogative {@code "prim_,_,_"}, then {@code
 * "((prim A, B, C = true) ∨ (prim A, B, C = false)) = true"}.</li>
 *
 * Therefore the primitive interrogatives satisfy classical logic.
 *
 * Note that values may be instances of many enumerations. This means that Avail
 * directly supports other logical systems, such as Kleene's three-valued logic
 * of indeterminacy, whose truth values are {@code "true"}, {@code "false"}, 
 * and {@code "unknown"}. Implementation of this system would proceed directly
 * from creation of an atom to represent {@code "unknown"} and the formation of
 * a new enumeration that contained the standard {@method "true"} and {@method
 * "false"} atoms and also the {@code "unknown"} atom. New logical operations
 * could then be written in terms of this new enumeration.
 *
 * @category "Primitives" "Types"
 * @type "boolean"
 * @supertype "atom"
 */
Primitive "boolean" is
[
	_boolean
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "character"
 * @supertype "nontype"
 */
Primitive "character" is
[
	_character
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function"
 * @supertype "[…]→⊤"
 */
Primitive "function" is
[
	_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function meta"
 * @supertype "[…]→⊤'s type"
 */
Primitive "function meta" is
[
	_function_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function implementation"
 * @supertype "¢[…]→⊤"
 */
Primitive "function implementation" is
[
	_function_implementation
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable"
 * @supertype "nontype"
 */
Primitive "variable" is
[
	_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable meta"
 * @supertype "nontypes type"
 */
Primitive "variable meta" is
[
	_variable_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation"
 * @supertype "$[…]→⊥"
 */
Primitive "continuation" is
[
	_continuation
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation meta"
 * @supertype "($[…]→⊥)'s type"
 */
Primitive "continuation meta" is
[
	_continuation_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "atom"
 * @supertype "nontype"
 */
Primitive "atom" is
[
	_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "double"
 * @supertype "number"
 */
Primitive "double" is
[
	_double
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "extended integer"
 * @supertype "[-∞..∞]"
 */
Primitive "extended integer" is
[
	_extended_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of tuple of type of any"
 * @supertype "<any's type…|>'s type"
 */
Primitive "type of tuple of type of any" is
[
	_type_of_tuple_of_type_of_any
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "float"
 * @supertype "number"
 */
Primitive "float" is
[
	_float
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "number"
 * @supertype "nontype"
 */
Primitive "number" is
[
	_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "integer"
 * @supertype "(-∞..∞)"
 */
Primitive "integer" is
[
	_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "extended integer meta"
 * @supertype "[-∞..∞]'s type"
 */
Primitive "extended integer meta" is
[
	_extended_integer_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "map meta"
 * @supertype "{any→any|}'s type"
 */
Primitive "map meta" is
[
	_map_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module"
 * @supertype "nontype"
 */
Primitive "module" is
[
	_module
];

/**
 * Answer a {@type "tuple"} containing all of the error codes well-known to
 * the Avail virtual machine.
 *
 * @category "Primitives" "Constants"
 * @method "VM error codes"
 * @returns "VM error codes's type"
 */
Primitive "VM error codes" is
[
	_VM_error_codes
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "object"
 * @supertype "nontype"
 */
Primitive "object" is
[
	_object
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "object meta"
 * @supertype "object's type"
 */
Primitive "object meta" is
[
	_object_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "exception"
 * @supertype "object"
 */
Primitive "exception" is
[
	_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "fiber"
 * @supertype "fiber→⊤"
 */
Primitive "fiber" is
[
	_fiber
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set"
 * @supertype "{any|}"
 */
Primitive "set" is
[
	_set
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set meta"
 * @supertype "{any|}'s type"
 */
Primitive "set meta" is
[
	_set_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "string"
 * @supertype "<any…|>"
 */
Primitive "string" is
[
	_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "⊥"
 * @supertype "⊥"
 */
Primitive "⊥" is
[
	_bottom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "⊥meta"
 * @supertype "⊥'s type"
 */
Primitive "⊥meta" is
[
	_bottom_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nontype"
 * @supertype "any"
 */
Primitive "nontype" is
[
	_nontype
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple"
 * @supertype "<any…|>"
 */
Primitive "tuple" is
[
	_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple meta"
 * @supertype "<any…|>'s type"
 */
Primitive "tuple meta" is
[
	_tuple_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type"
 * @supertype "⊤'s type"
 */
Primitive "type" is
[
	_type
];

/**
 * The true abstract root of the Avail type lattice. It is pronounced "top" and
 * written as the down tack (⊤) character. Every Avail value is an instance
 * of ⊤, and every Avail type is a subtype of ⊤.
 *
 * ⊤ is distinct from {@method "any"} in that it includes exactly one
 * additional value: the special value nil. This value does not satisfy any
 * public protocol and is not available to an Avail programmer. It is, however,
 * implicitly returned from every procedure, i.e., function whose return type is
 * ⊤. Thus nil is the value produced iff no value is produced. The virtual
 * machine uses nil to simplify several core algorithms, but exposure of nil to
 * an Avail programmer would not yield a net good.
 *
 * ⊤ typically appears in Avail code in only a few select contexts:
 *
 * <ul>
 * <li>As the return type of a function type. In this context, it signifies
 * that the function does not produce a value, i.e., it produces the unexposed
 * value nil.</li>
 * <li>As the return type of a continuation type. In this context, it signifies
 * that the continuation will not produce a value, i.e., it produces the
 * unexposed value nil.</li>
 * <li>As the read type of a variable type. In this context, it signifies that
 * no value may be read from the variable, i.e., the variable is write-only.
 * </li>
 * <li>As the idempotent initial value of an accumulator variable whose
 * intermediate and final results represent a chain of type intersections. (Note
 * that the type intersection of `⊤` with some type X is always X.)</li>
 * <li>As the result of a semantic restriction on a procedure that serves only
 * to reject parses based on the static types of the arguments (but does not
 * strengthen the return type).</li>
 * <li>As the result type of a phrase. In this context, it signifies that the
 * phrase serves as a statement (and not merely as an expression).</li>
 * </ul>
 *
 * A function whose declared return type is ⊤ is still permitted to answer an
 * actual (non-nil) value. This is consistent with the type lattice, since every
 * value is an instance of ⊤. It is useful, moreover, because a semantic
 * restriction may strengthen the return type of a ⊤-valued function at a
 * particular call site to a subtype of ⊤.
 *
 * ⊤ is expressly forbidden from occurring in most contexts, including the
 * following:
 *
 * <ul>
 * <li>As a parameter type of a function type.</li>
 * <li>As the write type of a variable type. This also implies that it cannot
 * be the type of an actual variable.</li>
 * <li>As a leading type or the default type of a tuple type.</li>
 * <li>As the element type of a set type.</li>
 * <li>As the key type or value type of a map type.</li>
 * <li>As the field type of an object type.</li>
 * <li>As the type parameter of a pojo type.</li>
 * </ul>
 *
 * Note that these prohibitions, when considered in aggregate, negate any
 * possible value that could be gleaned from exposing the special value nil to
 * an Avail program. They conspire together to ensure that nil could never be
 * retained by an Avail value. It may therefore only exist as a temporary within
 * a continuation, i.e., an item on the local stack of a function call. A
 * reflective query of a continuation's temporaries that would answer nil will
 * instead produce a variable whose read type is {@method "⊥"}.
 *
 * @category "Primitives" "Types"
 * @type "⊤"
 */
Primitive "⊤" is
[
	_top
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "whole number"
 * @supertype "[0..∞)"
 */
Primitive "whole number" is
[
	_whole_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "natural number"
 * @supertype "[1..∞)"
 */
Primitive "natural number" is
[
	_natural_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "code point"
 * @supertype "[0..1114111]"
 */
Primitive "code point" is
[
	_code_point
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "map"
 * @supertype "{any→any|}"
 */
Primitive "map" is
[
	_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "message bundle"
 * @supertype "nontype"
 */
Primitive "message bundle" is
[
	_message_bundle
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "message bundle tree"
 * @supertype "nontype"
 */
Primitive "message bundle tree" is
[
	_message_bundle_tree
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "method"
 * @supertype "nontype"
 */
Primitive "method" is
[
	_method
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "definition"
 * @supertype "type"
 */
Primitive "definition" is
[
	_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "abstract definition"
 * @supertype "definition"
 */
Primitive "abstract definition" is
[
	_abstract_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "forward definition"
 * @supertype "definition"
 */
Primitive "forward definition" is
[
	_forward_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "method definition"
 * @supertype "definition"
 */
Primitive "method definition" is
[
	_method_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "macro definition"
 * @supertype "definition"
 */
Primitive "macro definition" is
[
	_macro_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of functions"
 * @supertype "<[…]→⊤…|>"
 */
Primitive "tuple of functions" is
[
	_tuple_of_functions
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase"
 * @supertype "phrase⇒⊤"
 */
Primitive "phrase" is
[
	_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "sequence phrase"
 * @supertype "sequence phrase⇒⊤"
 */
Primitive "sequence phrase" is
[
	_sequence_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "expression phrase"
 * @supertype "expression phrase⇒⊤"
 */
Primitive "expression phrase" is
[
	_expression_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "assignment phrase"
 * @supertype "assignment phrase⇒⊤"
 */
Primitive "assignment phrase" is
[
	_assignment_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "block phrase"
 * @supertype "block phrase⇒[…]→⊤"
 */
Primitive "block phrase" is
[
	_block_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "literal phrase"
 * @supertype "literal phrase⇒any"
 */
Primitive "literal phrase" is
[
	_literal_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable reference phrase"
 * @supertype "reference phrase⇒variable"
 */
Primitive "variable reference phrase" is
[
	_variable_reference_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "send phrase"
 * @supertype "send phrase⇒⊤"
 */
Primitive "send phrase" is
[
	_send_phrase
];

/**
 * The type (meta) of the most general literal token type.
 */
Primitive "literal token meta" is
[
	_literal_token_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "list phrase"
 * @supertype "list phrase⇒tuple"
 */
Primitive "list phrase" is
[
	_list_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable use phrase"
 * @supertype "variable use phrase⇒any"
 */
Primitive "variable use phrase" is
[
	_variable_use_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "declaration phrase"
 * @supertype "declaration phrase⇒⊤"
 */
Primitive "declaration phrase" is
[
	_declaration_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "argument phrase"
 * @supertype "argument phrase⇒⊤"
 */
Primitive "argument phrase" is
[
	_argument_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "label phrase"
 * @supertype "label phrase⇒⊤"
 */
Primitive "label phrase" is
[
	_label_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "local variable phrase"
 * @supertype "local variable phrase⇒⊤"
 */
Primitive "local variable phrase" is
[
	_local_variable_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "local constant phrase"
 * @supertype "local constant phrase⇒⊤"
 */
Primitive "local constant phrase" is
[
	_local_constant_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module variable phrase"
 * @supertype "module variable phrase⇒⊤"
 */
Primitive "module variable phrase" is
[
	_module_variable_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module constant phrase"
 * @supertype "module constant phrase⇒⊤"
 */
Primitive "module constant phrase" is
[
	_module_constant_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "primitive failure reason phrase"
 * @supertype "primitive failure reason phrase⇒⊤"
 */
Primitive "primitive failure reason phrase" is
[
	_primitive_failure_reason_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "any meta"
 * @supertype "any's type"
 */
Primitive "any meta" is
[
	_any_meta
];

/**
 * The special atom that represents truth. {@method "true"} is an instance of
 * {@type "boolean"}.
 *
 * @category "Primitives" "Constants"
 * @method "true"
 * @type "true's type"
 */
Primitive "true" is
[
	_true
];

/**
 * The special atom that represents falsehood. {@method "false"} is an instance
 * of {@type "boolean"}.
 *
 * @category "Primitives" "Constants"
 * @method "false"
 * @type "false's type"
 */
Primitive "false" is
[
	_false
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of string"
 * @supertype "<string…|>"
 */
Primitive "tuple of string" is
[
	_tuple_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of type"
 * @supertype "<⊤'s type…|>"
 */
Primitive "tuple of type" is
[
	_tuple_of_type
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of set of string"
 * @supertype "<{string|}…|>"
 */
Primitive "tuple of set of string" is
[
	_tuple_of_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of string"
 * @supertype "{string|}"
 */
Primitive "set of string" is
[
	_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "primitive failure function"
 * @supertype "[[1..∞)]→⊥"
 */
Primitive "primitive failure function" is
[
	_primitive_failure_function
];

/**
 * Answer the empty {@type "set"}.
 *
 * @category "Primitives" "Constants"
 * @method "∅"
 * @returns "∅'s type"
 */
Primitive "∅" is
[
	_empty_set
];

/**
 * Answer negative infinity.
 *
 * @category "Primitives" "Constants"
 * @method "-∞"
 * @returns "-∞'s type"
 */
Primitive "-∞" is
[
	_negative_infinity
];

/**
 * Answer infinity.
 *
 * @category "Primitives" "Constants"
 * @method "∞"
 * @returns "∞'s type"
 */
Primitive "∞" is
[
	_positive_infinity
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo"
 * @supertype "java.lang.Object"
 */
Primitive "pojo" is
[
	_pojo
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo⊥"
 * @supertype "pojo ⊥"
 */
Primitive "pojo⊥" is
[
	_pojo_bottom
];

/**
 * Answer Java {@code "null"}.
 *
 * @category "Primitives" "Constants"
 * @method "null"
 * @returns "null's type"
 */
Primitive "null" is
[
	_null
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo self type"
 * @supertype "atom"
 */
Primitive "pojo self type" is
[
	_pojo_self_type
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo meta"
 * @supertype "java.lang.Object's type"
 */
Primitive "pojo meta" is
[
	_pojo_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo array meta"
 * @supertype "any[]'s type"
 */
Primitive "pojo array meta" is
[
	_pojo_array_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo constructor"
 * @supertype "[…]→java.lang.Object"
 */
Primitive "pojo constructor" is
[
	_pojo_constructor
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo array"
 * @supertype "any[]"
 */
Primitive "pojo array" is
[
	_pojo_array
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Constants"
 * @method "pojo self"
 * @returns "pojo self's type"
 */
Primitive "pojo self" is
[
	_pojo_self
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo exception"
 * @supertype "java.lang.Throwable"
 */
Primitive "pojo exception" is
[
	_pojo_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nullary procedure"
 * @supertype "[]→⊤"
 */
Primitive "nullary procedure" is
[
	_nullary_procedure
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "predicate function"
 * @supertype "[]→boolean"
 */
Primitive "predicate function" is
[
	_predicate_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation variable"
 * @supertype "↑$[…]→⊥"
 */
Primitive "continuation variable" is
[
	_continuation_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field map"
 * @supertype "{atom→any|}"
 */
Primitive "field map" is
[
	_field_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field type map"
 * @supertype "{atom→any's type|}"
 */
Primitive "field type map" is
[
	_field_type_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "key-value tuple"
 * @supertype "<<any…|2>…|>"
 */
Primitive "key-value tuple" is
[
	_key_value_tuple
];

/**
 * Answer the empty {@type "map"}.
 *
 * @category "Primitives" "Constants"
 * @method "empty map"
 * @returns "empty map's type"
 */
Primitive "empty map" is
[
	_empty_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "non-empty map"
 * @supertype "{any→any|1..∞}"
 */
Primitive "non-empty map" is
[
	_non_empty_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "whole number meta"
 * @supertype "[0..∞)'s type"
 */
Primitive "whole number meta" is
[
	_whole_number_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "non-empty set"
 * @supertype "{any|1..∞}"
 */
Primitive "non-empty set" is
[
	_non_empty_set
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of tuple"
 * @supertype "<tuple…|>"
 */
Primitive "tuple of tuple" is
[
	_tuple_of_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nybble"
 * @supertype "[0..15]"
 */
Primitive "nybble" is
[
	_nybble
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of nybble"
 * @supertype "<[0..15]…|>"
 */
Primitive "tuple of nybble" is
[
	_tuple_of_nybble
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "unsigned short"
 * @supertype "[0..65535]"
 */
Primitive "unsigned short" is
[
	_unsigned_short
];

/**
 * Answer the empty {@type "tuple"}.
 *
 * @category "Primitives" "Constants"
 * @method "empty tuple"
 * @returns "empty tuple's type"
 */
Primitive "empty tuple" is
[
	_empty_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "unary procedure"
 * @supertype "[⊥]→⊤"
 */
Primitive "unary procedure" is
[
	_unary_procedure
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of zero"
 * @supertype "0's type"
 */
Primitive "type of zero" is
[
	_type_of_zero
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "semantic restriction function"
 * @supertype "[…]→⊤'s type"
 */
Primitive "semantic restriction function" is
[
	_semantic_restriction_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of semantic restriction function"
 * @supertype "<[…]→⊤'s type…|>"
 */
Primitive "tuple of semantic restriction function" is
[
	_tuple_of_semantic_restriction_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "macro function"
 * @supertype "[…]→phrase⇒⊤"
 */
Primitive "macro function" is
[
	_macro_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of two"
 * @supertype "2's type"
 */
Primitive "type of two" is
[
	_type_of_two
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Constants"
 * @method "Euler's number"
 * @returns "2.718281828459045d's type"
 */
Primitive "Euler's number" is
[
	_Euler_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of Euler number"
 * @supertype "2.718281828459045d's type"
 */
Primitive "type of Euler number" is
[
	_type_of_Euler_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase meta"
 * @supertype "(phrase⇒⊤)'s type"
 */
Primitive "phrase meta" is
[
	_phrase_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of atom"
 * @supertype "{atom|}"
 */
Primitive "set of atom" is
[
	_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "token"
 * @supertype "nontype"
 */
Primitive "token" is
[
	_token
];

/**
 * The most general literal token type.
 */
Primitive "literal token" is
[
	_literal_token
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of any meta"
 * @supertype "<any's type…|>"
 */
Primitive "tuple of any meta" is
[
	_tuple_of_any_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonnegative extended integer"
 * @supertype "[0..∞]"
 */
Primitive "nonnegative extended integer" is
[
	_nonnegative_extended_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field type tuple"
 * @supertype "<<atom, any's type…|2>…|>"
 */
Primitive "field type tuple" is
[
	_field_type_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field tuple"
 * @supertype "<<atom, any…|2>…|>"
 */
Primitive "field tuple" is
[
	_field_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase tuple"
 * @supertype "<phrase⇒⊤…|>"
 */
Primitive "phrase tuple" is
[
	_phrase_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "argument tuple"
 * @supertype "<argument phrase⇒⊤…|>"
 */
Primitive "argument tuple" is
[
	_argument_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "declaration tuple"
 * @supertype "<declaration phrase⇒⊤…|>"
 */
Primitive "declaration tuple" is
[
	_declaration_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "write-only expression variable"
 * @supertype "variable"
 */
Primitive "write-only expression variable" is
[
	_write_only_expression_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of expressions yielding any"
 * @supertype "<expression phrase⇒any…|>"
 */
Primitive "tuple of expressions yielding any" is
[
	_tuple_of_expressions_yielding_any
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "expression yielding any"
 * @supertype "expression phrase⇒any"
 */
Primitive "expression yielding any" is
[
	_expression_yielding_any
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo failure function"
 * @supertype "[java.lang.Throwable]→⊥"
 */
Primitive "pojo failure function" is
[
	_pojo_failure_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of set of atom"
 * @supertype "<{atom|}…|>"
 */
Primitive "tuple of set of atom" is
[
	_tuple_of_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "byte"
 * @supertype "[0..255]"
 */
Primitive "byte" is
[
	_byte
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of tuple of any meta"
 * @supertype "<<any's type…|>…|>"
 */
Primitive "tuple of tuple of any meta" is
[
	_tuple_of_tuple_of_any_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "readable extended integer variable"
 * @supertype "↑<--([-∞..∞])/(⊥)-->"
 */
Primitive "readable extended integer variable" is
[
	_readable_extended_integer_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "fiber meta"
 * @supertype "(fiber→⊤)'s type"
 */
Primitive "fiber meta" is
[
	_fiber_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty string"
 * @supertype "<character…|1..∞>"
 */
Primitive "nonempty string" is
[
	_nonempty_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of exception"
 * @supertype "{exception|}"
 */
Primitive "set of exception" is
[
	_set_of_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty set of string"
 * @supertype "{string|1..∞}"
 */
Primitive "nonempty set of string" is
[
	_nonempty_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty set of atom"
 * @supertype "{atom|1..∞}"
 */
Primitive "nonempty set of atom" is
[
	_nonempty_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty tuple"
 * @supertype "<any…|1..∞>"
 */
Primitive "nonempty tuple" is
[
	_nonempty_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of integer"
 * @supertype "<(-∞..∞)…|>"
 */
Primitive "tuple of integer" is
[
	_tuple_of_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "two or more tuple"
 * @supertype "<any…|2..∞>"
 */
Primitive "two or more tuple" is
[
	_two_or_more_tuple
];

