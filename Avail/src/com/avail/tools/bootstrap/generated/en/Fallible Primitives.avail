/*
 * Fallible Primitives.avail
 * Copyright (c) 2011, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Generated On: 2011.12.20 17:16:42.499 -0600
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

System Module "Fallible Primitives"
Versions
	"dev"
Extends
	"Origin"
Uses
Names
	/*  10 */ "*_",
	/*  11 */ "*_:=_",
	/*  36 */ "_'s parameter_'s type",
	/*  26 */ "_'s process variable_",
	/*   1 */ "_+_",
	/*   2 */ "_-_",
	/*   3 */ "_×_",
	/*   4 */ "_÷_",
	/*  18 */ "eject_",
	/*  57 */ "exit_with_",
	/*  40 */ "invoke_with_",
	/*  58 */ "restart_",
	/*  56 */ "restart_with_",
	/*  23 */ "resume_",
	/*  22 */ "suspend_",
	/*  15 */ "swap_and_",
	/*  24 */ "terminate_"
Body

Method "Private fail primitive with_" is 
[
	arg1 : any
|
	Primitive 256;
] : ⊥;

_fail_primitive : primitive failure function :=
	[
		arg1 : any
	|
		Private fail primitive with arg1;
	] : ⊥;

Method "Private invoke_with«_‡,»" is 
[
	arg1 : function,
	arg2 : tuple
|
	Primitive 40 (failureCode : natural number);
	Private fail primitive with failureCode;
] : ⊥;

/**
 * Compute and answer the sum of the arguments.
 *
 * Parameters:
 *    augend - The augend.
 *    addend - The addend.
 * Returns:
 *    The sum of the augend and the addend.
 */
Method "_+_" is 
[
	augend : extended integer,
	addend : extended integer
|
	Primitive 1 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : extended integer;

Method "_-_" is 
[
	arg1 : extended integer,
	arg2 : extended integer
|
	Primitive 2 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : extended integer;

Method "_×_" is 
[
	arg1 : extended integer,
	arg2 : extended integer
|
	Primitive 3 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : extended integer;

Method "_÷_" is 
[
	arg1 : extended integer,
	arg2 : extended integer
|
	Primitive 4 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : extended integer;

Method "*_" is 
[
	arg1 : variable
|
	Primitive 10 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

Method "*_:=_" is 
[
	arg1 : variable,
	arg2 : any
|
	Primitive 11 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "swap_and_" is 
[
	arg1 : variable,
	arg2 : variable
|
	Primitive 15 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "eject_" is 
[
	arg1 : variable
|
	Primitive 18 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

Method "suspend_" is 
[
	arg1 : narrative
|
	Primitive 22 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "resume_" is 
[
	arg1 : narrative
|
	Primitive 23 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "terminate_" is 
[
	arg1 : narrative
|
	Primitive 24 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "_'s process variable_" is 
[
	arg1 : narrative,
	arg2 : atom
|
	Primitive 26 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

Method "_'s parameter_'s type" is 
[
	arg1 : function meta,
	arg2 : natural number
|
	Primitive 36 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : type;

Method "invoke_with_" is 
[
	arg1 : function,
	arg2 : tuple
|
	Primitive 40 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

Method "restart_with_" is 
[
	arg1 : continuation,
	arg2 : tuple
|
	Primitive 56 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

Method "exit_with_" is 
[
	arg1 : continuation,
	arg2 : any
|
	Primitive 57 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

Method "restart_" is 
[
	arg1 : continuation
|
	Primitive 58 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

