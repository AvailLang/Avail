/*
 * Fallible Primitives.avail
 * Copyright (c) 2011, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Generated On: 2011.12.28 22:02:52.957 -0600
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

System Module "Fallible Primitives"
Versions
	"dev"
Extends
	"Origin"
Uses
Names
	"Set primitive failure function to_",
	/*   1 */ "_+_",
	/*   2 */ "_-_",
	/*  36 */ "_[_]",
	/*   3 */ "_×_",
	/*   4 */ "_÷_",
	/*  18 */ "eject_",
	/*  57 */ "exit_with_",
	/*  40 */ "invoke_with_",
	/*  24 */ "request termination of_",
	/*  58 */ "restart_",
	/*  56 */ "restart_with_",
	/*  15 */ "swap_and_",
	/*  23 */ "termination requested",
	/*  10 */ "↓_",
	/*  11 */ "↓_:=_"
Body

Method "Private fail primitive with_" is 
[
	arg1 : any
|
	Primitive 256;
] : ⊥;

_fail_primitive : primitive failure function :=
	[
		arg1 : any
	|
		Private fail primitive with arg1;
	] : ⊥;

Method "Set primitive failure function to_" is 
[
	arg1 : primitive failure function
|
	_fail_primitive := arg1;
] : ⊤;

Method "Private invoke_with«_‡,»" is 
[
	aFunction : function,
	arguments : tuple
|
	Primitive 40 (failureCode : natural number);
	Private fail primitive with failureCode;
] : ⊥;

/**
 * Compute and answer the sum of the arguments.
 *
 * Parameters:
 *    augend - The augend.
 *    addend - The addend.
 * Returns:
 *    The sum of the augend and the addend.
 */
Method "_+_" is 
[
	augend : number,
	addend : number
|
	Primitive 1 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : number;

/**
 * Compute and answer the difference of the arguments.
 *
 * Parameters:
 *    minuend - The minuend.
 *    subtrahend - The subtrahend.
 * Returns:
 *    The difference of the minuend and the subtrahend.
 */
Method "_-_" is 
[
	minuend : number,
	subtrahend : number
|
	Primitive 2 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : number;

/**
 * Compute and answer the product of the arguments.
 *
 * Parameters:
 *    multiplicand - The multiplicand.
 *    multiplier - The multiplier.
 * Returns:
 *    The product of the multiplicand and the multiplier.
 */
Method "_×_" is 
[
	multiplicand : number,
	multiplier : number
|
	Primitive 3 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : number;

/**
 * Compute and answer the quotient of the arguments.
 *
 * Parameters:
 *    dividend - The dividend.
 *    divisor - The divisor.
 * Returns:
 *    The quotient of the dividend and the divisor.
 */
Method "_÷_" is 
[
	dividend : number,
	divisor : number
|
	Primitive 4 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : number;

/**
 * Answer the value contained within the specified variable.
 *
 * Parameters:
 *    var - A variable.
 * Returns:
 *    The value contained within the specified variable.
 */
Method "↓_" is 
[
	var : variable
|
	Primitive 10 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

/**
 * Store `value` into the specified variable.
 *
 * Parameters:
 *    var - A variable.
 *    value - The value that should be stored into `var`.
 */
Method "↓_:=_" is 
[
	var : variable,
	value : any
|
	Primitive 11 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

/**
 * Exchange the contents of the two variables. This is more efficient than
 * using an intermediate variable, and permits additional optimizations by the
 * virtual machine.
 *
 * Parameters:
 *    arg1 - A variable.
 *    arg2 - A variable.
 */
Method "swap_and_" is 
[
	arg1 : variable,
	arg2 : variable
|
	Primitive 15 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

/**
 * Eject and answer the contents of the specified variable. The variable is
 * in the unassigned state after the primitive completes.
 *
 * Parameters:
 *    var - A variable.
 * Returns:
 *    The value ejected from the variable.
 */
Method "eject_" is 
[
	var : variable
|
	Primitive 18 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

/**
 * Has termination of the current fiber been requested?
 *
 * Returns:
 *    `true` if termination of the current fiber has been requested, `false`
 *    otherwise.
 */
Method "termination requested" is 
[
	Primitive 23 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : boolean;

/**
 * Request termination of the specified fiber. Termination is consensual only;
 * cooperation of the fiber is required to affect termination.
 *
 * Parameters:
 *    victim - A fiber.
 */
Method "request termination of_" is 
[
	victim : fiber
|
	Primitive 24 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

/**
 * Answer the value bound to `key` in the specified fiber's environment. Since
 * the fiber's environment essentially contains fiber-local variables (i.e.
 * bindings from atoms to arbitrary values), this operation effectively reads a
 * fiber-local variable.
 *
 * Parameters:
 *    aFiber - The fiber whose environment should be consulted.
 *    key - The key whose value should be obtained.
 * Returns:
 *    The value bound to `key` within the fibers environment.
 */
Method "_[_]" is 
[
	aFiber : fiber,
	key : atom
|
	Primitive 26 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : any;

/**
 * Answer the `index`-th parameter type of the specified function type.
 *
 * Parameters:
 *    functionType - A function type.
 *    index - The one-based index of the desired parameter type.
 * Returns:
 *    The `index`-th parameter type of the argument.
 */
Method "_[_]" is 
[
	functionType : function meta,
	index : natural number
|
	Primitive 36 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : type;

/**
 * Invoke the function with the given arguments. Answer its result.
 *
 * Parameters:
 *    aFunction - A function.
 *    arguments - The tuple of arguments.
 * Returns:
 *    The value produced by applying the arguments to the function.
 */
Method "invoke_with_" is 
[
	aFunction : function,
	arguments : tuple
|
	Primitive 40 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊤;

/**
 * Restart the continuation with the specified arguments. Execution proceeds as
 * though the continuation's caller had just invoked the continuation's current
 * function with the given arguments instead of the original arguments. The
 * current continuation (in which this primitive was invoked) is completely
 * replaced by the restarted continuation.
 *
 * Parameters:
 *    aContinuation - The continuation to restart.
 *    arguments - The new arguments with which to restart `aContinuation`.
 */
Method "restart_with_" is 
[
	aContinuation : continuation,
	arguments : tuple
|
	Primitive 56 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

/**
 * Exit the continuation and answer the specified value to the continuation's
 * caller. Execution proceeds as though the continuation's had just returned
 * from its current function with the supplied value. The current continuation
 * (in which this primitive was invoked) is completely replaced by the specified
 * continuation's resumed caller.
 *
 * Parameters:
 *    aContinuation - The continuation to exit.
 *    value - The value with which to exit `aContinuation`.
 */
Method "exit_with_" is 
[
	aContinuation : continuation,
	value : any
|
	Primitive 57 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

/**
 * Restart the continuation with its original arguments. Execution proceeds as
 * though the continuation's caller had just invoked the continuation's current
 * function with its original arguments. The current continuation (in which
 * this primitive was invoked) is completely replaced by the restarted
 * continuation.
 *
 * Parameters:
 *    aContinuation - The continuation to restart.
 */
Method "restart_" is 
[
	aContinuation : continuation
|
	Primitive 58 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode;
] : ⊥;

