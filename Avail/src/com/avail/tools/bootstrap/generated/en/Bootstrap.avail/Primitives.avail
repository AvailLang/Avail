/*
 * Primitives.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Versioned As: $$Revision: 565 $$
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

System Module "Primitives"
Versions
	"dev"
Extends
Uses
	"Origin"
Names
	"$_",
	"$_@pc=_stack=_[_]caller=_",
	"<_,_`…`|_>",
	"Abstract method_is_",
	"Assert:_(_)",
	"Breakpoint",
	"Clear_",
	"Exit_with_",
	"Forward method_is_",
	"Grammatical restriction_is_",
	"If_then_",
	"If|if_then_else_",
	"Invoke|invoke_with_",
	"Macro_is_",
	"Print:_",
	"Publish new name:_",
	"Reject parse,expected:_",
	"Restart_",
	"Restart_with_",
	"Seal method_at_",
	"Semantic restriction_is_",
	"Terminate:_",
	"[`…]→_",
	"_'s⁇arguments",
	"_'s⁇arity",
	"_'s⁇atom",
	"_'s⁇bindings",
	"_'s⁇caller",
	"_'s⁇declaration",
	"_'s⁇declared exceptions",
	"_'s⁇declared type",
	"_'s⁇default type",
	"_'s⁇element type",
	"_'s⁇expressions",
	"_'s⁇function",
	"_'s⁇function type",
	"_'s⁇genuine lower bound",
	"_'s⁇genuine upper bound",
	"_'s⁇implementation",
	"_'s⁇instances",
	"_'s⁇issuing module",
	"_'s⁇key type",
	"_'s⁇keys",
	"_'s⁇leading types",
	"_'s⁇lexeme",
	"_'s⁇line number",
	"_'s⁇literals",
	"_'s⁇maximum stack depth",
	"_'s⁇method",
	"_'s⁇name",
	"_'s⁇name:=_",
	"_'s⁇names",
	"_'s⁇nybblecodes",
	"_'s⁇outer variables",
	"_'s⁇parameters'type",
	"_'s⁇primitive number",
	"_'s⁇priority",
	"_'s⁇program counter",
	"_'s⁇public names",
	"_'s⁇read type",
	"_'s⁇referent",
	"_'s⁇return type",
	"_'s⁇semantic type",
	"_'s⁇stack",
	"_'s⁇stack pointer",
	"_'s⁇starting position",
	"_'s⁇statements",
	"_'s⁇target",
	"_'s⁇token",
	"_'s⁇type",
	"_'s⁇value",
	"_'s⁇value type",
	"_'s⁇values",
	"_'s⁇write type",
	"_++_",
	"_+_",
	"_+_→_",
	"_-_",
	"_._→variable",
	"_<_",
	"_<«_‡,»>",
	"_=_",
	"_[_.._]",
	"_[_]",
	"_[_]:=_",
	"_[_]→_",
	"_\\_",
	"_^_",
	"_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)",
	"_bit∧_",
	"_bit∨_",
	"_bit⊕_",
	"_has implementation for_",
	"_is a primitive",
	"_is unassigned",
	"_mod_",
	"_×_",
	"_÷_",
	"_→character",
	"_→code point",
	"_→double",
	"_→extended integer",
	"_→float",
	"_→list",
	"_→map",
	"_→object",
	"_→object type",
	"_→set",
	"_→tuple",
	"_⇒_",
	"_∈_",
	"_∩_",
	"_∪_",
	"_≤_",
	"_⊆_",
	"_⨉_^_",
	"``_``(_)",
	"`|_'s⁇local variables`|",
	"`|_'s⁇outer variables`|",
	"`|_'s⁇parameters`|",
	"`|_`|",
	"`|`|_`|`|",
	"`|message_'s⁇parameters`|",
	"`«$_:_`»",
	"`«(_:=_)`»",
	"`«[_`|Primitive__]:_^_`»",
	"`«_::=_`»",
	"`«_:=_`»",
	"`«_:_:=_`»",
	"`«_:_`»",
	"`«↑_`»",
	"`«↓_`»(_)",
	"arg`«_:_`»",
	"atom for_",
	"concatenate_",
	"constructor_<«_‡,»>(fail with_)",
	"current fiber",
	"current module",
	"eject_",
	"enumeration of_",
	"function accepting_and returning_",
	"function from_and_",
	"generate_",
	"integer range from_(inclusive=_)to_(inclusive=_)",
	"literal token⇒_",
	"ln_",
	"mark for_character|characters of read ahead",
	"message_contains groups",
	"method exists named_",
	"method for_",
	"method site of_for_",
	"method_._(«_‡,»)(fail with_)",
	"milliseconds since the Epoch",
	"new atom_",
	"new_[_]",
	"new_applying_",
	"new↑_",
	"next character",
	"primfail`«_:_`»",
	"primitive description of_",
	"request termination of_",
	"reset to mark",
	"semantic restrictions for_given_",
	"send_with_:_",
	"seq`«_`»",
	"set_'s⁇priority to_",
	"special atoms",
	"static method_._(«_‡,»)(fail with_)",
	"swap_and_",
	"termination requested",
	"{_`|_}",
	"{_→_`|_}",
	"‘_’",
	"↑_",
	"↓_",
	"↓_`?=_",
	"↓_`?=_'s⁇initialization",
	"∪_",
	"∪_[_.._]",
	"⎡_⎤",
	"⎣_⎦"
Body

