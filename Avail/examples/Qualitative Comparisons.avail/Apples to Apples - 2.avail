/*
 * Apples to Apples - 2.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Apples to Apples - 2"
Versions
	"dev"
Uses
	"Avail"
Body

/*
 * Pardon the awful formatting. This example is for use with the PLDI '13 paper,
 * "The new frontier of generic programming", which has strict limits on paper
 * length.
 */

Abstract method "_is better than_" is [any, any]→boolean;

Explicit class "fruit" extends object;
"goodness" is a new field atom;
Class "apple" extends fruit with fields
	goodness : whole number;
Class "orange" extends fruit with fields
	goodness : string;

Method "_is better than_" is [a : apple, b : apple |
	a's goodness > b's goodness
];
Method "_is better than_" is [a : orange, b : orange |
	|a's goodness| > |b's goodness|
];
Method "_is better than_" is [a : apple, b : orange |
	a's goodness > |b's goodness|
];
Method "_is better than_" is [a : orange, b : apple |
	|a's goodness| > b's goodness
];

Method "best of_and_" is [a : any, b : any |
	if a is better than b then [a] else [b]
] : any;
Seal method "best of_and_" at [any, any]→any;

betterM ::= method for "_is better than_";
Semantic restriction "best of_and_" is
[a : any's type, b : any's type |
	Unless betterM is concrete at <a, b> then
	[
		Reject parse, expected:
			format
				"type-safe usage (but instances of \
				\|“①” and “②” are not comparable)"
			with a, b
	];
	if |a| = |b| = 1
	then [(best of a's instance and b's instance)'s type]
	else [a ∪ b]
];

a ::= an apple with goodness := 5;
b ::= an orange with goodness := "foolish";
tastiest : b's type := best of a and b;
