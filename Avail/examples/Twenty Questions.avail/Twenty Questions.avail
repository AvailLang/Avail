/*
 * Twenty Questions.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Twenty Questions"
Extends
Uses
	"Avail"
Names
	"Play Twenty Questions with input_and output_"
Body

"str" is a new field atom;
"yes" is a new field atom;
"no" is a new field atom;

/**
 * A node class that contains a string, which is either a question or a guess.
 *
 * @type "node"
 */
Explicit class "node" extends object
	with fields
		str : string;

/**
 * A question class, which is a subtype of node, that has two child nodes -- one
 * for the response "no" and one for "yes".
 *
 * @type "question"
 * @subtype "node"
 */
Class "question" extends node
	with mutable fields
		yes : node,
		no : node;

root ::= a node with str ::= "Avail";

/**
 * Play a single game of Twenty Questions using the specified input and output
 * blocks to handle communication.
 *
 * @method "Play Twenty Questions with input_and output_"
 * @param "input" "[]→string"
 *        A block that can be invoked to provide a single response to the game.
 * @param "output" "[string]→⊤"
 *        A block that can be invoked with a response from the game.
 * @see {@link "http://en.wikipedia.org/wiki/Twenty_Questions"}
 */
Method "Play Twenty Questions with input_and output_" is
[
	input : []→string,
	output : [string]→⊤
|
	count : integer := 0;
	response : string;
	curNode : node := root;
	While [count ≤ 20 ∧ [curNode's type ⊆ question]]
	do
	[
		↑count++;
		output(curNode's str);
		response := input();
		If response ∈ {"n", "no"} then
		[
			curNode := (cast curNode into [q : question | q])'s no;
		]
		else if [response ∈ {"y", "yes"}] then
		[
			curNode := (cast curNode into [q : question | q])'s yes;];
		];
	output(format "Is it ‘①’? " with curNode's str);
	response := input();
	answer : string;
	If response ∈ {"y", "yes"} then [output("Yay!\n");]
	else if [response ∈ {"n", "no"}] then
	[
		output("I give up. What was it? ");
		answer := input();
		output(
			format "Okay. What is a question to distinguish it from ‘①’? "
			with curNode's str);
		response := input();
		curNode := a question with
			str ::= response,
			no := curNode,
			yes := a node with str ::= answer;
	];
];

/**
 * Play a single game of twenty questions, using the console for input/output.
 * 
 * @method "Play Twenty Questions in the console"
 */
Method "Play Twenty Questions in the console" is
[
	Play Twenty Questions with
		input [next line]
		and output [str : string | Print: str;];
];
