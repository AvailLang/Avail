/**
 * C-tokens.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "C-tokens"
Extends
Uses
	"Kernel"
Names
	"Token"
Body

"Token" is explicit subtype of Object;
"Keyword Token" is explicit subtype of Token;

/**
 * Sanitize a C name into an Avail name.  In particular, replace each "_" with "underscore".
*/
Method "sanitize_" is [str : string |
	splice
		str collect [c : character |
			if c = $"_" then ["underscore";] else [<c>;];];
] : string;

/**
 * Create a new type, instance constructor, and string conversion method for the specified C keyword.
 *
 * For example:
 * 	declare keyword token "for";
 *
 * Is equivalent to the following:
 *	"Keyword Token 'for'" is explicit subtype of Keyword Token;
 *	Method "_as string" is [ tokenType : Keyword Token 'for' |
 *		"for";
 *	];
 */
Method "Declare keyword token_" is [ lexeme : string |
	keywordTokenTypeName ::= "Keyword Token'" then lexeme then "'";
	keywordTokenType ::= explicit subtype of Keyword Token with [->] named keywordTokenTypeName;

	Method sanitize keywordTokenTypeName is [
		keywordTokenType;
	] : objectType
	returns [
		keywordTokenType type;
	];

	asStringBody ::= stub block
		taking <keywordTokenType>
		and applying name of block invoker
		to [ args : tuple | lexeme; ]
		and argument tuple returning string;

	Method "_as string" is asStringBody;
] : void;

c89Keywords ::= {
	"auto",
	"break",
	"case",
	"char",
	"const",
	"continue",
	"default",
	"do",
	"double",
	"else",
	"enum",
	"extern",
	"float",
	"for",
	"goto",
	"if",
	"int",
	"long",
	"register",
	"return",
	"short",
	"signed",
	"sizeof",
	"static",
	"struct",
	"switch",
	"typedef",
	"union",
	"unsigned",
	"void",
	"volatile",
	"while"
};

c99NewKeywords ::= {
	"_Bool",
	"_Complex",
	"_Imaginary",
	"inline",
	"restrict"
};

cKeywords ::= c89Keywords union c99NewKeywords;

cKeywords do [ lexeme : string |
	Declare keyword token lexeme;
];