/*
 * Origin.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Experimental Module "Origin"
Pragma
	"method=253=Primitive_is_",
	"method=240=special object_",

	/* Block declaration consists of
	 * 1. Open square bracket ("[").
	 * 2. Optional comma-separated argument declarations followed by a vertical
	 *    bar (if any declarations occurred).  Each argument declaration invokes
	 *    the first prefix function to build the declaration and add it to the
	 *    scope.  Although the declaration nodes are created here, we can't
	 *    substitute these alternative parse nodes for what was actually parsed,
	 *    the argument names and types.  Therefore when a subsequent prefix
	 *    function needs the list of argument declarations it must look them up
	 *    in the current scope by the argument names that were captured.
	 * 3. Optional primitive declaration.  After the primitive number, there is
	 *    an optional parenthesized declaration of a primitive failure variable.
	 *    If the primitive failure variable occurs (which must only be the
	 *    case for fallible primitives), a prefix function is invoked to create
	 *    the actual primitive failure variable from the name token and type.
	 *    Like the arguments, the actual declaration enters scope but is not
	 *    directly retained as a substitute for the parsed argument; the
	 *    primitive failure variable's name can be looked up in the current
	 *    scope to retrieve this declaration.
	 * 4. Optional label declaration with a leading "$".  The prefix function
	 *    invoked here looks up the previously constructed block arguments to
	 *    determine their types for use in the label's continuation type.
	 * 5. Zero or more statements.  A prefix function runs here to detect any
	 *    variable or constant declarations and automatically add them to the
	 *    current scope.  The statements include their own trailing semicolon.
	 * 6. Optional final value-yielding expression (type any).
	 * 7. Close square bracket ("]").
	 * 8. Optional block return type declaration, with leading ":".
	 * 9. Optional exception declaration with one or more comma-separated
	 *    exceptions with leading "^".
	 */
	"macro=400,401,402,403,404=\
		\|[\
			\|««…:_†§‡,»`|»\
			\|«Primitive_«(…:_†)§»;»\
			\|«$…:_†§»\
			\|«_§»\
			\|«_»\
		\|]\
		\|«:_†»\
		\|«^«_†‡,»»",
	"macro=405=…:_†;",     /* variable declaration */
	"macro=406=…::=_;",    /* constant declaration */
	"macro=407=…:_†:=_;",  /* initializing variable declaration */
	"macro=408=_:=_;",     /* assignment */
	"macro=409=↑_",        /* variable reference */
	"macro=410=…",         /* variable use */
	"macro=411=_;",        /* send as statement */
	"macro=412=(_::_†)"    /* super-cast */

Versions
Extends
Uses
Names
	"Primitive_is_",
	"special object_",
	
	"\
		\|[\
			\|««…:_†§‡,»`|»\
			\|«Primitive_«(…:_†)§»;»\
			\|«$…:_†§»\
			\|«_§»\
			\|«_»\
		\|]\
		\|«:_†»\
		\|«^«_†‡,»»",
	"…:_†;",     /* variable declaration */
	"…::=_;",    /* constant declaration */
	"…:_†:=_;",  /* initializing variable declaration */
	"_:=_;",     /* assignment */
	"↑_",        /* variable reference */
	"…",         /* variable use */
	"_;"         /* send as statement */

Body
