/**
 * Library-pointer.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Library-pointer"
Extends
Uses
	"Kernel"
Names
	"Pointer"
Body


/* I define mechanisms for traversing raw pointers */

privateAddress ::= lookup "address";
privateType ::= lookup "type";

"Pointer" is explicit subtype of Object with
	[privateAddress->[0..INF)]
	[privateType->type];


Method "Pointer to_" is [
		targetType : type |
	Pointer new with <
		<privateAddress, ↑privateAddress


	nybs : tuple of nybble := <>;
	Nybblecode Generator new with <
		<nybbles, ↑nybs>,
		<resultType, [Crash "Don't call";] : tuple of nybble>
	>;
] returns [ttT : meta |
	Pointer type;
];




Method "private read integer of type_from address_" is [
		intType : integerType,
		addr : integer |
	Primitive 264 (failureCode : natural number);
	Failed
] : integer
requires [intTypeT : type, addrT : integerType |
	addrT lower bound is finite
		& addrT upper bound is finite;
]
returns [intTypeT : type, addrT : integerType |
	intTypeT;
];


Method "private write integer_of type_to address_" is [
		int : integer,
		intType : integerType,
		addr : integer |
	Primitive 265 (failureCode : natural number);
	Failed
] : void
requires [intT : integerType, intTypeT : type, addrT : integerType |
	intT lower bound is finite
		& intT upper bound is finite
		& addrT lower bound is finite
		& addrT upper bound is finite;
];


Method "private read_bytes from address_" is [
		count : whole number,
		addr : integer |
	Primitive 266 (failureCode : natural number);
	Failed
] : integer
requires [countT : integerType, addrT : integerType |
	addrT lower bound is finite
		& addrT upper bound is finite;
]
returns [intTypeT : type, addrT : integerType |
	intTypeT;
];


Method "private write_to address_" is [
		bytes : tuple of byte,
		addr : integer |
	Primitive 267 (failureCode : natural number);
	Failed
] : void
requires [bytesT : tupleType, addrT : integerType |
	addrT lower bound is finite
		& addrT upper bound is finite;
]
returns [intTypeT : type, addrT : integerType |
	intTypeT;
];


Method "Write_to_" is [
		int : integer,
		ptr : Pointer |
	private write integer int
		of type ptr->privateType
		to address ptr->privateAddress;
] : void;
