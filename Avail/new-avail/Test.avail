/*
 * Test.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test"
Versions
	"dev"
Uses
	"Avail"
Body

[
	/* Report on all tests. */
	report ::= report on all tests;
	For each report's metrics by module do
	[
		definer : module,
		results : <unit test result…|>
	|
		Print: left fold <definer's name ++ ":\n"> ++ results through
			[
				result : unit test result,
				partial : string
			|
				partial ++ "\t" ++ “result” ++ "\n"
			];
		Print: "\n";
	];
	/* Report statistics. */
	passed ::= new atom "passed";
	failed ::= new atom "failed";
	statistics ::= group report's metrics by
		[
			result : unit test result
		|
			cast result into [ t : unit test success | passed ]
			else [ failed ]
		];
	Print:
		format
			"SUMMARY:\n\
			\|\tTOTAL:  ‘total’\n\
			\|\tPASSED: ‘passed’\n\
			\|\tFAILED: ‘failed’\n"
		with
			total := |report's metrics|,
			passed := |statistics[passed] else [<>]|,
			failed := |statistics[failed] else [<>]|;
]();
