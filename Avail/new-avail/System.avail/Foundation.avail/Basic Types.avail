/**
 * System/Foundation/Basic Types
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provide access to the primitive kinds. These are offered by the Avail virtual
 * machine as "special objects" available through a bootstrap primitive (bound
 * by pragma in "Origin"). Here they are bound to nullary methods.
 *
 * @author Todd L Smith &lt;anarakul@gmail.com&gt;
 * @author Leslie Schultz &lt;leslie.a.schultz@gmail.com&gt;
 */
System Module "Basic Types"
Extends
	"Origin" ("Method_is_")
Uses
	"Origin"
Names
	/* Primitive kinds, formatted hierarchically. */
	"⊤",								/* Most general, i.e. top */
		"any",							/* Most general instantiable */
			"⊶[-∞..∞]",					/* Most general extended integer */
				"⊶(-∞..∞)",				/* Most general integer */
					"⊶[0..∞)",			/* Bootstrap: whole numbers */
						"⊶[1..∞)",		/* Bootstrap: natural numbers */
			"⊶<any..|0..∞>",				/* Most general tuple */
				"string",				/* Bootstrap: string */
				"⊶<type..|0..∞>",		/* Bootstrap: tuple of type */
				"⊶<{string|0..∞}|0..∞>",/* Bootstrap: tuple of set of string */
			"⊶{any|0..∞}",				/* Most general set */
				"⊶{string|0..∞}",		/* Bootstrap: set of string */
			"⊶{any→any|0..∞}",			/* Most general map */
			"⊶[`…]→⊤",					/* Most general function */
			"⊶¢[`…]→⊤",					/* Most general compiled code */
			"⊶$[`…]→⊤",					/* Most general continuation */
			"atom",						/* Most general atom */
			"boolean",					/* Union of built-in atoms */
			"character",				/* Most general character */
			"class",					/* Most general class */
			"container",				/* Most general container */
			"float",					/* Single-precision float */
			"double",					/* Double-precision float */
			"parse node",				/* Most general parse node */			
				"expression node",
					"assignment node",
					"block node",
					"declaration node",
						"argument node",
						"label node",
						"local constant node",
						"local variable node",
						"module constant node",
						"module variable node",
					"literal node",
					"reference node",
					"send node",
					"supercast node",
					"tuple node",
					"variable use node",
				"marker node",
			"union",					/* Most general union */
	"⊥",								/* Most specific kind, i.e. bottom */
	
	/* Primitive metakinds. */
	"type",								/* Most general metakind */
	
	/* Built-in atoms. */
	"false",
	"true",
	
	/* Type operations. */
	"⊶_'s type"
Body

/**
 * The compiler can use the actual value bound to a module constant in a static
 * type expression, so this is necessary in order to provide a sufficiently
 * strong implementation of "⊶_'s type".
 */
privateAny ::= special object 1;

/**
 * Bootstrap: Answer the type of the argument. Notice that the explicit function
 * return type has been omitted. This is because the primitive's return type,
 * top's metatype, is stronger than we can currently specify.
 *
 * <p>The "strange" leading character is pronounced "original of", and is used
 * frequently in the system modules to indicate a bootstrap method that is
 * destined for subsequent replacement, i.e. it is the original (statically
 * type unsafe) offering of a feature.</p>
 *
 * @param o
 *        An entity.
 * @return The argument's type.
 */
Method "⊶_'s type" is
[
	o : privateAny
|
	Primitive 30;
];

/*
 * Now we provide nullary methods to return the special objects.
 */

/**
 * Answer the most general (uninstantiable) kind.
 *
 * @return The type {@code ⊥}.
 */
Method "⊤" is
[
	special object 35;
] : ⊶special object 35's type;

/**
 * Answer the most general instantiable kind.
 *
 * @return The type {@code any}.
 */
Method "any" is
[
	special object 1;
] : ⊶special object 1's type;

/**
 * Bootstrap: Answer the most general extended integral kind.
 *
 * @return The integer range {@code -∞} through {@code ∞}, inclusive.
 */
Method "⊶[-∞..∞]" is
[
	special object 13;
] : ⊶special object 13's type;

/**
 * Bootstrap: Answer the most general integral kind.
 *
 * @return The integer range {@code -∞} through {@code ∞}, exclusive.
 */
Method "⊶(-∞..∞)" is
[
	special object 18;
] : ⊶special object 18's type;

/**
 * Bootstrap: Answer the kind of the whole numbers.
 *
 * @return The integer range {@code 0}, inclusive, through {@code ∞}, exclusive.
 */
Method "⊶[0..∞)" is
[
	special object 36;
] : ⊶special object 36's type;

/**
 * Bootstrap: Answer the kind of the natural numbers.
 *
 * @return The integer range {@code 1}, inclusive, through {@code ∞}, exclusive.
 */
Method "⊶[1..∞)" is
[
	special object 37;
] : ⊶special object 37's type;

/**
 * Bootstrap: Answer the most general tuple kind.
 *
 * @return The tuple kind whose prefix is empty, whose repeating type is {@code
           any}, and whose size is unbounded.
 */
Method "⊶<any..|0..∞>" is
[
	special object 32;
] : ⊶special object 32's type;

/**
 * Bootstrap: Answer the most general string kind.
 *
 * @return The tuple kind whose prefix is empty, whose repeating type is {@code
           character}, and whose size is unbounded.
 */
Method "string" is
[
	special object 28;
] : ⊶special object 28's type;

/**
 * Bootstrap: Answer the kind "tuple of type".
 *
 * @return The tuple kind whose prefix is empty, whose repeating type is {@code
           type}, and whose size is unbounded.
 */
Method "⊶<type..|0..∞>" is
[
	special object 73;
] : ⊶special object 73's type;

/**
 * Bootstrap: Answer the kind "tuple of set of string".
 *
 * @return The tuple kind whose prefix is empty, whose repeating type is set of
           {@code character} of unbounded length, and whose size is unbounded.
 */
Method "⊶<{string|0..∞}|0..∞>" is
[
	special object 74;
] : ⊶special object 74's type;

/**
 * Bootstrap: Answer the most general set kind.
 *
 * @return The set kind whose element type is {@code any} and whose size is
           unbounded.
 */
Method "⊶{any|0..∞}" is
[
	special object 26;
] : ⊶special object 26's type;

/**
 * Bootstrap: Answer the kind "set of string".
 *
 * @return The set kind whose element type is {@code string} and whose size is
           unbounded.
 */
Method "⊶{string|0..∞}" is
[
	special object 75;
] : ⊶special object 75's type;

/**
 * Bootstrap: Answer the most general map kind.
 *
 * @return The map kind whose key type is {@code any}, whose value type is
 *         {@code any}, and whose size is unbounded.
 */
Method "⊶{any→any|0..∞}" is
[
	special object ???;
] : ⊶special object ???'s type;

/**
 * Bootstrap: Answer the most general function kind.
 *
 * @return The function kind whose argument tuple type is {@code ⊥} and whose
 *         return type is {@code ⊤}.
 */
Method "⊶[`…]→⊤" is
[
	special object 4;
] : ⊶special object 4's type;

/**
 * Bootstrap: Answer the most general compiled code kind.
 *
 * @return The compiled code kind whose function type's argument tuple type is
 *         {@code ⊥} and whose return type is {@code ⊤}.
 */
Method "⊶¢[`…]→⊤" is
[
	special object 6;
] : ⊶special object 6's type;

/**
 * Bootstrap: Answer the most general continuation kind.
 *
 * @return The continuation kind whose function type's argument tuple type is
 *         {@code ⊥} and whose return type is {@code ⊤}.
 */
Method "⊶$[`…]→⊤" is
[
	special object 9;
] : ⊶special object 9's type;

/**
 * Answer the most general atom kind.
 *
 * @return The kind {@code atom}.
 */
Method "atom" is
[
	special object ???;
] : ⊶special object ???'s type;

/**
 * Answer the type {@code boolean}.
 *
 * @return The union type of {@code true} and {@code false}.
 */
Method "boolean" is
[
	special object 2;
] : ⊶special object 2's type;

/**
 * Answer the special atom {@code true}.
 *
 * @return The special atom {@code true}.
 */
Method "true" is
[
	special object 70;
] : ⊶special object 70's type;

/**
 * Answer the special atom {@code false}.
 *
 * @return The special atom {@code false}.
 */
Method "false" is
[
	special object 71;
] : ⊶special object 71's type;

/**
 * Answer the kind {@code character}.
 *
 * @return The kind of a character.
 */
Method "character" is
[
	special object 3;
] : ⊶special object 3's type;

/**
 * Answer the most general kind of class.
 *
 * @return The kind {@code class}.
 */
Method "class" is
[
	special object 23;
] : ⊶special object 23's type;

/**
 * Answer the most general kind of container.
 *
 * @return The kind {@code container}.
 */
Method "container" is
[
	special object 7;
] : ⊶special object 7's type;

/**
 * Answer the kind of single-precision floating point numbers.
 *
 * @return The kind {@code float}.
 */
Method "float" is
[
	special object 15;
] : ⊶special object 15's type;

/**
 * Answer the kind of double-precision floating point numbers.
 *
 * @return The kind {@code double}.
 */
Method "double" is
[
	special object 12;
] : ⊶special object 12's type;

/**
 * Answer the most general parse node kind.
 *
 * @return The kind {@code parse node}.
 */
Method "parse node" is
[
	special object 50;
] : ⊶special object 50's type;

/**
 * Answer the most general expression node kind.
 *
 * @return The kind {@code expression node}.
 */
Method "expression node" is
[
	special object 52;
] : ⊶special object 52's type;

/**
 * Answer the kind of an assignment node.
 *
 * @return The kind {@code assignment node}.
 */
Method "assignment node" is
[
	special object 53;
] : ⊶special object 53's type;

/**
 * Answer the kind of a block node.
 *
 * @return The kind {@code block node}.
 */
Method "block node" is
[
	special object 54;
] : ⊶special object 54's type;

/**
 * Answer the most general declaration node kind.
 *
 * @return The kind {@code declaration node}.
 */
Method "declaration node" is
[
	special object 61;
] : ⊶special object 61's type;

/**
 * Answer the kind of an argument node.
 *
 * @return The kind {@code argument node}.
 */
Method "argument node" is
[
	special object 62;
] : ⊶special object 62's type;

/**
 * Answer the kind of a label node.
 *
 * @return The kind {@code label node}.
 */
Method "label node" is
[
	special object 63;
] : ⊶special object 63's type;

/**
 * Answer the kind of a local constant node.
 *
 * @return The kind {@code local constant node}.
 */
Method "local constant node" is
[
	special object 65;
] : ⊶special object 65's type;

/**
 * Answer the kind of a local variable node.
 *
 * @return The kind {@code local variable node}.
 */
Method "local variable node" is
[
	special object 64;
] : ⊶special object 64's type;

/**
 * Answer the kind of a module constant node.
 *
 * @return The kind {@code module constant node}.
 */
Method "module constant node" is
[
	special object 67;
] : ⊶special object 67's type;

/**
 * Answer the kind of a module variable node.
 *
 * @return The kind {@code module variable node}.
 */
Method "module variable node" is
[
	special object 66;
] : ⊶special object 66's type;

/**
 * Answer the kind of a literal node.
 *
 * @return The kind {@code literal node}.
 */
Method "literal node" is
[
	special object 55;
] : ⊶special object 55's type;

/**
 * Answer the kind of a reference node.
 *
 * @return The kind {@code reference node}.
 */
Method "reference node" is
[
	special object 56;
] : ⊶special object 56's type;

/**
 * Answer the kind of a send node.
 *
 * @return The kind {@code send node}.
 */
Method "send node" is
[
	special object 57;
] : ⊶special object 57's type;

/**
 * Answer the kind of a supercast node.
 *
 * @return The kind {@code supercast node}.
 */
Method "supercast node" is
[
	special object 58;
] : ⊶special object 58's type;

/**
 * Answer the kind of a tuple node.
 *
 * @return The kind {@code tuple node}.
 */
Method "tuple node" is
[
	special object 59;
] : ⊶special object 59's type;

/**
 * Answer the kind of a variable use node.
 *
 * @return The kind {@code variable use node}.
 */
Method "variable use node" is
[
	special object 60;
] : ⊶special object 60's type;

/**
 * Answer the kind of a marker node. A marker node is pushed onto the parse
 * stack to record a parse position.
 *
 * @return The kind {@code marker node}.
 */
Method "marker node" is
[
	special object 51;
] : ⊶special object 51's type;

/**
 * Answer the most general union kind.
 *
 * @return The kind {@code union}.
 */
Method "union" is
[
	special object ???;
] : ⊶special object ???'s type;

/**
 * Answer the most specific (uninstantiable) kind.
 *
 * @return The kind {@code ⊥}.
 */
Method "⊥" is
[
	special object 29;
] : ⊶special object 29's type;

/**
 * Answer the most general metakind.
 *
 * @return {@code ⊤}'s type.
 */
Method "type" is
[
	⊶⊤'s type;
];
