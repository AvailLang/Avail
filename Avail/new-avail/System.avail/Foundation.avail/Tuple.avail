/**
 * System/Foundation/Tuple
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provide basic operations to construct tuple kinds and instances. Provide
 * convenient aliases for common kins. Provide basic operations to query the
 * properties of kinds and instances.
 */
System Module "Tuple"
Extends
Uses
	"Arithmetic",
	"Basic Support",
	"Basic Types"
Names
	/* Kind aliases. */
	"tuple",
	
	/* Metakind aliases. */
	"tuple metakind",
	
	/* Kind constructors. */
	"tuple kind with_elements of leading types_and default type_",
	"tuple of_",
	"<«_‡,»..|_.._>",
	"<«_‡,»|>",
	
	/* Tuple constructors. */
	"⊶«_‡++»",							/* Concatenation */
	"_[_.._]",							/* Slicing */
	
	/* Tuple kind queries. */
	"_'s allowed sizes",
	
	/* Tuple queries. */
	"‖_‖",								/* Size */
Body

/**
 * Answer the most general tuple kind.
 *
 * @return {@code ⊶<any..|0..∞>}.
 */
Method "tuple" is
[
	⊶<any..|0..∞>;
];

/**
 * Answer the most general tuple metakind.
 *
 * @return {@code ⊶<any..|0..∞>'s type}.
 */
Method "tuple metakind" is
[
	tuple's type;
];

/**
 * Answer a tuple kind whose instances fall within a certain size range, begin
 * with the specified leading types, and have the specified default type.
 *
 * @param sizeRange
 *        The allowed sizes.
 * @param leadingTypes
 *        The types of the leading elements.
 * @param defaultType
 *        The type of all remaining elements.
 * @return A tuple kind.
 */
Method "tuple kind with_elements of leading types_and default type_" is
[
	sizeRange : whole number's type,
	leadingTypes : ⊶<type..|0..∞>,
	defaultType: type
|
	Primitive 137;
] : tuple metakind;

/**
 * Answer a tuple kind whose elements are homogeneously typed.
 *
 * @param elementType
 *        The type of all elements.
 * @return A tuple kind.
 */
Method "tuple of_" is
[
	elementType : type
|
	tuple kind
		with [0..∞) elements
		of leading types <>
		and default type elementType;
] : tuple metakind;

/**
 * Answer a tuple kind with the specified types and size range. The last
 * specified type is repeated for excess elements.
 *
 * @param leadingTypes
 *        The (denormalized) leading types.
 * @param minElements
 *        The minimum tuple size.
 * @param maxElements
 *        The maximum tuple size, exclusive if {@code ∞}.
 * @return A tuple kind.
 */
Method "<«_‡,»..|_.._>" is
[
	leadingTypes :
		tuple kind
			with [1..∞) elements
			of leading types <>
			and default type type,
	minElements : whole number,
	maxElements : [0..∞]
|
	tuple kind
		with (integral range
			from minElements (inclusive if true)
			to maxElements (inclusive if maxElements is finite)) elements
		of leading types leadingTypes
		and default type ⊥;
] : tuple metakind;

/**
 * Answer the concatenation of all specified tuples.
 *
 * @param tuples
 *        A tuple of tuples.
 * @return The concatenation of the repeated arguments.
 */
Method "⊶«_‡++»" is
[
	tuples :
		tuple kind
			with [2..∞) elements
			of leading types <>
			and default type tuple
|
	Primitive 136;
] : tuple;

/**
 * Answer the allowed range of sizes of the specified tuple kind.
 *
 * @param tupleKind
 *        A tuple kind.
 * @return The integer range corresponding to the allowed sizes of instances of
 *         the argument tuple kind.
 */
Method "_'s allowed sizes" is
[
	tupleKind : tuple metakind
|
	Primitive 138;
] : integer metakind;

/**
 * Answer the size of the specified tuple.
 *
 * @param value
 *        A tuple.
 * @return The size of the argument.
 */
Method "‖_‖" is
[
	value : tuple
|
	Primitive 130;
] : whole number
and validates with
[
	node : parse node ⇒ tuple
|
	node's expression type's allowed sizes;
];

/**
 * Answer a tuple kind with fixed size and element types.
 *
 * @param elementTypes
 *        The element types.
 * @return A tuple kind.
 */
Method "<«_‡,»|>" is
[
	elementTypes :
		tuple kind
			with [0..∞) elements
			of leading types <>
			and default type type
|
	tuple kind
		with (integral range
			from ‖elementTypes‖ (inclusive if true)
			to ‖elementTypes‖ (inclusive if true)) elements
		of leading types elementTypes
		and default type ⊥;
] : tuple metakind;	

/**
 * Answer the requested subtuple/slice.
 *
 * @param value
 *        A {@code tuple}.
 * @param start
 *        The index into {@code value} of the first element of the subtuple.
 * @param end
 *        The index into {@code value} of the last element of the subtuple.
 * @return A subtuple of {@code value} that run from the {@code start}-th index
 *         to the {@code end}-th index.
 */
Method "_[_.._]" is
[
	value : tuple,
	start : natural number,
	end : whole number
|
	Primitive 135 (failureCode : natural number);
] : tuple;
