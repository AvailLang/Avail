/**
 * System/Foundation/Basic Comparison
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provide access to the most basic comparison operations.
 *
 * @author Todd L Smith &lt;anarakul@gmail.com&gt;
 */
System Module "Basic Comparison"
Extends
Uses
	"Basic Types" ("Method_is_", "any", "boolean", "type")
Names
	/* Relations. */
	"_=_",								/* Equality */
	"_≤_"								/* Subtype relation */
Body

/**
 * Compare two objects for equality.
 *
 * @param a
 *        An arbitrary object.
 * @param b
 *        An arbitrary object.
 * @return {@code true} if the arguments are equal, {@code false} otherwise.
 */
Method "_=_" is
[
	a : any,
	b : any
|
	Primitive 60;
] : boolean;

/**
 * Answer {@code true} if the first argument is an improper subtype of the
 * second argument.
 *
 * @param a
 *        An arbitrary type.
 * @param b
 *        An arbitrary type.
 * @return {@code true} if the first argument is an improper subtype of the
 *         second argument, {@code false} otherwise.
 */
Method "_≤_" is
[
	a : type,
	b : type
|
	Primitive 33;
] : boolean;
