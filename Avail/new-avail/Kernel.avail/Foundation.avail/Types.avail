/**
 * Kernel/Foundation/Types
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Make available the foundational types and meta-types.
 *
 * @author Todd L Smith &lt;anarakul@gmail.com&gt;
 */
Module
	"Types"
Extends
Uses
	"Bootstrap"
Name
	"all",
	"container",
	"container type",
	"cyclic type",
	"meta",
	"primitive type",
	"terminates",
	"terminates type",
	"type",
	"void",
	"Crash_",
	"Primitive failed"
Body

/**
 * Answer {@code meta}, the ultimate type of every type, including itself.
 *
 * @returns The meta-type {@code meta}.
 */
Method "meta" is
[
	Special Object 22;
] : Special Object 22;

/**
 * @returns The meta-type {@code type}.
 */
Method "type" is
[
	Special Object 36;
] : meta;

/**
 * Answer the most general type. {@code void} as the return type of a block
 * indicates that the block does not return a vaue.
 *
 * @returns The type {@code void}.
 */
Method "void" is
[
	Special Object 37;
] : type;

/**
 * Answer the most general type of all instances.
 *
 * @returns The type {@code all}.
 */
Method "all" is
[
	Special Object 1;
] : type;

/**
 * Answer the ultimate subtype of {@code type}.
 *
 * @returns The type of {@code terminates}.
 */
Method "terminates type" is
[
	Special Object 32;
] : meta;

/**
 * Answer the most specific type. {@code terminates} as the return type of a
 * block indicates that the block does not return.
 *
 * @return The type {@code terminates}.
 */
Method "terminates" is
[
	Special Object 31;
] : terminates type;

/**
 * @returns The type of most primitive types.
 */
Method "primitive type" is
[
	Special Object 26;
] : meta;

/**
 * @returns The type of every {@code cyclic type}.
 */
Method "cyclic type" is
[
	Special Object 11;
] : Special Object 11;

/**
 * @returns The supertype of {@code container}.
 */
Method "container type" is
[
	Special Object 8;
] : meta;

/**
 * @returns The supertype of every specific container type.
 */
Method "container" is
[
	Special Object 7;
] : container type;

/*
 * TODO: [TLS] Move "Crash_" and "Primitive failed" out of here. They need to
 * occur after Exceptions.
 */

/**
 * Violently abort the current {@code process}.
 */
Method "Crash_" is
[
	finalClue : all
|
	Primitive 256 (finalClue);
] : terminates;

/**
 * Violently abort the current {@code process} after invocation of a primitive
 * fails.
 */
Method "Primitive failed" is
[
	Crash "An Avail primitive has failed";
] : terminates;
