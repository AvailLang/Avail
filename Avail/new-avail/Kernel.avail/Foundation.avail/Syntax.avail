/**
 * Kernel/Foundation/Syntax
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Define core elements of the public Avail syntax, such as method and macro
 * definers.
 *
 * @author Todd L Smith &lt;anarakul@gmail.com&gt;
 */
Module
	"Syntax"
Extends
Uses
	"Collections",
	"Types"
Names
	"Primitive method_:^(_:_)««_»‡(_:_)»{«_»}",
	"Primitive method_:««_»‡(_:_)»{«_»}",
	"Method:^(_:_)««_»‡(_:_)»{«_»}",
	"Method:««_»‡(_:_)»{«_»}",
	"Macro:«^(_:_)»««_»‡(_:_)»{«_»}"
Body

/**
 * Define a primitive method definer that may be used to define a
 * non-void-valued method. "ordinal" is an expression that specifies the
 * primitive number. A variable named "resultName" of type "resultType" is
 * created at method scope. The value of this value will be automatically
 * returned when execution reaches the end of the method.
 *
 * @param ordinal An expression that evaluates to a primitive number.
 * @param resultName The name of the result variable.
 * @param resultType The type of the result variable.
 * @param parameters The intermixed method name keywords, operators, and
 *                   parameters.
 * @param statements The method body.
 * @return A statement that, when executed, will define a primitive method.
 */
Macro "Primitive method_:^(_:_)««_»‡(_:_)»{«_»}" is
[
	ordinal    : expression,
	resultName : variable name,
	resultType : expression,
	/** TODO: "parameters" probably isn't defined correctly ... */
	parameters : tuple of tuple [1..3] like <tuple of token, variable name, expression>,
	statements : tuple of statement
|
	/* TODO: Implement this! */
] : statement;

/**
 * Define a primitive method definer that may be used to define a
 * void-valued procedure. "ordinal" is an expression that specifies the
 * primitive number.
 *
 * @param ordinal An expression that evaluates to a primitive number.
 * @param parameters The intermixed method name keywords, operators, and
 *                   parameters.
 * @param statements The method body.
 * @return A statement that, when executed, will define a primitive method.
 */
Macro "Primitive method_:««_»‡(_:_)»{«_»}" is
[
	ordinal    : expression,
	/** TODO: "parameters" probably isn't defined correctly ... */
	parameters : tuple of tuple [1..3] like <tuple of token, variable name, expression>,
	statements : tuple of statement
|
	/* TODO: Implement this! */
] : statement;

/**
 * Define a method definer that may be used to define a non-void-valued method.
 * A variable named "resultName" of type "resultType" is created at method
 * scope. The value of this value will be automatically returned when execution
 * reaches the end of the method.
 *
 * @param resultName The name of the result variable.
 * @param resultType The type of the result variable.
 * @param parameters The intermixed method name keywords, operators, and
 *                   parameters.
 * @param statements The method body.
 * @return A statement that, when executed, will define a method.
 */
Macro "Method:^(_:_)««_»‡(_:_)»{«_»}" is
[
	resultName : variable name,
	resultType : expression,
	/** TODO: "parameters" probably isn't defined correctly ... */
	parameters : tuple of tuple [1..3] like <tuple of token, variable name, expression>,
	statements : tuple of statement
|
	/* TODO: Implement this! */
] : statement;

/**
 * Define a method definer that may be used to define a void-valued procedure.
 *
 * @param parameters The intermixed method name keywords, operators, and
 *                   parameters.
 * @param statements The method body.
 * @return A statement that, when executed, will define a method.
 */
Macro "Method:««_»‡(_:_)»{«_»}" is
[
	/** TODO: "parameters" probably isn't defined correctly ... */
	parameters : tuple of tuple [1..3] like <tuple of token, variable name, expression>,
	statements : tuple of statement
|
	/* TODO: Implement this! */
] : statement;

/**
 * Define a macro definer. A variable named "resultName" of type "resultType" is
 * created at method scope. The value of this value will be automatically
 * returned when execution reaches the end of the method.
 *
 * @param resultName The name of the result variable.
 * @param resultType The type of the result variable.
 * @param parameters The intermixed method name keywords, operators, and
 *                   parameters.
 * @param statements The macro body.
 * @return A statement that, when executed, will define a macro.
 */
Macro "Macro:^(_:_)««_»‡(_:_)»{«_»}" is
[
	resultName : variable name,
	resultType : expression,
	/** TODO: "parameters" probably isn't defined correctly ... */
	parameters : tuple of tuple [1..3] like <tuple of token, variable name, expression>,
	statements : tuple of statement
|
	/** TODO: Implement this! */
] : statement;

/**
 * Discard the specified argument. The argument is usually obtained by
 * evaluating something other than a simple expression. The purpose of this
 * method is to allow a programmer to deliberately ignore the return value of
 * another method.
 *
 * @param unwanted An unwanted argument.
 */
Method:
	Discard (unwanted : all)
{
	/* No implementation required. */
}
