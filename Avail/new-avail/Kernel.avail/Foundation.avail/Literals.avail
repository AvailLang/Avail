/*
 * Literals.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Literals"
Versions
	"dev"
Extends
Uses
	"Assertions",
	"Bootstrap",
	"Early Control Structures",
	"Early Literals"
Names
	"{«_‡,»}",
	"{«_→_‡,»}"
Body

/**
 * Construct and answer a set from the lexically specified expressions.
 *
 * Parameters:
 *    elements - A tuple, lexically constructed by the compiler, whose elements
 *       should be unique members of the answer.
 * Returns:
 *    The requested set.
 */
Method "{«_‡,»}" is
[
	elements : <<>,any…|natural number>
|
	elements→set;
] : set;

/* Disambiguate `∪_` and `∪_[_.._]` by forbidding `_[_.._]` as the only argument
 * of the former.
 */
invoke
	[
		cast ::= [ t : {string|whole number} | t; ];
		names ::= cast <"∪_">→set into cast;
		exclusions ::= cast <"_[_.._]">→set into cast;
		Grammatical restriction names is <exclusions>;
	]
with <>;

/**
 * Strengthen the type of `{«_‡,»}` to the most exact possible. This is the set
 * type whose element type is the type union of the lexically specified elements
 * and whose cardinality requirement is number of distinct elements.
 *
 * Parameters:
 *    elements - A tuple type, constructed by the compiler from the lexically
 *       specified elements.
 * Returns:
 *    The requested type.
 */
Semantic restriction "{«_‡,»}" is
[
	elements : <<>,any…|natural number>'s type
|
	/* Since the argument is derived from a lexically constructed tuple, then
	 * the cardinality of the argument is guaranteed to be a fixed, finite
	 * value. Therefore asking for either the lower or upper bound would be
	 * equivalent.
	 */
	bound ::= cast |elements|'s upper bound into [ t : whole number | t; ];
	{∪ elements[1..bound] | |elements|};
];

/**
 * Construct and answer a map from the lexically specified key-value bindings.
 * 
 * Parameters:
 *    bindings - The key-value bindings that constitute the answer.
 * Returns:
 *    A map comprising the specified key-value bindings.
 */
Method "{«_→_‡,»}" is
[
	bindings : key-value tuple
|
	bindings→map;
] : map;

/**
 * Strength the type of `{«_→_‡,»}` to the most exact possible. This is the map
 * type whose key type is the type union of the lexically specified keys, value
 * type is the type union of the lexically specified values, and cardinality
 * requirement is the number of distinct keys.
 * 
 * Parameters:
 *    bindings - A key-value tuple type, constructed by the compiler from the
 *       lexically specified bindings.
 * Returns:
 *    The requested type.
 */
Semantic restriction "{«_→_‡,»}" is
[
	bindings : key-value tuple's type
|
	keyType : type := ⊥;
	valueType : type := ⊥;
	limit ::= cast |bindings|'s upper bound into [ n : natural number | n; ];
	index : natural number := 1;
	invoke
		[
			$loop : $function accepting <> and returning ⊤;
			binding ::= cast bindings[index] into [ t : tuple meta | t; ];
			keyType := keyType ∪ binding[1];
			valueType := valueType ∪ binding[2];
			if index < limit then
			[
				index := cast index + 1 into [ i : natural number | i; ];
				Restart loop;
			];
		]
	with <>;
	{keyType→valueType | |bindings|};
];
