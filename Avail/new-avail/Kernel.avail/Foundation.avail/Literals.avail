/*
 * Literals.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Literals"
Versions
	"dev"
Extends
Uses
	"Assertions",
	"Bootstrap",
	"Early Control Structures",
	"Early Literals"
Names
	"{«_‡,»}"
Body

/**
 * Construct and answer a set from the lexically specified expressions.
 *
 * Parameters:
 *    elements - A tuple, lexically constructed by the compiler, whose elements
 *       should be unique members of the answer.
 * Returns:
 *    The requested set.
 */
Method "{«_‡,»}" is
[
	elements : <<>,any…|natural number>
|
	elements→set;
] : set;

/**
 * TODO: [TLS] This comment is probably bogus ... I'm tired ...
 * 
 * Grammatical restrictions are not practically available yet, so `∪_` and
 * `∪_[_.._]` cannot be disambiguated yet. Create a local binding for the
 * primitive operation so that set literals can be statically strengthened.
 * (Then grammatical restrictions become practical.)
 *
 * Parameters:
 *    aTupleType - A tuple type.
 *    startIndex - The one-based index (inclusive) of the start of the range.
 *    endIndex - The one-based index (inclusive) of the end of the range.
 * Returns:
 *    The type union of all element types in the specified range.
 */
Method "type range of_from_to_" is
[
	aTupleType : tuple meta,
	startIndex : natural number,
	endIndex : whole number
|
	Primitive 143 (failureCode : natural number);
	Shouldn't happen;
] : type;

/**
 * Strengthen the type of `{«_‡,»}` to the most exact possible. This is the type
 * union of the lexically specified elements.
 *
 * Parameters:
 *    elements - A tuple type, constructed by the compiler from the lexically
 *       specified elements.
 */
Semantic restriction "{«_‡,»}" is
[
	elements : <<>,any…|natural number>'s type
|
	/* Since the argument is derived from a lexically constructed tuple, then
	 * the cardinality of the argument is guaranteed to be a fixed, finite
	 * value. Therefore asking for either the lower or upper bound would be
	 * equivalent.
	 */
	bound ::= cast |elements|'s upper bound into [ t : whole number | t; ];
	{type range of elements from 1 to bound | |elements|};
];
