/**
 * Kernel/Foundation/Boolean
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Make available the primitive type {@code boolean}, the intrinsic constants
 * {@code true} and {@code false}, and the primitive operations {@code _=_} and
 * {@code _<=_}.
 *
 * @author Todd L Smith &lt;anarakul@gmail&gt;
 */
Module
	"Boolean"
Extends
Uses
	"Bootstrap",
	"Types"
Names
	"boolean",
	"false",
	"true",
	"_=_",
	"_<=_"
Body

/** The compiler needs this in order to specify "boolean". */
privateBoolean ::= Special Object 2;

/**
 * @returns The type {@code boolean}.
 */
Method "boolean" is
[
	privateBoolean;
] : primitive type;

/** The compiler needs this in order to specify "false". */
privateFalseType ::= Special Object 14;
privateFalse ::= Special Object 71;

/**
 * @returns {@code false}.
 */
Method "false" is
[
	privateFalse;
] : privateFalseType;

/** The compiler needs this in order to specify "true". */
privateTrueType ::= Special Object 33;
privateTrue ::= Special Object 70;

/**
 * @returns {@code true}.
 */
Method "true" is
[
	privateTrue;
] : privateTrueType;

/*
 * TODO: [TLS] Move "_=_" and "_<=_" out of here. They need to occur after
 * Exceptions.
 */

/**
 * Are the arguments equal?
 *
 * @param a A primitive object.
 * @param b A primitive object.
 */
Method "_=_" is [
	a : all,
	b : all
|
	Primitive 60 (a, b);
	Primitive failed;
] : boolean;

/**
 * Is the first argument a subtype of the second?
 *
 * @param a A type.
 * @param b A type.
 */
Method "_<=_" is [
	a : type,
	b : type
|
	Primitive 33 (a, b);
	Primitive failed;
] : boolean;
