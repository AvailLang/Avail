/*
 * Objects.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Objects"
Versions
	"dev"
Uses
	"Assertions",
	"Bootstrap",
	"Control Structures",
	"Early Error Codes",
	"Early Functions",
	"Early Types",
	"Enumeration Support",
	"Literals",
	"Logic",
	"Maps",
	"Math",
	"Sets",
	"Tuples"
Names
	"extend_with«_:_‡,»",
	"«Public»?«Explicit|explicit»?\
	\|Class|class_extends_«with public«_:_‡,»»«with private«_:_‡,»»"
Body

/**
 * Strengthen object type construction. If the enumeration of keys is known,
 * then it is possible to strengthen the object metatype (to one whose keys are
 * drawn from the enumeration and which has the map's value type as the type of
 * each field type).
 * 
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object metatype for the given argument types.
 */
Semantic restriction "_→object type" is
[
	mapType : field type map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object type)'s type;
	]
	/* If the enumeration of keys is known and equals the cardinality of the
	 * map, then answer the nearest object type supertype with these keys.
	 */
	else if [ |{||mapType||'s lower bound, ||mapType||'s upper bound}| = 1
		∧ [ |mapType's key type| = ||mapType||'s lower bound; ]; ] then
	[
		atoms ::= mapType's key type's instances;
		defs ::= atoms→tuple zip |atoms| of mapType's value type's instance;
		(defs→object type)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Strengthen object type construction.
 * 
 * Parameters:
 *    tupleType -
 * Returns:
 *    The strongest possible object metatype for the given argument types.
 */
Semantic restriction "_→object type" is
[
	tupleType : field type tuple's type
|
	/* Leverage an instance type. */
	if |tupleType| = 1 then
	[
		(tupleType's instance→object type)'s type;
	]
	else
	[
		limit ::= |tupleType's leading types| + 1;
		/* `defs` are the guaranteed field definitions. A field definition is
		 * only certain when the field atom is certain.
		 */
		defs : field type map := {};
		/* `constraints` are augmented when a particular definition tuple's
		 * field atom is not statically known. This map is used to weaken `defs`
		 * after all definition tuples have been processed.
		 */
		constraints : field type map := {};
		/* `universal` is the type union of all field types for which the
		 * corresponding field is merely `atom`, i.e., the actual fields are not
		 * statically known. It is used to weaken `defs` after all definition
		 * tuples have been processed.
		 */
		universal : any meta := ⊥;
		From 1 to limit do
		[
			index : natural number
		|
			defTuple ::= tupleType[index];
			atomType ::= defTuple[1];
			defType ::= defTuple[2]'s instance;
			/* The field atom is known exactly. Therefore, we can confidently
			 * say that the resulting object type must contain this field.
			 */
			if |atomType| = 1 then
			[
				fieldAtom ::= atomType's instance;
				fieldType ::= defs[fieldAtom] else [ ⊥; ] ∪ defType;
				defs := eject ↑defs + fieldAtom→fieldType;
			]
			/* We know one or more fields with which this type is associated, so
			 * record this knowledge into `constraints`.
			 */
			else if [ |atomType| ≠ ∞; ] then
			[
				atoms ::= atomType's instances;
				For each atoms do
				[
					fieldAtom : atom
				|
					fieldType ::= constraints[fieldAtom] else [ ⊥; ] ∪ defType;
					constraints := eject ↑constraints + fieldAtom→fieldType;
				];
			]
			/* We don't know anything about the field. Treat the field type as a
			 * universal constraint.
			 */
			else
			[
				Assert: atomType = atom;
				universal := eject ↑universal ∪ defType;
			];
		];
		/* Weaken each value of `defs` by all applicable constraints. */
		defs := map eject ↑defs through
			[
				fieldAtom : atom,
				fieldType : any meta
			|
				fieldType ∪ constraints[fieldAtom] else [ ⊥; ] ∪ universal;
			];
		(defs→object type)'s type;
	];
];

/**
 * Strengthen object construction.
 *
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object" is
[
	mapType : field map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object)'s type;
	]
	/* If the enumeration of keys is known and equals the cardinality of the
	 * map, then answer the nearest object type supertype with these keys.
	 */
	else if [ |{||mapType||'s lower bound, ||mapType||'s upper bound}| = 1
		∧ [ |mapType's key type| = ||mapType||'s lower bound; ]; ] then
	[
		atoms ::= mapType's key type's instances;
		fieldAssignments ::= atoms→tuple zip |atoms| of mapType's value type;
		(fieldAssignments→object)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Strengthen object construction.
 * 
 * Parameters:
 *    tupleType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object" is
[
	tupleType : field tuple's type
|
	/* Leverage an instance type. */
	if |tupleType| = 1 then
	[
		(tupleType's instance→object)'s type;
	]
	else
	[
		limit ::= |tupleType's leading types| + 1;
		/* `defs` are the guaranteed field definitions. A field definition is
		 * only certain when the field atom is certain.
		 */
		defs : field type map := {};
		/* `constraints` are augmented when a particular definition tuple's
		 * field atom is not statically known. This map is used to weaken `defs`
		 * after all definition tuples have been processed.
		 */
		constraints : field type map := {};
		/* `universal` is the type union of all field types for which the
		 * corresponding field is merely `atom`, i.e., the actual fields are not
		 * statically known. It is used to weaken `defs` after all definition
		 * tuples have been processed.
		 */
		universal : any meta := ⊥;
		From 1 to limit do
		[
			index : natural number
		|
			defTuple ::= tupleType[index];
			atomType ::= defTuple[1];
			defType ::= defTuple[2];
			/* The field atom is known exactly. Therefore, we can confidently
			 * say that the resulting object type must contain this field.
			 */
			if |atomType| = 1 then
			[
				fieldAtom ::= atomType's instance;
				fieldType ::= defs[fieldAtom] else [ ⊥; ] ∪ defType;
				defs := eject ↑defs + fieldAtom→fieldType;
			]
			/* We know one or more fields with which this type is associated, so
			 * record this knowledge into `constraints`.
			 */
			else if [ |atomType| ≠ ∞; ] then
			[
				atoms ::= atomType's instances;
				For each atoms do
				[
					fieldAtom : atom
				|
					fieldType ::= constraints[fieldAtom] else [ ⊥; ] ∪ defType;
					constraints := eject ↑constraints + fieldAtom→fieldType;
				];
			]
			/* We don't know anything about the field. Treat the field type as a
			 * universal constraint.
			 */
			else
			[
				Assert: atomType = atom;
				universal := eject ↑universal ∪ defType;
			];
		];
		/* Weaken each value of `defs` by all applicable constraints. */
		defs := map eject ↑defs through
			[
				fieldAtom : atom,
				fieldType : any meta
			|
				fieldType ∪ constraints[fieldAtom] else [ ⊥; ] ∪ universal;
			];
		defs→object type;
	];
];

/**
 * Static information about objects is extremely limited, so strengthening is
 * really only possible when the argument is an instance type.
 * 
 * Parameters:
 *    anObject -
 * Returns:
 *    The strongest possible map type for the given arguments.
 */
Semantic restriction "_→map" is
[
	anObjectType : object meta
|
	if |anObjectType| = 1 then
	[
		(anObjectType's instance→map)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Static information about object is extremely limited, so strengthening is
 * really only possible when the argument is an instance type.
 * 
 * Parameters:
 *    anObjectType -
 * Returns:
 *    The strongest possible tuple type for the given arguments.
 */
Semantic restriction "_→tuple" is
[
	anObjectType : object meta
|
	if |anObjectType| = 1 then
	[
		(anObjectType's instance→tuple)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Construct and answer an object type which is a subtype of `supertype`
 * augmented by the specified tuple of field definitions.
 * 
 * Parameters:
 *    supertype - An object type that must be a supertype of the answer.
 *    newDefinitions - A tuple of 2-tuples. Each 2-tuple consists of 1) an atom
 *       that uniquely identifies the field and 2) the field type, i.e., the
 *       type of value that instances of the answer may store in the field. If
 *       the field atom is defined by `supertype`, then the new field type must
 *       be a subtype of the field type as defined in `supertype`, i.e., it must
 *       be covariantly specialized.
 * Returns:
 *    The requested object type.
 */
Method "extend_with«_:_‡,»" is
[
	supertype : object meta,
	newDefinitions : <<atom, any meta…|2>…|1..>
|
	fieldAtoms ::= stripe newDefinitions at 1;
	If |fieldAtoms→set| ≠ |fieldAtoms| then
	[
		early failure function(object type extension contains duplicates code);
	];
	subtype ::= (supertype→tuple ++ newDefinitions)→object type;
	If ¬subtype ⊆ supertype then
	[
		early failure function(
			object type extension did not produce subtype code);
	];
	subtype;
] : object meta;

/**
 * Object type extension statically requires that:
 *
 * - Every field atom of the extension is known.
 * - Each field atom of the extension appears only once during extension.
 * - Each field atom of the extension is either 1) not present in the supertype
 *   or 2) specifies a type which covaries with the field type expressed in the
 *   supertype.
 *
 * Parameters:
 *    meta - The supertype's type.
 *    newDefinitionTypes - A lexical tuple type.
 * Return:
 *    The strongest possible object metatype for the given argument types.
 */
Semantic restriction "extend_with«_:_‡,»" is
[
	meta : object meta's type,
	newDefinitionTypes : <<atom, any meta…|2>…|1..>'s type
|
	supertype ::= meta's instance;
	oldDefinitions ::= supertype→map;
	newDefinitions : field type map := {};
	From 1 to |newDefinitionTypes' leading types| + 1 do
	[
		index : natural number
	|
		def ::= newDefinitionTypes[index];
		atomType ::= def[1];
		newType ::= def[2]'s instance;
		If |atomType| ≠ 1 then
		[
			Reject parse, expected: "all field atoms to be known statically";
		];
		fieldAtom ::= atomType's instance;
		If fieldAtom ∈ newDefinitions then
		[
			Reject parse, expected:
				fieldAtom's name
				++ " to appear only once during extension (but it already\
				\| appeared with type = "
				++ primitive description of newDefinitions[fieldAtom]
				++ ")";
		];
		oldType ::= oldDefinitions[fieldAtom] else [ any; ];
		If ¬newType ⊆ oldType then
		[
			Reject parse, expected:
				"covariant specialization of "
				++ fieldAtom's name
				++ " (but new field type "
				++ primitive description of newType
				++ " is not a subtype of "
				++ primitive description of oldType
				++ ")";
		];
		newDefinitions := eject ↑newDefinitions + fieldAtom→newType;
	];
	((supertype→tuple ++ newDefinitions' bindings)→object type)'s type;
];

/**
 * Construct and answer an object which is an instance of `objectType` and whose
 * field values are determined by `optional`.
 * 
 * Parameters:
 *    objectType - An object type that must be a supertype of the answer.
 *    optional - A tuple of field assignments. The outermost tuple may be empty
 *       (but only to support the case that `objectType = object`), but usually
 *       contains a single tuple of field assignments. A field assignment is a
 *       2-tuple that consists of 1) an atom that uniquely identifies the field
 *       and 2) the field value.
 * Returns:
 *    The requested object type.
 */
Method "a|an_«with«_:=_‡,»»" is
[
	objectType : object meta,
	optional : <<<atom, any…|2>…|1..>…|0..1>
|
	assignments ::= if optional is empty then [ <>; ] else [ optional[1]; ];
	fieldAtoms ::= stripe assignments at 1;
	If |fieldAtoms→set| ≠ |fieldAtoms| then
	[
		early failure function(object instantiation contains duplicates code);
	];
	If |fieldAtoms| ≠ |objectType→tuple| then
	[
		early failure function(object instantiation invalid code);
	];
	newObject ::= assignments→object;
	If ¬newObject ∈ objectType then
	[
		early failure function(
			object instantiation did not produce instance code);
	];
	newObject;
];

/**
 * Object instantiation statically requires that:
 *
 * - Every field atom of the instantiation tuple is known.
 * - Each field atom of the instantiation tuple appears only once during
 *   instantiation.
 * - An assigned value conforms to the field type.
 * - An assignment occurs for every field of the object type.
 *
 * Parameters:
 *    meta - The type of the template object type.
 *    optional - A lexical tuple type.
 * Return:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "a|an_«with«_:=_‡,»»" is
[
	meta : object meta's type,
	optional : <<<atom, any…|2>…|1..>…|0..1>'s type
|
	objectType ::= meta's instance;
	definitions ::= objectType→map;
	assignments : field type map := {};
	From 1 to relevant |optional[1]| do
	[
		index : natural number
	|
		def ::= optional[1][index];
		atomType ::= def[1];
		valueType ::= def[2];
		If |atomType| ≠ 1 then
		[
			Reject parse, expected: "all field atoms to be known statically";
		];
		fieldAtom ::= atomType's instance;
		If fieldAtom ∈ assignments then
		[
			Reject parse, expected:
				fieldAtom's name
				++ " to appear only once during instantiation (but it already\
				\| appeared with type = "
				++ primitive description of assignments[fieldAtom]
				++ ")";
		];
		requiredType ::= definitions[fieldAtom] else [ any; ];
		If ¬valueType ⊆ requiredType then
		[
			Reject parse, expected:
				"valid assignment to "
				++ fieldAtom's name
				++ " (but "
				++ primitive description of valueType
				++ " is not a subtype of "
				++ primitive description of requiredType
				++ ")";
		];
		assignments := eject ↑assignments + fieldAtom→valueType;
	];
	missing ::= filter definitions' keys by [ a : atom | ¬a ∈ assignments; ];
	If |missing| ≠ 0 then
	[
		Reject parse, expected:
			"assignments for all fields of "
			++ primitive description of objectType
			++ " (but assignments are missing for "
			++ primitive description of missing
			++ ")";
	];
	assignments→object type;
];

/* TODO: [TLS] Document this! */
Method "«Public»?«Explicit|explicit»?\
		\|Class|class_extends_«with public«_:_‡,»»«with private«_:_‡,»»" is
[
	public : boolean,
	explicit : boolean,
	className : <character…|1..>,
	supertype : object meta,
	publicOptional : <<<atom, any meta…|2>…|1..>…|0..1>,
	privateOptional : <<<atom, any meta…|2>…|1..>…|0..1>
|
	/* Extract the extensions. */
	publicDefs ::= if publicOptional is empty
		then [ <>; ]
		else [ publicOptional[1]; ];
	privateDefs ::= if privateOptional is empty
		then [ <>; ]
		else [ privateOptional[1]; ];
	newDefinitions ::= publicDefs ++ privateDefs;
	/* Verify the uniqueness of the field atoms. */
	fieldAtoms ::= stripe newDefinitions at 1;
	If |fieldAtoms→set| ≠ |fieldAtoms| then
	[
		early failure function(object type extension contains duplicates code);
	];
	/* If necessary, then generate a field definition that guarantees
	 * uniqueness among object types.
	 */
	explicitDef : <<atom, any meta…|2>…|0..1> := <>;
	If explicit then
	[
		explicitAtom ::= new atom "explicit-" ++ className;
		explicitDef := <<explicitAtom, explicitAtom's type>>;
	];
	/* Construct and verify the subtype. */
	subtype ::= (supertype→tuple ++ newDefinitions ++ explicitDef)→object type;
	subtypeMap ::= subtype→map;
	If ¬subtype ⊆ supertype then
	[
		early failure function(
			object type extension did not produce subtype code);
	];
	/* Define the class: give the object type a name, define a method that
	 * answers the object type, define methods that access the field
	 * definitions, publish the method and public fields (if appropriate).
	 */
	subtype's name := className;
	Method className is new []→(subtype's type) applying [ subtype; ];
	If public then [ Publish new name: className; ];
	For each stripe publicDefs at 1 do
	[
		fieldAtom : atom
	|
		methodName ::= "_'s⁇" ++ fieldAtom's name;
		fieldType ::= subtypeMap[fieldAtom];
		classFunctionType ::= [subtype's type]→(fieldType's type);
		Method methodName is
			new classFunctionType applying [ x : any | fieldType; ];
		instanceFunctionType ::= [subtype]→fieldType;
		Method methodName is
			new instanceFunctionType
			applying [ x : object | x→map[fieldAtom]; ];
		If public then [ Publish new name: methodName; ];
	];
	For each stripe privateDefs at 1 do
	[
		fieldAtom : atom
	|
		methodName ::= "_'s⁇" ++ fieldAtom's name;
		fieldType ::= subtypeMap[fieldAtom];
		classFunctionType ::= [subtype's type]→(fieldType's type);
		Method methodName is
			new classFunctionType applying [ x : any | fieldType; ];
		instanceFunctionType ::= [subtype]→fieldType;
		Method methodName is
			new instanceFunctionType
			applying [ x : object | x→map[fieldAtom]; ];
	];
] : ⊤;

color ::= new atom "color";
texture ::= new atom "texture";
flavor ::= new atom "flavor";

Class "colorful" extends object
	with public
		color : enumeration of
			{"red", "orange", "yellow", "green", "blue", "indigo", "violet"};

Class "textured" extends object
	with public
		texture : enumeration of {"rough", "smooth"};

Class "textured RGB" extends colorful ∩ textured
	with public
		color : enumeration of {"red", "green", "blue"};

trgb ::= a textured RGB with color := "green", texture := "smooth";
Print: "trgb=";
Print: primitive description of trgb;
Print: "\n";
Print: "trgb's color=";
Print: primitive description of trgb's color;
Print: "\n";
Print: "trgb's texture=";
Print: primitive description of trgb's texture;
Print: "\n";