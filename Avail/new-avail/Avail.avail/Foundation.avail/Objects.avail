/*
 * Objects.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Objects"
Versions
	"dev"
Uses
	"Assertions",
	"Bootstrap",
	"Control Structures",
	"Early Types",
	"Enumeration Support",
	"Literals",
	"Logic",
	"Maps",
	"Math",
	"Sets",
	"Tuples"
Body

/**
 * Strengthen object type construction. If the enumeration of keys is known,
 * then it is possible to strengthen the object metatype (to one whose keys are
 * drawn from the enumeration and which has the map's value type as the type of
 * each field type).
 * 
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object metatype for the given argument types.
 */
Semantic restriction "_→object type" is
[
	mapType : field type map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object type)'s type;
	]
	/* If the enumeration of keys is known and equals the cardinality of the
	 * map, then answer the nearest object type supertype with these keys.
	 */
	else if [ |{||mapType||'s lower bound, ||mapType||'s upper bound}| = 1
		∧ [ |mapType's key type| = ||mapType||'s lower bound; ]; ] then
	[
		atoms ::= mapType's key type's instances;
		defs ::= atoms→tuple zip |atoms| of mapType's value type's instance;
		(defs→object type)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Strengthen object type construction.
 * 
 * Parameters:
 *    tupleType -
 * Returns:
 *    The strongest possible object metatype for the given argument types.
 */
Semantic restriction "_→object type" is
[
	tupleType : field type tuple's type
|
	/* Leverage an instance type. */
	if |tupleType| = 1 then
	[
		(tupleType's instance→object type)'s type;
	]
	else
	[
		limit ::= |tupleType's leading types| + 1;
		/* `defs` are the guaranteed field definitions. A field definition is
		 * only certain when the field atom is certain.
		 */
		defs : field type map := {};
		/* `constraints` are augmented when a particular definition tuple's
		 * field atom is not statically known. This map is used to weaken `defs`
		 * after all definition tuples have been processed.
		 */
		constraints : field type map := {};
		/* `universal` is the type union of all field types for which the
		 * corresponding field is merely `atom`, i.e., the actual fields are not
		 * statically known. It is used to weaken `defs` after all definition
		 * tuples have been processed.
		 */
		universal : any meta := ⊥;
		From 1 to limit do
		[
			index : natural number
		|
			defTuple ::= tupleType[index];
			atomType ::= defTuple[1];
			defType ::= defTuple[2]'s instance;
			/* The field atom is known exactly. Therefore, we can confidently
			 * say that the resulting object type must contain this field.
			 */
			if |atomType| = 1 then
			[
				fieldAtom ::= atomType's instance;
				fieldType ::= defs[fieldAtom] else [ ⊥; ] ∪ defType;
				defs := eject ↑defs + fieldAtom→fieldType;
			]
			/* We know one or more fields with which this type is associated, so
			 * record this knowledge into `constraints`.
			 */
			else if [ |atomType| ≠ ∞; ] then
			[
				atoms ::= atomType's instances;
				For each atoms do
				[
					fieldAtom : atom
				|
					fieldType ::= constraints[fieldAtom] else [ ⊥; ] ∪ defType;
					constraints := eject ↑constraints + fieldAtom→fieldType;
				];
			]
			/* We don't know anything about the field. Treat the field type as a
			 * universal constraint.
			 */
			else
			[
				Assert: atomType = atom;
				universal := eject ↑universal ∪ defType;
			];
		];
		/* Weaken each value of `defs` by all applicable constraints. */
		defs := map eject ↑defs through
			[
				fieldAtom : atom,
				fieldType : any meta
			|
				fieldType ∪ constraints[fieldAtom] else [ ⊥; ] ∪ universal;
			];
		(defs→object type)'s type;
	];
];

/**
 * Strengthen object construction.
 *
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object" is
[
	mapType : field map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object)'s type;
	]
	/* If the enumeration of keys is known and equals the cardinality of the
	 * map, then answer the nearest object type supertype with these keys.
	 */
	else if [ |{||mapType||'s lower bound, ||mapType||'s upper bound}| = 1
		∧ [ |mapType's key type| = ||mapType||'s lower bound; ]; ] then
	[
		atoms ::= mapType's key type's instances;
		fieldAssignments ::= atoms→tuple zip |atoms| of mapType's value type;
		(fieldAssignments→object)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Strengthen object construction.
 * 
 * Parameters:
 *    tupleType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object" is
[
	tupleType : field tuple's type
|
	/* Leverage an instance type. */
	if |tupleType| = 1 then
	[
		(tupleType's instance→object)'s type;
	]
	else
	[
		limit ::= |tupleType's leading types| + 1;
		/* `defs` are the guaranteed field definitions. A field definition is
		 * only certain when the field atom is certain.
		 */
		defs : field type map := {};
		/* `constraints` are augmented when a particular definition tuple's
		 * field atom is not statically known. This map is used to weaken `defs`
		 * after all definition tuples have been processed.
		 */
		constraints : field type map := {};
		/* `universal` is the type union of all field types for which the
		 * corresponding field is merely `atom`, i.e., the actual fields are not
		 * statically known. It is used to weaken `defs` after all definition
		 * tuples have been processed.
		 */
		universal : any meta := ⊥;
		From 1 to limit do
		[
			index : natural number
		|
			defTuple ::= tupleType[index];
			atomType ::= defTuple[1];
			defType ::= defTuple[2];
			/* The field atom is known exactly. Therefore, we can confidently
			 * say that the resulting object type must contain this field.
			 */
			if |atomType| = 1 then
			[
				fieldAtom ::= atomType's instance;
				fieldType ::= defs[fieldAtom] else [ ⊥; ] ∪ defType;
				defs := eject ↑defs + fieldAtom→fieldType;
			]
			/* We know one or more fields with which this type is associated, so
			 * record this knowledge into `constraints`.
			 */
			else if [ |atomType| ≠ ∞; ] then
			[
				atoms ::= atomType's instances;
				For each atoms do
				[
					fieldAtom : atom
				|
					fieldType ::= constraints[fieldAtom] else [ ⊥; ] ∪ defType;
					constraints := eject ↑constraints + fieldAtom→fieldType;
				];
			]
			/* We don't know anything about the field. Treat the field type as a
			 * universal constraint.
			 */
			else
			[
				Assert: atomType = atom;
				universal := eject ↑universal ∪ defType;
			];
		];
		/* Weaken each value of `defs` by all applicable constraints. */
		defs := map eject ↑defs through
			[
				fieldAtom : atom,
				fieldType : any meta
			|
				fieldType ∪ constraints[fieldAtom] else [ ⊥; ] ∪ universal;
			];
		defs→object type;
	];
];

/**
 * Static information about objects is extremely limited, so strengthening is
 * really only possible when the argument is an instance type.
 * 
 * Parameters:
 *    anObject -
 * Returns:
 *    The strongest possible map type for the given arguments.
 */
Semantic restriction "_→map" is
[
	anObjectType : object meta
|
	if |anObjectType| = 1 then
	[
		(anObjectType's instance→map)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Static information about object is extremely limited, so strengthening is
 * really only possible when the argument is an instance type.
 * 
 * Parameters:
 *    anObjectType -
 * Returns:
 *    The strongest possible tuple type for the given arguments.
 */
Semantic restriction "_→tuple" is
[
	anObjectType : object meta
|
	if |anObjectType| = 1 then
	[
		(anObjectType's instance→tuple)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/*
Method "extend_with«_::=_‡,»" is
[
	supertype : object meta,
	newDefinitions : <<atom, any meta…|2>…|1..>
|
	(supertype→tuple ++ newDefinitions)→object type;
] : object meta;

Semantic restriction "extend_with«_::=_‡,»" is
[
	meta : object meta's type,
	newDefinitions : <<atom, any meta…|2>…|1..>'s type
|
	supertype ::= meta's instance;
	oldDefinitions ::= supertype→map;
	For each newDefinitions[1..|newDefinitions's leading types| + 1] do
	[
		def : <atom, any meta…|2>'s type
	|
		If |def[1]| ≠ 1 then
		[
			Reject parse, expected: "field atoms to be known statically";
		];
		fieldAtom ::= def[1]'s instance;
		If fieldAtom ∈ oldDefinitions
			∧ [ ¬def[2] ⊆ oldDefinitions[fieldAtom]; ] then
		[
			Reject parse, expected:
				"convariant specialization of "
				++ primitive description of fieldAtom's name
				++ " (but new field type "
				++ primitive description of def[2]
				++ " is not a subtype of "
				++ primitive description of oldDefinitions[fieldAtom]
				++ ")";
		];
	];
	⊤;
];
*/