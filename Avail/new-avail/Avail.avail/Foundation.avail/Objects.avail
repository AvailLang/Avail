/*
 * Objects.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Objects"
Versions
	"dev"
Uses
	"Assertions",
	"Bootstrap",
	"Control Structures",
	"Early Types",
	"Enumeration Support",
	"Literals",
	"Logic",
	"Maps",
	"Math",
	"Sets",
	"Tuples"
Body

/**
 * Strengthen object type construction. If the enumeration of keys is known,
 * then it is possible to strengthen the object metatype (to one whose keys are
 * drawn from the enumeration and which has the map's value type as the type of
 * each field type).
 * 
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object type" is
[
	mapType : field type map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object type)'s type;
	]
	/* If the enumeration of keys is known, then answer the nearest object
	 * metatype supertype with these keys.
	 */
	else if [ |mapType's key type| ≠ ∞; ] then
	[
		atoms ::= mapType's key type's instances;
		defs ::= atoms→tuple zip |atoms| of mapType's value type's instance;
		(defs→object type)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];

/**
 * Strengthen object type construction.
 * 
 * Parameters:
 *    tupleType -
 * Returns:
 *    The strongest possible object type for the given argument types.
 */
Semantic restriction "_→object type" is
[
	tupleType : field type tuple's type
|
	/* Leverage an instance type. */
	if |tupleType| = 1 then
	[
		(tupleType's instance→object type)'s type;
	]
	else
	[
		limit ::= |tupleType's leading types| + 1;
		defs : field type map := {};
		/* `union` is the type union of all field types for which the
		 * corresponding field is merely `atom`, i.e., the actual fields are not
		 * statically known.
		 */
		union : any meta := ⊥;
		From 1 to limit do
		[
			index : natural number
		|
			defTuple ::= tupleType[index];
			atomType ::= defTuple[1];
			defType ::= defTuple[2]'s instance;
			/* We don't know anything about the field, only that this field type
			 * is part of the resulting object type.
			 */
			if atomType = atom then
			[
				union := eject ↑union ∪ defType;
			]
			/* We know one or more fields with which this type is associated, so
			 * record this knowledge.
			 */
			else
			[
				Assert: |atomType| ≠ ∞;
				atoms ::= atomType's instances;
				For each atoms do
				[
					fieldAtom : atom
				|
					fieldType ::= defs[fieldAtom] else [ ⊥; ] ∪ defType;
					defs := eject ↑defs + fieldAtom→fieldType;
				];
			];
		];
		/* Weaken each value of `defs` by `union`. */
		defs := map eject ↑defs through
			[
				fieldAtom : atom,
				fieldType : any meta
			|
				fieldType ∪ union;
			];
		(defs→object type)'s type;
	];
];

/**
 * Strengthen object construction. If the enumeration of keys is known, then it
 * is possible to strengthen the object type (to one whose keys are drawn from
 * the enumeration and which has the map's value type as the type of each
 * field).
 *
 * Parameters:
 *    mapType -
 * Returns:
 *    The strongest possible object for the given argument types.
 */
Semantic restriction "_→object" is
[
	mapType : field map's type
|
	/* Leverage an instance type. */
	if |mapType| = 1 then
	[
		(mapType's instance→object)'s type;
	]
	/* If the enumeration of keys is known, then answer the nearest object type
	 * supertype with these keys.
	 */
	else if [ |mapType's key type| ≠ ∞; ] then
	[
		atoms ::= mapType's key type's instances;
		fieldAssignments ::= atoms→tuple zip |atoms| of mapType's value type;
		(fieldAssignments→object)'s type;
	]
	/* Can't strengthen. */
	else
	[
		⊤;
	];
];
