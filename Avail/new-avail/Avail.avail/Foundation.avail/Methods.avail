/*
 * Methods.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Methods"
Versions
	"dev"
Uses
	"Bootstrap",
	"Control Structures",
	"Enumeration Support",
	"Literals",
	"Logic",
	"Tuples",
	"Types",
	"Variables"
Body

/* TODO: [TLS] It would be nice to uncomment this, but serialization operations
 * aren't -- and possibly can't -- be defined. Talk to Mark about this.
 */
/*
Semantic restriction "method site of_for_" is
[
	methodType : method's type,
	parametersType : <any meta…|>'s type
|
	result : type := ⊤;
	If |methodType| = 1 ∧ [⎣parametersType⎦ = ⎡parametersType⎤] then
	[
		args : <any meta…|> := <>;
		From 1 to ⎣parametersType⎦ do
		[
			index : natural number
		|
			args := (eject ↑args) ++ <parametersType[index]'s instance>;
		];
		aMethod ::= methodType's instance;
		If aMethod has implementation for args then
		[
			result := (method site of aMethod for args)'s type;
		];
	];
	result
];

Semantic restriction "_'s⁇function" is
[
	siteType : method definition's type
|
	if |siteType| = 1 then
	[
		siteType's instance's function's type
	]
	else
	[
		⊤
	]
];
*/