/*
 * Functions.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Functions"
Versions
	"dev"
Extends
Uses
	"Assertions",
	"Bootstrap",
	"Early Control Structures",
	"Early Definers",
	"Early Functions",
	"Early Logic",
	"Enumeration Support",
	"Literals",
	"Math",
	"Phrases",
	"Tuples",
	"Types"
Names
	"_curried"
Body


invokeMethod ::= method for atom for "Invoke|invoke_with_";
flattenMethod ::= method for atom for "flatten_";

/**
 * Convert an n≥2 argument function into a one argument function which returns
 * an n-1 argument function which, when invoked, evaluates the original function
 * with the single argument prepended to the n-1 arguments.
 *
 * More concisely, if f = [a:t, b:t,... | ...] then f curried is
 * [a:t | [b:t,... | f(a,b,...);]
 *
 * Parameters:
 *    originalFunction - The function to ultimately invoke.
 *
 * Returns:
 *    A function that takes the first argument destined for the original
 *    function and returns another function that takes the remainder of the
 *    arguments and invokes the original function.
 */
Public method "_curried" is
[
	originalFunction : function
|
	Assert: |function| ≥ 1 ("cannot curry a zero argument function");

	weakOriginalFunctionConstant ::= ‘`originalFunction`("originalFunction")’;
	originalFunctionConstant ::= cast weakOriginalFunctionConstant
		into [lit : literal ⇒ function | lit];
	originalType ::= originalFunction's type;
	argumentTypes ::= originalType's parameters' type;
	arguments ::= map 1 to ⎣argumentTypes⎦ through [
			n : natural number
		|
			token ::= `"arg" ++ “n”`;
			arg «token : argumentTypes[n]»
		];
	blockToReturn ::=
		«[ arguments[2..] |
			<
				send invokeMethod with
				«<
					originalFunctionConstant,
					(map arguments through [a : argument | «↓a»])
						→ list
				>» : (originalType's return type)
			>
		] : originalType's return type»;
	outerBlock ::=
		«[ arguments[1..1] |
			<
				blockToReturn
			>
		] : blockToReturn's semantic type»;
	generate outerBlock
] : function;

Semantic restriction "_curried" is
[
	originalFunction : function meta
|
	argumentsType ::= originalFunction's parameters' type;
	argumentTypes ::= argumentsType[1..⎣argumentsType⎦];
	
	If |argumentTypes| < 1 then
	[
		Reject parse, expected:
			"function to be curried to accept at least one argument"
	];
	innerType ::= function accepting argumentTypes[2..]
		and returning (originalFunction's return type);
	function accepting argumentTypes[1..1]
		and returning innerType
];

/* TODO: [TLS] Remove this eventually (to a real testing module). */
abc ::= [a : integer, b : integer, c : integer | a + b + c];
bc ::= abc curried(10);
c ::= bc curried(22);
Assert: c(333) = 365;
