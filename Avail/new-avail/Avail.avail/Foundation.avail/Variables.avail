/*
 * Variables.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Variables"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Logic"
Names
Body

/**
 * Strengthen `eject_` to the read type of the argument.
 * 
 * Parameters:
 *    varType - A variable type.
 * Returns:
 *    The read type of the argument.
 */
Semantic restriction "eject_" is
[
	varType : variable meta
|
	if varType's read type = ⊤ then
	[
		Reject parse, expected: "variable to have a read type other than ⊤";
	]
	else
	[
		varType's read type;
	];
];

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 * 
 * Parameters:
 *    typeA - A variable type.
 *    typeB - A variable type.
 * Returns:
 *    ⊤.
 */
Semantic restriction "swap_and_" is
[
	typeA : variable meta,
	typeB : variable meta
|
	if typeA's read type ⊆ typeB's write type
		∧ [ typeB's read type ⊆ typeB's write type; ]
	then
	[
		⊤;
	]
	else
	[
		Reject parse, expected:
			"variable's read/write types to be cross-compatible";
	];
];
