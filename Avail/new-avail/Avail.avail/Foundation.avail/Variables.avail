/*
 * Variables.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Variables"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Literals",
	"Early Logic",
	"Early Math",
	"Enumeration Support"
Names
	"_++",
	"++_",
	"(_++)",
	"(++_)",
	"_--",
	"--_",
	"(_--)",
	"(--_)"
Body

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 * 
 * Parameters:
 *    typeA - A variable type.
 *    typeB - A variable type.
 * Returns:
 *    ⊤.
 */
Semantic restriction "swap_and_" is
[
	typeA : variable meta,
	typeB : variable meta
|
	if typeA's read type ⊆ typeB's write type
		∧ [ typeB's read type ⊆ typeB's write type; ]
	then
	[
		⊤;
	]
	else
	[
		Reject parse, expected:
			"variable's read/write types to be cross-compatible";
	];
];

/**
 * Answer a function that accepts a variable and increments it.
 * 
 * Returns:
 *    The requested function.
 */
Method "increment function" is
[
	[
		var : variable
	|
		↓var := cast eject var into [ t : number | t + 1; ];
	] : ⊤;
];

/**
 * Answer a function suitable for semantically restricting increment/decrement
 * statements.
 * 
 * Returns:
 *    A function that accepts a variable type and requires that it be able to
 *    read/write numbers. It answers ⊤.
 */
Method "increment/decrement semantic restriction" is
[
	[
		varType : variable meta
	|
		If (¬varType's read type ⊆ number)
			∨ [ ¬varType's write type ⊆ number; ]
		then
		[
			Reject parse, expected: "variable to accept and yield numbers";
		];
		⊤;
	];
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * Parameters:
 *    var - A numeric variable.
 */
Method "_++" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * Parameters:
 *    varType -
 * Returns:
 *    ⊤.
 */
Semantic restriction "_++" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, increment the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument prior to the increment.
 */
Method "(_++)" is
[
	var : variable
|
	value ::= eject var;
	↓var := cast value into [ t : number | t + 1; ];
	value;
] : ⊤;

/**
 * Since the increment happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * Parameters:
 *    var - A numeric variable type.
 * Returns:
 *    The read type of the variable type.
 */
Semantic restriction "(_++)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number; ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers";
	];
	varType's read type;
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * Parameters:
 *    var - A numeric variable.
 */
Method "++_" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * Parameters:
 *    varType -
 * Returns:
 *    ⊤.
 */
Semantic restriction "++_" is increment/decrement semantic restriction;

/**
 * Increment the specified value and answer its new value.
 * 
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument after the increment.
 */
Method "(++_)" is
[
	var : variable
|
	↓var := cast eject var into [ t : number | t + 1; ];
	↓var;
];

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by one.
 *
 * Parameters:
 *    var - A numeric variable type.
 * Returns:
 *    The read type of the variable type, or an offset integral type (if the
 *    variable accepts/yields extended integers).
 */
Semantic restriction "(++_)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number; ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers";
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [ t : extended integer meta | t; ];
		lower ::= cast readRange's lower bound + 1
			into [ t : extended integer | t; ];
		upper ::= cast readRange's upper bound + 1
			into [ t : extended integer | t; ];
		integer range
			from lower (inclusive = readRange's lower bound is inclusive)
			to upper (inclusive = readRange's upper bound is inclusive);
	]
	else
	[
		readType;
	];
];

/**
 * Answer a function that accepts a variable and decrements it.
 * 
 * Returns:
 *    The requested function.
 */
Method "decrement function" is
[
	[
		var : variable
	|
		↓var := cast eject var into [ t : number | t - 1; ];
	] : ⊤;
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * Parameters:
 *    var - A numeric variable.
 */
Method "_--" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * Parameters:
 *    varType -
 * Returns:
 *    ⊤.
 */
Semantic restriction "_--" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, decrement the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument prior to the decrement.
 */
Method "(_--)" is
[
	var : variable
|
	value ::= eject var;
	↓var := cast value into [ t : number | t - 1; ];
	value;
] : ⊤;

/**
 * Since the decrement happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * Parameters:
 *    var - A numeric variable type.
 * Returns:
 *    The read type of the variable type.
 */
Semantic restriction "(_--)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number; ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers";
	];
	varType's read type;
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * Parameters:
 *    var - A numeric variable.
 */
Method "--_" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * Parameters:
 *    varType -
 * Returns:
 *    ⊤.
 */
Semantic restriction "--_" is increment/decrement semantic restriction;

/**
 * Decrement the specified value and answer its new value.
 * 
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument after the decrement.
 */
Method "(--_)" is
[
	var : variable
|
	↓var := cast eject var into [ t : number | t - 1; ];
	↓var;
];

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by negative
 * one.
 *
 * Parameters:
 *    var - A numeric variable type.
 * Returns:
 *    The read type of the variable type, or an offset integral type (if the
 *    variable accepts/yields extended integers).
 */
Semantic restriction "(--_)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number; ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers";
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [ t : extended integer meta | t; ];
		lower ::= cast readRange's lower bound - 1
			into [ t : extended integer | t; ];
		upper ::= cast readRange's upper bound - 1
			into [ t : extended integer | t; ];
		integer range
			from lower (inclusive = readRange's lower bound is inclusive)
			to upper (inclusive = readRange's upper bound is inclusive);
	]
	else
	[
		readType;
	];
];

/* Disallow the variable increment/decrement operations from appearing as the
 * argument to parentheses.
 */
invoke
[
	parens ::= cast <"(_)">→set into [ t : {string|whole number} | t; ];
	forbid ::=
		cast
			<
				"_++", "++_", "(_++)", "(++_)",
				"_--", "--_", "(_--)", "(--_)"
			>→set
		into [ t : {string|whole number} | t; ];
	Grammatical restriction parens is <forbid>;
]
with <>;

/**
 * Strengthen `_'s read type`.
 *
 * Parameters:
 *    varType - A variable type.
 * Returns:
 *    The argument's read type's type.
 */
Semantic restriction "_'s read type" is
[
	varType : variable meta's type
|
	varType's instance's read type's type;
];

/**
 * Strengthen `_'s write type`.
 *
 * Parameters:
 *    varType - A variable type.
 * Returns:
 *    The argument's write type's type.
 */
Semantic restriction "_'s write type" is
[
	varType : variable meta's type
|
	varType's instance's write type's type;
];

/**
 * Strengthen `eject_` to the read type of the argument.
 * 
 * Parameters:
 *    varType - A variable type.
 * Returns:
 *    The read type of the argument.
 */
Semantic restriction "eject_" is
[
	varType : variable meta
|
	if varType's read type = ⊤ then
	[
		Reject parse, expected: "variable to have a read type other than ⊤";
	]
	else
	[
		varType's read type;
	];
];
