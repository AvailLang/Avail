/*
 * Early Functions.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Functions"
Versions
	"dev"
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Early Tuples",
	"Early Types",
	"Enumeration Support"
Names
	"_(«_‡,»)"
Body

/**
 * Strengthen the return type of a function type.
 * 
 * Parameters:
 *    functionType - A function type.
 * Returns:
 *    The argument's return type.
 */
Semantic restriction "_'s return type" is
[
	functionType : function's type's type
|
	functionType's instance's return type's type;
];

/* These are error messages. */
sizesIncompatibleMessage ::=
	"size of argument tuple to be compatible with size of applied\
	\| function's parameter tuple";

/**
 * Answer a function suitable for use as a semantic restriction on a function
 * application method.
 * 
 * Returns:
 *    The requested function.
 */
Method "function application semantic restriction function" is
[
	[
		functionType : function meta,
		argumentsType : tuple meta
	|
		/* Check the sizes of the parameters tuple type and the arguments tuple
		 * type before taking advantage of instance types.
		 */
		parametersType ::= functionType's parameters' type;
		parametersSizes ::= ||parametersType||;
		argumentsSizes ::= ||argumentsType||;
		validSizes ::= parametersSizes ∩ argumentsSizes;
		if parametersSizes ≠ ⊥ ∧ [ validSizes = ⊥; ] then
		[
			Reject parse, expected: sizesIncompatibleMessage;
		];
		/* Verify each of the arguments. */
		From 1 to argumentsSizes's lower bound do
		[
			index : natural number
		|
			if ¬argumentsType[index] ⊆ parametersType[index] then
			[
				Reject parse, expected:
					"argument #"
					++ primitive description of index
					++ " of type ("
					++ primitive description of argumentsType[index]
					++ ") to agree with corresponding function "
					++ "parameter type ("
					++ primitive description of parametersType[index]
					++ ")";
			];
			true;
		];
		functionType's return type;
	];
] : [function meta, tuple meta]→type;

/**
 * `invoke_with_` should reject impossible argument tuples.
 *
 * Parameters:
 *    aFunction -
 *    arguments -
 * Returns:
 *    The function's return type.
 */
Semantic restriction "invoke_with_" is
	function application semantic restriction function;

/**
 * Invoke the function with the lexically specified arguments. Answer its
 * result.
 *
 * Parameters:
 *    aFunction - A function.
 *    arguments - The tuple of arguments.
 * Returns:
 *    The value produced by applying the arguments to the function.
 */
Method "_(«_‡,»)" is
[
	aFunction : function,
	arguments : tuple
|
	invoke aFunction with arguments;
] : ⊤;

/**
 * Strengthen the lexical function application operation. If the function is
 * precisely known, then check conformance of the arguments to the parameters;
 * otherwise just check for size compatibility of the two tuples.
 * 
 * Parameters:
 *    functionType -
 *    argumentsType -
 * Returns:
 *    The function type's return type.
 */
Semantic restriction "_(«_‡,»)" is
	function application semantic restriction function;
