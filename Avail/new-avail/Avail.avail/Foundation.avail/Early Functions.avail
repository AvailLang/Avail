/*
 * Early Functions.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Functions"
Versions
	"dev"
Uses
	"Bootstrap",
	"Definers",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Types"
Names
	"_(«_‡,»)"
Body

Semantic restriction "_'s⁇return type" is
[
	functionMeta : function meta's type
|
	functionMeta's instance's return type's type
];

/* These are error messages. */
sizesIncompatibleMessage ::=
	"size of argument tuple to be compatible with size of applied\
	\| function's parameter tuple";

/**
 * Reject improperly sized argument tuples.
 */
Semantic restriction "Invoke|invoke_with_" is
[
	functionType : function meta,
	argumentsType : tuple meta
|
	parametersType ::= functionType's parameters' type;
	parametersSizes ::= ||parametersType||;
	/* If `parameterSizes` = ⊥, then `parametersType` = ⊥. In this case, we
	 * cannot statically ascertain anything interesting about the function and
	 * the arguments to apply.
	 */
	If parametersSizes ≠ ⊥ then
	[
		argumentsSizes ::= ||argumentsType||;
		validSizes ::= parametersSizes ∩ argumentsSizes;
		If validSizes = ⊥ then
		[
			Reject parse, expected: sizesIncompatibleMessage
		];
	];
	functionType's return type
];

/**
 * Invoke the function with the lexically specified arguments. Answer its
 * result.
 *
 * Parameters:
 *    aFunction - A function.
 *    arguments - The tuple of arguments.
 * Returns:
 *    The value produced by applying the arguments to the function.
 */
Public method "_(«_‡,»)" is
[
	aFunction : function,
	arguments : tuple
|
	invoke aFunction with arguments;
] : ⊤;

/**
 * Reject applications whose argument types do not conform to the function's
 * parameter types.
 */
Semantic restriction "_(«_‡,»)" is
[
	functionType : function meta,
	argumentsType : tuple meta
|
	parametersType ::= functionType's parameters' type;
	parametersSizes ::= ||parametersType||;
	/* If `parameterSizes` = ⊥, then `parametersType` = ⊥. In this case, we
	 * cannot statically ascertain anything interesting about the function and
	 * the arguments to apply.
	 */
	If parametersSizes ≠ ⊥ then
	[
		argumentsSizes ::= ||argumentsType||;
		validSizes ::= parametersSizes ∩ argumentsSizes;
		If validSizes = ⊥ then
		[
			Reject parse, expected: sizesIncompatibleMessage
		];
		/* Verify each of the arguments. */
		From 1 to ⎣argumentsSizes⎦ do
		[
			index : natural number
		|
			If ¬argumentsType[index] ⊆ parametersType[index] then
			[
				Reject parse, expected:
					"argument #"
					++ primitive description of index
					++ " of type ("
					++ primitive description of argumentsType[index]
					++ ") to agree with corresponding function "
					++ "parameter type ("
					++ primitive description of parametersType[index]
					++ ")"
			];
			true
		];
	];
	functionType's return type
];

Semantic restriction "_[_]" is
[
	functionMeta : function meta's type,
	index : natural number's type
|
	functionType ::= functionMeta's instance;
	parametersType ::= functionType's parameters' type;
	/* If `functionType` is maximally generic, then `parametersType` may be ⊥.
	 * In this case we don't know anything about the types of the parameters, so
	 * don't strengthen the primitive's answer.
	 */
	if parametersType = ⊥ then
	[
		⊤
	]
	else
	[
		limit ::= cast ⎡parametersType⎤
			into [ t : natural number | t ];
		start ::= cast ⎣index⎦
			into [ t : natural number | t ];
		If start > limit then
		[
			Reject parse, expected:
				"a subscript ("
				++ primitive description of start
				++ " ≤ theSubscript ≤ "
				++ primitive description of ⎡index⎤
				++ ") that could ever be valid ("
				++ primitive description of
					⎣parametersType⎦
				++ " ≤ |theFunctionType| ≤ "
				++ primitive description of limit
				++ ")"
		];
		result : any's type := ⊥;
		end ::= ⎡index⎤ min limit;
		From start to end min limit do
		[
			subscript : natural number
		|
			result := eject ↑result ∪ functionType[subscript];
			true
		];
		/* If `result` is ⊥, then we don't know anything about the types of the
		 * parameters in the specified range. In this case, don't strengthen the
		 * primitive's answer.
		 */
		if result = ⊥ then
		[
			⊤
		]
		else
		[
			result's type
		]
	]
];

Semantic restriction "new_applying_" is
[
	requestedTypeMeta : function meta's type,
	functionType : function meta
|
	requestedTypeMeta's instance
];
