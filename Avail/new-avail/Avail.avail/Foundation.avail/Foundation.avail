/*
 * Foundation.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Foundation"
Versions
	"dev"
Extends
	"Assertions" =
	(
		"Assert:_",
		"Assert:_(_)",
		"Shouldn't happen",
		"assertion-failed exception"
	),
	"Atoms" =
	(
		"_is a|an new⁇field⁇atom",
		"_[_]else_"
	),
	"Backtracking" =
	(
		"Backtracking fence_",
		"Try again",
		"all values of_",
		"first try",
		"first«_»value|values of_",
		"no-backtracking-fence exception",
		"no-checkpoint exception",
		"trial element of_",
		"trial`#of_"
	),
	"Bootstrap" =
	(
		"Abstract method_is_",
		"Clear_",
		"Exit_with_",
		"Euler's number",
		"Forward method_is_",
		"Grammatical restriction_is_",
		"If_then_",
		"If|if_then_else_",
		"Invoke|invoke_with_",
		"Macro_is_",
		"Mark for_character|characters of read ahead",
		"Print:_",
		"Publish new name:_",
		"Reject parse,expected:_",
		"Remove_[_]",
		"Reset to mark",
		"Restart_",
		"Restart_with_",
		"Seal method_at_",
		"Semantic restriction_is_",
		"Terminate current fiber",
		"VM error codes",
		"abstract site",
		"any",
		"argument phrase",
		"arg`«_:_`»",
		"assignment phrase",
		"atom",
		"atom for_",
		"block phrase",
		"boolean",
		"character",
		"code point",
		"concatenate_",
		"constructor_<«_‡,»>(fail with_)",
		"continuation",
		"current fiber",
		"current module",
		"declaration phrase",
		"double",
		"eject_",
		"enumeration of_",
		"exception",
		"expression phrase",
		"extended integer",
		"false",
		"fiber",
		"float",
		"forward site",
		"function",
		"function accepting_and returning_",
		"function from_and_",
		"function implementation",
		"generate_",
		"implementation site",
		"integer",
		"integer range from_(inclusive=_)to_(inclusive=_)",
		"label phrase",
		"list phrase",
		"literal phrase",
		"literal token",
		"literal token⇒_",
		"ln_",
		"local constant phrase",
		"local variable phrase",
		"macro function",
		"map",
		"message bundle",
		"message bundle tree",
		"message_contains groups",
		"method",
		"method exists named_",
		"method for_",
		"method site",
		"method site of_for_",
		"method_._(«_‡,»)(fail with_)",
		"milliseconds since the Epoch",
		"module",
		"module constant phrase",
		"module variable phrase",
		"natural number",
		"new atom_",
		"new_[_]",
		"new_applying_",
		"new↑_",
		"next character",
		"nontype",
		"null",
		"number",
		"nybble",
		"object",
		"phrase",
		"pojo",
		"pojo array",
		"pojo constructor",
		"pojo exception",
		"pojo failure function",
		"pojo self",
		"pojo self type",
		"pojo⊥",
		"primfail`«_:_`»",
		"primitive description of_",
		"primitive failure reason phrase",
		"request termination of_",
		"semantic restrictions for_given_",
		"send phrase",
		"send_with_:_",
		"sequence phrase",
		"seq`«_`»",
		"set",
		"set_'s⁇priority to_",
		"special atoms",
		"static method_._(«_‡,»)(fail with_)",
		"string",
		"swap_and_",
		"termination requested",
		"token",
		"true",
		"tuple",
		"type",
		"variable",
		"variable reference phrase",
		"variable use phrase",
		"whole number",
		"∅",
		"∞",
		"⊤",
		"⊥",
		"-∞",
		"$_",
		"$_@pc=_stack=_[_]caller=_",
		"<_,_`…`|_>",
		"[`…]→_",
		"``_``(_)",
		"`|_'s⁇local variables`|",
		"`|_'s⁇outer variables`|",
		"`|_'s⁇parameters`|",
		"`|_`|",
		"`|`|_`|`|",
		"`|message_'s⁇parameters`|",
		"`«$_:_`»",
		"`«(_:=_)`»",
		"`«[_`|Primitive__]:_^_`»",
		"`«_::=_`»",
		"`«_:=_`»",
		"`«_:_:=_`»",
		"`«_:_`»",
		"`«↑_`»",
		"`«↓_`»(_)",
		"{_`|_}",
		"{_→_`|_}",
		"‘_’",
		"↑_",
		"↓_",
		"↓_`?=_",
		"↓_`?=_'s⁇initialization",
		"∪_",
		"∪_[_.._]",
		"⎡_⎤",
		"⎣_⎦",
		"_bit∧_",
		"_bit∨_",
		"_bit⊕_",
		"_has implementation for_",
		"_is a primitive",
		"_is unassigned",
		"_mod_",
		"_'s⁇arguments",
		"_'s⁇arity",
		"_'s⁇atom",
		"_'s⁇bindings",
		"_'s⁇caller",
		"_'s⁇code point",
		"_'s⁇declaration",
		"_'s⁇declared exceptions",
		"_'s⁇declared type",
		"_'s⁇default type",
		"_'s⁇element type",
		"_'s⁇expressions",
		"_'s⁇function",
		"_'s⁇function type",
		"_'s⁇genuine lower bound",
		"_'s⁇genuine upper bound",
		"_'s⁇implementation",
		"_'s⁇instances",
		"_'s⁇issuing module",
		"_'s⁇key type",
		"_'s⁇keys",
		"_'s⁇leading types",
		"_'s⁇lexeme",
		"_'s⁇line number",
		"_'s⁇literals",
		"_'s⁇maximum stack depth",
		"_'s⁇method",
		"_'s⁇name",
		"_'s⁇name:=_",
		"_'s⁇names",
		"_'s⁇nybblecodes",
		"_'s⁇outer variables",
		"_'s⁇parameters'type",
		"_'s⁇primitive number",
		"_'s⁇priority",
		"_'s⁇program counter",
		"_'s⁇public names",
		"_'s⁇read type",
		"_'s⁇referent",
		"_'s⁇return type",
		"_'s⁇semantic type",
		"_'s⁇stack",
		"_'s⁇stack pointer",
		"_'s⁇starting position",
		"_'s⁇statements",
		"_'s⁇target",
		"_'s⁇token",
		"_'s⁇type",
		"_'s⁇value",
		"_'s⁇value type",
		"_'s⁇values",
		"_'s⁇write type",
		"_++_",
		"_+_",
		"_+_→_",
		"_-_",
		"_._→variable",
		"_<<_",
		"_<<_keeping_bits",
		"_<_",
		"_<«_‡,»>",
		"_=_",
		"_[_.._]",
		"_[_]",
		"_[_]:=_",
		"_[_]→_",
		"_\\_",
		"_^_",
		"_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)",
		"_×_",
		"_÷_",
		"_→character",
		"_→double",
		"_→extended integer",
		"_→float",
		"_→list phrase",
		"_→map",
		"_→object",
		"_→object type",
		"_→set",
		"_→tuple",
		"_⇒_",
		"_∈_",
		"_∩_",
		"_∪_",
		"_≤_",
		"_⊆_",
		"_⨉_^_"
	),
	"Casts" =
	(
		"Cast|cast each of_into_",
		"Cast|cast each of_into_else_",
		"Cast|cast_into_",
		"bad-cast exception"
	),
	"Characters" =
	(
		"_is a letter",
		"_is an Arabic numeral",
		"_is uppercase",
		"_is lowercase",
		"_is titlecase",
		"_is whitespace",
		"uppercase_",
		"lowercase_",
		"titlecase_"
	),
	"Collections" =
	(
		"For each of⁇_do_",
		"Require:_accepts_",
		"any of_satisfies_",
		"count of_where_",
		"each of_satisfies_",
		"filter_by_",
		"group_by_",
		"map and filter_by_",
		"map_through_",
		"_is empty",
		"_[_]else_",
		"_∉_"
	),
	"Control Structures" =
	(
		"Cast|cast_into_else_",
		"Cast|cast_into«_‡,»«else_»",
		"Do_until_",
		"Do_until_alternate with_",
		"Do_while_",
		"Do_while_alternate with_",
		"Exit_",
		"From_to_by_do_",
		"From_to_do_",
		"Ignore:_",
		"Repeat_",
		"Repeat__times",
		"Unless_then_",
		"Until_",
		"Until_do_",
		"While_",
		"While_do_",
		"Choose|choose_from_where«_is_‡,»«,else_»",
		"here",
		"If|if_then_«else if_then_»«else_»",
		"Unless|unless_then_else_",
		"Unless|unless_then_«else unless_then_»«else_»",
		"(_)"
	),
	"Definers" =
	(
		"Method_is stable at_",
		"Method_is_",
		"Private abstract method_is_",
		"Private forward method_is_",
		"Private method_is_",
		"Private stable abstract method_is_",
		"Private stable forward method_is_",
		"Private stable method_is_",
		"Public abstract method_is_",
		"Public forward method_is_",
		"Public method_is_",
		"Public stable abstract method_is_",
		"Public stable forward method_is_",
		"Public stable method_is_",
		"Public read-only variable_is_",
		"Public variable_is_",
		"Require:_is private",
		"Require:_is public",
		"Stable abstract method_is_",
		"Stable forward method_is_",
		"Stable method_is_"
	),
	"Enumeration Support" =
	(
		"{_}ᵀ",
		"{«_‡,»}ᵀ",
		"_'s⁇instance"
	),
	"Exceptions" =
	(
		"Java-class-not-available exception",
		"Java-field-not-available exception",
		"Java-field-reference-is-ambiguous exception",
		"Java-marshaling-failed exception",
		"Java-method-not-available exception",
		"Java-method-reference-is-ambiguous exception",
		"Guard|guard_«intercept_»«ensure_»",
		"Raise_",
		"alternative-must-not-contain-arguments exception",
		"ambiguous-name exception",
		"arithmetic exception",
		"bad-argument exception",
		"bad-format exception",
		"bad-message exception",
		"bad-phrase exception",
		"bad-primitive exception",
		"block-compilation-failed exception",
		"block-contains-invalid-statements exception",
		"block-is-invalid exception",
		"block-must-not-contain-outers exception",
		"cannot-add-unlike-infinities exception",
		"cannot-convert-not-a-number-to-integer exception",
		"cannot-divide-by-zero exception",
		"cannot-divide-infinities exception",
		"cannot-mark-handler-frame exception",
		"cannot-modify-final-Java-field exception",
		"cannot-multiply-zero-and-infinity exception",
		"cannot-read-unassigned-variable exception",
		"cannot-store-incorrectly-typed-value exception",
		"cannot-subtract-like-infinities exception",
		"cannot-swap-contents-of-differently-typed-variables exception",
		"cascade exception",
		"cascade_",
		"case-insensitive-expression-canonization exception",
		"causal exception",
		"code-generation exception",
		"compilation-is-over exception",
		"continuation-expected-stronger-type exception",
		"declaration-kind-does-not-support-assignment exception",
		"declaration-kind-does-not-support-reference exception",
		"definition exception",
		"descriptive exception",
		"descriptive_",
		"double-question-mark-must-follow-a-simple-or-simple-group exception",
		"element-access exception",
		"empty-format-variable exception",
		"error message",
		"expected-operator-after-backquote exception",
		"format-variable-interpolation-failed exception",
		"function-disagrees-with-primitive-restriction exception",
		"general-I/O exception",
		"handler-sentinel exception",
		"I/O exception",
		"incorrect-argument-type exception",
		"incorrect-number-of-arguments exception",
		"incorrect-type-for-boolean-group exception",
		"incorrect-type-for-complex-group exception",
		"incorrect-type-for-counting-group exception",
		"incorrect-type-for-group exception",
		"incorrect-use-of-double-dagger exception",
		"instantiation exception",
		"invalid-argument exception",
		"invalid-format-metacharacter-escape exception",
		"invalid-format-metacharacter-use exception",
		"invalid-format-variable exception",
		"invalid-handle exception",
		"invalid-primitive-number exception",
		"invocation exception",
		"key-not-found exception",
		"local-type-literal-is-not-a-type exception",
		"macro-argument-must-be-a-parse-node exception",
		"method-implementation-lookup-failed exception",
		"method-is-sealed exception",
		"method-name-is-not-canonical exception",
		"method-return-type-not-as-forward-declared exception",
		"missing-format-variable-binding exception",
		"negative-size exception",
		"no-handler-frame exception",
		"no-implementation exception",
		"no-method exception",
		"no-special-object exception",
		"no-such-fiber-variable exception",
		"not-enumeration exception",
		"object-instantiation-contains-duplicates exception",
		"object-instantiation-did-not-produce-instance exception",
		"object-type-extension-contains-duplicates exception",
		"object-type-extension-did-not-produce-subtype exception",
		"octothorp-must-follow-a-simple-group exception",
		"outer-type-literal-is-not-a-type exception",
		"permission-denied exception",
		"pojo-type-is-abstract exception",
		"primitive-not-supported exception",
		"question-mark-must-follow-a-simple-group exception",
		"redefined-with-same-argument-types exception",
		"result-type-should-covary-with-arguments exception",
		"runaway-format-variable exception",
		"security exception",
		"sequence-contains-invalid-statements exception",
		"special-atom exception",
		"subscript-out-of-bounds exception",
		"tilde-must-not-follow-argument exception",
		"too-large-to-represent exception",
		"type-restriction-must-accept-only-types exception",
		"unbalanced-guillemets exception",
		"unwind-sentinel exception",
		"variable-use exception",
		"vertical-bar-must-follow-a-simple-or-simple-group exception",
		"wrong-number-of-outers exception",
		"_'s⁇causal exception",
		"_'s⁇error message",
		"_'s⁇stack summary",
		"_'s⁇unhandled exception handler",
		"_'s⁇unhandled exception handler is_"
	),
	"Functions" =
	(
		"_(«_‡,»)",
		"_(««_»«`_»?‡,»)",
		"_(_,`…)",
		"_(`…,_)"
	),
	"Literals" =
	(
		"“_”",
		"<«_‡,»>",
		"{«_‡,»}",
		"{«_→_‡,»}",
		"⎣`|`|_`|`|⎦",
		"$…",
		"¢…"
	),
	"Logic" =
	(
		"¬_",
		"_∧_",
		"_∨_",
		"_≠_",
		"«_‡=»",
		"_⊕_",
		"_↑_",
		"_↓_",
		"_→_",
		"_←_",
		"_↔_",
		"_↛_",
		"_↚_"
	),
	"Maps" =
	(
		"counts for_",
		"integrate_and_with_"
	),
	"Math" =
	(
		"log_of_",
		"max_",
		"min_",
		"negative integer",
		"nonpositive integer",
		"type promotion function for_",
		"-_",
		"[_.._]",
		"[_.._)",
		"(_.._]",
		"(_.._)",
		"⎣_⎦is inclusive",
		"⎡_⎤is inclusive",
		"π",
		"_is finite",
		"_is infinite",
		"_>_",
		"_≥_",
		"_is odd",
		"_is even",
		"«_‡max»",
		"«_‡min»",
		"«_‡«=|≤|<»!»",
		"«_‡«=|≥|>»!»"
	),
	"Methods" =
	(
		"_is«not»?concrete at_"
	),
	"Objects" =
	(
		"a|an_«with«_:=_‡,»»",
		"extend_with«_:_‡,»",
		"«Public»?«Explicit|explicit»?\
			\|Class|class_extends_\
			\|«with field|fields««public»?«reconstructible»?_:_‡,»»\
			\|«with reconstructor|reconstructors««public»?(«_‡,»)‡,»»",
		"_as_«with«_:=_‡,»»"
	),
	"Phrases" =
	(
		"``_``",
		"`«↓_`»",
		"`«<«_‡,»>`»",
		"`«[_`|_]:_`»",
		"`«[_]:_`»"
	),
	"Security" =
	(
		"Completely seal method_"
	),
	"Sets" =
	(
		"_Δ_",
		"_∋_",
		"_⊂_",
		"_⊇_",
		"_⊃_",
		"_∌_",
		"_⊄_",
		"_⊅_"
	),
	"Strings" =
	(
		"format_with unchecked_",
		"format_with_",
		"format_with«…:=_‡,»",
		"format_with«_‡,»",
		"partially format_with_",
		"partially format_with«…:=_‡,»",
		"(A`|An)“_”«else_»",
		"(The)“_”«else_»",
		"(a`|an)“_”«else_»",
		"(the)“_”«else_»",
		"_(base_)",
		"_→integer",
		"“_”«else_»(as list partitioned by_)",
		"“_”«else_»(as simple list)",
		"“_”«else_»(as«conjunctive|disjunctive»!list)",
		"“_”«else_»\
		\|(as«conjunctive|disjunctive»!list with serial|Oxford|Harvard comma)"
	),
	"Tuples" =
	(
		"all indices of_where_",
		"distinct_",
		"drop from_until_",
		"drop from_while_",
		"drop_from_",
		"first index of_where_",
		"flatten_",
		"last index of_where_",
		"left fold_through_",
		"nonempty string",
		"quicksort_",
		"quicksort_with_",
		"relevant`|_`|",
		"right fold_through_",
		"split_after_",
		"split_before_",
		"stripe_at_",
		"take from_until_",
		"take from_while_",
		"take_from_",
		"zip_",
		"Σ_",
		"∏_",
		"_ends with_",
		"_occurrences⁇of_",
		"_starts with_",
		"_to_",
		"_to_by_",
		"_'s⁇head",
		"_'s⁇last",
		"_'s⁇tail",
		"_[_..]",
		"_[.._]",
		"_[_.._]else_",
		"_[_..]else_",
		"_[.._]else_",
		"_[_.._]→_",
		"_[_↔_]",
		"«_‡zip»",
		"«_‡++»"
	),
	"Types" =
	(
		"[«_‡,»]→_",
		"<«_‡,»`…`|_.._>",
		"<«_‡,»`…`|_..>",
		"<«_‡,»`…`|.._>",
		"<«_‡,»`…`|_>",
		"<«_‡,»`…`|>",
		"{_`|_.._}",
		"{_`|_..}",
		"{_`|.._}",
		"{_`|}",
		"{_→_`|_.._}",
		"{_→_`|_..}",
		"{_→_`|.._}",
		"{_→_`|}"
	),
	"Variables" =
	(
		"(↓new↑_:=_)",
		"(↓new↑_`?=_)",
		"_++",
		"++_",
		"(_++)",
		"(++_)",
		"_--",
		"--_",
		"(_--)",
		"(--_)",
		"_is assigned",
		"↓_else_"
	)
Body

