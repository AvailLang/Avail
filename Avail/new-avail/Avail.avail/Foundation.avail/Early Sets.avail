/*
 * Early Sets.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Sets"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Math",
	"Early Types",
	"Enumeration Support",
	"Literals",
	"Early Logic"
Names
Body

/**
 * Strengthen `_'s element type`.
 * 
 * Parameters:
 *    aSetMeta -
 * Returns:
 *    The strongest possible element type.
 */
Semantic restriction "_'s element type" is
[
	aSetMeta : set's type's type
|
	aSetType ::= aSetMeta's instance;
	aSetType's element type's type;
];

/**
 * The static type of the union of two sets is the set type whose element type
 * is the type union of the element types of the sets and whose cardinality
 * requirement is the type union of the cardinality requirements of the sets.
 * 
 * Parameters:
 *    typeA - A set type.
 *    typeB - A set type.
 * Returns:
 *    The strongest possible type of the union of the sets.
 */
Semantic restriction "_∪_" is
[
	typeA : set's type,
	typeB : set's type
|
	lower ::= ||typeA||'s lower bound min ||typeB||'s lower bound;
	upper ::= cast ||typeA||'s upper bound + ||typeB||'s upper bound + 1
		into [ t : whole number | t; ];
	{typeA's element type ∪ typeB's element type | [lower..upper)};
];

/* Make union left associate. */
Grammatical restriction {"_∪_"} is <∅, {"_∪_"}>;

/**
 * The static type of the union of two sets is the set type whose element type
 * is the type union of the element types of the sets and whose cardinality
 * requirement is the type intersection of the cardinality requirements of the
 * sets.
 * 
 * Parameters:
 *    typeA - A set type.
 *    typeB - A set type.
 * Returns:
 *    The strongest possible type of the intersection of the sets.
 */
Semantic restriction "_∩_" is
[
	typeA : set's type,
	typeB : set's type
|
	upper ::= ||typeA||'s upper bound min ||typeB||'s upper bound;
	{typeA's element type ∩ (typeB's element type) | [0..upper)};
];

/* Make intersection left associate. */
Grammatical restriction {"_∩_"} is <∅, {"_∩_"}>;

/**
 * If it can be statically determined that the type of the right-hand argument
 * (A) is a subtype of the type of the left-hand argument (B), and that A's
 * lower bound is greater than or equal to B's lower bound, and that A's upper
 * bound is less than or equal to B's upper bound, then it is known that the
 * return type of _⊆_ is true's type.
 * 
 * Parameters:
 *    typeA - A set type.
 *    typeB - A set type.
 * Returns:
 *    A boolean.
 */
Semantic restriction "_⊆_" is
[
	typeA : set's type,
	typeB : set's type
|
	/* If both arguments are instance types, then extract their instances and
	 * perform the subset operation on them, answering the result's type.
	 */
	if |typeA| = 1 ∧ [ |typeB| = 1; ] then
	[
		a ::= typeA's instance;
		b ::= typeB's instance;
		(a ⊆ b)'s type;
	]
	else
	[
		elementA ::= typeA's element type;
		elementB ::= typeB's element type;
		/* The basic rule is this: If the type intersection of the element type
		 * of `typeA` and the element type of `typeB` is ⊥, then the result must
		 * be false. Otherwise all bets are off.
		 */
		basicRule ::=
			[
				if elementA ∩ elementB = ⊥ then
				[
					false's type;
				]
				else
				[
					boolean;
				];
			];
		sizesB ::= ||typeB||;
		/* This is finesse. If `typeB` is definitely the set of all possible
		 * instances of its (enumeration) element type, then `typeA`'s instances
		 * must be subsets of `typeB`'s instance if `typeA`'s element type is a
		 * subtype of `typeB`'s element type.
		 */
		if |elementB| ≠ ∞
			∧ [ sizesB's lower bound = sizesB's upper bound
			∧ [ |elementB| = sizesB's lower bound; ]; ]
		then
		[
			if elementA ⊆ elementB then
			[
				true's type;
			]
			else basicRule;
		]
		else basicRule;
	];
];

/* Disambiguate `_→_` and `_→set`. */
Grammatical restriction {"_→_"} is <∅, {"set"}>;
