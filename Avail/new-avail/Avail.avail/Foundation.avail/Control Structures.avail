/*
 * Control Structures.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Control Structures"
Versions
	"dev"
Extends
	"Early Control Structures" =
	(
		"(_)",
		"Exit_",
		"cast_into_else_",
		"cast_into_"
	)
Uses
	"Assertions",
	"Bootstrap",
	"Early Functions",
	"Early Tuples",
	"Early Types",
	"Literals",
	"Logic",
	"Math",
	"Variables"
Names
	"From_to_by_do_",
	"From_to_do_",
	"For each_do_",
	"map_through_"
Body

/**
 * Counting loop with customizable step and early exit support. Invoke `action`
 * once for every consecutive value = `start` + N × `step` ≤ `end`, aborting if
 * `action` answers `false` after an iteration.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    step - The amount by which to adjust the value after each iteration.
 *    action - A function that accepts a value in the specified range. If it
 *       answers `true`, then continue to iterate; if it answers `false`, then
 *       terminate iteration early.
 */
Method "From_to_by_do_" is
[
	start : (-∞..∞),
	end : (-∞..∞],
	step : [1..∞),
	action : [⊥]→boolean
|
	value : extended integer := start;
	[
		$loop : $[]→⊤;
		If value ≤ end then
		[
			continue ::= invoke action with <value>;
			value := eject ↑value + step;
			If continue then
			[
				Restart loop;
			];
		];
	]();
] : ⊤;

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞` and the function
 * definitely answers `true`, then strengthen the return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    step -
 *    action -
 */
Semantic restriction "From_to_by_do_" is
[
	start : (-∞..∞)'s type,
	end : (-∞..∞]'s type,
	step : [1..∞)'s type,
	action : [⊥]→boolean's type
|
	upper ::= end's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= start's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	if upper = ∞
		∧ [ end's lower bound = upper
		∧ [ action's return type = true's type; ]; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Counting loop with customizable step and early exit support. Invoke `action`
 * once for every consecutive value = `start` + N × `step` ≥ `end`, aborting if
 * `action` answers `false` after an iteration.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    step - The amount by which to adjust the value after each iteration.
 *    action - A function that accepts a value in the specified range. If it
 *       answers `true`, then continue to iterate; if it answers `false`, then
 *       terminate iteration early.
 */
Method "From_to_by_do_" is
[
	start : (-∞..∞),
	end : [-∞..∞),
	step : (-∞..-1],
	action : [⊥]→boolean
|
	value : extended integer := start;
	[
		$loop : $[]→⊤;
		If value ≥ end then
		[
			continue ::= invoke action with <value>;
			value := eject ↑value + step;
			If continue then
			[
				Restart loop;
			];
		];
	]();
] : ⊤;

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞` and the function
 * definitely answers `true`, then strengthen the return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    step -
 *    action -
 */
Semantic restriction "From_to_by_do_" is
[
	start : (-∞..∞)'s type,
	end : [-∞..∞)'s type,
	step : (-∞..-1]'s type,
	action : [⊥]→boolean's type
|
	upper ::= start's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= end's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	if upper = ∞
		∧ [ end's lower bound = upper
		∧ [ action's return type = true's type; ]; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Counting loop with customizable step. Invoke `action` once for every
 * consecutive value = `start` + N × `step` ≤ `end`.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    step - The amount by which to adjust the value after each iteration.
 *    action - A function that accepts a value in the specified range.
 */
Method "From_to_by_do_" is
[
	start : (-∞..∞),
	end : (-∞..∞],
	step : [1..∞),
	action : [⊥]→⊤
|
	From start to end by step do
	[
		value : extended integer
	|
		invoke action with <value>;
		true;
	];
];

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞`, then strengthen the
 * return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    step -
 *    action -
 */
Semantic restriction "From_to_by_do_" is
[
	start : (-∞..∞)'s type,
	end : (-∞..∞]'s type,
	step : [1..∞)'s type,
	action : [⊥]→⊤'s type
|
	upper ::= end's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= start's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	If upper = ∞ ∧ [ end's lower bound = upper; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Counting loop with customizable step. Invoke `action` once for every
 * consecutive value = `start` + N × `step` ≥ `end`.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    step - The amount by which to adjust the value after each iteration.
 *    action - A function that accepts a value in the specified range.
 */
Method "From_to_by_do_" is
[
	start : (-∞..∞),
	end : [-∞..∞),
	step : (-∞..-1],
	action : [⊥]→⊤
|
	From start to end by step do
	[
		value : extended integer
	|
		invoke action with <value>;
		true;
	];
];

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞`, then strengthen the
 * return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    step -
 *    action -
 */
Semantic restriction "From_to_by_do_" is
[
	start : (-∞..∞)'s type,
	end : [-∞..∞)'s type,
	step : (-∞..-1]'s type,
	action : [⊥]→⊤'s type
|
	upper ::= end's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= start's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	if upper = ∞ ∧ [ end's lower bound = upper; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Counting loop with early exit support. Invoke `action` once for every
 * consecutive number in the range established by `start` and `end`, aborting if
 * `action` answers `false` after an iteration.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    action - A function that accepts a value in the specified range. If it
 *       answers `true`, then continue to iterate; if it answers `false`, then
 *       terminate iteration early.
 */
Method "From_to_do_" is
[
	start : (-∞..∞),
	end : (-∞..∞],
	action : [⊥]→boolean
|
	From start to end by 1 do action;
];

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞` and the function
 * definitely answers `true`, then strengthen the return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    action -
 */
Semantic restriction "From_to_do_" is
[
	start : (-∞..∞)'s type,
	end : [-∞..∞)'s type,
	action : [⊥]→boolean's type
|
	upper ::= end's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= start's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	if upper = ∞
		∧ [ end's lower bound = upper
		∧ [ action's return type = true's type; ]; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Counting loop with early exit support. Invoke `action` once for every
 * consecutive number in the range established by `start` and `end`.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    action - A function that accepts a value in the specified range.
 */
Method "From_to_do_" is
[
	start : (-∞..∞),
	end : (-∞..∞],
	action : [⊥]→⊤
|
	From start to end by 1 do
	[
		value : extended integer
	|
		invoke action with <value>;
		true;
	];
];

/**
 * If possible, then enforce that the specified function will accept all values
 * in the implied range. If the limit is definitely `∞`, then strengthen the
 * return type to ⊥.
 * 
 * Parameters:
 *    start -
 *    end -
 *    action -
 */
Semantic restriction "From_to_do_" is
[
	start : (-∞..∞)'s type,
	end : [-∞..∞)'s type,
	action : [⊥]→⊤'s type
|
	upper ::= end's upper bound;
	If action[1] ≠ ⊥ then
	[
		lower ::= start's lower bound;
		If lower ≤ upper then
		[
			values ::= (lower - 1..upper + 1);
			If ¬values ⊆ action[1] then
			[
				Reject parse, expected:
					"repeatedly applied function to accept all integers from "
					++ primitive description of lower
					++ " to "
					++ primitive description of upper
					++ " (but it only accepts "
					++ primitive description of action[1]
					++ ")";
			];
		];
	];
	if upper = ∞ ∧ [ end's lower bound = upper; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Iteratively apply `action` to each consecutive element of `aTuple`.
 * 
 * Parameters:
 *    aTuple - A tuple.
 *    action - A function that accepts the elements of the tuple.
 */
Method "For each_do_" is
[
	aTuple : tuple,
	action : [⊥]→⊤
|
	index : natural number := 1;
	end ::= |aTuple|;
	[
		$loop : $[]→⊤;
		If index ≤ end then
		[
			invoke action with <aTuple[index]>;
			↑index++;
			Restart loop;
		];
	]();
] : ⊤;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * type union of all element types of `tupleType`, then reject the current
 * parse.
 * 
 * Parameters:
 *    action - A function type.
 *    tupleType - A tuple type.
 */
Method "Require:_accepts_" is
[
	action : [⊥]→⊤'s type,
	tupleType : tuple meta
|
	union ::= ∪ tupleType[1..|tupleType's leading types| + 1];
	If ¬union ⊆ action[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all elements of the tuple ∈ "
			++ primitive description of tupleType
			++ " (but it only accepts "
			++ primitive description of action[1]
			++ ")";
	];
] : ⊤;

/**
 * Ensure that the function will accept all elements of the tuple. If the tuple
 * is certainly nonempty and the function certainly does not complete if
 * applied, then answer ⊥.
 * 
 * Parameters:
 *    tupleType -
 *    action -
 * Returns:
 *    Either ⊤ or ⊥.
 */
Semantic restriction "For each_do_" is
[
	tupleType : tuple meta,
	action : [⊥]→⊤'s type
|
	Require: action accepts tupleType;
	if ||tupleType||'s lower bound > 0 ∧ [ action's return type = ⊥; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Iteratively apply `action` to each element of `aSet`, but in no particular
 * order.
 * 
 * Parameters:
 *    aSet - A set.
 *    action - A function that accepts the elements of the set.
 */
Method "For each_do_" is
[
	aSet : set,
	action : [⊥]→⊤
|
	index : natural number := 1;
	aTuple ::= aSet→tuple;
	end ::= |aTuple|;
	[
		$loop : $[]→⊤;
		If index ≤ end then
		[
			invoke action with <aTuple[index]>;
			↑index++;
			Restart loop;
		];
	]();
] : ⊤;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * element types of `setType`, then reject the current parse.
 * 
 * Parameters:
 *    action - A function type.
 *    setType - A set type.
 */
Method "Require:_accepts_" is
[
	action : [⊥]→⊤'s type,
	setType : set meta
|
	If ¬setType's element type ⊆ action[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all elements of the set ∈ "
			++ primitive description of setType
			++ " (but it only accepts "
			++ primitive description of action[1]
			++ ")";
	];
] : ⊤;

/**
 * Ensure that the function will accept all elements of the set. If the set is
 * certainly nonempty and the function certainly does not complete if applied,
 * then answer ⊥.
 * 
 * Parameters:
 *    setType -
 *    action -
 * Returns:
 *    Either ⊤ or ⊥.
 */
Semantic restriction "For each_do_" is
[
	setType : set meta,
	action : [⊥]→⊤'s type
|
	Require: action accepts setType;
	if ||setType||'s lower bound > 0 ∧ [ action's return type = ⊥; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Iteratively apply `action` to each binding of `aMap`, but in no particular
 * order.
 * 
 * Parameters:
 *    aMap - A map.
 *    action - A function that accepts the bindings of the map.
 */
Method "For each_do_" is
[
	aMap : map,
	action : [⊥, ⊥]→⊤
|
	index : natural number := 1;
	bindings ::= aMap's bindings;
	end ::= |aMap|;
	[
		$loop : $[]→⊤;
		If index ≤ end then
		[
			binding ::= bindings[index];
			invoke action with <binding[1], binding[2]>;
			↑index++;
			Restart loop;
		];
	]();
] : ⊤;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * key and value types of `mapType`, then reject the current parse.
 * 
 * Parameters:
 *    action - A function type.
 *    mapType - A map type.
 */
Method "Require:_accepts_" is
[
	action : [⊥, ⊥]→⊤'s type,
	mapType : map meta
|
	If ¬mapType's key type ⊆ action[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all keys of the map ∈ "
			++ primitive description of mapType
			++ " (but it only accepts "
			++ primitive description of action[1]
			++ ")";
	];
	If ¬mapType's value type ⊆ action[2] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all values of the map ∈ "
			++ primitive description of mapType
			++ " (but it only accepts "
			++ primitive description of action[2]
			++ ")";
	];
] : ⊤;

/**
 * Ensure that the function will accept all bindings of the map. If the map is
 * certainly nonempty and the function certainly does not complete if applied,
 * then answer ⊥.
 * 
 * Parameters:
 *    mapType -
 *    action -
 * Returns:
 *    Either ⊤ or ⊥.
 */
Semantic restriction "For each_do_" is
[
	mapType : map meta,
	action : [⊥, ⊥]→⊤'s type
|
	Require: action accepts mapType;
	if ||mapType||'s lower bound > 0 ∧ [ action's return type = ⊥; ] then
	[
		⊥;
	]
	else
	[
		⊤;
	];
];

/**
 * Iteratively apply `action` to each consecutive element of `aTuple`,
 * collecting the results into a new tuple. Answer this tuple.
 * 
 * Parameters:
 *    aTuple - A tuple.
 *    action - A function that accepts the elements of the tuple.
 * Returns:
 *    A tuple of results of applications of `action` to the elements of
 *    `aTuple`.
 */
Method "map_through_" is
[
	aTuple : tuple,
	action : [⊥]→any
|
	index : natural number := 1;
	result : tuple := <>;
	end ::= |aTuple|;
	[
		$loop : $[]→⊤;
		If index ≤ end then
		[
			result := eject ↑result ++ <invoke action with <aTuple[index]>>;
			↑index++;
			Restart loop;
		];
	]();
	result;
] : ⊤;

/**
 * Ensure that the function will accept all elements of the tuple. If the tuple
 * is certainly nonempty and the function certainly does not complete if
 * applied, then answer ⊥.
 * 
 * Parameters:
 *    tupleType -
 *    action -
 * Returns:
 *    Either ⊤ or ⊥.
 */
Semantic restriction "map_through_" is
[
	tupleType : tuple meta,
	action : [⊥]→any's type
|
	Require: action accepts tupleType;
	If ||tupleType||'s lower bound > 0 then
	[
		If action's return type ∈ {⊤, ⊥} then
		[
			Reject parse, expected:
				"repeatedly applied function to have a return type other than\
				\| ⊤ or ⊥";
		];
	];
	<<>, action's return type… | ||tupleType||>;
];
