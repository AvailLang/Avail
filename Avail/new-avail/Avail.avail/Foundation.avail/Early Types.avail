/*
 * Early Types.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Types"
Versions
	"dev"
Extends
Uses
	"Assertions",
	"Bootstrap",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Variables",
	"Assertions",
	"Early Logic"
Names
	"[«_‡,»]→_",
	"<«_‡,»`…|_.._>",
	"<«_‡,»`…|_..>",
	"<«_‡,»`…|.._>",
	"<«_‡,»`…|_>",
	"<«_‡,»`…|>",
	"{_|_.._}",
	"{_|_..}",
	"{_|.._}",
	/* "{_|_}" */
	"{_|}",
	"{_→_|_.._}",
	"{_→_|_..}",
	"{_→_|.._}",
	/* "{_→_|_}" */
	"{_→_|}"
Body

/*
 * TODO: Implement remaining methods. Implement semantic restrictions for
 * existing/remaining methods. Document existing/remaining methods.
 */

/**
 * Construct and answer a function type from the lexically specified argument
 * types and return type.
 * 
 * Parameters:
 *    argTypes - The lexically specified argument types.
 *    returnType - The return type.
 * Returns:
 *    The requested function type.
 */
Method "[«_‡,»]→_" is
[
	argTypes : tuple of any meta,
	returnType : type
|
	function accepting argTypes and returning returnType;
] : function meta;

/**
 * Strengthen function type construction.
 * 
 * Parameters:
 *    argsTupleType - A tuple type whose element types are instance metatypes.
 *    returnMeta - An instance metatype.
 * Returns:
 *    The instance metatype of the exact function type.
 */
Semantic restriction "[«_‡,»]→_" is
[
	argsTupleType : (tuple of any meta)'s type,
	returnMeta : type's type
|
	/* The tuple was constructed lexically, so it doesn't matter which bound
	 * is used.
	 */
	bound ::= cast ||argsTupleType||'s upper bound
		into [ t : whole number | t; ];
	argMetas ::= argsTupleType[1..bound];
	argTypes : tuple of any meta := <>;
	From 1 to bound do
	[
		index : natural number
	|
		argType ::= cast argMetas[index]'s instance into [ t : any meta | t; ];
		argTypes := eject ↑argTypes ++ <argType>;
		true;
	];
	/* `returnMeta` must be an instance type. */
	returnType ::= returnMeta's instance;
	(function accepting argTypes and returning returnType)'s type;
];

/**
 * Tuple type constructor.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 *	maximumSize - maximum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|_.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[minimumSize..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	minimumSizeType : type of the minimum cardinality
 *	maximumSizeType : type of the minimum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_.._>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	minimumSizeType : whole number's type,
	maximumSizeType : [0..∞]'s type
|
	leadingTypesTypes ::= 
		leadingAndDefaultTypesTypes's leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;
	
	if leadingTypesTypesSize > 0 then [
		From 1 to leadingTypesTypesSize do [ 
   			index : natural number
   		|
	   		typesTypesInstanceTuple := 
	   			if |leadingTypesTypes[index]| ≠ 1 then [
					Assert: leadingTypesTypes[index] = type 
						("Assertion failure - Tuple leading type at index: " 
							++ primitive description of index ++ 
							" has size ≠ 1 and is " ++ 
							primitive description of 
							leadingTypesTypes[index] 
							++ ", however only type is acceptable "
							++ "in this case.");
   					eject ↑typesTypesInstanceTuple ++ <type>; 
				] else [
				    eject ↑typesTypesInstanceTuple ++ 
						<leadingTypesTypes[index]'s instance>;
				];
	/* loop must have terminating condition.  True to complete the full loop.*/
			true;
		];
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes's default type;
	defaultTypeTypeInstance : any;
	if |defaultTypeType| ≠ 1 then [
		Assert: defaultTypeType = type 
			("Assertion failure - Tuple default type is " ++ 
				primitive description of defaultTypeType 
				++ " and has size ≠ 1, however only type is acceptable "
				++ "in this case.");
		defaultTypeTypeInstance := type; 
	] else [
	    defaultTypeTypeInstance := defaultTypeType's instance;
	];
	
	finalDefaultType ::= cast defaultTypeTypeInstance into [t: any's type | t;];

	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
			
	lower ::= minimumSizeType's lower bound;
		
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,finalDefaultType…|[lower..bound)>'s type;
];

/**
 * Tuple type constructor with max cardinality of ∞.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|[minimumSize..∞)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	minimumSizeType : type of the minimum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	minimumSizeType : whole number's type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes's leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;
	
	if leadingTypesTypesSize > 0 then [
		From 1 to leadingTypesTypesSize do [ 
   			index : natural number
   		|
	   		typesTypesInstanceTuple := 
	   			if |leadingTypesTypes[index]| ≠ 1 then [
					Assert: leadingTypesTypes[index] = type 
						("Assertion failure - Tuple leading type at index: " 
							++ primitive description of index ++ 
							" has size ≠ 1 and is " ++ 
							primitive description of 
							leadingTypesTypes[index] 
							++ ", however only type is acceptable "
							++ "in this case.");
   					eject ↑typesTypesInstanceTuple ++ <type>; 
				] else [
				    eject ↑typesTypesInstanceTuple ++ 
						<leadingTypesTypes[index]'s instance>;
				];
	/* loop must have terminating condition.  True to complete the full loop.*/
			true;
		];
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes's default type;
	defaultTypeTypeInstance : any;
	if |defaultTypeType| ≠ 1 then [
		Assert: defaultTypeType = type 
			("Assertion failure - Tuple default type is " ++ 
				primitive description of defaultTypeType 
				++ " and has size ≠ 1, however only type is acceptable "
				++ "in this case.");
		defaultTypeTypeInstance := type; 
	] else [
	    defaultTypeTypeInstance := defaultTypeType's instance;
	];
	
	finalDefaultType ::= cast defaultTypeTypeInstance into [t: any's type | t;];
			
	lower ::= minimumSizeType's lower bound;
		
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,finalDefaultType…|[lower..∞)>'s type;
];

/**
 * Tuple type constructor with minimum cardinality of 0.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 *	maximumSize - maximum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[0..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	maximumSizeType : type of the minimum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|.._>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	maximumSizeType : [0..∞]'s type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes's leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;
	
	if leadingTypesTypesSize > 0 then [
		From 1 to leadingTypesTypesSize do [ 
   			index : natural number
   		|
	   		typesTypesInstanceTuple := 
	   			if |leadingTypesTypes[index]| ≠ 1 then [
					Assert: leadingTypesTypes[index] = type 
						("Assertion failure - Tuple leading type at index: " 
							++ primitive description of index ++ 
							" has size ≠ 1 and is " ++ 
							primitive description of 
							leadingTypesTypes[index] 
							++ ", however only type is acceptable "
							++ "in this case.");
   					eject ↑typesTypesInstanceTuple ++ <type>; 
				] else [
				    eject ↑typesTypesInstanceTuple ++ 
						<leadingTypesTypes[index]'s instance>;
				];
	/* loop must have terminating condition.  True to complete the full loop.*/
			true;
		];
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes's default type;
	defaultTypeTypeInstance : any;
	if |defaultTypeType| ≠ 1 then [
		Assert: defaultTypeType = type 
			("Assertion failure - Tuple default type is " ++ 
				primitive description of defaultTypeType 
				++ " and has size ≠ 1, however only type is acceptable "
				++ "in this case.");
		defaultTypeTypeInstance := type; 
	] else [
	    defaultTypeTypeInstance := defaultTypeType's instance;
	];
	
	finalDefaultType ::= cast defaultTypeTypeInstance into [t: any's type | t;];

	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
		
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,finalDefaultType…|[0..bound)>'s type;
];



/**
 * Tuple type constructor with exact tuple size for cardinality
 *
 * Parameters:
 *  leadingAndDefaultTypes - the type of a tuple of the types in the tuple
 *	exactSize : the minimum and maximum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */
Method "<«_‡,»`…|_>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	exactSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast exactSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[exactSize..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	exactSizeType : type of the minimum and maximum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	exactSizeType : whole number's type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes's leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;
	
	if leadingTypesTypesSize > 0 then [
		From 1 to leadingTypesTypesSize do [ 
   			index : natural number
   		|
	   		typesTypesInstanceTuple := 
	   			if |leadingTypesTypes[index]| ≠ 1 then [
					Assert: leadingTypesTypes[index] = type 
						("Assertion failure - Tuple leading type at index: " 
							++ primitive description of index ++ 
							" has size ≠ 1 and is " ++ 
							primitive description of 
							leadingTypesTypes[index] 
							++ ", however only type is acceptable "
							++ "in this case.");
   					eject ↑typesTypesInstanceTuple ++ <type>; 
				] else [
				    eject ↑typesTypesInstanceTuple ++ 
						<leadingTypesTypes[index]'s instance>;
				];
	/* loop must have terminating condition.  True to complete the full loop.*/
			true;
		];
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes's default type;
	defaultTypeTypeInstance : any;
	if |defaultTypeType| ≠ 1 then [
		Assert: defaultTypeType = type 
			("Assertion failure - Tuple default type is " ++ 
				primitive description of defaultTypeType 
				++ " and has size ≠ 1, however only type is acceptable "
				++ "in this case.");
		defaultTypeTypeInstance := type; 
	] else [
	    defaultTypeTypeInstance := defaultTypeType's instance;
	];
	
	finalDefaultType ::= cast defaultTypeTypeInstance into [t: any's type | t;];
			
	exactBound ::= exactSizeType's lower bound;
		
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,finalDefaultType…|[exactBound..exactBound)>'s type;
];

/**
 * Tuple type constructor with cardinality [0..∞).
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|whole number>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes's leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;
	
	if leadingTypesTypesSize > 0 then [
		From 1 to leadingTypesTypesSize do [ 
   			index : natural number
   		|
	   		typesTypesInstanceTuple := 
	   			if |leadingTypesTypes[index]| ≠ 1 then [
					Assert: leadingTypesTypes[index] = type 
						("Assertion failure - Tuple leading type at index: " 
							++ primitive description of index ++ 
							" has size ≠ 1 and is " ++ 
							primitive description of 
							leadingTypesTypes[index] 
							++ ", however only type is acceptable "
							++ "in this case.");
   					eject ↑typesTypesInstanceTuple ++ <type>; 
				] else [
				    eject ↑typesTypesInstanceTuple ++ 
						<leadingTypesTypes[index]'s instance>;
				];
	/* loop must have terminating condition.  True to complete the full loop.*/
			true;
		];
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes's default type;
	defaultTypeTypeInstance : any;
	if |defaultTypeType| ≠ 1 then [
		Assert: defaultTypeType = type 
			("Assertion failure - Tuple default type is " ++ 
				primitive description of defaultTypeType 
				++ " and has size ≠ 1, however only type is acceptable "
				++ "in this case.");
		defaultTypeTypeInstance := type; 
	] else [
	    defaultTypeTypeInstance := defaultTypeType's instance;
	];
	
	finalDefaultType ::= cast defaultTypeTypeInstance into [t: any's type | t;];
		
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,finalDefaultType…|[0..∞)>'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value and maximum value of the cardinalities.
 * 
 * Parameters:
 *    elementType - The element type.
 *    minimumSize - The minimum cardinality of the set.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum and maximum 
 *    provided values, that conform to `cardinalityType`.
 */
Method "{_|_.._}" is
[
	elementType : any's type,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{elementType|[minimumSize..bound)};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  minimumSizeType - The type of the minimum cardinality of the set
 *	  maximumSizeType - The type of the maximum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|_.._}" is
[
	elementTypeType : any's type's type,
	minimumSizeType : whole number's type,
	maximumSizeType : [0..∞]'s type
|
	lower ::= minimumSizeType's lower bound;
	upper ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	{elementTypeType's instance|[lower..upper)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 *
 * Parameters:
 *    elementType - The element type.
 *    minimumSize - The minimum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum value and 
 *    infinity as the maximum value, that conform to `cardinalityType`.
 */
Method "{_|_..}" is
[
	elementType : any's type,
	minimumSize : whole number
|
	{elementType|[minimumSize..∞)};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  minimumSizeType - The type of the minimum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|_..}" is
[
	elementTypeType : any's type's type,
	minimumSizeType : whole number's type
|
	lower ::= minimumSizeType's lower bound;
	{elementTypeType's instance|[lower..∞)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 *
 * Parameters:
 *    elementType - The element type.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|.._}" is
[
	elementType : any's type,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{elementType|[0..bound)};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  maximumSizeType - The type of the maximum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|.._}" is
[
	elementTypeType : any's type's type,
	maximumSizeType : [0..∞]'s type
|
	upper ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	{elementTypeType's instance|[0..upper)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 * 
 * Parameters:
 *    elementType - The element type.
 *    
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|}" is
[
	elementType : any's type
|
	{elementType|whole number};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|}" is
[
	elementTypeType : any's type's type
 |
 	{elementTypeType's instance|[0..∞)}'s type;
 ];

/**
 * Construct and answer a map type with the specified key type, value type, and
 * uses all whole numbers as the value of the cardinality.
 *
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    minimumSize - The minimum cardinality of the set.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|_.._}" is
[
	keyType : any meta,
	valueType : any meta,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{keyType→valueType|[minimumSize..bound)};
] : map meta;

/**
 * Construct and answer a map type with the specified key type, value type, and
 * the specified minimum value of the cardinality and ∞ as the maximum value of 
 * the cardinality.
 * 
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    minimumSize - The minimum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|_..}" is
[
	keyType : any meta,
	valueType : any meta,
	minimumSize : whole number
|
	{keyType→valueType|[minimumSize..∞)};
] : map meta;

/**
 * Strengthen map type construction.
 *
 * Parameters:
 *    keyTypeType - The key's type's type.
 *    valueTypeType - The value's type's type.
 *    minimumSizeType - The type of the minimum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact map type.
 */
Semantic restriction "{_→_|_..}" is
[
	keyTypeType : any's type's type,
	valueTypeType : any's type's type,
	minimumSizeType : whole number's type
|
	lower ::= minimumSizeType's lower bound;
	{keyTypeType's instance→valueTypeType's instance|[lower..∞)}'s type;
];
	
/**
 * Construct and answer a map type with the specified key type, value type, and
 * the specified maximum value of the cardinality and 0 as the minimum value of 
 * the cardinality.
 *
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|.._}" is
[
	keyType : any meta,
	valueType : any meta,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{keyType→valueType|[0..bound)};
] : map meta;


/**
 * Construct and answer a map type with the specified key type, value type, and
 * uses all whole numbers as the value of the cardinality.
 * 
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|}" is
[
	keyType : any meta,
	valueType : any meta
|
	{keyType→valueType|[0..∞)};
] : map meta;

/**
 * Strengthen the type union operation.
 *
 * Parameters:
 *    metaA - A metatype.
 *    metaB - A metatype.
 * Returns:
 *    The type of the type union of the arguments.
 */
Semantic restriction "_∪_" is
[
	metaA : type's type,
	metaB : type's type
|
	metaA ∪ metaB;
];

/**
 * Strengthen the type intersection operation.
 *
 * Parameters:
 *    metaA - A metatype.
 *    metaB - A metatype.
 * Returns:
 *    The type of the type intersection of the arguments.
 */
Semantic restriction "_∩_" is
[
	metaA : type's type,
	metaB : type's type
|
	metaA ∩ metaB;
];

/**
 * Is `value` an instance of `aType`?
 * 
 * Parameters:
 *    value - An arbitrary value.
 *    aType - An arbitrary type.
 * Returns:
 *    `true` if `value` is an instance of `aType`, `false` otherwise.
 */
Method "_∈_" is
[
	value : any,
	aType : type
|
	value's type ⊆ aType;
];

/**
 * Strengthen the type instance operation.
 * 
 * Parameters:
 *    aType - An arbitrary type.
 *    aMeta - An arbitrary metatype.
 * Returns:
 *    `true` if `aType` is an instance of `aMeta`, `false` otherwise.
 */
Semantic restriction "_∈_" is
[
	aType : any's type,
	aMeta : type's type
|
	/* If `aMeta` isn't known exactly, then the operation cannot be strengthened
	 * statically.
	 */
	if |aMeta| ≠ 1 then
	[
		Assert: aMeta = type;
		boolean;
	]
	else
	[
		/* If `aType's` type is a subtype of `aMeta`, then `aType` is definitely
		 * an instance of `aMeta`.
		 */
		if aType's type ⊆ aMeta then
		[
			true's type;
		]
		else
		[
			/* If the intersection of `aType's type` and `aMeta` is bottom, then
			 * the two hierarchies are disjoint; `aType` cannot be an instance
			 * of `aMeta`.
			 */
			if aType ∩ (aMeta's instance) = ⊥ then
			[
				false's type;
			]
			/* `aMeta` is a subtype of a `aType's type`, e.g., `aMeta` is
			 * `string's type` and `aType's type` is `any's type`. In this case,
			 * no strengthening is possible.
			 */
			else
			[
				Assert: aMeta's instance ⊆ aType;
				boolean;
			];
		];
	];
];
