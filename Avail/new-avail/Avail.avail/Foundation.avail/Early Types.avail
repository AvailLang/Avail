/*
 * Early Types.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Types"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Math",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Variables"
Names
	"[«_‡,»]→_",/*Y*/
	"<«_‡,»`…|_.._>",/*Y*/
	"<«_‡,»`…|_..>",/*Y*/
	"<«_‡,»`…|.._>",/*Y*/
	"<«_‡,»`…|_>",/*Y*/
	"<«_‡,»`…|>",/*Y*/
	"{_|_.._}",/*Y*/
	"{_|_..}",/*Y*/
	"{_|.._}",/*Y*/
	/* "{_|_}" */
	"{_|}",
	"{_→_|_.._}",
	"{_→_|_..}",
	"{_→_|.._}",
	/* "{_→_|_}" */
	"{_→_|}"
Body

/*
 * TODO: Implement remaining methods. Implement semantic restrictions for
 * existing/remaining methods. Document existing/remaining methods.
 */

/**
 * Construct and answer a function type from the lexically specified argument
 * types and return type.
 * 
 * Parameters:
 *    argTypes - The lexically specified argument types.
 *    returnType - The return type.
 * Returns:
 *    The requested function type.
 */
Method "[«_‡,»]→_" is
[
	argTypes : tuple of any meta,
	returnType : type
|
	function accepting argTypes and returning returnType;
] : function meta;

/**
 * Strengthen function type construction.
 * 
 * Parameters:
 *    argsTupleType - A tuple type whose element types are instance metatypes.
 *    returnMeta - An instance metatype.
 * Returns:
 *    The instance metatype of the exact function type.
 */
Semantic restriction "[«_‡,»]→_" is
[
	argsTupleType : (tuple of any meta)'s type,
	returnMeta : type's type
|
	/* The tuple was constructed lexically, so it doesn't matter which bound
	 * is used.
	 */
	bound ::= cast ||argsTupleType||'s upper bound
		into [ t : whole number | t; ];
	argMetas ::= argsTupleType[1..bound];
	argTypes : tuple of any meta := <>;
	From 1 to bound do
	[
		index : natural number
	|
		argType ::= cast argMetas[index]'s instance into [ t : any meta | t; ];
		argTypes := eject &argTypes ++ <argType>;
		true;
	];
	/* `returnMeta` must be an instance type. */
	returnType ::= returnMeta's instance;
	(function accepting argTypes and returning returnType)'s type;
];

Method "<«_‡,»`…|_.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[minimumSize..bound)>;
] : tuple meta;

Method "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|[minimumSize..∞)>;
] : tuple meta;

Method "<«_‡,»`…|.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[0..bound)>;
] : tuple meta;

Method "<«_‡,»`…|_>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	exactSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast exactSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[exactSize..bound)>;
] : tuple meta;

Method "<«_‡,»`…|>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|whole number>;
] : tuple meta;

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value and maximum value of the cardinalities.
 * 
 * Parameters:
 *    elementType - The element type.
 *    minimumSize : a whole number representing the minimum cardinality of the 
 *    	set
 *    maximumSize - a number in the range, [0..∞], representing the maximum
 *    	cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum and maximum 
 *    provided values, that conform to `cardinalityType`.
 */
Method "{_|_.._}" is
[
 	elementType : any's type,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
 	{elementType|[minimumSize..bound)};
]:set meta;


/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 * 
 * Parameters:
 *    elementType - The element type.
 *    minimumSize : a whole number representing the minimum cardinality of the 
 *    	set
 *    
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum value and 
 *    infinity as the maximum value, that conform to `cardinalityType`.
 */
Method "{_|_..}" is
[
 	elementType : any's type,
	minimumSize : whole number
|
 	{elementType|[minimumSize..∞)};
]:set meta;


/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 * 
 * Parameters:
 *    elementType - The element type.
 *    maximumSize - a number in the range, [0..∞], representing the maximum
 *    	cardinality of the set.
 *    
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|.._}" is
[
 	elementType : any's type,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
 	{elementType|[0..bound)};
]:set meta;


/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 * 
 * Parameters:
 *    elementType - The element type.
 *    
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|}" is
[
 	elementType : any's type
|
 	{elementType|whole number};
]:set meta;


