/*
 * Early Types.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Types"
Versions
	"dev"
Extends
Uses
	"Assertions",
	"Bootstrap",
	"Early Control Structures",
	"Early Logic",
	"Early Math",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Variables"
Names
	"[«_‡,»]→_",
	"<«_‡,»`…|_.._>",
	"<«_‡,»`…|_..>",
	"<«_‡,»`…|.._>",
	"<«_‡,»`…|_>",
	"<«_‡,»`…|>",
	"{_|_.._}",
	"{_|_..}",
	"{_|.._}",
	"{_|}",
	"{_→_|_.._}",
	"{_→_|_..}",
	"{_→_|.._}",
	"{_→_|}"
Body

/**
 * Construct and answer a function type from the lexically specified argument
 * types and return type.
 * 
 * Parameters:
 *    argTypes - The lexically specified argument types.
 *    returnType - The return type.
 * Returns:
 *    The requested function type.
 */
Method "[«_‡,»]→_" is
[
	argTypes : tuple of any meta,
	returnType : type
|
	function accepting argTypes and returning returnType;
] : function meta;

/* Make it easier to specify argument types in semantic restrictions. */
Grammatical restriction {"[«_‡,»]→_"} is <∅, {"_'s⁇type"}>;
Grammatical restriction {"[`…]→_"} is <{"_'s⁇type"}>;

/**
 * Strengthen function type construction.
 * 
 * Parameters:
 *    argsTupleType - A tuple type whose element types are instance metatypes.
 *    returnMeta - An instance metatype.
 * Returns:
 *    The instance metatype of the exact function type.
 */
Semantic restriction "[«_‡,»]→_" is
[
	argsTupleType : (tuple of any meta)'s type,
	returnMeta : type's type
|
	/* The tuple was constructed lexically, so it doesn't matter which bound
	 * is used.
	 */
	bound ::= cast ||argsTupleType||'s upper bound
		into [ t : whole number | t; ];
	argMetas ::= argsTupleType[1..bound];
	argTypes : tuple of any meta := <>;
	From 1 to bound do
	[
		index : natural number
	|
		argType ::= cast argMetas[index]'s instance into [ t : any meta | t; ];
		argTypes := eject ↑argTypes ++ <argType>;
		true;
	];
	/* `returnMeta` must be an instance type. */
	returnType ::= returnMeta's instance;
	(function accepting argTypes and returning returnType)'s type;
];

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingTypesTypes - the type of a tuple of the types in the tuple
 *  defaultTypeType - 
 *	cardinalityType - The range of allowed cardinalities.
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<_,_`…|_>" is
[
	leadingTypesTypes : tuple of any meta's type,
	defaultTypeType : any meta's type,
	cardinalityTypeType : whole number meta's type
|
	leadingTupleLeadingAndDefaultTypes :: = 
		leadingTypesTypes' leading types ++ <leadingTypesTypes' default type>;
	leadingTypesTypesSize ::= |leadingTupleLeadingAndDefaultTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do
	[
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTupleLeadingAndDefaultTypes[index]| ≠ 1 then
			[
				Assert: leadingTupleLeadingAndDefaultTypes[index] ∈ {type,⊥}
					("tuple leading type at index: " 
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++  primitive description of
							leadingTupleLeadingAndDefaultTypes[index]
						++ ", however only type or ⊥ is acceptable"
						++ " in this case.");
				if leadingTupleLeadingAndDefaultTypes[index] = type then
				[
					eject ↑typesTypesInstanceTuple ++ <type>; 
				]
				else
				[
					eject ↑typesTypesInstanceTuple;
				];
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTupleLeadingAndDefaultTypes[index]'s instance>;
			];
		true;
	];

	finalDefaultType ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType ∈ {type}
				("tuple default type is "
					++ primitive description of defaultTypeType 
					++ " and has size ≠ 1, however only type is acceptable"
					++ " in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	cardinalityTypeTypeInstance :: = cardinalityTypeType's instance;
	bound ::= cast cardinalityTypeTypeInstance's upper bound + 
		1 into [ t : [0..∞] | t; ];
	lower ::= cardinalityTypeTypeInstance's lower bound;
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <<>,any's type…|[0..∞)> | t;];

	<allTypesToUse,finalDefaultType…|[lower..bound)>'s type;
];

/**
 * Tuple type constructor.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 *	maximumSize - maximum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|_.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[minimumSize..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	minimumSizeType : type of the minimum cardinality
 *	maximumSizeType : type of the maximum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_.._>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	minimumSizeType : whole number's type,
	maximumSizeType : [0..∞]'s type
|
	leadingTypesTypes ::= 
		leadingAndDefaultTypesTypes' leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do
	[
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTypesTypes[index]| ≠ 1 then
			[
				Assert: leadingTypesTypes[index] = type 
					("tuple leading type at index: "
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++ primitive description of leadingTypesTypes[index]
						++ ", however only type is acceptable"
						++ " in this case.");
				eject ↑typesTypesInstanceTuple ++ <type>; 
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTypesTypes[index]'s instance>;
			];
		true;
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes' default type;
	defaultTypeTypeInstance ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType = type 
				("tuple default type is "
					++ primitive description of defaultTypeType
					++ " and has size ≠ 1, however only type is acceptable"
					++ " in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	lower ::= minimumSizeType's lower bound;
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,defaultTypeTypeInstance…|[lower..bound)>'s type;
];

/**
 * Tuple type constructor with max cardinality of ∞.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	minimumSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|[minimumSize..∞)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	minimumSizeType : type of the minimum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_..>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	minimumSizeType : whole number's type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes' leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do
	[
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTypesTypes[index]| ≠ 1 then
			[
				Assert: leadingTypesTypes[index] = type 
					("tuple leading type at index: "
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++ primitive description of leadingTypesTypes[index]
						++ ", however only type is acceptable in this case.");
				eject ↑typesTypesInstanceTuple ++ <type>; 
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTypesTypes[index]'s instance>;
			];
		true;
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes' default type;
	defaultTypeTypeInstance ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType = type 
				("tuple default type is "
					++ primitive description of defaultTypeType
					++ " and has size ≠ 1, however only type is acceptable "
					++ "in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	lower ::= minimumSizeType's lower bound;
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,defaultTypeTypeInstance…|[lower..∞)>'s type;
];

/**
 * Tuple type constructor with minimum cardinality of 0.
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 *	minimumSize - minimum cardinality
 *	maximumSize - maximum cardinality
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|.._>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	maximumSize : [0..∞]
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[0..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *	maximumSizeType : type of the minimum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|.._>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	maximumSizeType : [0..∞]'s type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes' leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do
	[
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTypesTypes[index]| ≠ 1 then
			[
				Assert: leadingTypesTypes[index] = type 
					("tuple leading type at index: "
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++ primitive description of leadingTypesTypes[index]
						++ ", however only type is acceptable in this case.");
				eject ↑typesTypesInstanceTuple ++ <type>; 
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTypesTypes[index]'s instance>;
			];
		true;
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes' default type;
	defaultTypeTypeInstance ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType = type 
				("tuple default type is "
					++ primitive description of defaultTypeType
					++ " and has size ≠ 1, however only type is acceptable"
					++ " in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,defaultTypeTypeInstance…|[0..bound)>'s type;
];

/**
 * Tuple type constructor with exact tuple size for cardinality.
 *
 * Parameters:
 *    leadingAndDefaultTypes - the type of a tuple of the types in the tuple
 *    exactSize - the minimum and maximum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */
Method "<«_‡,»`…|_>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>,
	exactSize : whole number
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	bound ::= cast exactSize + 1 into [ t : [0..∞] | t; ];
	<leadingTypes, defaultType…|[exactSize..bound)>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *    leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 *    exactSizeType - type of the minimum and maximum cardinality
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|_>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type,
	exactSizeType : whole number's type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes' leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do [ 
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTypesTypes[index]| ≠ 1 then
			[
				Assert: leadingTypesTypes[index] = type 
					("tuple leading type at index: "
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++ primitive description of leadingTypesTypes[index]
						++ ", however only type is acceptable "
						++ "in this case.");
				eject ↑typesTypesInstanceTuple ++ <type>; 
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTypesTypes[index]'s instance>;
			];
		true;
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes' default type;
	defaultTypeTypeInstance ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType = type 
				("tuple default type is "
					++ primitive description of defaultTypeType
					++ " and has size ≠ 1, however only type is acceptable "
					++ "in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	lower ::= exactSizeType's lower bound;
	upper ::= cast exactSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,defaultTypeTypeInstance…|[lower..upper)>'s type;
];

/**
 * Tuple type constructor with cardinality [0..∞).
 *
 * Parameters:
 *  leadingAndDefaultTypes - a tuple of the types in the tuple
 * Returns:
 *    The requested tuple's type.
 */
Method "<«_‡,»`…|>" is
[
	leadingAndDefaultTypes : <<>, any's type…|natural number>
|
	typesSize ::= |leadingAndDefaultTypes|;
	lastLeadingTypeIndex ::= cast typesSize - 1 into [ t : whole number | t; ];
	leadingTypes ::= leadingAndDefaultTypes[..lastLeadingTypeIndex];
	defaultType ::= leadingAndDefaultTypes[typesSize];
	<leadingTypes, defaultType…|whole number>;
] : tuple meta;

/**
 * Tuple type constructor's semantic restriction.
 *
 * Parameters:
 *  leadingAndDefaultTypesTypes - the type of a tuple of the types in the tuple
 * Returns:
 *    The requested tuple's type's type.
 */ 
Semantic restriction "<«_‡,»`…|>" is
[
	leadingAndDefaultTypesTypes : <<>, any's type…|natural number>'s type
|
	leadingTypesTypes ::= 
	leadingAndDefaultTypesTypes' leading types;
	leadingTypesTypesSize ::= |leadingTypesTypes|;
	typesTypesInstanceTuple : tuple := <>;

	From 1 to leadingTypesTypesSize do
	[
		index : natural number
	|
		typesTypesInstanceTuple := 
			if |leadingTypesTypes[index]| ≠ 1 then [
				Assert: leadingTypesTypes[index] = type 
					("tuple leading type at index: "
						++ primitive description of index
						++ " has size ≠ 1 and is "
						++ primitive description of leadingTypesTypes[index] 
						++ ", however only type is acceptable in this case.");
				eject ↑typesTypesInstanceTuple ++ <type>; 
			]
			else
			[
				eject ↑typesTypesInstanceTuple ++ 
					<leadingTypesTypes[index]'s instance>;
			];
		true;
	];

	defaultTypeType ::= leadingAndDefaultTypesTypes' default type;
	defaultTypeTypeInstance ::=
		if |defaultTypeType| ≠ 1 then
		[
			Assert: defaultTypeType = type 
				("tuple default type is "
					++ primitive description of defaultTypeType 
					++ " and has size ≠ 1, however only type is acceptable"
					++ " in this case.");
			type; 
		]
		else
		[
			defaultTypeType's instance;
		];

	allTypesToUse ::= cast typesTypesInstanceTuple into 
		[t: <any's type…|0..∞> | t;];

	<allTypesToUse,defaultTypeTypeInstance…|[0..∞)>'s type;
];

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *    cardinalityTypeType : whole number meta's type
 * Returns:
 *    The requested set type's most specific type. 
 */
Semantic restriction "{_|_}" is
[
	elementTypeType : any meta's type,
	cardinalityTypeType : whole number meta's type
|
	cardinalityTypeTypeInstance :: = cardinalityTypeType's instance;
	bound ::= cast cardinalityTypeTypeInstance's upper bound + 
		1 into [ t : [0..∞] | t; ];
	lower ::= cardinalityTypeTypeInstance's lower bound;
	{elementTypeType's instance|[lower..bound)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value and maximum value of the cardinalities.
 * 
 * Parameters:
 *    elementType - The element type.
 *    minimumSize - The minimum cardinality of the set.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum and maximum 
 *    provided values, that conform to `cardinalityType`.
 */
Method "{_|_.._}" is
[
	elementType : any's type,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	/* If `elementType` is an enumeration and `exactSize` is the cardinality of
	 * that enumeration's membership, then build an instance type.
	 */
	if |elementType| = minimumSize ∧ [ minimumSize = maximumSize; ] then
	[
		elementType's instances' type;
	]
	/* Otherwise just build an ordinary set type. */
	else
	[
		bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
		{elementType|[minimumSize..bound)};
	];
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  minimumSizeType - The type of the minimum cardinality of the set
 *	  maximumSizeType - The type of the maximum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|_.._}" is
[
	elementMeta : any's type's type,
	minimumSize : whole number's type,
	maximumSize : [0..∞]'s type
|
	elementType ::= elementMeta's instance;
	if |elementType| = minimumSize's lower bound
		∧ [ minimumSize's lower bound = minimumSize's upper bound
		∧ [ maximumSize's lower bound = maximumSize's upper bound
		∧ [ minimumSize's lower bound = maximumSize's lower bound; ]; ]; ]
	then
	[
		elementType's instances' type's type;
	]
	else
	[
		lower ::= minimumSize's lower bound;
		upper ::= cast maximumSize's upper bound + 1 into [ t : [0..∞] | t; ];
		{elementType|[lower..upper)}'s type;
	];
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 *
 * Parameters:
 *    elementType - The element type.
 *    minimumSize - The minimum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied minimum value and 
 *    infinity as the maximum value, that conform to `cardinalityType`.
 */
Method "{_|_..}" is
[
	elementType : any's type,
	minimumSize : whole number
|
	{elementType|[minimumSize..∞)};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  minimumSizeType - The type of the minimum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|_..}" is
[
	elementTypeType : any's type's type,
	minimumSizeType : whole number's type
|
	lower ::= minimumSizeType's lower bound;
	{elementTypeType's instance|[lower..∞)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 *
 * Parameters:
 *    elementType - The element type.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|.._}" is
[
	elementType : any's type,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{elementType|[0..bound)};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 *	  maximumSizeType - The type of the maximum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|.._}" is
[
	elementTypeType : any's type's type,
	maximumSizeType : [0..∞]'s type
|
	upper ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	{elementTypeType's instance|[0..upper)}'s type;
];

/**
 * Construct and answer a set type with the specified element type and exact
 * cardinality.
 * 
 * Parameters:
 *    elementType - The element type.
 * Returns:
 *    The requested set type.
 */
Method "{_|_}" is
[
	elementType : any's type,
	exactSize : whole number
|
	/* If `elementType` is an enumeration and `exactSize` is the cardinality of
	 * that enumeration's membership, then build an instance type.
	 */
	if |elementType| = exactSize then
	[
		elementType's instances' type;
	]
	/* Otherwise just build an ordinary set type. */
	else
	[
		bound ::= cast exactSize + 1 into [ t : whole number | t; ];
		{elementType|[exactSize..bound)};
	];
] : set meta;

/**
 * Strengthen set type construction.
 * 
 * Parameters:
 *    elementMeta -
 *    exactSize -
 * Returns:
 *    An instance type on a set type.
 */
Semantic restriction "{_|_}" is
[
	elementMeta : any's type's type,
	exactSize : whole number's type
|
	elementType ::= elementMeta's instance;
	if |elementType| = exactSize's lower bound
		∧ [ exactSize's lower bound = exactSize's upper bound; ]
	then
	[
		elementType's instances' type's type;
	]
	else
	[
		bound ::= cast exactSize's upper bound + 1 into [ t : [0..∞] | t; ];
		{elementType|[exactSize's lower bound .. bound)}'s type;
	];
];

/**
 * Construct and answer a set type with the specified element type and the 
 * specified minimum value of the cardinality. The maximum value of the 
 * cardinality is automatically set to ∞.
 * 
 * Parameters:
 *    elementType - The element type.
 * Returns:
 *    The requested set type. Instances have elements that conform to
 *    `elementType` and cardinalities, using the supplied maximum value and 
 *    0 as the minimum value, that conform to `cardinalityType`.
 */
Method "{_|}" is
[
	elementType : any's type
|
	{elementType|whole number};
] : set meta;

/**
 * Strengthen set type construction.
 *
 * Parameters:
 *    elementTypeType - The element type's type.
 * Returns:
 *    The instance metatype of the exact set type.
 */
Semantic restriction "{_|}" is
[
	elementTypeType : any's type's type
|
	{elementTypeType's instance|[0..∞)}'s type;
];

/**
 * Strengthen map type construction.
 *
 * Parameters:
 *    keyTypeType - The type's type to which all keys of instances must conform.
 *    valueTypeType - The type's type to which all values of instances must conform.
 *    cardinalityTypeType - The range of allowed cardinalities.
 * Returns:
 *    The requested map type's most specific type.
 */
Semantic restriction "{_→_|_}" is
[
	keyTypeType : any meta's type,
	valueTypeType : any meta's type,
	cardinalityTypeType : whole number meta's type
|
	cardinalityTypeTypeInstance :: = cardinalityTypeType's instance;
	bound ::= cast cardinalityTypeTypeInstance's upper bound + 
	1 into [ t : [0..∞] | t; ];
	lower ::= cardinalityTypeTypeInstance's lower bound;
	{keyTypeType's instance→valueTypeType's instance|[lower..bound)}'s type;
];

/**
 * Construct and answer a map type with the specified key type, value type, and
 * uses all whole numbers as the value of the cardinality.
 *
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    minimumSize - The minimum cardinality of the set.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|_.._}" is
[
	keyType : any meta,
	valueType : any meta,
	minimumSize : whole number,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{keyType→valueType|[minimumSize..bound)};
] : map meta;

/**
 * Strengthen map type construction.
 *
 * Parameters:
 *    keyTypeType - The key's type's type.
 *    valueTypeType - The value's type's type.
 *    minimumSizeType - The type of the minimum cardinality.
 *    maximumSizeType : type of the maximum cardinality.
 * Returns:
 *    The instance metatype of the exact map type.
 */
Semantic restriction "{_→_|_.._}" is
[
	keyTypeType : any's type's type,
	valueTypeType : any's type's type,
	minimumSizeType : whole number's type,
	maximumSizeType : [0..∞]'s type
|
	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	lower ::= minimumSizeType's lower bound;
	{keyTypeType's instance→valueTypeType's instance|[lower..bound)}'s type;
];

/**
 * Construct and answer a map type with the specified key type, value type, and
 * the specified minimum value of the cardinality and ∞ as the maximum value of 
 * the cardinality.
 * 
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    minimumSize - The minimum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|_..}" is
[
	keyType : any meta,
	valueType : any meta,
	minimumSize : whole number
|
	{keyType→valueType|[minimumSize..∞)};
] : map meta;

/**
 * Strengthen map type construction.
 *
 * Parameters:
 *    keyTypeType - The key's type's type.
 *    valueTypeType - The value's type's type.
 *    minimumSizeType - The type of the minimum cardinality of the set.
 * Returns:
 *    The instance metatype of the exact map type.
 */
Semantic restriction "{_→_|_..}" is
[
	keyTypeType : any's type's type,
	valueTypeType : any's type's type,
	minimumSizeType : whole number's type
|
	lower ::= minimumSizeType's lower bound;
	{keyTypeType's instance→valueTypeType's instance|[lower..∞)}'s type;
];
	
/**
 * Construct and answer a map type with the specified key type, value type, and
 * the specified maximum value of the cardinality and 0 as the minimum value of 
 * the cardinality.
 *
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    maximumSize - The maximum cardinality of the set.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|.._}" is
[
	keyType : any meta,
	valueType : any meta,
	maximumSize : [0..∞]
|
	bound ::= cast maximumSize + 1 into [ t : [0..∞] | t; ];
	{keyType→valueType|[0..bound)};
] : map meta;

/**
 * Strengthen map type construction.
 *
 * Parameters:
 *    keyTypeType - The key's type's type.
 *    valueTypeType - The value's type's type.
 *    maximumSizeType : type of the maximum cardinality.
 * Returns:
 *    The instance metatype of the exact map type.
 */
Semantic restriction "{_→_|.._}" is
[
	keyTypeType : any's type's type,
	valueTypeType : any's type's type,
	maximumSizeType : [0..∞]'s type
|
	bound ::= cast maximumSizeType's upper bound + 1 into [ t : [0..∞] | t; ];
	{keyTypeType's instance→valueTypeType's instance|[0..bound)}'s type;
];

/**
 * Construct and answer a map type with the specified key type, value type, and
 * the exact size of the cardinality.
 * 
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 *    exactSize - The minimum and maximum cardinality.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|_}" is
[
	keyType : any meta,
	valueType : any meta,
	exactSize : whole number
|
	bound ::= cast exactSize + 1 into [ t : whole number | t; ];
	{keyType→valueType|[exactSize..bound)};
]:map meta;

/**
 * Strengthen map type construction..
 * 
 * Parameters:
 *    keyTypeType - The type's type to which all keys of instances must conform.
 *    valueTypeType - The type's to which all values of instances must conform.
 *    exactSizeType - The minimum and maximum cardinality's type.
 * Returns:
 *    The requested map type.
 */
Semantic restriction "{_→_|_}" is
[
	keyTypeType : any meta's type,
	valueTypeType : any meta's type,
	exactSizeType : whole number's type
|
	bound ::= exactSizeType's instance;
	{keyTypeType's instance→valueTypeType's instance|bound..bound}'s type;
];

/**
 * Construct and answer a map type with the specified key type, value type, and
 * uses all whole numbers as the value of the cardinality.
 * 
 * Parameters:
 *    keyType - A type to which all keys of instances must conform.
 *    valueType - A type to which all values of instances must conform.
 * Returns:
 *    The requested map type.
 */
Method "{_→_|}" is
[
	keyType : any meta,
	valueType : any meta
|
	{keyType→valueType|[0..∞)};
] : map meta;

/**
 * Strengthen map type constructor.
 * 
 * Parameters:
 *    keyTypeType - The type's type to which all keys of instances must conform.
 *    valueTypeType - The type's type to which all values of instances must conform.
 * Returns:
 *    The requested map type most specific type.
 */
Semantic restriction "{_→_|}" is
[
	keyTypeType : any meta's type,
	valueTypeType : any meta's type
|
	{keyTypeType's instance→valueTypeType's instance|0..∞}'s type;
];

/**
 * Strengthen the type union operation.
 *
 * Parameters:
 *    metaA - A metatype.
 *    metaB - A metatype.
 * Returns:
 *    The type of the type union of the arguments.
 */
Semantic restriction "_∪_" is
[
	metaA : type's type,
	metaB : type's type
|
	metaA ∪ metaB;
];

/**
 * Strengthen the type intersection operation.
 *
 * Parameters:
 *    metaA - A metatype.
 *    metaB - A metatype.
 * Returns:
 *    The type of the type intersection of the arguments.
 */
Semantic restriction "_∩_" is
[
	metaA : type's type,
	metaB : type's type
|
	metaA ∩ metaB;
];

/**
 * Is `value` an instance of `aType`?
 * 
 * Parameters:
 *    value - An arbitrary value.
 *    aType - An arbitrary type.
 * Returns:
 *    `true` if `value` is an instance of `aType`, `false` otherwise.
 */
Method "_∈_" is
[
	value : any,
	aType : type
|
	value's type ⊆ aType;
];

/**
 * Answer the cardinality type of the specified tuple type.
 * 
 * Parameters:
 *    tupleMeta - A tuple type.
 * Returns:
 *    The cardinality type of the argument's instance.
 */
Semantic restriction "||_||" is
[
	tupleMeta : tuple meta's type
|
	||tupleMeta's instance||'s type;
];

/**
 * Answer the cardinality type of the specified set type.
 * 
 * Parameters:
 *    setMeta - A set type.
 * Returns:
 *    The cardinality type of the argument's instance.
 */
Semantic restriction "||_||" is
[
	setMeta : set meta's type
|
	||setMeta's instance||'s type;
];

/**
 * Answer the cardinality type of the specified map type.
 * 
 * Parameters:
 *    mapMeta - A map type.
 * Returns:
 *    The cardinality type of the argument's instance.
 */
Semantic restriction "||_||" is
[
	mapMeta : map meta's type
|
	||mapMeta's instance||'s type;
];

/**
 * Answer the cardinality type of bottom's type.
 * 
 * Parameters:
 *    bottomMeta - Bottom's type.
 * Returns:
 *    The cardinality type of the argument's instance.
 */
Semantic restriction "||_||" is
[
	bottomMeta : ⊥'s type's type
|
	⊥'s type;
];
