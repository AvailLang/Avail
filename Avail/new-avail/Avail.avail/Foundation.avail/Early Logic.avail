/*
 * Early Logic.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Logic"
Versions
	"dev"
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Literals"
Names
	"¬_",
	"_∧_",
	"_∨_",
	"_≠_"
Body

/**
 * Compute and answer the logical negation, i.e., NOT, of the argument.
 *
 * Parameters:
 *    predicate - A boolean.
 * Returns:
 *    ¬`predicate`.
 */
Method "¬_" is
[
	predicate : boolean
|
	false
] : boolean;

/**
 * Compute and answer the logical negation, i.e., NOT, of the argument.
 *
 * Parameters:
 *    predicate - A boolean.
 * Returns:
 *    ¬`predicate`.
 */
Method "¬_" is
[
	predicate : false's type
|
	true
] : true's type;

/**
 * If the predicate's type is known statically to be `true`, then the
 * expression's type is known statically to be `false`.
 * 
 * Parameters:
 *    predicate - The type of `true`.
 * Returns:
 *    The type of `false`.
 */
Semantic restriction "¬_" is
[
	predicate : true's type's type
|
	false's type
];

/**
 * If the predicate's type is known statically to be `false`, then the
 * expression's type is known statically to be `true`.
 * 
 * Parameters:
 *    predicate - The type of `false`.
 * Returns:
 *    The type of `true`.
 */
Semantic restriction "¬_" is
[
	predicate : false's type's type
|
	true's type
];

/**
 * Compute and answer the logical conjunction, i.e., AND, of the arguments.
 * Short-circuit the computation, i.e., only evaluate `b` if `a` is `true`.
 * 
 * Parameters:
 *    a - A boolean.
 *    b - A boolean function.
 * Returns:
 *    `a` ∧ `b`.
 */
Method "_∧_" is
[
	a : boolean,
	b : function accepting <> and returning boolean
|
	Primitive 45;
] : boolean;

/**
 * Compute and answer the logical conjunction, i.e., AND, of the arguments.
 * Short-circuit the computation, i.e., only evaluate `b` if `a` is `true`.
 * 
 * Parameters:
 *    a - A boolean.
 *    b - A boolean function.
 * Returns:
 *    `a` ∧ `b`.
 */
Method "_∧_" is
[
	a : false's type,
	b : function accepting <> and returning boolean
|
	false
] : boolean;

/**
 * If the left-hand argument of `_∧_` is known statically to be `false`, then
 * the expression is also known statically to be `false`.
 *
 * Parameters:
 *    a - The type of `false`.
 *    b -
 * Returns:
 *    The type of `false`.
 */
Semantic restriction "_∧_" is
[
	a : false's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	false's type
];

/**
 * If the left-hand argument of `_∧_` is known statically to be `true`, then
 * the static type of the expression is `b`'s return type.
 *
 * Parameters:
 *    a - The type of `true`.
 *    b -
 * Returns:
 *    The return type of `b`.
 */
Semantic restriction "_∧_" is
[
	a : true's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	b's return type
];

/**
 * If the right-hand argument of `_∧_` is known statically to be `false`, then
 * the expression is also known statically to be `false`.
 *
 * Parameters:
 *    a - 
 *    b - A function type whose instances answer `false`.
 * Returns:
 *    The type of `false`.
 */
Semantic restriction "_∧_" is
[
	a : boolean's type,
	b : (function accepting <> and returning false's type)'s type
|
	false's type
];

/**
 * Compute and answer the logical disjunction, i.e., OR, of the arguments.
 * Short-circuit the computation, i.e., only evaluate `b` if `a` is `false`.
 * 
 * Parameters:
 *    a - A boolean.
 *    b - A boolean function.
 * Returns:
 *    `a` ∨ `b`.
 */
Method "_∨_" is
[
	a : boolean,
	b : function accepting <> and returning boolean
|
	Primitive 45;
] : boolean;

/**
 * Compute and answer the logical conjunction, i.e., OR, of the arguments.
 * Short-circuit the computation, i.e., only evaluate `b` if `a` is `false`.
 * 
 * Parameters:
 *    a - A boolean.
 *    b - A boolean function.
 * Returns:
 *    `a` ∨ `b`.
 */
Method "_∨_" is
[
	a : true's type,
	b : function accepting <> and returning boolean
|
	true
] : boolean;

/**
 * If the left-hand argument of `_∨_` is known statically to be `true`, then
 * the expression is also known statically to be `true`.
 *
 * Parameters:
 *    a - The type of `true`.
 *    b -
 * Returns:
 *    The type of `true`.
 */
Semantic restriction "_∨_" is
[
	a : true's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	true's type
];

/**
 * If the left-hand argument of `_∨_` is known statically to be `false`, then
 * the static type of the expression is `b`'s return type.
 *
 * Parameters:
 *    a - The type of `false`.
 *    b -
 * Returns:
 *    The return type of `b`.
 */
Semantic restriction "_∨_" is
[
	a : false's type's type,
	b : (function accepting <> and returning boolean)'s type
|
	b's return type
];

/**
 * If the right-hand argument of `_∨_` is known statically to be `true`, then
 * the expression is also known statically to be `true`.
 *
 * Parameters:
 *    a -
 *    b - A function type whose instances answer `true`.
 * Returns:
 *    The type of `true`.
 */
Semantic restriction "_∨_" is
[
	a : boolean's type,
	b : (function accepting <> and returning true's type)'s type
|
	true's type
];

/**
 * Are the arguments unequal?
 * 
 * Parameters:
 *    a - A value.
 *    b - A value.
 * Returns:
 *    `true` if the arguments are not equal, `false` otherwise.
 */
Method "_≠_" is
[
	a : any,
	b : any
|
	¬a = b
] : boolean;
