/*
 * Early Error Codes.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Error Codes"
Versions
	"dev"
Uses
	"Bootstrap",
	"Early Assertions",
	"Early Control Structures",
	"Early Definers",
	"Early Math",
	"Literals",
	"Variables"
Names
	"error code_'s⁇name"

	/* Quite a few names are introduced, but all dynamically by the
	 * "Next error code_" defining method (whose only purpose is to produce
	 * publicly available methods).
	 */
Body

/* The next error code that should be assigned. */
code : [1000..∞) := 1000;

/* A map from the error codes to their names (corresponding to the method
 * names).
 */
errorNames : {[1000..∞)→string|[0..∞)} := {};

/**
 * Answer the name of the specified error code.
 * 
 * Parameters:
 *    errorCode - An error code.
 * Returns:
 *    The name of the specified error code.
 */
Public method "error code_'s⁇name" is
[
	errorCode : [1000..∞)
|
	cast errorNames[errorCode] into [ t : string | t ]
] : string;

/**
 * Define a method named `name` that stably answers the current value of `code`.
 * Increment `code` (so that every error code method answers a distinct value).
 * 
 * Parameters:
 *    name - The name of the new method.
 *    check - The error code, provided as a cross-check only.
 */
Private method "Next error code is_(_)" is
[
	name : string,
	check : [1000..∞)
|
	next ::= (↑code++);
	Assert: next = check ("error code cross-check failed");
	/* Strengthen the implementation function's return type to the exact value.
	 * This involves the construction of a decorator function.
	 */
	functionType ::= function accepting <> and returning next's type;
	implementation ::= new functionType applying [ next ];
	Method name is implementation;
	errorNames := cast eject ↑errorNames + next→name
		into [ t : {[1000..∞)→string|[1..∞)} | t ];
	Publish new name: name;
];

Next error code is "object type extension contains duplicates code" (1000);
Next error code is "object type extension did not produce subtype code" (1001);
Next error code is "object instantiation contains duplicates code" (1002);
Next error code is "object instantiation invalid code" (1003);
Next error code is "object instantiation did not produce instance code" (1004);
Next error code is "invalid argument code" (1005);
Next error code is "runaway format variable code" (1006);
Next error code is "empty format variable code" (1007);
Next error code is "invalid format metacharacter escape code" (1008);
Next error code is "invalid format metacharacter use code" (1009);
Next error code is "format variable interpolation failed code" (1010);
Next error code is "missing format variable binding code" (1011);
