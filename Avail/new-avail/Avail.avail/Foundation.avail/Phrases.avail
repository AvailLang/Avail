/*
 * Phrases.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Phrases"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Types",
	"Literals"
Names
	"``_``",
	"“↓_”",
	"“[_|_]”"
Body

/**
 * Construct and answer a (synthetic) literal token whose artificial source text
 * is the primitive description of the value.
 * 
 * Parameters:
 *    value - Any value, irrespective of whether an Avail compiler would be able
 *       to construct such a literal.
 * Returns:
 *    A literal token that embeds the argument.
 */
Method "``_``" is
[
	value : any
|
	`value` (primitive description of value)
] : literal token;

/**
 * Construct and answer a variable use expression from the specified
 * declaration.
 * 
 * Parameters:
 *    decl - The declaration that introduced the referenced entity.
 * Returns:
 *    A variable use expression.
 */
Method "“↓_”" is
[
	decl : declaration
|
	“↓decl” (`decl's token's lexeme`)
] : variable use;

/**
 * Construct and answer a block from the specified argument declarations and
 * statements.
 * 
 * Parameters:
 *    args - A tuple of argument declarations.
 *    statements - A tuple of statements.
 * Returns:
 *    A block.
 */
Method "“[_|_]”" is
[
	args : <argument…|>,
	statements : <phrase…|>
|
	returnType ::= cast statements
		into [ t : <phrase…|1..> | t[|t|]'s semantic type ]
		else [ ⊤ ];
	“[
		args
	|
		Primitive 0
		statements
	] : returnType ^ ∅”
] : block;
