/*
 * Phrases.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Phrases"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Definers",
	"Early Enumeration Support",
	"Early Literals"
Names
	"``_``",
	"`«↓_`»",
	"`«<«_‡,»>`»",
	"`«[_`|_]:_`»",
	"`«[_]:_`»"
Body

/* Make "_'s type" bind more tightly than phrase type construction. */
Invoke
[
	exclusions ::= cast {"_'s⁇type"} into [ t : {string|whole number} | t ];
	Grammatical restriction "_⇒_" is <∅, exclusions>;
]
with <>;

/**
 * Construct and answer a (synthetic) literal token whose artificial source text
 * is the description of the value.
 * 
 * Parameters:
 *    value - Any value, irrespective of whether an Avail compiler would be able
 *       to construct such a literal.
 * Returns:
 *    A literal token that embeds the argument.
 */
Public method "``_``" is
[
	value : any
|
	`value` (“value”)
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 */
Semantic restriction "``_``" is
[
	value : any meta
|
	literal token ⇒ value
];

/**
 * Strengthen literal <em>node</em> building to covary with the type of object
 * inside the passed literal token.
 */
Semantic restriction "‘_’" is
[
	aLiteralToken : literal token's type
|
	literal phrase ⇒ (aLiteralToken's value type)
];

/**
 * Construct and answer a variable use expression from the specified
 * declaration.
 * 
 * Parameters:
 *    decl - The declaration that introduced the referenced entity.
 * Returns:
 *    A variable use expression.
 */
Public method "`«↓_`»" is
[
	decl : declaration phrase
|
	«↓decl» (`decl's token's lexeme`)
] : variable use phrase;

/**
 * Construct and answer a list phrase from the specified tuple.
 * 
 * Parameters:
 *    aTuple - A tuple of expressions.
 * Returns:
 *    The requested list.
 */
Public method "`«<«_‡,»>`»" is
[
	aTuple : <<>, expression phrase⇒any…|whole number>
|
	aTuple → list phrase
] : list phrase;

/**
 * Construct and answer a block from the specified argument declarations,
 * statements, and return type.
 * 
 * Parameters:
 *    args - A tuple of argument declarations.
 *    statements - A tuple of statements.
 *    returnType - The return type of the function described by the block.
 * Returns:
 *    A block.
 */
Public method "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>,
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		args
	|
		Primitive 0
		statements
	] : returnType ^ ∅»
] : block phrase;

Semantic restriction "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>'s type,
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase⇒([…]→cast returnType's instance into [t : type | t])
];

/**
 * Construct and answer an arity-0 block from the specified statements and
 * return type.
 * 
 * Parameters:
 *    statements - A tuple of statements.
 *    returnType - The return type of the function described by the block.
 * Returns:
 *    A block.
 */
Public method "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		<>
	|
		Primitive 0
		statements
	] : returnType ^ ∅»
];

Semantic restriction "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase⇒([…]→cast returnType's instance into [ t : type | t ])
];

/**
 * The requested send node has a semantic type of `returnType`.
 * 
 * Parameters:
 *    aMethod -
 *    arguments -
 *    returnType -
 * Returns:
 *    `send→returnType`.
 */
Semantic restriction "send_with_:_" is
[
	aMethod : method's type,
	arguments : list phrase's type,
	returnType : type's type
|
	/* Parse nodes have identity, so it isn't safe to strengthen more than
	 * this.
	 */
	send phrase⇒cast returnType's instance into [ t : type | t ]
];

/**
 * A block type's semantic type is always a function type.
 *
 * Parameters:
 *    blockType -
 * Returns:
 *    `function meta`.
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type
|
	if |blockType| = 1 then
	[
		if blockType's instance's type ⊆ type then
		[
			function meta
		]
		else
		[
			cast blockType's instance into [ t : function meta's type | t ]
		]
	]
	else
	[
		function meta
	]
];

/**
 * A block type's semantic type is always a function type.
 *
 * Parameters:
 *    blockType -
 * Returns:
 *    `function meta`.
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type's type
|
	function meta
];

/**
 * A list type's semantic type is always a tuple of expressions yielding any.
 * 
 * Parameters:
 *    listType -
 * Returns:
 *    `<expression⇒any…|>`.
 */
Semantic restriction "_'s⁇semantic type" is
[
	listType : list phrase's type's type
|
	<<>, expression phrase⇒any…|whole number>
];

/**
 * The function type of a function generated from a block is the same as the
 * block's semantic type.
 * 
 * Parameters:
 *    blockType -
 * Returns:
 *    The semantic type of the argument.
 */
Semantic restriction "generate_" is
[
	blockType : block phrase's type
|
	blockType's semantic type
];
