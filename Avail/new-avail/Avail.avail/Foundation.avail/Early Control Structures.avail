/*
 * Cast.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Control Structures"
Versions
	"dev"
Uses
	"Assertions",
	"Bootstrap",
	"Early Literals",
	"Early Enumeration Support"
Names
	"(_)",
	"Exit_",
	"From_to_do_",
	"cast_into_else_",
	"cast_into_"
Body

/**
 * Establish grammatical boundaries around an expression. This serves to assist
 * the compiler in disambiguating expressions. Used well, it also improves
 * readability of source text by programmers.
 *
 * Parameters:
 *    value - A value, usually produced by a method send expression.
 * Returns:
 *    The argument.
 */
Method "(_)" is
[
	value : any
|
	value;
];

/**
 * A parenthesized expression should have the same static return type that it
 * would were the parentheses not present.
 *
 * Parameters:
 *    value -
 * Returns:
 *    The argument.
 */
Semantic restriction "(_)" is
[
	value : type
|
	value;
];

/**
 * Establish a conditional expression whose static return type is the type union
 * of its two possible functions' return types.
 *
 * Parameters:
 *    predicate - The predicate's type.
 *    trueFunction -
 *    falseFunction -
 * Returns:
 *    The type union of the return types of `trueFunction` and `falseFunction`.
 */
Semantic restriction "if~_then_else_" is
[
	predicate : boolean's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type ∪ falseFunction's return type;
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is true (which it is).
 *
 * Parameters:
 *    tautology - The type of `true`.
 *    trueFunction -
 *    falseFunction -
 * Returns:
 *    The return type of `trueFunction`.
 */
Semantic restriction "if~_then_else_" is
[
	tautology : true's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type;
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is false (which it is).
 *
 * Parameters:
 *    tautology - The type of `false`.
 *    trueFunction -
 *    falseFunction -
 * Returns:
 *    The return type of `falseFunction`.
 */
Semantic restriction "if~_then_else_" is
[
	contradiction : false's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	falseFunction's return type;
];

/**
 * If the function `accept` accepts `value` as an argument (based on its
 * runtime type), then invoke `accept` with `value`. Otherwise, invoke `reject`
 * instead.
 * 
 * This method effects a dynamic type cast of `value` to the type of `accept`'s
 * only parameter. While type casts are occasionally necessary even in runtime
 * code, this facility is primarily intended for use by semantic restriction
 * functions. Used in this way it leads to a stronger static type system.
 *
 * Parameters:
 *    value - A value.
 *    accept - The function to invoke if `value` is a subtype of the its
 *       parameter type.
 *    reject - The function to invoke if `value` is not a subtype of the
 *       parameter type of `accept`.
 */
Method "cast_into_else_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤,
	reject : nullary procedure
|
	if value's type ⊆ accept's type[1] then
	[
		invoke accept with <value>;
	]
	else reject;
] : ⊤;

/**
 * If the function `accept` accepts `value` as an argument (based on its
 * runtime type), then invoke `accept` with `value`. Otherwise, cause an
 * assertion failure. This is obsolete once exceptions are available, and should
 * not be exported beyond this package.
 *
 * Parameters:
 *    value - A value.
 *    accept - The function to invoke if `value` is a subtype of the its
 *       parameter type.
 */
Method "cast_into_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤
|
	if value's type ⊆ accept's type[1] then
	[
		invoke accept with <value>;
	]
	else
	[
		Shouldn't happen;
	];
] : ⊤;

/**
 * Strengthen the return type of `cast_into_else` so that it may be used as a
 * value-producing expression. If the type cast is unnecessary, then reject the
 * current parse.
 *
 * Parameters:
 *    value -
 *    accept -
 *    reject -
 * Returns:
 *    The type union of the return types of `accept` and `reject`.
 */
Semantic restriction "cast_into_else_" is
[
	value : type,
	accept : (function accepting <⊥> and returning ⊤)'s type,
	reject : nullary procedure's type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			primitive description of value,
			" is a subtype of ",
			primitive description of accept[1]>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message;
		];
	];
	If value ∪ accept[1] = value then
	[
		/* This is the expected case, i.e., the function argument is a subtype
		 * of `value`, but logical negation isn't available yet.
		 */
	]
	else
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			primitive description of value,
			" is not a supertype of ",
			primitive description of accept[1]>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message;
		];
	];
	accept's return type ∪ reject's return type;
];

/**
 * Strengthen the return type of `cast_into_` so that it may be used as a
 * value-producing expression. If the type cast is unnecessary, then reject the
 * current parse.
 *
 * Parameters:
 *    value -
 *    accept -
 * Returns:
 *    The return type of `accept`.
 */
Semantic restriction "cast_into_" is
[
	value : type,
	accept : (function accepting <⊥> and returning ⊤)'s type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			primitive description of value,
			" is a subtype of ",
			primitive description of accept[1]>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message;
		];
	];
	If value ∪ accept[1] = value then
	[
		/* This is the expected case, i.e., the function argument is a subtype
		 * of `value`, but logical negation isn't available yet.
		 */
	]
	else
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			primitive description of value,
			" is not a supertype of ",
			primitive description of accept[1]>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message;
		];
	];
	accept's return type;
];

/* Nesting parentheses directly is bad style, and leads to confusing
 * expressions, so forbid it.
 */
invoke
	[
		names ::= cast <"(_)">→set into [ t : {string|whole number} | t; ];
		Grammatical restriction names is <names>;
	]
with <>;

/**
 * Exit the continuation. Execution proceeds as though the continuation had just
 * returned from its current function. The current continuation is completely
 * replaced by the specified continuation's resumed caller.
 *
 * Parameters:
 *    aContinuation - The continuation to exit.
 */
Method "Exit_" is
[
	aContinuation : $[…]→⊤
|
	/* Since the continuation's return type is ⊤, the primitive will discard
	 * the argument, so it can be anything.
	 */
	Exit aContinuation with <>;
] : ⊥;

/**
 * The cardinality of ⊥ is also ⊥. This is supplied to disambiguate `||_||`.
 * 
 * Parameters:
 *    bottomMeta - ⊥'s type.
 * Returns:
 *    ⊥.
 */
Method "||_||" is
[
	bottomMeta : ⊥'s type
|
	⊥;
];

/**
 * Strengthen `invoke_with_` to the invoked function's return type.
 *
 * Parameters:
 *    aFunction -
 *    arguments -
 * Returns:
 *    The function's return type.
 */
Semantic restriction "invoke_with_" is
[
	aFunction : function meta,
	arguments : tuple meta
|
	aFunction's return type;
];

/**
 * Basic counting loop with early exit support. Invoke `action` once with each
 * consecutive number in the range established by `start` and `end`.
 * 
 * Parameters:
 *    start - The start value, inclusive.
 *    end - The end value, inclusive.
 *    action - A function that accepts a value in the specified range. If it
 *       answers `true`, then continue to iterate; if it answers `false`, then
 *       terminate iteration early.
 */
Method "From_to_do_" is
[
	start : natural number,
	end : integer range from 0 (inclusive=true) to ∞ (inclusive=true),
	action : function accepting <⊥> and returning boolean
|
	value : natural number := start;
	invoke
		[
			$loop : $function accepting <> and returning ⊤;
			If value ≤ end then
			[
				continue ::= invoke action with <value>;
				value := cast value + 1 into [ i : natural number | i; ];
				If continue then
				[
					Restart loop;
				];
			];
		] : ⊤
	with <>;
] : ⊤;

/**
 * Sanity check the function's arguments against the implied range of iteration.
 * 
 * Parameters:
 *    start -
 *    end -
 *    action -
 * Returns:
 *    ⊤.
 */
Semantic restriction "From_to_do_" is
[
	start : natural number's type,
	end : (integer range from 0 (inclusive=true) to ∞ (inclusive=true))'s type,
	action : (function accepting <⊥> and returning boolean)'s type
|
	lower ::= start's genuine lower bound;
	If lower ≤ end's genuine upper bound then
	[
		upper ::= cast end's genuine upper bound + 1
			into [ t : extended integer | t;] ;
		subscripts ::= integer range
			from lower (inclusive = lower's type ⊆ start)
			to upper (inclusive = false);
		If subscripts ⊆ action[1] then
		[
			/* This is the happy case, but logical negation isn't available yet.
			 */
		]
		else
		[
			messageTuple ::= concatenate <
				"repeatedly applied function to accept all integers from ",
				primitive description of lower,
				" to ",
				primitive description of upper,
				" (but it only accepts ",
				primitive description of action[1],
				")">;
			cast messageTuple into
			[
				message : string
			|
				Reject parse, expected: message;
			];
		];
	];
	⊤;
];

/* Don't permit `(_)` as the second argument of `Assert:_(_)`. */
invoke
	[
		cast ::= [ t : {string|whole number} | t; ];
		names ::= cast <"Assert:_(_)">→set into cast;
		exclusions ::= cast <"(_)">→set into cast;
		Grammatical restriction names is <∅, exclusions>;
	]
with <>;
