/*
 * Stream Iterators.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Stream Iterators"
Versions
	"dev"
Uses
	"Abstract Iterators",
	"Common",
	"Foundation",
	"Streams" =
	(
		"a counting stream from_to_",
		"stream"
	),
	"Unit Testing"
Names
	"an iterator over_",
	"stream iterator",
	"stream iterator test suite"
Body

/* TODO: [TLS] Remove these constants once a macro is available for "$…". */
adaptedStream ::= $"adapted stream";

/**
 * Answer the field atom that represents an adapted stream.
 *
 * Returns:
 *    The requested field atom.
 */
Private method "adapted stream" is [ adaptedStream ];

/**
 * A stream iterator consumes the elements of a stream.
 */
Public class "stream iterator" extends iterator
	with fields
		adapted stream : ↑stream;

Method "_is exhausted" is
[
	anIterator : stream iterator
|
	↓anIterator's adapted stream is empty
] : boolean;

stream iterator's current element method is
[
	anIterator : stream iterator
|
	↓anIterator's adapted stream's head
] : any;

stream iterator's advance method is
[
	anIterator : stream iterator
|
	anIterator's adapted stream ?= ↓anIterator's adapted stream's tail;
] : ⊤;

/**
 * Construct and answer an iterator that destructively consumes the elements of
 * the specified stream.
 * 
 * Parameters:
 *    aStream - A stream.
 * Returns:
 *    The requested iterator.
 */
Public method "an iterator over_" is
[
	aStream : stream
|
	var ::= cast (new ↑stream := aStream) into [t : ↑stream | t];
	a stream iterator with
		element type := aStream's element type,
		adapted stream := var
] : iterator;

Semantic restriction "an iterator over_" is
[
	streamType : stream's type
|
	extend stream iterator with
		element type : streamType's element type
];

/* TODO: [TLS] Remove these constants once a macro is available for "$…". */
_testSuite ::= $"stream iterator test suite";
Public method "stream iterator test suite" is [ _testSuite ];

New test suite stream iterator test suite extends data abstractions test suite;

Test "stream iterator basics" in stream iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator(map)" in stream iterator test suite is
[
	ref ::= <1, 4, 9, 16, 25, 36, 49, 64, 81, 100>;
	index : natural number := 1;
	iter ::= map an iterator over a counting stream from 1 to 10
		through [i : [1..10] | i × i];
	For each iter do
	[
		element : [1..100]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator(filter)" in stream iterator test suite is
[
	ref ::= <2, 4, 6, 8, 10>;
	index : natural number := 1;
	iter ::= filter an iterator over a counting stream from 1 to 10
		by [i : [1..10] | i is even];
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator(concatenation)" in stream iterator test suite is
[
	ref ::= 1 to 10;
	iters ::= <
		an exhausted iterator,
		an iterator over a counting stream from 1 to 2,
		an exhausted iterator,
		an exhausted iterator,
		an iterator over a counting stream from 3 to 7,
		an exhausted iterator,
		an iterator over a counting stream from 8 to 8,
		an iterator over a counting stream from 9 to 10,
		an exhausted iterator>;
	index : natural number := 1;
	iter ::= concatenate iters;
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: index = (|ref| + 1);
];
