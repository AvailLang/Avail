/*
 * Collection Iterators.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Collection Iterators"
Versions
	"dev"
Uses
	"Abstract Iterators",
	"Foundation",
	"Sizable Positionable Iterators",
	"Unit Testing"
Names
	"an iterator over_",
	"tuple iterator test suite"
Body

"collection" is a new field atom;
"index" is a new field atom;

/**
 * A tuple iterator operates over the elements of a tuple. It is finite by
 * definition, since tuples are finite.
 *
 * @type "tuple iterator"
 * @supertype "positionable iterator"
 */
Class "tuple iterator" extends sizable positionable iterator
	with fields
		element type : any's type,
		position type : natural number's type,
		collection : tuple
	with mutable fields
		referable index : natural number;

Method "_is exhausted" is
[
	anIterator : tuple iterator
|
	anIterator's index > |anIterator's collection|
] : boolean;

tuple iterator's current element method is
[
	anIterator : tuple iterator
|
	anIterator's collection[anIterator's index]
] : any;

tuple iterator's advance method is
[
	anIterator : tuple iterator
|
	↑anIterator's index++;
] : ⊤;

Method "_'s⁇current position" is
[
	anIterator : tuple iterator
|
	anIterator's index
] : natural number;

Method "_'s⁇current position:=_" is
[
	anIterator : tuple iterator,
	position : natural number
|
	If position > |anIterator's collection| then
	[
		Raise an invalid-position exception
	];
	anIterator's index := position;
] : ⊤;

Method "`|_`|" is
[
	anIterator : tuple iterator
|
	|anIterator's collection|
] : whole number;

Semantic restriction "`|_`|" is
[
	iteratorType : tuple iterator's type
|
	||iteratorType's collection||
];

Method "`|_'s⁇remaining elements`|" is
[
	anIterator : tuple iterator
|
	(|anIterator's collection| - anIterator's index + 1) max 0
] : whole number;

/**
 * Construct and answer an {@type "iterator"} that produces all elements of the
 * specified tuple.
 *
 * @method "an iterator over_"
 * @param "aTuple" "tuple"
 *        A tuple.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "an iterator over_" is
[
	aTuple : tuple
|
	a tuple iterator with
		element type ::= ∪ aTuple's type[1..|aTuple|],
		position type ::= [1..|aTuple|],
		collection ::= aTuple,
		index := 1
] : tuple iterator;

Semantic restriction "an iterator over_" is
[
	tupleType : tuple's type
|
	limit ::= ⎡tupleType⎤ min (|tupleType's leading types| + 1);
	extend tuple iterator with
		element type : ∪ tupleType[1..limit]'s type,
		position type : [1..⎡tupleType⎤+1)'s type,
		collection : tupleType
];

/**
 * Construct and answer an {@type "iterator"} that produces all elements of the
 * specified set, but not in any particular order. This operation is unstable
 * and two invocations with the same arguments may produce differently ordered
 * iterators.
 *
 * @method "an iterator over_"
 * @param "aSet" "set"
 *        A set.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "an iterator over_" is
[
	aSet : set
|
	a tuple iterator with
		element type ::= aSet's type's element type,
		position type ::= [1..|aSet|],
		collection ::= aSet→tuple,
		index := 1
] : tuple iterator;

Semantic restriction "an iterator over_" is
[
	setType : set's type
|
	extend tuple iterator with
		element type : setType's element type's type,
		position type : [1..⎡setType⎤+1)'s type,
		collection : <<>, setType's element type… | ||setType||>
];

/**
 * Construct and answer an {@type "iterator"} that produces all bindings of the
 * specified map, but not in any particular order. This operation is unstable
 * and two invocations with the same arguments may produce differently ordered
 * iterators.
 *
 * @method "an iterator over_"
 * @param "aMap" "map"
 *        A map.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "an iterator over_" is
[
	aMap : map
|
	a tuple iterator with
		element type ::= <aMap's type's key type, aMap's type's value type…|2>,
		position type ::= [1..|aMap|],
		collection ::= aMap's bindings,
		index := 1
] : tuple iterator;

Semantic restriction "an iterator over_" is
[
	mapType : map's type
|
	elementType ::= <mapType's key type, mapType's value type…|2>;
	extend tuple iterator with
		element type : elementType's type,
		position type : [1..⎡mapType⎤+1)'s type,
		collection : <<>, elementType… | ||mapType||>
];

"tuple iterator test suite" is a new atom;
New test suite tuple iterator test suite extends iterators test suite;

Test "tuple iterator basics" in tuple iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(map)" in tuple iterator test suite is
[
	ref ::= <1, 4, 9, 16, 25, 36, 49, 64, 81, 100>;
	index : natural number := 1;
	iter ::= map an iterator over 1 to 10 through [i : [1..10] | i × i];
	For each iter do
	[
		element : [1..100]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(filter)" in tuple iterator test suite is
[
	ref ::= <2, 4, 6, 8, 10>;
	index : natural number := 1;
	iter ::= filter an iterator over 1 to 10
		by [i : [1..10] | i is even];
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(concatenation)" in tuple iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted iterator,
		an iterator over 1 to 2,
		an exhausted iterator,
		an exhausted iterator,
		an iterator over 3 to 7,
		an exhausted iterator,
		an iterator over 8 to 8,
		an iterator over 9 to 10,
		an exhausted iterator>;
	iter ::= concatenate iters;
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(lexical concatenation)"
	in tuple iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted iterator,
		an iterator over 1 to 2,
		an exhausted iterator,
		an exhausted iterator,
		an iterator over 3 to 7,
		an exhausted iterator,
		an iterator over 8 to 8,
		an iterator over 9 to 10,
		an exhausted iterator>;
	iter ::= iters[1]
		++ iters[2]
		++ iters[3]
		++ iters[4]
		++ iters[5]
		++ iters[6]
		++ iters[7]
		++ iters[8]
		++ iters[9];
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(zip)" in tuple iterator test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		an iterator over 1 to 10,
		map an iterator over 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= zip iters;
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(lexical zip)" in tuple iterator test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		an iterator over 1 to 10,
		map an iterator over 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= iters[1] zip iters[2];
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(take_from_)" in tuple iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	result ::= take 5 from iter;
	For each result do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: 6 = iter's current element;
	Require: [take 6 from iter] raises exhausted-iterator exception;
];

Test "tuple iterator(take from_while_)" in tuple iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	result ::= take from iter while [n : [1..10] | n ≤ 5];
	For each result do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: 6 = iter's current element;
];

Test "tuple iterator(take from_until_)" in tuple iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	result ::= take from iter until [n : [1..10] | n ≥ 6];
	For each result do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: 6 = iter's current element;
];

Test "tuple iterator(Drop_from_)" in tuple iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	Drop 5 from iter;
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
	Require: [Drop 6 from iter;] raises exhausted-iterator exception;
];

Test "tuple iterator(Drop from_while_)" in tuple iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	Drop from iter while [n : [1..10] | n ≤ 5];
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(Drop from_until_)" in tuple iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over 1 to 10;
	Drop from iter until [n : [1..10] | n ≥ 6];
	For each iter do
	[
		element : [1..10]
	|
		Require: ref[(↑index++)] = element;
	];
	Require: (|ref| + 1) = index;
];

Test "tuple iterator(size)" in tuple iterator test suite is
[
	iter : sizable iterator of [1..10] := an iterator over 1 to 10;
	Require: |iter| = 10;
];

Test "tuple iterator(position)" in tuple iterator test suite is
[
	iter : sizable iterator of [1..10] positioned by [1..∞) :=
		an iterator over 1 to 10;
	Require: |iter| = 10;
	Repeat [Advance iter;] 5 times;
	position ::= iter's current position;
	ref : tuple := 6 to 10;
	tail : tuple := take 5 from iter;
	Require: ref = tail;
	iter's current position := position;
	tail := take 5 from iter;
	Require: ref = tail;
	iter's current position := 8;
	ref := 8 to 10;
	tail := take 3 from iter;
	Require: ref = tail;
	Require: |iter| = 10;
	iter's current position := 50;
]
must raise invalid-position exception;

Test "tuple iterator(remaining elements)" in tuple iterator test suite is
[
	iter ::= an iterator over 1 to 10;
	remaining : integer := |iter|;
	For each iter do
	[
		element : [1..10]
	|
		Require: remaining = |iter's remaining elements|;
		↑remaining--;
	];
	Require: iter is exhausted;
	Require: remaining = |iter's remaining elements|;
];
