/*
 * Delimited Streams.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Delimited Streams"
Versions
	"dev"
Uses
	"Abstract Streams",
	"Foundation"
Names
	"_delimited by_"
Body

/* TODO: [TLS] Remove these constants once a macro is available for "$…". */
delimiter ::= $delimiter;

/**
 * A delimited stream answers tuples of elements from its decorated stream.
 * These tuples are separated by occurrences of the delimiter, itself a nonempty
 * tuple.
 */
Class "delimited stream" extends stream
	with fields
		element type : tuple's type,
		reconstructible decorated stream : stream,
		delimiter : tuple;

Method "_is empty" is
[
	aStream : delimited stream
|
	aStream's decorated stream is empty
] : boolean;

delimited stream's head method is
[
	aStream : delimited stream
|
	head : tuple := <>;
	rest : stream := aStream's decorated stream;
	Until [ rest is empty ∨ [ rest starts with aStream's delimiter ] ]
	do
	[
		head := eject ↑head ++ <rest's head>;
		rest := eject ↑rest's tail;
	];
	head
] : tuple;

delimited stream's head method is
[
	aStream : extend delimited stream with delimiter : <⊥…|0>
|
	<aStream's decorated stream's head>
];

delimited stream's tail method is
[
	aStream : delimited stream
|
	rest : stream := aStream's decorated stream;
	Until [ rest is empty ∨ [ rest starts with aStream's delimiter ] ]
	do
	[
		rest := eject ↑rest's tail;
	];
	If ¬rest is empty then
	[
		rest := drop |aStream's delimiter| from eject ↑rest;
	];
	aStream's decorated stream := rest
] : delimited stream;

delimited stream's tail method is
[
	aStream : extend delimited stream with delimiter : <⊥…|0>
|
	aStream's decorated stream := (aStream's decorated stream's tail)
] : delimited stream;

/**
 * Construct and answer a stream that produces tuples of values from `aStream`.
 * These tuples are separated by occurrences of `delimiterTuple` (which will
 * never be produced as output from the answered stream).
 * 
 * Parameters:
 *    aStream - A stream.
 *    delimiterTuple - The delimiter.
 * Returns:
 *    The requested stream.
 */
Public method "_delimited by_" is
[
	aStream : stream,
	delimiterTuple : tuple
|
	a delimited stream with
		element type := <aStream's element type…|>,
		decorated stream := aStream,
		delimiter := delimiterTuple
] : stream of tuple;

Semantic restriction "_delimited by_" is
[
	streamType : stream's type,
	delimiterType : tuple's type
|
	extend delimited stream with
		element type : <streamType's element type's instance…|>'s type,
		decorated stream : streamType,
		delimiter : delimiterType
];
