/*
 * Bounded Streams.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Bounded Streams"
Versions
	"dev"
Uses
	"Abstract Streams",
	"Foundation"
Names
	"_limited to_elements"
Body

/* TODO: [TLS] Remove these constants once a macro is available for "$…". */
remainingElements ::= $"remaining elements";

/**
 * Answer the field atom that represents a bounded stream's remaining element
 * count.
 * 
 * Returns:
 *    The requested field atom.
 */
Private method "remaining elements" is [ remainingElements ];

/**
 * A bounded stream artificially limits the number of elements that its
 * decorated stream may produce.
 */
Class "bounded stream" extends stream
	with fields
		decorated stream : stream,
		remaining elements : whole number;

Method "_is empty" is
[
	aStream : bounded stream
|
	aStream's remaining elements = 0 ∨ [ aStream's decorated stream is empty ]
] : boolean;

bounded stream's head method is
[
	aStream : bounded stream
|
	aStream's decorated stream's head
] : any;

bounded stream's tail method is
[
	aStream : extend bounded stream with remaining elements : natural number
|
	a bounded stream with
		element type ::= aStream's element type,
		decorated stream ::= aStream's decorated stream's tail,
		remaining elements ::= aStream's remaining elements - 1
] : bounded stream;

/**
 * Construct and answer a stream that can answer at most the first `limit`
 * elements of `aStream`.
 * 
 * Parameters:
 *    aStream - A stream.
 *    limit - The effective size of the result.
 * Returns:
 *    A stream incapable of producing no more than `limit` elements of
 *    `aStream`.
 */
Public stable method "_limited to_elements" is
[
	aStream : stream,
	limit : [0..∞]
|
	if limit = ∞ then [ aStream ]
	else if [ limit = 0 ] then [ an empty stream ]
	else
	[
		a bounded stream with
			element type ::= aStream's element type,
			decorated stream ::= aStream,
			remaining elements ::= cast limit into [t : natural number | t]
	]
] : stream;

Semantic restriction "_limited to_elements" is
[
	streamType : stream's type,
	limit : [0..∞]'s type
|
	if ⎣limit⎦ = ∞ then [ streamType ]
	else if [ ⎡limit⎤ = 0 ] then [ empty stream ]
	else
	[
		extend bounded stream with
			element type : streamType's element type,
			decorated stream : streamType,
			remaining elements : cast limit into [t : natural number's type | t]
	]
];
