/*
 * Backtracking Tests.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Backtracking Tests"
Versions
	"dev"
Uses
	"Common",
	"Foundation",
	"Unit Testing"
Names
	"backtracking test suite"
Body

"backtracking test suite" is a new atom;
New test suite backtracking test suite extends foundation test suite;

Test "Cartesian product" in backtracking test suite is
[
	ref ::= (5 of true ++ 5 of false) zip (1 to 5 ++ 1 to 5);
	product ::= all values of [<first try, trial# of 5>];
	Require: ref = product;
];

Test "partial Cartesian product" in backtracking test suite is
[
	ref ::= (5 of true ++ 5 of false) zip (1 to 5 ++ 1 to 5);
	From 0 to |ref| do
	[
		i : whole number
	|
		product ::= first i values of
			[<trial element of <true, false>, trial# of 5>];
		Require: ref[1..|i|] = product;
	];
];

Private method "_queens" is
[
	n : natural number
|
	queens : <natural number…|> := 1 to n;
	Backtracking fence
	[
		From 1 to n do
		[
			i : natural number
		|
			queens := eject ↑queens[i] → trial# of n;
			From 1 to i - 1 do
			[
				j : natural number
			|
				If queens[i] = queens[j] then [Try again];
				If |queens[i] - queens[j]| = i - j then [Try again];
			];
		];
	];
	queens
] : <natural number…|>;

Semantic restriction "_queens" is
[
	n : natural number's type
|
	<<>, [1..⎡n⎤]…|n>
];

Test "eight queens" in backtracking test suite is
[
	solution : <[1..8]…|8> := 8 queens;
	Require: <1, 3, 5, 2, 8, 6, 4, 7> = solution;
];
