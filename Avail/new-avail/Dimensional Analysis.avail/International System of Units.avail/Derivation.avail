/*
 * Derivation.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Derivation"
Versions
	"dev"
Uses
	"Avail",
	"Core",
	"Feature Renames (Unit Exponentiation)",
	"Types"
Body

Method "_·_" is
[
	x : SI unit,
	y : SI unit
|
	unitMap ::= x's unit map · y's unit map (unit map);
	unitType ::= cast unitMap
		into [t : {atom→1's type|1} | base unit]
		else [derived unit];
	scaleFactor ::= x's scale factor + y's scale factor;
	a unitType ∩ SI unit with unit map ::= unitMap, scale factor ::= scaleFactor
] : SI unit;

Method "_/_" is
[
	x : SI unit,
	y : SI unit
|
	unitMap ::= x's unit map / y's unit map (unit map);
	unitType ::= cast unitMap
		into [t : {atom→1's type|1} | base unit]
		else [derived unit];
	scaleFactor ::= x's scale factor - y's scale factor;
	a unitType ∩ SI unit with unit map ::= unitMap, scale factor ::= scaleFactor
] : SI unit;

Method unit exponentiation atom is
[
	theUnit : SI unit,
	theExponent : integer
|
	unitMap ::= theUnit's unit map ^ theExponent (unit map);
	unitType ::= cast unitMap
		into [t : {atom→1's type|1} | base unit]
		else [derived unit];
	scaleFactor ::= theUnit's scale factor × theExponent;
	a unitType ∩ SI unit with unit map ::= unitMap, scale factor ::= scaleFactor
] : SI unit;
