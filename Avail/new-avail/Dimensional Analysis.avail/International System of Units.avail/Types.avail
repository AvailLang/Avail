/*
 * Types.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Types"
Versions
	"dev"
Uses
	"Avail",
	"Core"
Names
	/* Types. */
	"SI dimensioned quantity",
	"SI unit",

	/* Field atoms. */
	"scale factor",

	/* Accessors. */
	"_'s⁇scale factor"
Body

/* Field atoms. */
_scaleFactor ::= $"scale factor";
Public method "scale factor" is [_scaleFactor];

/**
 * An SI unit defines a family that relates units that differ only by scale.
 *
 * @type "SI unit"
 * @supertype "unit"
 * @field "scale factor" "integer"
 *        The power-of-10 by which {@type "dimensioned quantity" dimensioned
 *        quantities} are scaled.
 */
Public class "SI unit" extends unit
	with fields
		public scale factor : integer;

/**
 * An SI dimensioned quantity has an {@type "SI unit"} for its metric.
 *
 * @type "SI dimensioned quantity"
 * @supertype "dimensioned quantity"
 */
Public class "SI dimensioned quantity" extends dimensioned quantity
	with fields
		extent : number,
		metric : SI unit;

Method "__" is
[
	magnitudeType : number's type,
	theUnit : SI unit
|
	extend SI dimensioned quantity with
		extent : magnitudeType,
		metric : theUnit's type
] : SI dimensioned quantity's type;

Semantic restriction "__" is
[
	magnitudeType : number's type's type,
	unitType : SI unit's type
|
	(if |unitType| = 1 then
	[
		magnitudeType's instance unitType's instance
	]
	else
	[
		extend SI dimensioned quantity with extent : magnitudeType's instance
	])'s type
];

Method "__" is
[
	magnitude : number,
	theUnit : SI unit
|
	a dimensioned quantity with extent := magnitude, metric := theUnit
] : SI dimensioned quantity;

Method "__" is
[
	magnitude : double,
	theUnit : SI unit
|
	a dimensioned quantity with extent := magnitude, metric := theUnit
] : SI dimensioned quantity;

Semantic restriction "__" is
[
	magnitudeType : number's type,
	unitType : SI unit's type
|
	if |unitType| = 1 then
	[
		magnitudeType (unitType's instance)
	]
	else
	[
		extend SI dimensioned quantity with
			extent : magnitudeType,
			metric : unitType
	]
];
