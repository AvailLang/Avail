/**
 * Kernel/Foundation/Numbers
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Make available integers, infinities, floats, and doubles.
 *
 * @author Todd L Smith &lt;anarakul@gmail.com&gt;
 */
Module
	"Number"
Extends
Uses
	"Bootstrap",
	"Types"
Names
	"double",
	"extended integer",
	"float",
	"integer",
	"integer type",
Body

/** The compiler needs this in order to specify "integer type". */
privateIntegerType ::= Special Object 18;

/**
 * @returns The type of an integral type.
 */
Method "integer type" is
[
	privateIntegerType;
] : meta;

/** The compiler needs this in order to specify "extended integer". */
privateExtendedInteger ::= Special Object 13;

/**
 * @returns The type of an integer in the range [-∞..∞].
 */
Method "extended integer" is
[
	privateExtendedInteger;
] : integer type;

/** The compiler needs this in order to specify "integer". */
privateInteger ::= Special Object 17;

/**
 * @returns The type of an integer in the range (-∞..∞).
 */
Method "integer" is
[
	privateInteger;
] : integer type;

/** The compiler needs this in order to specify "float". */
privateFloat ::= Special Object 15;

/**
 * @returns The type of a single-precision floating-point number.
 */
Method "float" is
[
	privateFloat;
] : primitive type;

/** The compiler needs this in order to specify "double". */
privateDouble ::= Special Object 12;

/**
 * @returns The type of a double-precision floating-point number.
 */
Method "double" is
[
	privateDouble;
] : primitive type;
