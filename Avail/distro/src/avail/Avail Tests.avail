/*
 * Avail Tests.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Avail Tests"
Versions
	"dev"
Uses
	"Avail" = ("all test suites"→"the test suites", …)
Extends
	"Avail" =
	(
		"assertion test suite",
		"backtracking test suite",
		"bounded iterator test suite",
		"buffered iterator test suite",
		"cast test suite",
		"codecs test suite",
		"concurrency test suite",
		"control structure test suite",
		"Data|data abstractions test suite",
		"delimited iterator test suite",
		"exception test suite",
		"file access rights test suite",
		"file metadata test suite",
		"file names test suite",
		"Foundation|foundation test suite",
		"function test suite",
		"generator test suite",
		"I/O test suite",
		"iterators test suite",
		"logic test suite",
		"map test suite",
		"math test suite",
		"Mersenne Twister test suite",
		"network test suite",
		"observation test suite",
		"optional test suite",
		"pRNG test suite",
		"set test suite",
		"stream iterator test suite",
		"tuple test suite",
		"tuple iterator test suite",
		"type test suite",
		"UTF8 codec test suite"
	),
	"Dimensional Analysis" =
	(
		"Dimensional|dimensional analysis test suite",
		"SI test suite"
	)
Entries
	/* Interrogating test suites. */
	"Show all test suites",

	/* Running test suites. */
	"Run all tests",
	"Run all tests in_",
	"Run all tests repeatedly",
	"Run all tests in_repeatedly"
Body

/**
 * Compute and answer the collection of all unit test suite identifiers.
 *
 * @entry
 * @method "Show all test suites"
 * @returns "⊤"
 */
Private method "Show all test suites" is
[
	sorted ::=
		quicksort the test suites→tuple with
		[
			a : atom,
			b : atom
		|
			if a's name < b's name then [true]
			else if [a's name > b's name] then [false]
			else [a's issuing module's name ≤ b's issuing module's name]
		];
	Print: “sorted” else ["«no test suites»"] (as list partitioned by "\n");
] : ⊤;

/**
 * Generate a test suite-oriented report for all test suites. Emit it to
 * standard output.
 *
 * @entry
 * @method "Run all tests"
 * @returns "⊤"
 */
Private method "Run all tests" is
[
	Print: test suite-oriented “report on all tests”;
] : ⊤;

/**
 * Generate a test suite-oriented report for the specified test suite. Emit it
 * to standard output.
 *
 * @entry
 * @method "Run all tests in_"
 * @param "suiteID" "atom"
 *        The unit test suite identifier.
 * @returns "⊤"
 */
Private method "Run all tests in_" is
[
	suiteID : atom
|
	Print: test suite-oriented “report on all tests in suiteID”;
];

/**
 * Loop forever running all tests repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests repeatedly"
 * @returns "⊤"
 */
Private method "Run all tests repeatedly" is
[
	From 1 to ∞ do [x : natural number |
		Print: "Starting run #" ++ “x” ++ "\n";
		Run all tests;
	]
] : ⊤;

/**
 * Loop forever running the test repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests in_repeatedly"
 * @returns "⊤"
 */
Private method "Run all tests in_repeatedly" is
[
	suiteID : atom
|
	From 1 to ∞ do [x : natural number |
		Print: "Starting run #" ++ “x” ++ "\n";
		Run all tests in suiteID;
	]
] : ⊤;