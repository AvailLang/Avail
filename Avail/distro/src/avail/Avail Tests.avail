/*
 * Avail Tests.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Avail Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Avail" = ("all test suites"→"the test suites", …),
	"Tests"
Extends
	"Tests" =
	(
		"assertion test suite",
		"backtracking test suite",
		"bounded reader test suite",
		"buffered iterator test suite",
		"cast test suite",
		"concurrency test suite",
		"control structure test suite",
		"converters test suite",
		"counting reader test suite",
		"Data|data abstractions test suite",
		"delimited reader test suite",
		"exception test suite",
		"file access rights test suite",
		"file iterator test suite",
		"file metadata test suite",
		"file names test suite",
		"Foundation|foundation test suite",
		"function test suite",
		"generator test suite",
		"I/O test suite",
		"iterators test suite",
		"logic test suite",
		"map test suite",
		"math test suite",
		"Mersenne Twister test suite",
		"network test suite",
		"observation test suite",
		/*"optional test suite",*/ /*TODO Data Abstractions does not extend Optional where this exists*/
		"pRNG test suite",
		"set test suite",
		"string test suite",
		"stream reader test suite",
		"tuple reader test suite",
		"tuple test suite",
		"type test suite",
		"UTF8 converters test suite"
	),
	"Dimensional Analysis" =
	(
		"Dimensional|dimensional analysis test suite",
		"SI test suite"
	)
Entries
	/* Debugging tests interactively. */
	"Debug tests",

	/* Interrogating test suites. */
	"Show all test suites",

	/* Running test suites. */
	"Run all tests",
	"Run all tests in_",
	"Run all tests repeatedly",
	"Run all tests in_repeatedly"
Body

/**
 * Compute and answer the collection of all unit test suite identifiers.
 *
 * @entry
 * @method "Show all test suites"
 * @returns "⊤"
 */
Private method "Show all test suites" is
[
	sorted ::=
		quicksort the test suites→tuple with
		[
			a : atom,
			b : atom
		|
			if a's name < b's name then [true]
			else if a's name > b's name then [false]
			else [a's issuing module's name ≤ b's issuing module's name]
		];
	Print: “sorted” else ["«no test suites»"] (as list partitioned by "\n");
] : ⊤;

/**
 * Generate a test suite-oriented report for all test suites. Emit it to
 * standard output.
 *
 * @entry
 * @method "Run all tests"
 * @returns "⊤"
 */
Private method "Run all tests" is
[
	Print: test suite-oriented “report on all tests”;
] : ⊤;

/**
 * Generate a test suite-oriented report for the specified test suite. Emit it
 * to standard output.
 *
 * @entry
 * @method "Run all tests in_"
 * @param "suiteID" "atom"
 *        The unit test suite identifier.
 * @returns "⊤"
 */
Private method "Run all tests in_" is
[
	suiteID : atom
|
	Print: test suite-oriented “report on all tests in suiteID”;
];

/**
 * Loop forever running all tests repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests repeatedly"
 * @returns "⊤"
 */
Private method "Run all tests repeatedly" is
[
	For each x from 1 to ∞ do
	[
		Print: "Starting run #" ++ “x” ++ "\n";
		Run all tests;
	]
] : ⊤;

/**
 * Loop forever running the test repeatedly.  Print the count with each run.
 *
 * @entry
 * @method "Run all tests in_repeatedly"
 * @returns "⊤"
 */
Private method "Run all tests in_repeatedly" is
[
	suiteID : atom
|
	For each x from 1 to ∞ do
	[
		Print: "Starting run #" ++ “x” ++ "\n";
		Run all tests in suiteID;
	]
] : ⊤;

_compareTests ::=
[
	a : atom,
	b : atom
|
	if a's name < b's name then [true]
	else if a's name > b's name then [false]
	else [a's issuing module's name ≤ b's issuing module's name]
];


Private method "Debug tests" is
[
	roots ::= quicksort the test suites→tuple with _compareTests;
	stack : <<atom, atom*…|>…|> := <<root test suite ID, roots>>;
	command : string;
	Do
	[
		currentEntry ::= stack[1];
		Print: format "\n\n-----> “①”\n" with currentEntry[1];
		If |stack| > 1 then
		[
			Print: "0. go up\n";
		]
		else
		[
			Print: "0. exit test debugger\n";
		];
		For each test, index of currentEntry[2] do
		[
			Print: format "“①”. “②”\n" with index, test;
		];
		Print: "Enter subtest number, 0 for parent/exit, \"run\", or \"run N\".\n";
		command := next line from standard input;
		If command ∈ (enumeration of "0123456789"→set)+ then
		[
			subscript ::= command (base 10);
			If subscript = 0 then
			[
				stack := stack[2..];
			]
			else if 1 ≤ subscript ≤ |currentEntry[2]| then
			[
				strongSubscript : natural number;
				strongSubscript ?= subscript;
				subtest ::= currentEntry[2][strongSubscript];
				list ::= guard
					[
						all tests in subtest
					]
					intercept
					[
						e : no-such-test-suite exception
					|
						<>
					];
				sorted ::= quicksort list with _compareTests;
				stack := <<subtest, list>> ++ eject stack;
			]
			else
			[
				Print: "Invalid subtest number.\n";
			];
		]
		else if command starts with "run" then
		[
			count ::= if |command| = 3
				then [1]
				else [trim (command[4..]) → natural number];
			Repeat
			[
				If currentEntry[1] = root test suite ID then
				[
					Run all tests;
				]
				else
				[
					Guard
					[
						Print: “report on currentEntry[1]”;
					]
					intercept
					[
						e : no-such-test exception
					|
						Print: “report on all tests in currentEntry[1]”;
					];
				];
			] count times;
		]
		else
		[
			Print: "Invalid command.\n\n";
		];
	]
	until stack is empty;
];
