/*
 * Test.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Test"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Random",
	"Common",
	"Foundation",
	"Generic Construction",
	"Unit Testing"
Names
	"pRNG test suite"
Body

"pRNG test suite" is a new atom;
New test suite pRNG test suite extends data abstractions test suite;

/**
 * The pseudorandom number generator used by the {@method "pRNG test suite"}.
 * 
 * @global "rng" "pRNG of whole number"
 */
rng : pRNG of whole number;

Before running pRNG test suite, do [rng := a pRNG;];
After running pRNG test suite, do [Clear rng;];

Test "next integer within range" in pRNG test suite is
[
	_2_128 ::= 2^128;
	Repeat
	[
		Require: 1 ≤ rng's next [1..6] ≤ 6;
		Require: -6 ≤ rng's next [-6..-1] ≤ -1;
		Require: -10 ≤ rng's next [-10..10] ≤ 10;
		Require: 0 ≤ rng's next [0.._2_128) < _2_128;
	] 10 times;
];

Test "next instance of enumeration" in pRNG test suite is
[
	numbers ::= enumeration of (1 to 10)→set;
	Repeat
	[
		Require: rng's next boolean ∈ boolean;
		Require: rng's next numbers ∈ numbers;
	] 10 times;
];

Test "next element of tuple" in pRNG test suite is
[
	numbers ::= 1 to 10;
	Repeat
	[
		Require: rng's next element of numbers ∈ numbers;
	] 10 times;
];

Test "next element of set" in pRNG test suite is
[
	numbers ::= (1 to 10)→set;
	Repeat
	[
		Require: rng's next element of numbers ∈ numbers;
	] 10 times;
];

Test "next binding of map" in pRNG test suite is
[
	theMap ::= ((1 to 10) zip (1 to 10))→map;
	Repeat
	[
		Require: rng's next binding of theMap[1] ∈ theMap;
	] 10 times;
];

Test "next shuffling" in pRNG test suite is
[
	numbers ::= 1 to 10;
	ref ::= numbers→set;
	Repeat
	[
		shuffled ::= rng's next shuffling of numbers;
		aSet : set := ∅;
		For each shuffled do [i : [1..10] | aSet := eject aSet + i;];
		Require: aSet = ref;
	] 10 times;
];
