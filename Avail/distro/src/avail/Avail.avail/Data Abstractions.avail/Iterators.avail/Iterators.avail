/*
 * Iterators.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Iterators"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Abstract Iterators",
	"Bounded Readers",
	"Buffered Iterators",
	"Collection Readers",
	"Concatenation Readers",
	"Counting Readers",
	"Delimited Readers",
	"Decorated Readers",
	"Exhausted Readers",
	"Filtered Readers",
	"Generators",
	"Mapped Readers",
	"Random Access Buffered Iterators",
	"Sizable Positionable Iterators",
	"Stream Readers",
	"Zipped Readers"
Uses
	"Foundation",
	"Common"
Names
	"Drop…from_§until_",
	"Drop…from_§while_"
Body

/**
 * Answer a function that computes a prefix function.
 * 
 * @method "a reader prefix function"
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ reader]→⊤"
 *          The requested function.
 */
Private method "a reader prefix function" is
[
	[
		elementPhrase : literal phrase ⇒ token,
		aReader : expression phrase ⇒ reader
	|
		Declare loop variable elementPhrase as
		[
			aReaderType ::= aReader's semantic type;
			aReaderType's element type's instance
		];
	]
]: [literal phrase ⇒ token, expression phrase ⇒ reader]→⊤;

/**
 * Answer a function that computes a body function.
 * 
 * @method "body function(_,_)"
 * @param "anAtom" "atom" the atom that represents the function that the
 * 		macro builds
 * @param "baseReturnType" "type" the base return type of the method
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ reader, 
 *   block phrase ⇒ []→ boolean]→send phrase ⇒ ⊤"
 *          The requested function.
 */
Private method "body function(_,_)" is
[
 	anAtom : atom,
 	baseReturnType : type
|
	[
		elementPhrase : literal phrase ⇒ token,
		aReader : expression phrase ⇒ reader,
		predicateBlock : block phrase ⇒ []→⊤
	|
		name ::= elementPhrase's token's lexeme;
		aReaderType ::= aReader's semantic type;
		blockType ::= [⊥]→(predicateBlock's semantic type's return type);
		restrictions ::= semantic restrictions
			for method for anAtom
			given <aReaderType, blockType>;
		returnType ::= strengthen baseReturnType from <aReaderType, blockType> 
			using restrictions;			
		statements ::= predicateBlock's statements;
		blockReturnType ::= cast statements
			into [t : phrase+ | t's last's semantic type]
			else [⊤];
		restricted send anAtom with
		<
			aReader, 
			«[
			  	<cast scope map[name] into [d : argument phrase | d]>
			| 
				statements
			] : blockReturnType»
		> : returnType
	] : send phrase ⇒ ⊤
] : [literal phrase ⇒ token, expression phrase ⇒ reader, 
     block phrase ⇒ []→ ⊤]→send phrase ⇒ ⊤;
/**
 * Reader iterating-loop that invokes {@param "action"} once for every
 * {@param "elementPhrase"} in {@param "aReader"} 
 * 
 * @macro "For each…in|of_§do_"
 * @category "Data Abstractions" "Readers"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Control Structures" "Loops" "Readers" "Data Abstractions"
 */
Macro "For each…in|of_§do_" is a reader prefix function,
	body function($"For each of⁇_do_", ⊤);

/**
 * Answer a tuple containing the prefix of {@param "aReader"} that answered
 * {@method "true"} to {@param "predicateBlock"}.
 * 
 * @macro "take…from_§while_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Readers" "Data Abstractions"
 */
Macro "take…from_§while_" is a reader prefix function,
	body function($"take from_while_", tuple);

/**
 * Answer a tuple containing the prefix of {@param "aReader"} that answered
 * {@method "false"} to {@param "predicateBlock"}.
 * 
 * @macro "take…from_§until_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Readers" "Data Abstractions"
 */
Macro "take…from_§until_" is a reader prefix function,
	body function($"take from_until_", tuple);

/**
 * Forward the specified {@type "reader"} past the prefix of elements that
 * answer {@code false} to {@param "predicateBlock"}.
 * 
 * @macro "Drop…from_§until_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Readers" "Data Abstractions"
 */
Public macro "Drop…from_§until_" is a reader prefix function,
	body function($"Drop from_until_", ⊤);

/**
 * Forward the specified {@type "reader"} past the prefix of elements that
 * answer {@code true} to {@param "predicateBlock"}.
 * 
 * @macro "Drop…from_§while_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Transformers" "Readers" "Data Abstractions"
 */
Public macro "Drop…from_§while_" is a reader prefix function,
	body function($"Drop from_while_", ⊤);

/**
 * Construct and answer a reader that applies {@param "action"} to
 * the consecutive elements of {@param "aReader"}. The result is lazy, so
 * {@param "aReader"} may be infinite.
 * 
 * @macro "map each…in|of_§through_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on of 
 *        {@param "aReader"}'s element type.
 * @param "aReader" "expression phrase ⇒ reader"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Readers" "Data Abstractions"
 */
Macro "map each…in|of_§through_" is a reader prefix function,
	body function($"map_through_", reader);

/**
 * Iteratively apply {@param "predicate"} to each consecutive element of 
 * {@param "aReader"}, collecting those elements for which {@param "predicate"} 
 * answers {@method "true"} into a new reader (and preserving ordering). Answer 
 * the new reader.
 * 
 * @macro "select each…from_§where_"
 * @param "elementPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on the type union
 *        of the leading types and default type of {@param "aReader"}.
 * @param "aReader" "expression phrase ⇒ any"
 *        An {@type "expression phrase"} that yields the reader to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Data Abstractions" "Readers"
 */
Macro "select each…from_§where_" is a reader prefix function,
	body function($"filter_by_",reader);