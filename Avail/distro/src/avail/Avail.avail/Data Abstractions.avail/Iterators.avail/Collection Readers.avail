/*
 * Collection Readers.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Collection Readers"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Iterators",
	"Foundation",
	"Sizable Positionable Iterators",
	"Unit Testing"
Names
	"a reader over_",
	"tuple reader test suite"
Body

"collection" is a new field atom;

naturalNumberVariable ::= ↑natural number;

/**
 * A tuple reader operates over the elements of a tuple. It is finite by
 * definition, since tuples are finite.
 *
 * @type "tuple reader"
 * @supertype "positionable iterator"
 * @supertype "reader"
 */
Class "tuple reader" extends
		reader ∩ (sizable positionable iterator positioned by natural number)
	with immutable fields
		element type : any's type,
		collection : tuple,
		position variable : naturalNumberVariable;

Method "_is exhausted" is
[
	anIterator : tuple reader
|
	anIterator's position > |anIterator's collection|
] : boolean;

tuple reader's current element method is
[
	anIterator : tuple reader
|
	anIterator's collection[anIterator's position]
] : any;

tuple reader's advance method is
[
	anIterator : tuple reader
|
	anIterator's position variable++;
] : ⊤;

Method "_'s⁇position" is
[
	anIterator : tuple reader
|
	↓anIterator's position variable
] : natural number;

Method "_'s⁇position:=_" is
[
	anIterator : tuple reader,
	position : natural number
|
	If position > |anIterator's collection| + 1 then
	[
		Raise an invalid-position exception
	];
	anIterator's position variable ?= position;
] : ⊤;

/**
 * Reject the positioning attempt statically if it's known that the new position
 * is <em>always</em> out of bounds.
 * 
 * @restrict "_'s⁇position:=_" is
 * @param "anIterator" "tuple reader's type"
 * @param "position" "natural number's type"
 */
Semantic restriction "_'s⁇position:=_" is
[
	anIterator : tuple reader's type,
	position : natural number's type
|
	If position ∩ ||anIterator's collection|| = ⊥ then
	[
		Reject parse, expected:
			"New position to at least sometimes be in range"
	];
	⊤
];

Method "`|_`|" is
[
	anIterator : tuple reader
|
	|anIterator's collection|
] : whole number;

Semantic restriction "`|_`|" is
[
	iteratorType : tuple reader's type
|
	||iteratorType's collection||
];

Method "`|_'s⁇remaining elements`|" is
[
	anIterator : tuple reader
|
	(|anIterator's collection| - anIterator's position + 1) max 0
] : whole number;

/**
 * Construct and answer an {@type "iterator"} that produces all elements of the
 * specified tuple.
 *
 * @method "a reader over_"
 * @param "aTuple" "tuple"
 *        A tuple.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "a reader over_" is
[
	aTuple : tuple
|
	newVar ::= cast new ↑natural number into [v : naturalNumberVariable | v];
	newVar ?= 1;
	a tuple reader with
		element type ::= ∪ aTuple's type[1..|aTuple|],
		position variable ::= newVar,
		collection ::= aTuple
] : tuple reader;


naturalNumberVarType ::= ↑natural number;

Semantic restriction "a reader over_" is
[
	tupleType : tuple's type
|
	limit ::= ⎡tupleType⎤ min (|tupleType's leading types| + 1);
	extend tuple reader with
		element type : ∪ tupleType[1..limit]'s type,
		position variable : naturalNumberVarType,
		collection : tupleType
];


/**
 * Construct and answer an {@type "iterator"} that produces all elements of the
 * specified set, but not in any particular order. This operation is unstable
 * and two invocations with the same arguments may produce differently ordered
 * iterators.
 *
 * @method "a reader over_"
 * @param "aSet" "set"
 *        A set.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "a reader over_" is
[
	aSet : set
|
	a reader over aSet→tuple
] : tuple reader;

Semantic restriction "a reader over_" is
[
	setType : set's type
|
	variableType ::= cast read [1..⎡setType⎤+1)/write natural number
		into [n : (↑natural number)'s type | n];
	extend tuple reader with
		element type : setType's element type's type,
		position variable : variableType,
		collection : <<>, setType's element type… | ||setType||>
];

/**
 * Construct and answer an {@type "iterator"} that produces all bindings of the
 * specified map, but not in any particular order. This operation is unstable
 * and two invocations with the same arguments may produce differently ordered
 * iterators.
 *
 * @method "a reader over_"
 * @param "aMap" "map"
 *        A map.
 * @returns "iterator"
 *          The requested iterator.
 */
Public method "a reader over_" is
[
	aMap : map
|
	a reader over aMap's bindings
] : tuple reader;

Semantic restriction "a reader over_" is
[
	mapType : map's type
|
	variableType ::= cast read [1..⎡mapType⎤+1)'s type/write natural number
		into [n : (↑natural number)'s type | n];
	elementType ::= <mapType's key type, mapType's value type…|2>;
	extend tuple reader with
		element type : elementType's type,
		position variable : variableType,
		collection : <<>, elementType… | ||mapType||>
];


"tuple reader test suite" is a new atom;
New test suite tuple reader test suite extends iterators test suite;

Test "tuple reader basics" in tuple reader test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (map)" in tuple reader test suite is
[
	ref ::= <1, 4, 9, 16, 25, 36, 49, 64, 81, 100>;
	index : natural number := 1;
	iter ::= map a reader over 1 to 10 through [i : [1..10] | i × i];
	For each iter do
	[
		element : [1..100]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (filter)" in tuple reader test suite is
[
	ref ::= <2, 4, 6, 8, 10>;
	index : natural number := 1;
	iter ::= filter a reader over 1 to 10
		by [i : [1..10] | i is even];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (concatenation)" in tuple reader test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted reader,
		a reader over 1 to 2,
		an exhausted reader,
		an exhausted reader,
		a reader over 3 to 7,
		an exhausted reader,
		a reader over 8 to 8,
		a reader over 9 to 10,
		an exhausted reader>;
	iter ::= concatenate iters;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (lexical concatenation)"
	in tuple reader test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted reader,
		a reader over 1 to 2,
		an exhausted reader,
		an exhausted reader,
		a reader over 3 to 7,
		an exhausted reader,
		a reader over 8 to 8,
		a reader over 9 to 10,
		an exhausted reader>;
	iter ::= iters[1]
		++ iters[2]
		++ iters[3]
		++ iters[4]
		++ iters[5]
		++ iters[6]
		++ iters[7]
		++ iters[8]
		++ iters[9];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (zip)" in tuple reader test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		a reader over 1 to 10,
		map a reader over 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= zip iters;
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (lexical zip)" in tuple reader test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		a reader over 1 to 10,
		map a reader over 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= iters[1] zip iters[2];
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (take_from_)" in tuple reader test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	result ::= take 5 from iter;
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: iter's current element = 6;
	Require: [take 6 from iter] raises exhausted-iterator exception;
];

Test "tuple reader (take from_while_)" in tuple reader test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	result ::= take from iter while [n : [1..10] | n ≤ 5];
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: iter's current element = 6;
];

Test "tuple reader (take from_until_)" in tuple reader test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	result ::= take from iter until [n : [1..10] | n ≥ 6];
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: iter's current element = 6;
];

Test "tuple reader (Drop_from_)" in tuple reader test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	Drop 5 from iter;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
	Require: [Drop 6 from iter;] raises exhausted-iterator exception;
];

Test "tuple reader (Drop from_while_)" in tuple reader test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	Drop from iter while [n : [1..10] | n ≤ 5];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (Drop from_until_)" in tuple reader test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= a reader over 1 to 10;
	Drop from iter until [n : [1..10] | n ≥ 6];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(index++)];
	];
	Require: index = (|ref| + 1);
];

Test "tuple reader (size)" in tuple reader test suite is
[
	iter : sizable reader of [1..10] := a reader over 1 to 10;
	Require: 10 = |iter|;
];

/** TODO[MvG] - Remove hack. */
x : reader of [1..10];
y : sizable reader of [1..10];
z : sizable reader of [1..10] positioned by [1..∞);

Test "tuple reader (position)" in tuple reader test suite is
[
	iter : sizable reader of [1..10] positioned by [1..∞) :=
		a reader over 1 to 10;
	Require: 10 = |iter|;
	Repeat [Advance iter;] 5 times;
	position ::= iter's position;
	ref : tuple := 6 to 10;
	tail : tuple := take 5 from iter;
	Require: tail = ref;
	iter's position := position;
	tail := take 5 from iter;
	Require: tail = ref;
	iter's position := 8;
	ref := 8 to 10;
	tail := take 3 from iter;
	Require: tail = ref;
	Require: 10 = |iter|;
	iter's position := 50;
]
must raise invalid-position exception;

Test "tuple reader (remaining elements)" in tuple reader test suite is
[
	iter ::= a reader over 1 to 10;
	remaining : integer := |iter|;
	For each iter do
	[
		element : [1..10]
	|
		Require: |iter's remaining elements| = remaining;
		remaining--;
	];
	Require: iter is exhausted;
	Require: |iter's remaining elements| = remaining;
];
