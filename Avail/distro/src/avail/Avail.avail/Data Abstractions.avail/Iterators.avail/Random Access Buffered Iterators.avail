/*
 * Random Access Buffered Iterators.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Random Access Buffered Iterators"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Abstract Iterators",
	"Buffered Iterators",
	"Common" = ("element type"),
	"Generators" = ("generator for_"),
	"Foundation",
	"Positionable Iterators",
	"Unit Testing"
Names
	/* Types. */
	"random access buffered iterator",
	"random access buffered reader",
	"random access buffered reader/writer",
	"random access buffered writer",

	/* Test suites. */
	"random access test suite",

	/* Protocol for subtypes. */
	"_'s⁇buffer is dirty",
	"_'s⁇buffer is dirty:=_",
	"_'s⁇buffer start",
	"_'s⁇buffer start:=_",
	"_'s⁇write tuple method is_"
Body

"buffer is dirty" is a new field atom;

/**
 * Random access buffered iterator is an abstraction that combines the ability
 * to position among the natural numbers and the responsibility for implementing
 * buffering, independently of being able to do anything <em>with</em> the
 * buffers, such as reading or writing.
 *
 * @type "random access buffered iterator"
 * @supertype "positionable iterator"
 * @category "Data Abstractions" "Iterators"
 */
Public explicit class "random access buffered iterator"
	extends buffered iterator positioned by natural number;

/**
 * A random access buffered reader supports explicitly {@method
 * "_'s⁇position" querying} and {@method "_'s⁇position:=_" setting} the current
 * position, while also buffering elements read from some source.  In addition,
 * the positions are natural numbers that correspond to adding one for each
 * invocation of {@method "Advance_"}. Subtypes must support random access,
 * allowing both forward and backward movement in the underlying sequence.
 *
 * @type "random access buffered reader"
 * @supertype "random access buffered iterator"
 * @supertype "reader"
 * @category "Data Abstractions" "Iterators"
 */
Public class "random access buffered reader"
	extends random access buffered iterator ∩ reader;

/**
 * A random access buffered writer supports explicitly {@method
 * "_'s⁇position" querying} and {@method "_'s⁇position:=_" setting} the current
 * position, while also buffering elements bound for some target.  In addition,
 * the positions are natural numbers that correspond to adding one for each
 * invocation of {@method "Advance_"}. Subtypes must support random access,
 * allowing both forward and backward movement in the underlying sequence.
 *
 * @type "random access buffered writer"
 * @supertype "random access buffered iterator"
 * @supertype "writer"
 * @category "Data Abstractions" "Iterators"
 */
Public class "random access buffered writer"
	extends random access buffered iterator ∩ writer
	with mutable field
		public buffer is dirty : boolean;

/**
 * A random access buffered reader/writer supports explicitly {@method
 * "_'s⁇position" querying} and {@method "_'s⁇position:=_" setting} the current
 * position, while also buffering elements that are read from and written to
 * some other structure.  In addition, the positions are natural numbers that
 * correspond to adding one for each invocation of {@method "Advance_"}.
 * Subtypes must support random access, allowing both forward and backward
 * movement in the underlying sequence.
 *
 * @type "random access buffered reader/writer"
 * @supertype "random access buffered reader"
 * @supertype "random access buffered writer"
 * @category "Data Abstractions" "Iterators"
 */
Public class "random access buffered reader/writer"
	extends random access buffered reader
		∩ random access buffered writer;

Public method "_'s⁇buffer start" is
[
	anIterator : random access buffered iterator
|
	↓anIterator[position variable]
] : natural number;

Public method "_'s⁇buffer start:=_" is
[
	anIterator : random access buffered iterator,
	newPosition : natural number
|
	anIterator[position variable] ?= newPosition;
];

/**
 * Get the current position of the {@type "random access buffered iterator"}.
 * 
 * @method "_'s⁇position"
 * @param "anIterator" "random access buffered iterator"
 *        A {@type "random access buffered iterator"}.
 * @returns "⊤"
 *        The iterator's current position, a natural number.
 * @category "Data Abstractions" "Iterators"
 * @raises "invalid-position exception"
 *         If {@param "position"} is not a valid memento.
 */
Method "_'s⁇position" is
[
	anIterator : random access buffered iterator
|
	p ::= anIterator's buffer start + anIterator's position in buffer - 1;
	p ?→ natural number
] : natural number;

/**
 * Set the current position of the {@type "random access buffered iterator"}.
 * 
 * @method "_'s⁇position:=_"
 * @param "anIterator" "random access buffered iterator"
 *        A {@type "random access buffered iterator"}.
 * @param "position" "natural number"
 *        A position memento that represents a valid position.
 * @returns "⊤"
 * @category "Data Abstractions" "Iterators"
 * @raises "invalid-position exception"
 *         If {@param "position"} is not a valid memento.
 */
Method "_'s⁇position:=_" is
[
	anIterator : random access buffered iterator,
	newPosition : natural number
|
	If |anIterator's buffer| = 0 then
	[
		/* Set the global position and reset the position within the buffer. */
		anIterator's buffer start := newPosition;
		↑anIterator's position in buffer ?= 1;
	]
	else
	[
		↑anIterator's position in buffer ?=
			newPosition - anIterator's buffer start + 1;
	];
	Assert: anIterator's position = newPosition;
];

/* TODO[MvG] Clean up when we have super sends. */
_superIsExhausted ::= (method definition
		of $"_is exhausted"
		for <random access buffered reader>
	)'s function;

Method "_is exhausted" is
[
	aReader : random access buffered reader
|
	(¬ 1 ≤ aReader's position in buffer ≤ |aReader's buffer|)
		∧ [
			oldPosition ::= aReader's position;
			result ::= _superIsExhausted(aReader);
			aReader's buffer start := oldPosition;
			result
		]
] : boolean;

Private abstract method $"Private write_in_at_" is
	[tuple, random access buffered writer, natural number]→⊤;

/**
 * There is already a buffer-exiting method defined in {@type
 * "buffered iterator"}, but because we want more control over buffer alignment
 * we now define a method ({@method "_'s⁇write tuple method is_"}) to define
 * an implementation of a private method that writes an arbitrary tuple of bytes
 * at the specified position into the construct backing some writer.
 * 
 * @method "_'s⁇write tuple method is_"
 * @param "writerType" "random access buffered writer's type"
 *        The writer's type, as a cross check for the implementation.
 * @param "implementation" "[tuple, ⊥, natural number]→⊤"
 *        The new method extension.  Its first argument is the tuple to write,
 *        the second argument is the writer, and the third argument is the
 *        starting position at which the tuple is to be written to whatever is
 *        backing the writer.
 * @returns "⊤"
 * @category "Data Abstractions" "Iterators"
 */
Public method "_'s⁇write tuple method is_" is
[
	writerType : random access buffered writer's type,
	implementation : [tuple, ⊥, natural number]→⊤
|
	Private method $"Private write_in_at_" is implementation;
] : ⊤;

/**
 * Strengthen the {@method "_'s⁇write tuple method is_"} method so that the
 * supplied function accepts the specified {@type "writer"} subtype.
 * 
 * @method "_'s⁇write tuple method is_"
 * @restricts "writerType" "random access buffered writer's type's type"
 *        The type of the writer's type, which must be known statically.  This
 *        is used to cross check against the implementation.
 * @restricts "implementation" "([tuple, ⊥, natural number]→⊤)'s type"
 *            The new method extension.  Its first argument is the tuple to
 *            write, the second argument is the writer, and the third argument
 *            is the starting position at which the tuple is to be written to
 *            whatever is backing the writer.
 * @returns "⊤'s type"
 * @category "Data Abstractions" "Iterators"
 */
Public method "_'s⁇write tuple method is_" is
[
	writerMeta : random access buffered writer's type's type,
	implementationType : ([tuple, ⊥, natural number]→⊤)'s type
|
	If implementationType[1] = ⊥
		∨ implementationType[2] = ⊥
		∨ implementationType[3] = ⊥
	then
	[
		Reject parse, expected:
			"function's parameter types to be statically known"
	];
	writerType ::= writerMeta's instance;
	If ¬implementationType[2] ⊆ writerType then
	[
		Reject parse, expected:
			"function's second parameter type ("
			++ “implementationType[2]”
			++ ") to be a subtype of the writer type ("
			++ “writerMeta's instance”
			++ ")"
	];
	elementType ::= writerType's element type;
	If ¬ <elementType…|1..> ⊆ implementationType[1] then
	[
		Reject parse, expected:
			"function's first parameter type ("
			++ “implementationType[1]”
			++ ") to accept any non-empty tuple of the writer's element type ("
			++ “elementType”
			++ ")"
	];
	If ¬ natural number ⊆ implementationType[3] then
	[
		Reject parse, expected:
			"function's third parameter type ("
			++ “implementationType[3]”
			++ ") to accept any natural number for positioning"
	];
	⊤
];

/*
 * The exit buffer method for a random access buffered iterator does nothing.
 * The subtype random access buffered writer will invoke the private write
 * operation.
 */
random access buffered iterator's exit buffer method is
[
	aWriter : random access buffered iterator
|
	/* Do nothing */
];

/*
 * The exit buffer method for a random access buffered writer simply writes out
 * the whole buffer (via the private tuple writing method) and then empties it.
 */
random access buffered writer's exit buffer method is
[
	aWriter : random access buffered writer
|
	globalPosition ::= aWriter's position;
	Private write aWriter's buffer in aWriter at aWriter's buffer start;
	aWriter's buffer is dirty := false;
	aWriter's buffer start := globalPosition;
	↑aWriter's position in buffer ?= 1;
	↑aWriter's buffer ?= <>;
	aWriter's position := globalPosition;
];

random access buffered iterator's advance method is
[
	anIterator : random access buffered iterator
|
	↑anIterator's position in buffer++;
] : ⊤;

Seal random access buffered iterator's advance method;

/**
 * Discard any cached information about the reader, including the current buffer.
 *
 * @method "Refresh_"
 * @param "aReader" "random access buffered reader"
 * @returns "⊤"
 * @category "Data Abstractions" "Iterators"
 */
Method "Refresh_" is
[
	aReader : random access buffered reader
|
	↑aReader's buffer ?= <>;
] : ⊤;

/**
 * Answer a tuple containing (at most) the first {@param "count"} elements of
 * {@param "aReader"}.  Take advantage of the buffering for performance.
 * 
 * @category "Data Abstractions"
 * @method "take«at most»?_from_"
 * @param "isLax" "boolean"
 *        {@code false} if an {@type "exhausted-iterator exception"} should be
 *        raised if {@param "count"} exceeds the number of elements remaining,
 *        {@code true} otherwise.
 * @param "count" "[0..∞]"
 *        The size of the requested tuple.
 * @param "aReader" "reader"
 *        A reader.
 * @returns "tuple"
 *          A tuple containing the first {@param "count"} elements of {@param
 *          "aReader"}, possibly less if {@param isLax} is {@code true}.
 * @category "Data Abstractions" "Iterators"
 * @raises "exhausted-iterator exception"
 *         If {@param "isLax"} is {@code false} and {@param "aReader"} does
 *         not contain {@param "count"} elements.
 */
Method "take«at most»?_from_" is
[
	isLax : boolean,
	count : [0..∞],
	aReader : random access buffered reader
|
	result : tuple := <>;
	positionInBufferVariable ::= ↑aReader's position in buffer;
	Until aReader is exhausted ∨ |result| = count do
	[
		/* The "_is exhausted" above set up the buffer if necessary, and
		 * ensured (because it answered false for us to get here) that the
		 * buffer contains at least one element of interest to us.
		 */
		buffer ::= aReader's buffer;
		startInBuffer : natural number;
		startInBuffer ?= ↓positionInBufferVariable;
		endInBuffer : natural number;
		endInBuffer ?= (startInBuffer + count - 1 - |result|) min |buffer|;
		batchSize : natural number;
		batchSize ?= endInBuffer - startInBuffer + 1;
		result := eject result ++ buffer[startInBuffer..endInBuffer];
		positionInBufferVariable ?= 
			eject positionInBufferVariable + batchSize;
	];
	If ¬isLax ∧ |result| ≠ count then
	[
		Raise an exhausted-iterator exception
	];
	result
] : tuple;

/**
 * Write the elements of the specified {@type "tuple"} to the supplied {@type
 * "buffered writer"}. This operation should be more efficient than repeatedly
 * sending {@method "_'s⁇current element:=_"} and {@method "Advance_"}.
 *
 * @method "Write_to_"
 * @param "newElements" "tuple"
 * @param "aWriter" "random access buffered writer"
 * @returns "⊤"
 * @category "Data Abstractions" "Iterators"
 */
Method "Write_to_" is
[
	newElements : tuple,
	aWriter : random access buffered writer
|
	If |newElements| > 0 then
	[
		oldBuffer : tuple := aWriter's buffer;
		startInBuffer : integer := aWriter's position in buffer;
		If ¬ aWriter's buffer is dirty then
		[
			/* There's no point in keeping clean data next to the dirty data.
			 * If we did, we would have to write the clean data whenever the
			 * dirty data was flushed, which would cost us spurious writes.
			 * Hopefully the backing artifact or OS or VM will cache data to
			 * allow unaligned writes-after-reads to still be efficient.
			 */
			aWriter's buffer start := aWriter's position;
			↑aWriter's position in buffer ?= 1;
			↑aWriter's buffer ?= <>;
			oldBuffer := <>;
			startInBuffer := 1;
		]
		else if [¬ 1 ≤ startInBuffer ≤ |oldBuffer| + 1] then
		[
			/* This write does not extend or overwrite the current buffer, so
			 * flush the entire existing buffer before starting the new write.
			 */
			Private
				write aWriter's buffer
				in aWriter
				at aWriter's buffer start;
			aWriter's buffer is dirty := false;
			aWriter's buffer start := aWriter's position;
			↑aWriter's position in buffer ?= 1;
			↑aWriter's buffer ?= <>;
			oldBuffer := <>;
			startInBuffer := 1;
		];
		Assert: 1 ≤ startInBuffer ≤ |oldBuffer| + 1;
		/* Determine if we will exceed the maximum buffer size. */
		naturalStart ::= startInBuffer ?→ natural number;
		newBufferSize ::= (naturalStart + |newElements| - 1) max |oldBuffer|;
		newBuffer ::= oldBuffer
			[
				naturalStart ..
				(naturalStart + |newElements| - 1) min |oldBuffer|
			] → newElements;
		If newBufferSize ≥ aWriter's maximum buffer size then
		[
			/* Flush the buffer completely.  Subtypes may wish to limit this
			 * to the last reached alignment boundary.
			 */
			Private
				write newBuffer
				in aWriter
				at aWriter's buffer start;
			aWriter's buffer start := aWriter's position + |newElements|;
			↑aWriter's position in buffer ?= 1;
			↑aWriter's buffer ?= <>;
			oldBuffer := <>;
			startInBuffer := 1;
			aWriter's buffer is dirty := false;
		]
		else
		[
			/* Just keep it in the buffer. */
			↑aWriter's buffer ?= newBuffer;
			↑aWriter's position in buffer ?= naturalStart + |newElements|;
			aWriter's buffer is dirty := true;
		];
	];
];
