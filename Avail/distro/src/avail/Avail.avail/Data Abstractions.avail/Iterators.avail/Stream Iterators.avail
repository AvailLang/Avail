/*
 * Stream Iterators.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Stream Iterators"
Versions
	"dev"
Uses
	"Abstract Iterators",
	"Foundation",
	"Positionable Iterators",
	"Streams" =
	(
		"a counting stream from_to_",
		"stream"
	),
	"Unit Testing"
Names
	"an iterator over_",
	"stream iterator",
	"stream iterator test suite"
Body

"adapted stream" is a new field atom;
"iterator id" is a new atom;

/**
 * A stream iterator consumes the elements of a stream. A stream iterator can be
 * rewound to any position previously answered by {@method
 * "_'s⁇position"}.
 *
 * @type "stream iterator"
 * @supertype "positionable iterator"
 */
Public class "stream iterator" extends positionable iterator
	with field
		position type : atom's type
	with mutable field
		adapted stream : stream;

Method "_is exhausted" is
[
	anIterator : stream iterator
|
	anIterator's adapted stream is empty
] : boolean;

stream iterator's current element method is
[
	anIterator : stream iterator
|
	anIterator's adapted stream's head
] : any;

stream iterator's advance method is
[
	anIterator : stream iterator
|
	anIterator's adapted stream := anIterator's adapted stream's tail;
] : ⊤;

Method "_'s⁇position" is
[
	anIterator : stream iterator
|
	/* Create an atom as a memento of the current position. Use the "adapted
	 * stream" atom to store the current stream, and "iterator id" to store the
	 * argument. In this way the memento is specific to a particular iterator
	 * and position.
	 */
	position ::= new atom named "current position";
	position[iterator id] := anIterator;
	position[adapted stream] := anIterator's adapted stream;
	position
] : atom;

Method "_'s⁇position:=_" is
[
	anIterator : stream iterator,
	position : atom
|
	/* Only allow a position memento previously allocated by this iterator to be
	 * used to change its current position.
	 */
	Unless iterator id ∈ position  ∧ [position[iterator id] = anIterator] then
	[
		Raise an invalid-position exception
	];
	Assert: adapted stream ∈ position;
	anIterator's adapted stream := cast position[adapted stream]
		into [t : stream | t];
];

/**
 * Construct and answer an iterator that destructively consumes the elements of
 * the specified stream.
 * 
 * @method "an iterator over_"
 * @param "aStream" "stream"
 *    aStream - A stream.
 * @returns "stream iterator"
 *    The requested iterator.
 */
Public method "an iterator over_" is
[
	aStream : stream
|
	a stream iterator with
		element type ::= aStream's element type,
		position type ::= atom,
		adapted stream := aStream
] : stream iterator;

Semantic restriction "an iterator over_" is
[
	streamType : stream's type
|
	extend stream iterator with
		element type : streamType's element type
];

"stream iterator test suite" is a new atom;
New test suite stream iterator test suite extends iterators test suite;

Test "stream iterator basics" in stream iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (map)" in stream iterator test suite is
[
	ref ::= <1, 4, 9, 16, 25, 36, 49, 64, 81, 100>;
	index : natural number := 1;
	iter ::= map an iterator over a counting stream from 1 to 10
		through [i : [1..10] | i × i];
	For each iter do
	[
		element : [1..100]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (filter)" in stream iterator test suite is
[
	ref ::= <2, 4, 6, 8, 10>;
	index : natural number := 1;
	iter ::= filter an iterator over a counting stream from 1 to 10
		by [i : [1..10] | i is even];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (concatenation)" in stream iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted iterator,
		an iterator over a counting stream from 1 to 2,
		an exhausted iterator,
		an exhausted iterator,
		an iterator over a counting stream from 3 to 7,
		an exhausted iterator,
		an iterator over a counting stream from 8 to 8,
		an iterator over a counting stream from 9 to 10,
		an exhausted iterator>;
	iter ::= concatenate iters;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (lexical concatenation)" in stream iterator test suite is
[
	ref ::= 1 to 10;
	index : natural number := 1;
	iters ::= <
		an exhausted iterator,
		an iterator over a counting stream from 1 to 2,
		an exhausted iterator,
		an exhausted iterator,
		an iterator over a counting stream from 3 to 7,
		an exhausted iterator,
		an iterator over a counting stream from 8 to 8,
		an iterator over a counting stream from 9 to 10,
		an exhausted iterator>;
	iter ::= iters[1]
		++ iters[2]
		++ iters[3]
		++ iters[4]
		++ iters[5]
		++ iters[6]
		++ iters[7]
		++ iters[8]
		++ iters[9];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (zip)" in stream iterator test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		an iterator over a counting stream from 1 to 10,
		map an iterator over a counting stream from 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= zip iters;
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (lexical zip)" in stream iterator test suite is
[
	ref ::= <
		<1, 1>, <2, 4>, <3, 9>, <4, 16>, <5, 25>,
		<6, 36>, <7, 49>, <8, 64>, <9, 81>, <10, 100>>;
	index : natural number := 1;
	iters ::= <
		an iterator over a counting stream from 1 to 10,
		map an iterator over a counting stream from 1 to 10
			through [n : [1..10] | n × n]>;
	iter ::= iters[1] zip iters[2];
	For each iter do
	[
		element : <[1..10], [1..100]…|2>
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (take_from_)" in stream iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	result ::= take 5 from iter;
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: iter's current element = 6;
	Require: [take 6 from iter] raises exhausted-iterator exception;
];

Test "stream iterator (take from_while_)" in stream iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	result ::= take from iter while [n : [1..10] | n ≤ 5];
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: iter's current element = 6;
];

Test "stream iterator (take from_until_)" in stream iterator test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	result ::= take from iter until [n : [1..10] | n ≥ 6];
	For each result do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: iter's current element = 6;
];

Test "stream iterator (Drop_from_)" in stream iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	Drop 5 from iter;
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
	Require: [Drop 6 from iter;] raises exhausted-iterator exception;
];

Test "stream iterator (Drop from_while_)" in stream iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	Drop from iter while [n : [1..10] | n ≤ 5];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (Drop from_until_)" in stream iterator test suite is
[
	ref ::= 6 to 10;
	index : natural number := 1;
	iter ::= an iterator over a counting stream from 1 to 10;
	Drop from iter until [n : [1..10] | n ≥ 6];
	For each iter do
	[
		element : [1..10]
	|
		Require: element = ref[(↑index++)];
	];
	Require: index = (|ref| + 1);
];

Test "stream iterator (position)" in stream iterator test suite is
[
	iter ::= an iterator over a counting stream from 1 to 10;
	i : [1..11] := 1;
	For each iter do
	[
		value : [1..10]
	|
		Require: value = i;
		pos ::= iter's position;
		ref ::= i to 10;
		Require: take 10 - i + 1 from iter = ref;
		Require: iter is exhausted;
		iter's position := pos;
		↑i++;
	];
	Require: iter is exhausted;
];
