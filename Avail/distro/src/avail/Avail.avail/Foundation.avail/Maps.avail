/*
 * Maps.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Maps"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Collections",
	"Early Maps"
Uses
	"Bootstrap",
	"Control Structures",
	"Definers",
	"Early Conditionals",
	"Early Functions",
	"Early Tuples",
	"Enumeration Support",
	"Literals",
	"Logic",
	"Macro Support",
	"Math",
	"Sets",
	"Tuples",
	"Types",
	"Variables"
Names
	"a map iteration prefix function",
	"any…→…in|of_§satisfies_",
	"counts for_",
	"count of…→…from|in|of_§where_",
	"each…→…in|of_§satisfies_",
	"reject each…→…from_§where_",
	"select each…→…from_§where_",
	"For each…→…in|of_§do_",
	"integrate_and_with_",
	"integrate«_‡,and⁇»with_",
	"map each…→…in|of_§through_"
Body

Method "“_”" is
[
	t : map meta
|
	s : nonempty string :=
		"{" ++ “t's key type” ++ "→" ++ “t's value type” ++ "|";
	lower ::= ⎣t⎦;
	upper ::= ⎡t⎤;
	s := eject s ++ “||t||” (cardinality restriction);
	s := eject s ++ "}";
	s
] : string;

/**
 * Is the specified map empty? 
 *
 * @method "_is empty"
 * @param "aMap" "map"
 * @returns "boolean"
 *          {@method "true"} if the argument is empty, {@method "false"}
 *          otherwise.
 * @category "Maps" "Queries"
 */
Method "_is empty" is
[
	aMap : map
|
	|aMap| = 0
];

/**
 * Is {@param "key"} not a key of {@param "aMap"}?
 *
 * @method "_∉_"
 * @param "key" "any"
 * @param "aMap" "map"
 * @returns "boolean"
 *          {@method "true"} if {@param "key"} is not an element of {@param
 *          "aMap"}, {@method "false"} otherwise.
 * @category "Maps" "Queries"
 */
Stable method "_∉_" is
[
	key : any,
	aMap : map
|
	¬ key ∈ aMap
] : boolean;

Semantic restriction "_∉_" is
[
	keyType : any meta,
	mapType : map meta
|
	if keyType ∩ (mapType's key type) = ⊥ then
	[
		true's type
	]
	else
	[
		/* Can't strengthen. */
		⊤
	]
];

/**
 * Iteratively apply {@param "action"} to each binding of {@param "aMap"}, but
 * in no particular order.
 * 
 * @method "For each of⁇_do_"
 * @param "aMap" "map"
 * @param "action" "[⊥, ⊥]→⊤"
 *        A function that accepts the bindings of the map. The first argument is
 *        a key from the map, the second is a value from the map.
 * @returns "⊤"
 * @category "Collections" "Maps" "Control Structures"
 */
Method "For each of⁇_do_" is
[
	aMap : map,
	action : [⊥, ⊥]→⊤
|
	index : natural number := 1;
	bindings ::= aMap's bindings;
	end ::= |aMap|;
	[
		$loop;
		If index ≤ end then
		[
			binding ::= bindings[index];
			action(binding[1], binding[2]);
			index++;
			Restart loop
		];
	]();
] : ⊤;

/**
 * Helper method for semantic restrictions: If `action` does not accept the
 * key and value types of `mapType`, then reject the current parse.
 * 
 * @method "Require:_accepts_"
 * @param "action" "function meta"
 *        A function type whose first two arguments must correspond to the key
 *        and value types of {@param "mapType"}.
 * @param "mapType" "map meta"
 * @returns "⊤"
 */
Private method "Require:_accepts_" is
[
	action : function meta,
	mapType : map meta
|
	If ⎣action's parameters' type⎦ < 2 then
	[
		Reject parse, expected:
			"repeatedly applied function to accept at least two arguments"
	];
	If action[1] ≠ ⊥ ∧ ¬mapType's key type ⊆ action[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all keys ∈ "
			++ “mapType's key type”
			++ " (but it only accepts "
			++ “action[1]”
			++ ")"
	];
	If action[2] ≠ ⊥ ∧ ¬mapType's value type ⊆ action[2] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all values ∈ "
			++ “mapType's value type”
			++ " (but it only accepts "
			++ “action[2]”
			++ ")"
	];
] : ⊤;

/**
 * Ensure that the function will accept all bindings of the map. If the map is
 * certainly nonempty and the function certainly does not complete if applied,
 * then answer ⊥.
 * 
 * @method "For each of⁇_do_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→⊤'s type"
 */
Semantic restriction "For each of⁇_do_" is
[
	mapType : map meta,
	action : [⊥, ⊥]→⊤'s type
|
	Require: action accepts mapType;
	if ⎣mapType⎦ > 0 ∧ action's return type = ⊥ then [⊥]
	else [⊤]
];

/**
 * Answer a function that computes a prefix function.
 * 
 * @method "a map iteration prefix function"
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ map]→⊤"
 *          The requested function.
 */
Public method "a map iteration prefix function" is
[
	[
		keyPhrase : literal phrase ⇒ token,
		valuePhrase : literal phrase ⇒ token,
		aMap : expression phrase ⇒ map
	|
		aMapType ::= aMap's semantic type;
		Declare loop variable keyPhrase as [aMapType's key type];
		Declare loop variable valuePhrase as [aMapType's value type];
	]
]: [literal phrase ⇒ token, literal phrase ⇒ token, expression phrase ⇒ map]→⊤;

/**
 * Answer a function that computes a body function.
 * 
 * @method "body function(_,_)"
 * @param "anAtom" "atom" the atom that represents the function that the
 * 		macro builds
 * @param "baseReturnType" "type" the base return type of the method
 * @returns "[literal phrase ⇒ token, expression phrase ⇒ map, 
 *   block phrase ⇒ []→ boolean]→send phrase ⇒ ⊤"
 *          The requested function.
 */
Private method "body function(_,_)" is
[
 	anAtom : atom,
 	baseReturnType : type
|
	[
		keyPhrase : literal phrase ⇒ token,
		valuePhrase : literal phrase ⇒ token,
		aMap : expression phrase ⇒ map,
		action : block phrase ⇒ []→ ⊤
	| 
		keyName ::= keyPhrase's token's lexeme;
		valueName ::= valuePhrase's token's lexeme;
		aMapType ::= aMap's semantic type;
		keyType ::= aMapType's key type;
		valueType ::= aMapType's value type;
		blockType ::= 
			[keyType, valueType]→(action's semantic type's return type);

		returnType ::= strengthen baseReturnType for call of anAtom 
			using <aMapType, blockType>;

		statements ::= action's statements;
		blockReturnType ::= cast statements
			into [t : phrase+ | t's last's semantic type]
			else [⊤];

		castToPhrase ::= [s : nonempty string | 
			cast scope map[s] into [d : argument phrase | d]];
		restricted send anAtom with
		<
			aMap, 
			«[
			  	<castToPhrase(keyName), castToPhrase(valueName)>
			 | 
			 	statements
			 ] : blockReturnType»
		> : returnType
	] : send phrase ⇒ ⊤
] : [literal phrase ⇒ token, literal phrase ⇒ token, expression phrase ⇒ map, 
     block phrase ⇒ []→ ⊤]→send phrase ⇒ ⊤;

/**
 * Map iterating-loop that invokes {@param "action"} once for every
 * {@param "elementPhrase"} → {@param "elementPhrase"} in {@param "aMap"}.
 * 
 * @macro "For each…→…in|of_§do_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map key loop variable. The generated 
 *        loop variable is given the strongest possible type based on the map
 *        key type of {@param "aMap"}.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map value loop index variable. The 
 *        generated loop variable is given the strongest possible type based on
 *        the map value type of {@param "aMap"}.
 * @param "aMap" "expression phrase ⇒ tuple"
 *        An {@type "expression phrase"} that yields the map to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Control Structures" "Loops" "Collections" "Maps"
 */
Macro "For each…→…in|of_§do_" is a map iteration prefix function,
	body function($"For each of⁇_do_",⊤);

/**
 * Iteratively apply {@param "transformer"} to each binding of {@param "aMap"},
 * in no particular order, collecting the results into a new map. The resultant
 * map has the same keys as the original, but its values have been transformed
 * via {@param "transformer"}.
 * 
 * @method "map_through_"
 * @param "aMap" "map"
 * @param "transformer" "[⊥, ⊥]→any"
 *        A function that accepts the bindings of the map. The first argument is
 *        a key from the map, the second is a value from the map. This function
 *        answers a replacement value for the given binding.
 * @returns "map"
 *          A map of results of applications of `transformer` to the elements of
 *          {@param "aMap"}.
 * @category "Collections" "Maps" "Control Structures"
 */
Method "map_through_" is
[
	aMap : map,
	transformer : [⊥, ⊥]→any
|
	index : natural number := 1;
	bindings ::= aMap's bindings;
	end ::= |aMap|;
	result : map := {};
	[
		$loop;
		If index ≤ end then
		[
			key, value ::= bindings[index];
			result := eject result + key→transformer(key, value);
			index++;
			Restart loop
		];
	]();
	result
] : map;

/**
 * Ensure that the function will accept all bindings of the map. If the map is
 * certainly nonempty, then the function cannot answer ⊥.
 *
 * @method "map_through_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→any's type"
 */
Semantic restriction "map_through_" is
[
	mapType : map meta,
	transformer : [⊥, ⊥]→any's type
|
	Require: transformer accepts mapType;
	If ⎣mapType⎦ > 0 then
	[
		If transformer's return type = ⊥ then
		[
			Reject parse, expected:
				"repeatedly applied function to have a return type other than\
				\| ⊥"
		];
	];
	{mapType's key type → transformer's return type | ||mapType||}
];

/**
 * Iteratively apply {@param "transformer"} to each binding of {@param "aMap"},
 * in no particular order, collecting the results into a new map. The resultant
 * map has the same keys as the original, but its values have been transformed
 * via {@param "transformer"}.
 * 
 * @macro "map each…→…in|of_§through_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map key loop variable. The generated 
 *        loop variable is given the strongest possible type based on the map
 *        key type of {@param "aMap"}.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map value loop index variable. The 
 *        generated loop variable is given the strongest possible type based on
 *        the map value type of {@param "aMap"}.
 * @param "aMap" "expression phrase ⇒ tuple"
 *        An {@type "expression phrase"} that yields the map to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Collections" "Maps"
 */
Macro "map each…→…in|of_§through_" is a map iteration prefix function,
	body function($"map_through_",map);

/**
 * Iteratively apply {@param "predicate"} to each binding of {@param "aMap"}, in
 * no particular order, collecting those bindings for which {@param "predicate"}
 * answers {@method "true"} into a new map. Answer the new map.
 *
 * @method "filter_by_"
 * @param "aMap" "map"
 * @param "predicate" "[⊥, ⊥]→boolean"
 *        A function that accepts the bindings of the map and answers {@method
 *        "true"} iff they should be accumulated into the output map.
 * @returns "map"
 *          A map containing exactly those bindings of {@param "aMap"} for which
 *          {@param "predicate"} answered {@method "true"}.
 * @category "Collections" "Maps" "Control Structures"
 */
Method "filter_by_" is
[
	aMap : map,
	predicate : [⊥, ⊥]→boolean
|
	bindings ::= aMap's bindings;
	index : natural number := 1;
	end ::= |bindings|;
	result : map := {};
	[
		$loop;
		If index ≤ end then
		[
			key, value ::= bindings[index];
			If predicate(key, value) then
			[
				result := eject result + key→value;
			];
			index++;
			Restart loop
		];
	]();
	result
] : map;

/**
 * Ensure that the function will accept all bindings of the map.
 * 
 * @method "filter_by_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→boolean's type"
 */
Semantic restriction "filter_by_" is
[
	mapType : map meta,
	predicate : [⊥, ⊥]→boolean's type
|
	Require: predicate accepts mapType;
	if predicate's return type = true's type then [mapType]
	else if [predicate's return type = false's type] then [{}'s type]
	else [{mapType's key type → mapType's value type | [0..⎡mapType⎤ + 1)}]
];
	
/**
 * Iteratively apply {@param "predicate"} to each binding of {@param "aMap"}, in
 * no particular order, collecting those bindings for which {@param "predicate"}
 * answers {@method "true"} into a new map. Answer the new map.
 * 
 * @macro "select each…→…from_§where_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map key loop variable. The generated 
 *        loop variable is given the strongest possible type based on the map
 *        key type of {@param "aMap"}.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the map value loop index variable. The 
 *        generated loop variable is given the strongest possible type based on
 *        the map value type of {@param "aMap"}.
 * @param "aMap" "expression phrase ⇒ map"
 *        An {@type "expression phrase"} that yields the map to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Collections" "Maps"
 */
Macro "select each…→…from_§where_" is a map iteration prefix function,
	body function($"filter_by_", map);

/**
 * Iteratively apply {@param "action"} to each binding of {@param "aMap"}, in
 * no particular order, rejecting those bindings for which {@param "action"}
 * answers {@method "true"} into a new map. Answer the new map.
 * 
 * @macro "reject each…,…from_§where_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable. The generated loop
 *        variable is given the strongest possible type based on the type union
 *        of the leading types and default type of {@param "aMap"}.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop index variable. The generated
 *        loop variable is given the strongest possible type based on the 
 *        cardinality of {@param "aMap"}.
 * @param "aMap" "expression phrase ⇒ map"
 *        An {@type "expression phrase"} that yields the map to iterate over
 * @param "action" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        loop.
 * @returns "send phrase ⇒ ⊤"
 * @category "Loops" "Collections" "Maps"
 */
Public macro "reject each…→…from_§where_" is 
	a map iteration prefix function,
[
	keyPhrase : literal phrase ⇒ token,
	valuePhrase : literal phrase ⇒ token,
	aMap : expression phrase ⇒ map,
	action : block phrase ⇒ []→⊤
|
	keyName ::= keyPhrase's token's lexeme;
	valueName ::= valuePhrase's token's lexeme;
	aMapType ::= aMap's semantic type;
	keyType ::= aMapType's key type;
	valueType ::= aMapType's value type;
	blockType ::= 
		[keyType, valueType]→(action's semantic type's return type);
	
	returnType ::= strengthen map for call of $"filter_by_" 
		using <aMapType, blockType>;
	statements ::= action's statements;
	blockReturnType ::= cast statements
		into [t : phrase+ | t[|t|]'s semantic type]
		else [⊤];

	castToPhrase ::= [s : nonempty string | 
		cast scope map[s] into [d : argument phrase | d]];
	
	size ::= |statements|;

	newStatements ::= if size = 0 then [<>]
	else if [size = 1] then
	[
	 	i : natural number := cast size into [n : natural number | n];
	 	c : expression phrase⇒any := cast statements[i] into 
	 		[e : expression phrase⇒any | e];
	 	<restricted send $"¬_" with <c>:boolean>
	] else 
	[
	 	end : natural number := cast size-1 into [n : natural number | n];
	 	i : natural number := cast size into [n : natural number | n];
	 	c : expression phrase⇒any := cast statements[i] into 
		 	[e : expression phrase⇒any | e];
	 	statements[..end] ++ <restricted send $"¬_" with <c> : boolean>
	];
	restricted send $"filter_by_" with
	<
		aMap,
		«[
			<castToPhrase(keyName), castToPhrase(valueName)>
		|
			newStatements
		] : blockReturnType»
	> : returnType
] : send phrase ⇒ ⊤;

/**
 * Iteratively apply {@param "accumulator"} to the bindings of {@param "aMap"},
 * in no particular order, in order to transform and filter its bindings into a
 * new map. When {@param "accumulator"} is invoked, it is passed a "keeper"
 * function. The keeper function may be invoked to "save" a particular value,
 * i.e., a value that will be associated with the current key in the output set.
 * The keeper function will save at most one value per binding of {@param
 * "aSet"}, i.e., each time that {@param "accumulator"} is invoked, it may
 * invoke the keeper function at most one time. Answer the new map.
 * 
 * @method "map and filter_by_"
 * @param "aMap" "map"
 * @param "accumulator" "[⊥, ⊥, ⊥]→⊤"
 *        A function that accepts 1) a key from {@param "aMap"}, 2) the value
 *        associated with that key, and 3) a keeper function. The keeper
 *        function accepts an argument of the (value) type that should be saved.
 * @returns "map"
 *          A map whose bindings are those saved by the {@param "accumulator"}.
 * @category "Collections" "Maps" "Control Structures"
 */
Method "map and filter_by_" is
[
	aMap : map,
	accumulator : [⊥, ⊥, ⊥]→⊤
|
	bindings ::= aMap's bindings;
	index : natural number := 1;
	end ::= |bindings|;
	result : map := {};
	[
		$loop;
		If index ≤ end then
		[
			hasAlreadyKept : boolean := false;
			key, value ::= bindings[index];
			accumulator(
				key,
				value,
				[
					transformed : any
				|
					If ¬hasAlreadyKept then
					[
						result := eject result + key→transformed;
						hasAlreadyKept := true;
					];
				]
			);
			index++;
			Restart loop
		];
	]();
	result
] : map;

/**
 * Ensure that the function will accept all bindings of the map and also an
 * appropriately typed keeper function.
 *
 * @method "map and filter_by_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥, ⊥]→⊤'s type"
 */
Semantic restriction "map and filter_by_" is
[
	mapType : map meta,
	accumulator : [⊥, ⊥, ⊥]→⊤'s type
|
	Require: accumulator accepts mapType;
	Require: accumulator's keeper is valid;
	If accumulator's return type ≠ ⊤ then
	[
		Reject parse, expected:
			"repeatedly applied function to have return type ⊤"
	];
	valueType ::= cast accumulator[3] into [t : function meta | t[1]];
	{mapType's key type → valueType | [0..⎡mapType⎤ + 1)}
];

/**
 * Compute and answer whether any of the elements of {@param "aMap"} satisfies
 * the specified function. Do not examine more elements than necessary.
 * 
 * @method "any of_satisfies_"
 * @param "aMap" "map"
 * @param "predicate" "[⊥, ⊥]→boolean"
 *        A function that accepts the elements of the map and answers a boolean.
 * @returns "boolean"
 *          {@method "true"} if {@param "predicate"} answers {@method "true"}
 *          for any element of {@param "aMap"}, {@method "false"} otherwise.
 * @category "Collections" "Maps" "Queries"
 */
Method "any of_satisfies_" is
[
	aMap : map,
	predicate : [⊥, ⊥]→boolean
|
	$body : boolean;
	For each key → value of aMap do
	[
		If predicate(key, value) then
		[
			Exit body with true
		];
	];
	false
] : boolean;

/**
 * Ensure that the function will accept all elements of the map.
 *
 * @method "any of_satisfies_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→boolean's type" 
 */
Semantic restriction "any of_satisfies_" is
[
	mapType : map meta,
	predicate : [⊥, ⊥]→boolean's type
|
	Require: predicate accepts mapType;
	predicate's return type
];

/**
 * Compute and answer whether each of the elements of {@param "aMap"} satisfies
 * the specified function. Do not examine more elements than necessary.
 * 
 * @method "each of_satisfies_"
 * @param "aMap" "map"
 * @param "predicate" "[⊥, ⊥]→boolean"
 *        A function that accepts the bindings of the map and answers a boolean.
 * @returns "boolean"
 *          {@method "true"} if {@param "predicate"} answers {@method "true"}
 *          for each element of {@param "aMap"}, {@method "false"} otherwise.
 * @category "Collections" "Maps" "Queries"
 */
Method "each of_satisfies_" is
[
	aMap : map,
	predicate : [⊥, ⊥]→boolean
|
	$body : boolean;
	For each key → value of aMap do
	[
		Unless predicate(key, value) then
		[
			Exit body with false
		];
	];
	true
] : boolean;

/**
 * Ensure that the function will accept all bindings of the map.
 * 
 * @method "each of_satisfies_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→boolean's type"
 */
Semantic restriction "each of_satisfies_" is
[
	mapType : map meta,
	predicate : [⊥, ⊥]→boolean's type
|
	Require: predicate accepts mapType;
	predicate's return type
];

/**
 * Compute and answer whether any of the elements of {@param "aTuple"} satisfies
 * the specified function. Do not examine more elements than necessary.
 * 
 * @macro "any…→…in|of_§satisfies_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the key of
 *        the map.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *       A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the value of
 *        the map.
 * @param "aMap" "expression phrase ⇒ map"
 *        An {@type "expression phrase"} that yields the tuple to iterate over
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Collections" "Tuples" "Queries"
 */
Macro "any…→…in|of_§satisfies_" is a map iteration prefix function,
	body function($"any of_satisfies_", boolean);

/**
 * Compute and answer whether all of the elements of {@param "aTuple"} satisfies
 * the specified function. Do not examine more elements than necessary.
 * 
 * @macro "each…→…in|of_§satisfies_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the key of
 *        the map.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *       A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the value of
 *        the map.
 * @param "aMap" "expression phrase ⇒ map"
 *        An {@type "expression phrase"} that yields the tuple to iterate over
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Collections" "Tuples" "Queries"
 */
Macro "each…→…in|of_§satisfies_" is a map iteration prefix function,
	body function($"each of_satisfies_", boolean);

/**
 * Compute and answer the count of bindings of {@param "aMap"} that satisfy the
 * given predicate.
 * 
 * @method "count of_where_"
 * @param "aMap" "map"
 * @param "predicate" "[⊥, ⊥]→boolean"
 *        A function that accepts the bindings of the map and answers {@method
 *       "true"} if the binding should be represented in the resulting count.
 * @returns "whole number"
 *          The number of bindings of {@param "aMap"} for which {@param
 *          "predicate"} answers {@method "true"}.
 * @category "Collections" "Maps" "Queries"
 */
Method "count of_where_" is
[
	aMap : map,
	predicate : [⊥, ⊥]→boolean
|
	|filter aMap by predicate|
] : whole number;

/**
 * Ensure that the function will accept all bindings of the map.
 * 
 * @method "count of_where_"
 * @restricts "map meta"
 * @restricts "[⊥, ⊥]→boolean's type"
 */
Semantic restriction "count of_where_" is
[
	mapType : map meta,
	predicate : [⊥, ⊥]→boolean's type
|
	Require: predicate accepts mapType;
	[0..⎡mapType⎤ + 1)
];

Semantic restriction "_∈_" is
[
	keyType : any meta,
	mapType : map meta
|
	mapKeyType ::= mapType's key type;
	if keyType ∩ mapKeyType = ⊥ then
	[
		false's type
	]
	else
	[
		if (¬mapKeyType ∈ type)
			∧ |mapKeyType| = ⎣mapType⎦
			∧ |mapKeyType| = ⎡mapType⎤
			∧ keyType ⊆ mapKeyType
		then
		[
			true's type
		]
		else
		[
			/* Can't strengthen. */
			⊤
		]
	]
];

/**
 * Compute and answer the count of elements of {@param "aMap"} that satisfy 
 * the given predicate.
 * 
 * @macro "count of…→…from|in|of_§where_"
 * @param "keyPhrase" "literal phrase ⇒ token"
 *        A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the key of
 *        the map.
 * @param "valuePhrase" "literal phrase ⇒ token"
 *       A {@type "literal phrase"} holding a synthetic {@type "literal token"}
 *        whose value is the name of the loop variable representing the value of
 *        the map.
 * @param "aMap" "expression phrase ⇒ map"
 *        An {@type "expression phrase"} that yields the tuple to iterate over
 * @param "predicateBlock" "block phrase ⇒ []→boolean"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        predicate function.
 * @returns "send phrase ⇒ ⊤"
 * @category "Queries" "Collections" "Sets"
 */
Macro "count of…→…from|in|of_§where_" is a map iteration prefix function,
	body function($"count of_where_", whole number);

/**
 * Categorize the elements of {@param "aTuple"} via {@param "discriminator"}.
 *
 * @method "group_by_"
 * @param "aTuple" "tuple"
 *        The tuple to categorize.
 * @param "discriminator" "[⊥]→any"
 *        A function that accepts each element of the tuple and answers a value
 *        that represents the group to which the element belongs.
 * @returns "map"
 *          A map whose keys describe groups and whose elements are the groups
 *          themselves, i.e., the tuples of elements that constitute the
 *          described group.
 * @category "Collections" "Tuples" "Maps" "Transformers"
 */
Method "group_by_" is
[
	aTuple : tuple,
	discriminator : [⊥]→any
|
	groups : {any→tuple|} := {};
	For each element of aTuple do
	[
		key ::= discriminator(element);
		group ::= groups[key] else [ <> ] ++ <element>;
		groups := eject groups + key→group;
	];
	groups
] : map;

Semantic restriction "group_by_" is
[
	aTupleType : tuple's type,
	discriminatorType : [⊥]→any's type
|
	Require: discriminatorType accepts aTupleType;
	tupleCardinality ::= ||aTupleType||;
	tupleUpperBound ::= ⎡tupleCardinality⎤;
	defaultType ::= ∪ aTupleType[1..|aTupleType's leading types| + 1];
	keyType ::= discriminatorType's return type;
	lowerBound ::= if ⎣tupleCardinality⎦ = 0 then [0] else [1];
	upperBound ::= if tupleUpperBound > |keyType| ∧ ¬keyType ⊆ type 
		then [|keyType|]
		else [tupleUpperBound];
	valueType ::= <defaultType… | 1..tupleUpperBound>;
	{keyType→valueType | lowerBound..upperBound}
];

/**
 * Categorize the elements of {@param "aSet"} via {@param "discriminator"}.
 *
 * @method "group_by_"
 * @param "aSet" "set"
 *        The set to categorize.
 * @param "discriminator" "[⊥]→any"
 *        A function that accepts each element of the set and answers a value
 *        that represents the group to which the element belongs.
 * @returns "map"
 *          A map whose keys describe groups and whose elements are the groups
 *          themselves, i.e., the sets of elements that constitute the described
 *          group.
 * @category "Collections" "Sets" "Maps" "Transformers"
 */
Method "group_by_" is
[
	aSet : set,
	discriminator : [⊥]→any
|
	groups : {any→set|} := {};
	For each element of aSet do
	[
		key ::= discriminator(element);
		group ::= groups[key] else [ ∅ ] + element;
		groups := eject groups + key→group;
	];
	groups
] : map;

/**
 * Strengthen return type.
 *
 * @method "group_by_"
 * @restricts "set's type"
 * @restricts "[⊥]→any's type"
 */
Semantic restriction "group_by_" is
[
	aSetType : set's type,
	discriminatorType : [⊥]→any's type
|
	Require: discriminatorType accepts aSetType;
	setCardinality ::= ||aSetType||;
	setUpperBound ::= ⎡setCardinality⎤;
	keyType ::= discriminatorType's return type;
	lowerBound ::= if ⎣setCardinality⎦ = 0 then [0] else [1];
	upperBound ::= if setUpperBound > |keyType| 
		then [|keyType|]
		else [setUpperBound];
	valueType ::= {aSetType's element type | 1..setUpperBound};
	{keyType→valueType | lowerBound..upperBound}
];

/**
 * Categorize the elements of {@param "aTuple"} via {@param "discriminator"}.
 *
 * @method "group each…in|of_§by_"
 * @param "aTuple" "expression phrase ⇒ tuple"
 *        An {@type "expression phrase"} that yields the tuple to categorize.
 * @param "discriminator" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        function that accepts each element of the tuple and answers a value
 *        that represents the group to which the element belongs.
 * @returns "send phrase ⇒ map"
 *          A map whose keys describe groups and whose elements are the groups
 *          themselves, i.e., the tuples of elements that constitute the
 *          described group.
 * @category "Collections" "Tuples" "Maps" "Transformers"
 */
Macro "group each…in|of_§by_" is a tuple iteration prefix function,
	tuple body function($"group_by_", any);

/**
 * Categorize the elements of {@param "aTuple"} via {@param "discriminator"}.
 *
 * @method "group each…in|of_§by_"
 * @param "aSet" "expression phrase ⇒ set"
 *        An {@type "expression phrase"} that yields the set to categorize.
 * @param "discriminator" "block phrase ⇒ []→⊤"
 *        A zero-argument {@type "block phrase"} that represents the body of the
 *        function that accepts each element of the set and answers a value
 *        that represents the group to which the element belongs.
 * @returns "send phrase ⇒ map"
 *          A map whose keys describe groups and whose elements are the groups
 *          themselves, i.e., the sets of elements that constitute the described
 *          group.
 * @category "Collections" "Sets" "Maps" "Transformers"
 */
Macro "group each…in|of_§by_" is a set iteration prefix function,
	set body function($"group_by_", any);

/**
 * Group the elements of {@param "aTuple"} by their frequency.
 *
 * @method "counts for_"
 * @param "aTuple" "tuple"
 * @returns "map"
 *          A map whose keys are elements of the tuple and whose values are
 *          their frequencies.
 * @category "Collections" "Tuples" "Maps" "Transformers"
 */
Public stable method "counts for_" is
[
	aTuple : tuple
|
	groups ::= group each a in aTuple by [a];
	map each k→t in groups through [|t|]
] : map;

Semantic restriction "counts for_" is
[
	aTupleType : tuple's type
|
	keyType ::= ∪ aTupleType[1..|aTupleType's leading types| + 1];
	tupleCardinality ::= ||aTupleType||;
	lowerBound ::= if ⎣tupleCardinality⎦ = 0 then [0] else [1];
	upperBound ::= ⎡tupleCardinality⎤;
	{keyType→whole number|lowerBound..upperBound}
];

/**
 * Combine two {@param "map"}s. If there are duplicate keys, invoke {@param
 * "action"} to handle duplicates.
 * 
 * @method "integrate_and_with_"
 * @param "baseMap" "map"
 * @param "supplementMap" "map"
 * @param "action" "[⊥,⊥,⊥]→map"
 *         The function to apply when a duplicate key is encountered. The first
 *         argument is the partially combined map. The second argument is a key
 *         from {@param "supplementMap"} that was present in {@param "baseMap"}.
 *         The third argument is the value associated with the second argument
 *         within {@param "supplementMap"}. The answer is a complete
 *         replacement for the partially combined map.
 * @returns "map"
 *          The fully combined map.
 * @category "Collections" "Maps" "Transformers"
 */
Public method "integrate_and_with_" is
[
	baseMap : map,
	supplementMap : map,
	action : [⊥, ⊥, ⊥]→map
|
	baseMapkeys ::= baseMap's keys;
	newMap : map := baseMap;
	For each supplementKey → supplementValue of supplementMap do
	[
		newMap :=
			if baseMapkeys ∋ supplementKey then
			[
				action(newMap, supplementKey, supplementValue)
			]
			else
			[
				newMap + supplementKey→supplementValue
			];
	];
	newMap
] : map;

/**
 * @method "integrate_and_with_"
 * @restricts "map's type"
 * @restricts "map's type"
 * @restricts "[⊥,⊥,⊥]→map's type"
 */
Semantic restriction "integrate_and_with_" is
[
	baseMapType : map's type,
	supplementMapType : map's type,
	actionType : [⊥,⊥,⊥]→map's type
|
	if actionType[1] ≠ ⊥ ∧ ¬baseMapType ⊆ actionType[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept "
			++ “baseMapType”
			++ " (but it only accepts "
			++ “actionType[1]”
			++ ")"
	]
	else if [actionType[2] ≠ ⊥
		∧ ¬supplementMapType's key type ⊆ actionType[2]] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all key ∈ "
			++ “supplementMapType's key type”
			++ " (but it only accepts "
			++ “actionType[2]”
			++ ")"
	]
	else if [actionType[3] ≠ ⊥
		∧ ¬supplementMapType's value type ⊆ actionType[3]] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept all values ∈ "
			++ “supplementMapType's value type”
			++ " (but it only accepts "
			++ “actionType[3]”
			++ ")"
	];
	newKeyType ::= supplementMapType's key type ∪ baseMapType's key type;
	newValueType ::= supplementMapType's value type ∪ baseMapType's value type;
	{newKeyType → newValueType |}
];

/**
 * Combine two or more {@param "map"}s. If there are duplicate keys, invoke {@param
 * "action"} to handle duplicates.
 * 
 * @method "integrate«_‡,»with_"
 * @param "maps" "<map…|2..>"
 * @param "action" "[⊥,⊥,⊥]→map"
 *         The function to apply when a duplicate key is encountered. The first
 *         argument is the partially combined map. The second argument is a key
 *         from {@param "supplementMap"} that was present in {@param "baseMap"}.
 *         The third argument is the value associated with the second argument
 *         within {@param "supplementValue"}. The answer is a complete
 *         replacement for the partially combined map.
 * @returns "map"
 *          The fully combined map.
 * @category "Collections" "Maps" "Transformers"
 */
Public method "integrate«_‡,and⁇»with_" is
[
	maps : <map…|2..>,
	action : [⊥, ⊥, ⊥]→map
|
	newMap : map := integrate maps[1] and maps[2] with action;

	For each i from 3 to |maps| do
	[
		newMap := integrate newMap and maps[i] with action;
	];
	newMap
] : map;

/**
 * @method "integrate_and_with_"
 * @restricts "map's type"
 * @restricts "map's type"
 * @restricts "[⊥,⊥,⊥]→map's type"
 */
Semantic restriction "integrate«_‡,and⁇»with_" is
[
	mapsType :<map…|2..>'s type,
	actionType : [⊥,⊥,⊥]→map's type
|
	If actionType[1] ≠ ⊥ ∧ ¬mapsType[1] ⊆ actionType[1] then
	[
		Reject parse, expected:
			"repeatedly applied function to accept to the first element \
			\|of the tuple"
			++ “mapsType[1]”
			++ " (but it only accepts "
			++ “actionType[1]”
			++ ")"
	];

	newKeyType : any's type := mapsType[1]'s key type;
	newValueType : any's type := mapsType[1]'s value type;

	For each i from 2 to | mapsType's leading types | + 1 do
	[
		If actionType[2] ≠ ⊥ ∧ ¬mapsType[i]'s key type ⊆ actionType[2] then
		[
			Reject parse, expected:
				"repeatedly applied function to the input tuple element at "
				++ “i”
				++ " to accept all key ∈ "
				++ “mapsType[i]'s key type”
				++ " (but it only accepts "
				++ “actionType[2]”
				++ ")"
		];
		If actionType[3] ≠ ⊥ ∧ ¬mapsType[i]'s value type ⊆ actionType[3] then
		[
			Reject parse, expected:
				"repeatedly applied function to the input tuple element at "
				++ “i”
				++ " to accept all values ∈ "
				++ “mapsType[i]'s value type”
				++ " (but it only accepts "
				++ “actionType[3]”
				++ ")"
		];
		newKeyType := newKeyType ∪ mapsType[i]'s key type;
		newValueType := newValueType ∪ mapsType[i]'s value type;
	];

	{newKeyType → newValueType |}
];
