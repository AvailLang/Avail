/*
 * Functions.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Functions"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Early Functions"
Uses
	"Bootstrap",
	"Control Structures",
	"Early Assertions",
	"Early Definers",
	"Early Logic",
	"Enumeration Support",
	"Literals",
	"Math",
	"Phrases",
	"Tuples",
	"Types"
Names
	"_(««_»«`_»?‡,»)",
	"_(_,`…)",
	"_(`…,_)"
Body

Method "“_”" is
[
	t : function meta
|
	s : string := "[";
	params ::= t's parameters' type;
	If params = ⊥ then [s := eject ↑s ++ "…";]
	else
	[
		index : natural number := 1;
		While [index ≤ ⎣params⎦]
		do
		[
			s := eject ↑s ++ “t[index]”;
			index := eject ↑index + 1;
		]
		alternate with [s := eject ↑s ++ ", ";];
	];
	s := eject ↑s ++ "]→" ++ “t's return type”;
	s
];

invokeAtom ::= atom for "Invoke|invoke_with_";

/**
 * Convert a function of N arguments into a function of M arguments, where
 * 0 < M < N.  The decisions about which arguments to provide and which to defer
 * are made by providing an array of <<value>, boolean> pairs.  If the boolean
 * is false, use the value (i.e., a supplied argument), otherwise expect the
 * value to be absent (i.e., and empty tuple instead of <value>), and defer this
 * argument -- the returned function will require it and pass it through.
 *
 * @method "_partially evaluate with_"
 * @param "originalFunction" "function"
 *        The function to ultimately invoke.
 * @param "pairs" "<<<any…|0..1>, boolean…|2>…|>"
 *        The arguments and place-holder underscores.  Either the first element
 *        must be a size one tuple and the second element is false, or the first
 *        element is the empty tuple and the second element is true.
 * @returns "function"
 *          A function that takes some arguments destined for the original
 *          function and returns another function that takes the remainder of
 *          the arguments and invokes the original function.
 * @category "Bootstrap" "Function Application"
 */
Private method "_partially evaluate with_" is
[
	originalFunction : function,
	pairs : <<<any…|0..1>, boolean…|2>…|>
|
	originalType ::= originalFunction's type;
	argumentTypes ::= originalType's parameters' type;
	Assert: ⎣argumentTypes⎦ = ⎡argumentTypes⎤;
	Assert: ⎣argumentTypes⎦ = |pairs|;
	weakOriginalFunctionConstant ::= ‘`originalFunction`("originalFunction")’;
	originalFunctionConstant ::= cast weakOriginalFunctionConstant
		into [lit : literal phrase ⇒ function | lit];
	callArguments : <expression phrase⇒any…|> := <>;
	argumentDeclarations : <argument phrase⇒⊤…|> := <>;
	For each pairs do [
			pair : <<any…|>, boolean…|>,
			n : natural number
		|
			if pair[2] then
			[
				/* An underscore. */
				Assert: |pair[1]| = 0;
				token ::= `"arg" ++ “n”`;
				arg ::= arg «token : argumentTypes[n]»;
				argumentDeclarations := eject ↑argumentDeclarations ++ <arg>;
				callArguments := eject ↑callArguments ++ <«↓arg»>;
			]
			else
			[
				/* An actual value. */
				Assert: |pair[1]| = 1; 
				literalToken ::= `pair[1][1]`("value" ++ “n”);
				callArguments := eject ↑callArguments ++ <‘literalToken’>;
			];
	];
	blockToReturn ::=
		«[ argumentDeclarations |
			<
				send invokeAtom with
				«<
					originalFunctionConstant,
					(callArguments → list phrase)
				>» : (originalType's return type)
			>
		] : originalType's return type»;
	blockToReturn→function
] : function;

/**
 * Convert a function of N arguments into a function of M arguments, where
 * 0 < M < N.  The N - M arguments are provided in a function invocation pattern
 * reminiscent of "_(«_‡,»)", but the unspecified M arguments are literal
 * underscores.  For example, g ::= f(_,20,_) produces a two-argument function g
 * from the three-argument function f.  When g is subsequently invoked with two
 * arguments such as g(10,30), it will invoke f as though it had been invoked as
 * f(10,20,30).  This is a generalization of currying as found in functional
 * languages.
 * 
 * @method "_(««_»«`_»?‡,»)"
 * @param "originalFunction" "function"
 *        The function to ultimately invoke.
 * @param "pairs" "<<<any…|0..1>, boolean…|2>…|>"
 *        The arguments and place-holder underscores.  Either the first element
 *        must be a size one tuple and the second element is false, or the first
 *        element is the empty tuple and the second element is true. At least
 *        one of the pairs must be the former and at least one must be the
 *        latter, otherwise the useless form f(_,_,_) would be allowed, and the
 *        form f(5,6,7) would be confused with actual function invocation.
 * @returns "function"
 *          A function that takes some arguments destined for the original
 *          function and returns another function that takes the remainder of
 *          the arguments and invokes the original function.
 * @category "Function Application"
 */
Public method "_(««_»«`_»?‡,»)" is
[
	originalFunction : function,
	pairs : <<<any…|0..1>, boolean…|2>…|>
|
	originalFunction partially evaluate with pairs
] : function;

/**
 * @method "_(««_»«`_»?‡,»)"
 * @restricts "function's type"
 * @restricts "<<<any…|0..1>, boolean…|2>…|>'s type"
 */
Semantic restriction "_(««_»«`_»?‡,»)" is
[
	originalFunction : function's type,
	pairs : <<<any…|0..1>, boolean…|2>…|>'s type
|
	Assert: ⎣pairs⎦ = ⎡pairs⎤ (
		"Need a definite number of arguments and underscores");
	pairTypes ::= pairs[1..⎣pairs⎦];
	argumentTypes : <any's type…|> := <>;
	For each pairTypes do [
			pairType : <<any…|0..1>, boolean…|2>'s type,
			index : natural number
		|
			underscoreType ::= pairType[2];
			If underscoreType = true's type then
			[
				If ¬ ||pairType[1]|| ⊆ [0..0] then
				[
					Reject parse, expected:
						"either no argument or no underscore for partial \
						\|function application, index " ++ “index” ++
						".  The arguments were:\n" ++ “pairTypes” ++ "."
				];
				argumentType ::= originalFunction[index];
				argumentTypes := eject ↑argumentTypes ++ <argumentType>;
			]
			else if [underscoreType = false's type] then
			[
				If ¬ ||pairType[1]|| ⊆ [1..1] then
				[
					Reject parse, expected:
						"either an argument or an underscore for partial \
						\|function application, at index " ++ “index” ++
						".  The arguments were:\n" ++ “pairTypes” ++ "."
				];
				valueType ::= pairType[1][1];
				If ¬ valueType ⊆ originalFunction[index] then
				[
					Reject parse, expected:
						"type of argument #" ++ “index” ++
						" to be a subtype of " ++ “originalFunction[index]” ++
						", not of type " ++ “valueType”
				];
			]
			else
			[
				Reject parse, expected:
					"statically determined presence or absence of an underscore"
			];
	];
	If |argumentTypes| = 0 then
	[
		Reject parse, expected:
			"at least one underscore for partial function application"
	];
	If |argumentTypes| = |pairTypes| then
	[
		Reject parse, expected:
			"at least one argument value for partial function application"
	];
	function accepting argumentTypes
		and returning (originalFunction's return type)
];

/**
 * Partially evaluate a function, providing the first argument.  Answer a
 * function which takes the remaining arguments and evaluates the original
 * function with the first argument combined with the remaining arguments.
 *
 * @method "_(_,`…)"
 * @param "originalFunction" "function"
 *        The function to ultimately invoke.
 * @param "firstValue" "any"
 *        The first argument to supply to the function.
 * @returns "function"
 *    A function that takes the remaining N-1 arguments and invokes the original
 *    function.
 * @category "Function Application"
 */
Public method "_(_,`…)" is [
	originalFunction : function,
	firstValue : any
|
	pairs : <<<any…|0..1>, boolean…|2>…|> := <<<firstValue>, false>>;
	argumentsType ::= originalFunction's type's parameters' type;
	From 2 to ⎣argumentsType⎦ do [
		index : natural number
	|
		pairs := pairs ++ <<<>, true>>;
	];
	originalFunction partially evaluate with pairs
];

/**
 * @method "_(_,`…)"
 * @restricts "function's type"
 * @restricts "any's type"
 */
Semantic restriction "_(_,`…)" is
[
	originalFunction : function's type,
	firstValue : any's type
|
	argumentsType ::= originalFunction's parameters' type;
	If ⎣argumentsType⎦ ≠ ⎡argumentsType⎤ then
	[
		Reject parse, expected:
			"function to take a definite number of arguments"
	];
	If ⎣argumentsType⎦ < 2 then
	[
		Reject parse, expected:
			"function for partial evaluation to take at least two arguments"
	];
	If ¬ firstValue ⊆ argumentsType[1] then
	[
		Reject parse, expected:
			"first argument (" ++ “firstValue” ++ ") to agree with function's \
			\|first parameter (" ++ “argumentsType[1]” ++ ")"
	];
	function accepting argumentsType[2..]
		and returning (originalFunction's return type)
] : function's type;

/**
 * Partially evaluate a function, providing the last argument.  Answer a
 * function which takes the initial arguments and evaluates the original
 * function with the last argument combined with the remaining arguments.
 * @method "_(`…,_)"
 * @param "originalFunction" "function"
 * 		The function to ultimately invoke.
 * @param "lastValue" "any"
 * @returns "function"
 *    A function that takes the initial N-1 arguments and invokes the original
 *    function.
 * @category "Function Application"
 */
Public method "_(`…,_)" is [
	originalFunction : function,
	lastValue : any
|
	pairs : <<<any…|0..1>, boolean…|2>…|> := <<<lastValue>, false>>;
	argumentsType ::= originalFunction's type's parameters' type;
	From 2 to ⎣argumentsType⎦ do [
		index : natural number
	|
		pairs := <<<>, true>> ++ pairs;
	];
	originalFunction partially evaluate with pairs
];

/**
 * @method "_(`…,_)"
 * @restricts "function's type"
 * @restricts "any's type"
 */
Semantic restriction "_(`…,_)" is
[
	originalFunction : function's type,
	lastValue : any's type
|
	argumentsType ::= originalFunction's parameters' type;
	If ⎣argumentsType⎦ ≠ ⎡argumentsType⎤ then
	[
		Reject parse, expected:
			"function to take a definite number of arguments"
	];
	If ⎣argumentsType⎦ < 2 then
	[
		Reject parse, expected:
			"function for partial evaluation to take at least two arguments"
	];
	argumentsCount ::= cast ⎣argumentsType⎦ into [n : [2..∞) | n];
	If ¬ lastValue ⊆ argumentsType[argumentsCount] then
	[
		Reject parse, expected:
			"last argument (" ++ “lastValue” ++ ") to agree with function's \
			\|last parameter (" ++ “argumentsType[argumentsCount]” ++ ")"
	];
	function accepting argumentsType[..argumentsCount - 1]
		and returning (originalFunction's return type)
] : function's type;
