/*
 * Logic.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Logic"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Early Logic"
Uses
	"Bootstrap",
	"Definers",
	"Early Assertions",
	"Early Control Structures",
	"Early Literals",
	"Early Functions",
	"Early Sets",
	"Enumeration Support",
	"Literals",
	"Math",
	"Types",
	"Variables"
Names
	"«_‡=»",
	"_⊕_",
	"_`↑_",
	"_↓_",
	"_→_",
	"_←_",
	"_↔_",
	"_↛_",
	"_↚_"
Body

/**
 * Are all lexical arguments equal?
 * 
 * @method "«_‡=»"
 * @param "<any…|3..>" "aTuple"
 * @returns "boolean"
 *          {@method "true"} if all arguments are equal, {@method "false"}
 *          otherwise.
 * @category "Mathematics" "Relations"
 */
Public method "«_‡=»" is
[
	aTuple : <any…|3..>
|
	|aTuple→set| = 1
] : boolean;

/**
 * If there is no valid type intersection (the result of any type intersection 
 * operation is ⊥) between the types in the tuple, then the equality comparison
 * will always fail.
 * 
 * @method "«_‡=»"
 * @restricts "<any…|3..>'s type"
 */
Semantic restriction "«_‡=»" is
[
	aTupleType : <any…|3..>'s type
|
	$body : type;
	intersectionType : type := ⊤;
	From 1 to |aTupleType's leading types|+1 do
	[
		index : natural number
	|
		intersectionType := (eject intersectionType) ∩ (aTupleType[index]);
		If intersectionType = ⊥ then [Exit body with false's type];
		true
	];
	⊤
] : type;

/* Disallow mixing and recursive parsing of comparison operations. */
[
	binary ::= {"_=_", "_≤_", "_<_", "_≥_", "_>_"};
	chains ::= {"«_‡=»", "«_‡«=|≤|<»!»", "«_‡«=|≥|>»!»"};
	restrictions ::= binary ∪ chains;
	Grammatical restriction chains is <restrictions>;
	Grammatical restriction binary is <restrictions, restrictions>;
]();

/**
 * Compute and answer the logical exclusive disjunction, i.e., XOR, of the
 * arguments. This is equivalent to (a ∧ ¬b) ∨ ((¬a) ∧ b)
 * 
 * @method "_⊕_"
 * @param "a" "boolean"
 * @param "a" "boolean"
 * @returns "boolean"
 * @category "Logic"
 */
Public stable method "_⊕_" is
[
	a : boolean,
	b : boolean
|
	a ≠ b
] : boolean;

/**
 * Compute and answer the logical NAND of the arguments. This is equivalent to
 * ¬({@param "a"} ∧ {@param "b"}). Short-circuit the computation, i.e., only 
 * evaluate {@param "b"} if {@param "a"} is {@method "true"}.
 * 
 * @method "_`↑_"
 * @param "a" "boolean"
 * @param "b" "[]→boolean"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_`↑_" is
[
	a : boolean,
	b : []→boolean
|
	¬(a ∧ b)
] : boolean;

Method "_`↑_" is
[
	a : false's type,
	b : []→boolean
|
	true
] : boolean;

/**
 * If the left-hand argument of {@method "_`↑_"} is known statically to be 
 * {@method "false"}, then the expression is also known statically to be 
 * {@method "true"}.
 * 
 * @method "_`↑_"
 * @restricts "false's type's type"
 * @restricts "([]→boolean)'s type"
 */
Semantic restriction "_`↑_" is
[
	a : false's type's type,
	b : ([]→boolean)'s type
|
	true's type
];

/**
 * If the left-hand argument of {@method "_`↑_"} is known statically to be 
 * {@method "true"}, then the static type of the expression is the negation of 
 * {@param "b"}'s return type.
 *
 * @method "_`↑_"
 * @restricts "true's type's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_`↑_" is
[
	a : true's type's type,
	b : []→(true's type)'s type
|
	false's type
];

/**
 * If the right-hand argument of {@method "_`↑_"} is known statically to be 
 * {@method "true"}, then the static type of the expression is the negation of 
 * {@param "b"}'s return type.
 *
 * @method "_`↑_"
 * @restricts "boolean's type"
 * @restricts "[]→(false's type)'s type"
 */
Semantic restriction "_`↑_" is
[
	a : boolean's type,
	b : []→(false's type)'s type
|
	true's type
];

/**
 * Compute and answer the logical NOR of the arguments. This is equivalent to
 * ¬({@param "a"} ∨ {@param "b"}). Short-circuit the computation, i.e., only 
 * evaluate {@param "b"} if {@param "a"} is {@method "false"}.
 *
 * @method "_↓_"
 * @param "a" "boolean"
 * @param "b" "[]→boolean"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_↓_" is
[
	a : boolean,
	b : []→boolean
|
	¬(a ∨ b)
] : boolean;

Method "_↓_" is
[
	a : true's type,
	b : []→boolean
|
	false
] : boolean;

/**
 * If the left-hand argument of {@method "_↓_"} is known statically to be 
 * {@method "true"}, then the expression is known statically to be {@method 
 * "false"}.
 * 
 * @method "_↓_"
 * @restricts "true's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_↓_" is
[
	a : true's type's type,
	b : []→boolean's type
|
	false's type
];

/**
 * If the left-hand argument of {@method "_↓_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is the negation of 
 * {@param "b"}'s return type.
 * 
 * @method "_↓_"
 * @restricts "false's type's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_↓_" is
[
	a : false's type's type,
	b : []→(true's type)'s type
|
	false's type
];

/**
 * If the left-hand argument of {@method "_↓_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is the negation of
 * {@param "b"}'s return type.
 * 
 * @method "_↓_"
 * @restricts "false's type's type"
 * @restricts "[]→(false's type)'s type"
 */
Semantic restriction "_↓_" is
[
	a : false's type's type,
	b : []→(false's type)'s type
|
	true's type
];

/**
 * If the right-hand argument of {@method "_↓_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is {@method 
 * "false"}.
 * 
 * @method "_↓_"
 * @restricts "boolean's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_↓_" is
[
	a : boolean's type,
	b : []→(true's type)'s type
|
	false's type
];

/**
 * Compute and answer the material conditional of the arguments. This is the
 * equivalent of (¬{@param "a"}) ∨ {@param "b"}. Short-circuit the computation, 
 * i.e., only evaluate {@param "b"} if {@param "a"} is {@method "true"}.
 *
 * @method "_→_"
 * @param "a" "boolean"
 * @param "b" "[]→boolean"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_→_" is
[
	a : boolean,
	b : []→boolean
|
	(¬a) ∨ b
] : boolean;

Method "_→_" is
[
	a : false's type,
	b : []→boolean
|
	true
] : boolean;

/**
 * If the left-hand argument of {@method "_→_"} is known statically to be 
 * {@method "false"}, then the expression is known statically to be {@method 
 * "true"}.
 * 
 * @method "_→_"
 * @restricts "false's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_→_" is
[
	a : false's type's type,
	b : []→boolean's type
|
	true's type
];

/**
 * If the right-hand argument of {@method "_→_"} is known statically to be 
 * {@method "true"}, then the expression is known statically to be {@method 
 * "true"}.
 * 
 * @method "_→_"
 * @restricts "boolean's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_→_" is
[
	a : boolean's type,
	b : []→(true's type)'s type
|
	true's type
];

/**
 * Compute and answer the converse implication of the arguments. This is
 * equivalent to {@param "a"} ∨ ¬{@param "b"}. Short-circuit the computation, 
 * i.e., only evaluate {@param "b"} if {@param "a"}  is false.
 *
 * @method "_←_"
 * @param "a" "boolean"
 * @param "b" "[]→boolean"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_←_" is
[
	a : boolean,
	b : []→boolean
|
	a ∨ [¬b()]
] : boolean;

Method "_←_" is
[
	a : true's type,
	b : []→boolean
|
	true
] : boolean;

/**
 * If the left-hand argument of {@method "_←_"} is known statically to be 
 * {@method "true"}, then the static type of the expression is {@method "true"}.
 * 
 * @method "_←_"
 * @restricts "true's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_←_" is
[
	a : true's type's type,
	b : []→boolean's type
|
	true's type
];

/**
 * If the right-hand argument of {@method "_←_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is {@method 
 * "true"}.
 * 
 * @method "_←_"
 * @restricts "boolean's type"
 * @restricts "[]→(false's type)'s type"
 */
Semantic restriction "_←_" is
[
	a : boolean's type,
	b : []→(false's type)'s type
|
	true's type
];

/**
 * Compute and answer the logical biconditional of the arguments. This is the
 * negation of XOR and equivalent to ({@param "a"} ∧ {@param "b"}) ∨ ((¬{@param 
 * "a"}) ∧ ¬{@param "b"}), which is a = b.
 *
 * @method "_↔_"
 * @param "boolean" "a"
 * @param "boolean" "b"
 * @returns "boolean"
 * @category "Logic"
 */
Public stable method "_↔_" is
[
	a : boolean,
	b : boolean
|
	a = b
] : boolean;

/**
 * Type can be strengthened as long as neither argument is of type boolean.
 * 
 * @method "_↔_"
 * @restricts "boolean's type"
 * @restricts "boolean's type"
 */
Semantic restriction "_↔_" is
[
	aType : boolean's type,
	bType : boolean's type
|
	if (aType ≠ boolean) ∧ [bType ≠ boolean] then 
	[
		(aType = bType)'s type
	] 
	else 
	[
		⊤
	]
];

/**
 * Compute and answer the material nonimplication of the arguments. This is
 * equivalent to {@param "a"} ∧ ¬{@param "b"}. Short-circuit the computation, 
 * i.e., only evaluate {@param "b"} if {@param "a"} is {@method "true"}.
 *
 * @method "_↛_"
 * @param "boolean" "a"
 * @param "[]→boolean" "b"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_↛_" is
[
	a : boolean,
	b : []→boolean
|
	a ∧ [¬b()]
] : boolean;

Method "_↛_" is
[
	a : false's type,
	b : []→boolean
|
	false
] : boolean;

/**
 * If the left-hand argument of {@method "_↛_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is {@method 
 * "false"}.
 *
 * @method "_↛_"
 * @restricts "false's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_↛_" is
[
	a : false's type's type,
	b : []→boolean's type
|
	false's type
];

/**
 * If the right-hand argument of {@method "_↛_"} is known statically to be 
 * {@method "true"}, then the static type of the expression is {@method 
 * "false"}.
 *
 * @method "_↛_"
 * @restricts "boolean's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_↛_" is
[
	a : boolean's type,
	b : []→(true's type)'s type
|
	false's type
];

/**
 * Compute and answer the converse nonimplication of the arguments. This is
 * equivalent to (¬{@param "a"}) ∧ {@param "b"}. Short-circuit the computation, 
 * i.e., only evaluate {@param "b"} if {@param "a"} is {@method "false"}.
 *
 * @method "_↚_"
 * @param "boolean" "a"
 * @param "[]→boolean" "b"
 * @returns "boolean"
 * @category "Logic"
 */
Public method "_↚_" is
[
	a : boolean,
	b : []→boolean
|
	(¬a) ∧ [b()]
] : boolean;

Method "_↚_" is
[
	a : true's type,
	b : []→boolean
|
	false
] : boolean;

/**
 * If the left-hand argument of {@method "_↚_"} is known statically to be 
 * {@method "true"}, then the static type of the expression is {@method 
 * "false"}.
 * 
 * @method "_↚_"
 * @restricts "true's type's type"
 * @restricts "[]→boolean's type"
 */
Semantic restriction "_↚_" is
[
	a : true's type's type,
	b : []→boolean's type
|
	false's type
];

/**
 * If the right-hand argument of {@method "_↚_"} is known statically to be 
 * {@method "false"}, then the static type of the expression is {@method 
 * "false"}.
 * 
 * @method "_↚_"
 * @restricts "boolean's type"
 * @restricts "[]→(false's type)'s type"
 */
Semantic restriction "_↚_" is
[
	a : boolean's type,
	b : []→(false's type)'s type
|
	false's type
];

/**
 * If the right-hand argument of {@method "_↚_"} is known statically to be 
 * {@method "true"} and the left-hand argument is known statically to be 
 * {@method "false"}, then the static type of the expression is {@method 
 * "true"}.
 * 
 * @method "_↚_"
 * @restricts "false's type's type"
 * @restricts "[]→(true's type)'s type"
 */
Semantic restriction "_↚_" is
[
	a : false's type's type,
	b : []→(true's type)'s type
|
	true's type
];

/**
 * Negation has the highest precedence among logical operators.
 * 
 * @method "¬_"
 * @forbids 1 "_∧_" "_∨_" "_⊕_" "_`↑_" "_↓_" "_→_" "_←_" "_↔_" "_↛_" "_↚_"
 * 	"_=_" "_≠_"
 */
Grammatical restriction "¬_" is
	<{"_∧_", "_∨_", "_⊕_", "_`↑_", "_↓_", "_→_", "_←_", "_↔_", "_↛_", "_↚_",
	 "_=_", "_≠_"}>;

/**
 * AND operation is second highest precedence among logical operators, after
 * negation.
 * 
 * @method "_∧_"
 * @forbids 1 "_∨_" "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 * @forbids 2 "_∧_" "_∨_" "_⊕_" "_→_" "_↔_" "_←_" "_↛_" "_↚_"
 */
Grammatical restriction "_∧_" is
	<{"_∨_", "_→_", "_↔_", "_←_", "_⊕_", "_↛_", "_↚_"},
	{"_∧_", "_∨_", "_⊕_", "_→_", "_↔_", "_←_", "_↛_", "_↚_"}>;

/**
 * OR operation is third highest precedence among logical operators, after
 * AND and negation.
 * 
 * @method "_∨_"
 * @forbids 1 "_∨_" "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 * @forbids 2 "_∧_" "_∨_" "_⊕_" "_→_" "_↔_" "_←_" "_↛_" "_↚_"
 */
Grammatical restriction "_∨_" is 
	<{"_→_", "_↔_", "_←_", "_⊕_", "_↛_", "_↚_"},
	{"_∨_", "_→_", "_↔_", "_←_", "_⊕_", "_↛_", "_↚_"}>;

/**
 * (Non-)implications and converse (non-)implications share the fourth highest
 * precedence.
 * 
 * @method "_→_"
 * @forbids 1 "_↔_" "_⊕_"
 * @forbids 2 "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 */
/**
 * (Non-)implications and converse (non-)implications share the fourth highest
 * precedence.
 * 
 * @method "_←_"
 * @forbids 1 "_↔_" "_⊕_"
 * @forbids 2 "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 */
/**
 * (Non-)implications and converse (non-)implications share the fourth highest
 * precedence.
 * 
 * @method "_↛_"
 * @forbids 1 "_↔_" "_⊕_"
 * @forbids 2 "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 */
/**
 * (Non-)implications and converse (non-)implications share the fourth highest
 * precedence.
 * 
 * @method "_↚_"
 * @forbids 1 "_↔_" "_⊕_"
 * @forbids 2 "_→_" "_↔_" "_←_" "_⊕_" "_↛_" "_↚_"
 */
Grammatical restriction {"_→_", "_←_", "_↛_", "_↚_"} is 
	<{"_↔_", "_⊕_"}, {"_→_", "_↔_", "_←_", "_⊕_", "_↛_", "_↚_"}>;

/**
 * Biconditional and XOR operations have the lowest precedence.
 * 
 * @method "_↔_"
 * @forbids 2 "_↔_" "_⊕_"
 */
/**
 * Biconditional and XOR operations have the lowest precedence.
 * 
 * @method "_⊕_"
 * @forbids 2 "_↔_" "_⊕_"
 */
Grammatical restriction {"_↔_", "_⊕_"} is <∅, {"_↔_", "_⊕_"}>;

/**
 * Strengthen for exactly known values (but never for types).
 * 
 * @method "_=_"
 * @restricts "any meta"
 * @restricts "any meta"
 */
Semantic restriction "_=_" is
[
	a : any meta,
	b : any meta
|
	if |a| = 1
		∧ [ |b| = 1
		∧ [ ¬a's instance ∈ type
		∧ [ ¬b's instance ∈ type ] ] ]
	then
	[
		(a's instance = b's instance)'s type
	]
	else
	[
		if a ∩ b = ⊥ then
		[
			Assert: a ≠ ⊥ ∧ [ b ≠ ⊥ ];
			false's type
		]
		else
		[
			/* Don't strengthen. */
			⊤
		]
	]
];
