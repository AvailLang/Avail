/*
 * Fallible Primitives.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Versioned As: $$Revision$$
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

Module "Fallible Primitives"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
Uses
	"Origin",
	"Error Codes",
	"Special Objects",
	"Primitives" =
	(
		"$_@pc=_stack=_[_]caller=_",
		"Abstract method_is_",
		"After the current module is unloaded,⁇do_",
		"Alias_to_",
		"Attempt to join_",
		"Error:_",
		"Exit_with_",
		"Export_as a new name",
		"Forward method_is_",
		"Grammatical restriction_is_",
		"In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_",
		"Invoke_with_,⁇forked at priority_",
		"Invoke|invoke_with_",
		"Macro_is«_,»_",
		"Mark for_character|characters of read ahead",
		"Print:_",
		"Reject parse,expected:_",
		"Remove current fiber[_]",
		"Remove_[_]",
		"Reset to mark",
		"Restart_with_",
		"Seal method_at_",
		"Seal method|methods_at existing definitions",
		"Semantic restriction_is_",
		"_'s⁇_field",
		"_'s⁇instances",
		"_'s⁇issuing module",
		"_'s⁇result",
		"_+_",
		"_-_",
		"_<<_",
		"_<<_keeping_bits",
		"_>>_",
		"_[_.._]",
		"_[_]",
		"_[_]:=_",
		"_[_]→_",
		"_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)",
		"_has definition for_",
		"_is unambiguous",
		"_occurrences⁇of_",
		"_parameterized by_",
		"_to_by_",
		"_«[_]»→_",
		"_×_",
		"_÷_",
		"_→extended integer",
		"_→function",
		"_∈_",
		"_∈current fiber",
		"`|message_'s⁇parameters`|",
		"`«(_:=_)`»",
		"`«[_`|Primitive__]:_^_`»",
		"`«_:=_`»",
		"`«`↑_`»",
		"`«supercast(_::_)`»",
		"all atoms for_",
		"atom for_",
		"constructor of_,⁇parameterized by_,⁇on failure doing_",
		"current fiber[_]",
		"current module",
		"current module's exported names",
		"first-of-seq`«_`»",
		"function from_and_",
		"in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_",
		"invoke_with_,⁇forked at priority_",
		"message_contains groups",
		"method definition of_for_",
		"method for_",
		"method_._,⁇parameterized by_,⁇on failure doing_",
		"new⁇heritable«fiber-local»⁇atom named_",
		"next character",
		"return type of_._«parameterized by»⁇_",
		"semantic restrictions for_given_",
		"send_with_:_",
		"seq`«_`»",
		"static method_._,⁇parameterized by_,⁇on failure doing_",
		"↓_"
	)
Names
	"early failure function",
	"Set early failure function to_"
Body

Primitive "{«_‡,»}" is
[
	aTuple : tuple
|
	Primitive 109;
] : set;

Primitive "_ᵀ" is
[
	instances : set
|
	Primitive 65;
] : type;

Primitive "Private fail primitive with_" is
[
	value : any
|
	Primitive 256;
] : ⊥;

_fail_primitive : primitive failure function :=
	[
		arg1 : any
	|
		Private fail primitive with arg1
	] : ⊥;

Primitive "early failure function" is
[
	_fail_primitive
] : primitive failure function;

Primitive "Set early failure function to_" is
[
	arg1 : primitive failure function
|
	_fail_primitive := arg1;
] : ⊤;

Primitive "Private invoke_with«_‡,»" is
[
	aFunction : function,
	arguments : tuple
|
	Primitive 40 (failureCode : natural number);
	Private fail primitive with failureCode
] : ⊤;

Primitive "Private semantic restriction_is_" is
[
	methodName : string,
	restriction : semantic restriction function
|
	Primitive 248 (failureCode : natural number);
	Private fail primitive with failureCode
] : ⊤;

Private semantic restriction "Private invoke_with«_‡,»" is 
[
	aFunction : function meta,
	arguments : tuple meta
|
	⊥
];

/**
 * Compute and answer the sum of the arguments.
 *
 * @category "Primitives" "Numbers" "Mathematics"
 * @method "_+_"
 * @param "augend" "number"
 *        The augend.
 * @param "addend" "number"
 *        The addend.
 * @returns "number"
 *    The sum of the augend and the addend.
 * @raises "cannot-add-unlike-infinities exception"
 */
Primitive "_+_" is
[
	augend : number,
	addend : number
|
	Primitive 1 (failureCode : {
		cannot-add-unlike-infinities code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : number;

/**
 * Compute and answer the difference of the arguments.
 *
 * @category "Primitives" "Numbers" "Mathematics"
 * @method "_-_"
 * @param "minuend" "number"
 *        The minuend.
 * @param "subtrahend" "number"
 *        The subtrahend.
 * @returns "number"
 *    The difference of the minuend and the subtrahend.
 * @raises "cannot-subtract-like-infinities exception"
 */
Primitive "_-_" is
[
	minuend : number,
	subtrahend : number
|
	Primitive 2 (failureCode : {
		cannot-subtract-like-infinities code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : number;

/**
 * Compute and answer the product of the arguments.
 *
 * @category "Primitives" "Numbers" "Mathematics"
 * @method "_×_"
 * @param "multiplicand" "number"
 *        The multiplicand.
 * @param "multiplier" "number"
 *        The multiplier.
 * @returns "number"
 *    The product of the multiplicand and the multiplier.
 * @raises "cannot-multiply-zero-and-infinity exception"
 */
Primitive "_×_" is
[
	multiplicand : number,
	multiplier : number
|
	Primitive 3 (failureCode : {
		cannot-multiply-zero-and-infinity code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : number;

/**
 * Compute and answer the quotient of the arguments.
 *
 * @category "Primitives" "Numbers" "Mathematics"
 * @method "_÷_"
 * @param "dividend" "number"
 *        The dividend.
 * @param "divisor" "number"
 *        The divisor.
 * @returns "number"
 *    The quotient of the dividend and the divisor.
 * @raises "cannot-divide-by-zero exception"
 * @raises "cannot-divide-infinities exception"
 */
Primitive "_÷_" is
[
	dividend : number,
	divisor : number
|
	Primitive 4 (failureCode : {
		cannot-divide-by-zero code,
		cannot-divide-infinities code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : number;

/**
 * Answer the value contained within the specified variable.
 *
 * @category "Primitives" "Variables" "Queries"
 * @method "↓_"
 * @param "var" "variable"
 *        A variable.
 * @returns "any"
 *    The value contained within the specified variable.
 * @raises "cannot-read-unassigned-variable exception"
 * @raises "Java-marshaling-failed exception"
 */
Primitive "↓_" is
[
	var : variable
|
	Primitive 10 (failureCode : {
		cannot-read-unassigned-variable code,
		Java-marshaling-failed code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Answer the instances of the enumeration.
 *
 * @category "Primitives" "Types" "Queries"
 * @method "_'s⁇instances"
 * @param "enum" "type"
 *        An enumeration.
 * @returns "set"
 *    A set whose members are the instances of the enumeration.
 * @raises "not-an-enumeration exception"
 */
Primitive "_'s⁇instances" is
[
	enum : type
|
	Primitive 29 (failureCode : {
		not-an-enumeration code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : set;

/**
 * Invoke the function with the given arguments. Answer its result.
 *
 * @category "Primitives" "Functions" "Function Application"
 * @method "Invoke|invoke_with_"
 * @param "aFunction" "function"
 *        A function.
 * @param "arguments" "tuple"
 *        The tuple of arguments.
 * @returns "⊤"
 *    The value produced by applying the arguments to the function.
 * @raises "exception"
 *         Since the function's implementation is arbitrary, it can raise any
 *         exception.
 */
Primitive "Invoke|invoke_with_" is
[
	aFunction : function,
	arguments : tuple
|
	Primitive 40 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Construct and answer a continuation whose current function, Level One
 * program counter, local stack, local stack pointer, and calling continuation
 * are specified by the arguments.
 *
 * @category "Primitives" "Continuations" "Constructors"
 * @method "$_@pc=_stack=_[_]caller=_"
 * @param "aFunction" "function"
 *        The new continuation's current function.
 * @param "programCounter" "natural number"
 *        {@param "aFunction"}'s program counter. This is the index of the
 *        next Level One instruction to execute when the new continuation is
 *        resumed.
 * @param "stack" "tuple"
 *        {@param "aFunction"}'s stack. This tuple contains the arguments, local
 *        variables, and temporaries.
 * @param "stackPointer" "natural number"
 *        {@param "aFunction"}'s stack pointer. This is the index of the
 *        top of the stack.
 * @param "caller" "continuation variable"
 *        A variable holding the new continuation's calling continuation.
 *        If the variable is unassigned, then create a root continuation (i.e.
 *        one without a caller).
 * @returns "$[…]→⊥"
 *    The requested continuation.
 * @raises "cannot-create-continuation-for-infallible-primitive-function exception"
 */
Primitive "$_@pc=_stack=_[_]caller=_" is
[
	aFunction : function,
	programCounter : natural number,
	stack : tuple,
	stackPointer : natural number,
	caller : continuation variable
|
	Primitive 49 (failureCode : {
		cannot-create-continuation-for-infallible-primitive-function code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : continuation;

/**
 * Restart the continuation with the specified arguments. Execution proceeds as
 * though the continuation's caller had just invoked the continuation's current
 * function with the given arguments instead of the original arguments. The
 * current continuation (in which this primitive was invoked) is completely
 * replaced by the restarted continuation.
 *
 * @category "Primitives" "Continuations" "Control Structures"
 * @method "Restart_with_"
 * @param "aContinuation" "continuation"
 *        The continuation to restart.
 * @param "arguments" "tuple"
 *        The new arguments with which to restart {@param "aContinuation"}.
 * @returns "⊥"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 */
Primitive "Restart_with_" is
[
	aContinuation : continuation,
	arguments : tuple
|
	Primitive 56 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊥;

/**
 * Exit the continuation and answer the specified value to the continuation's
 * caller. Execution proceeds as though the continuation had just returned from
 * its current function with the supplied value. The current continuation (in
 * which this primitive was invoked) is completely replaced by the specified
 * continuation's resumed caller.
 *
 * @category "Primitives" "Continuations" "Control Structures"
 * @method "Exit_with_"
 * @param "aContinuation" "continuation"
 *        The continuation to exit.
 * @param "value" "any"
 *        The value with which to exit {@param "aContinuation"}.
 * @returns "⊥"
 * @raises "continuation-expected-stronger-type exception"
 */
Primitive "Exit_with_" is
[
	aContinuation : continuation,
	value : any
|
	Primitive 57 (failureCode : {
		continuation-expected-stronger-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊥;

/**
 * Extract a field's value from an object.
 *
 * @category "Primitives" "Objects" "Queries"
 * @method "_[_]"
 * @param "object" "object"
 *        An object.
 * @param "field" "atom"
 *        The field for which to extract the value.
 * @returns "any"
 *    The field's value.
 * @raises "no-such-field exception"
 */
Primitive "_[_]" is
[
	object : object,
	field : atom
|
	Primitive 66 (failureCode : {
		no-such-field code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Extract a field's type from an object type.
 *
 * @category "Primitives" "Types" "Objects" "Queries"
 * @method "_[_]"
 * @param "objectType" "object meta"
 *        An object type.
 * @param "field" "atom"
 *        The field for which to extract the type.
 * @returns "(any)'s type"
 *    The field's constraining type.
 * @raises "no-such-field exception"
 */
Primitive "_[_]" is
[
	objectType : object meta,
	field : atom
|
	Primitive 67 (failureCode : {
		no-such-field code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any meta;

/**
 * Construct and answer a function given the specified function implementation
 * and tuple of captured variables.
 *
 * @category "Primitives" "Functions" "Constructors"
 * @method "function from_and_"
 * @param "implementation" "function implementation"
 *        The compiled code that describes the algorithm.
 * @param "outerVariables" "tuple"
 *        The tuple of outer variables.
 * @returns "[…]→⊤"
 *    The requested function.
 * @raises "wrong-outers exception"
 */
Primitive "function from_and_" is
[
	implementation : function implementation,
	outerVariables : tuple
|
	Primitive 74 (failureCode : {
		wrong-outers code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : function;

/**
 * Answer the value bound to {@param "aMap"} in {@param "key"}.
 *
 * @category "Primitives" "Maps" "Queries"
 * @method "_[_]"
 * @param "aMap" "map"
 *        A map.
 * @param "key" "any"
 *        The key whose bound value should be obtained.
 * @returns "any"
 *    The value bound to {@param "key"} in {@param "aMap"}.
 * @raises "key-not-found exception"
 */
Primitive "_[_]" is
[
	aMap : map,
	key : any
|
	Primitive 82 (failureCode : {
		key-not-found code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Shift {@param "baseInteger"} to the right by {@param "shiftFactor"} bits. If
 * {@param "baseInteger"} is negative then treat it as a left shift of the
 * corresponding positive amount.
 *
 * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"
 * @method "_>>_"
 * @param "baseInteger" "integer"
 *        An integer to shift.
 * @param "shiftFactor" "integer"
 *        How many bits to shift right (or left if negative).
 * @returns "(-∞..∞)"
 *    ⎣_>>_ ÷ 2<sup>baseInteger</sup>⎦
 * @raises "too-large-to-represent exception"
 */
Primitive "_>>_" is
[
	baseInteger : integer,
	shiftFactor : integer
|
	Primitive 94 (failureCode : {
		too-large-to-represent code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : integer;

/**
 * Shift {@param "baseInteger"} to the left by {@param "shiftFactor"} bits. If
 * {@param "baseInteger"} is negative then treat it as a right shift of the
 * corresponding positive amount.
 *
 * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"
 * @method "_<<_"
 * @param "baseInteger" "integer"
 *        An integer to shift.
 * @param "shiftFactor" "integer"
 *        How many bits to shift left (or right if negative).
 * @returns "(-∞..∞)"
 *    ⎣_<<_ × 2<sup>baseInteger</sup>⎦
 * @raises "too-large-to-represent exception"
 */
Primitive "_<<_" is
[
	baseInteger : integer,
	shiftFactor : integer
|
	Primitive 95 (failureCode : {
		too-large-to-represent code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : integer;

/**
 * Shift {@param "baseInteger"} to the left by {@param "shiftFactor"} bits (treating
 * a negative factor as a right shift), then truncate the result to the bottom
 * {@param "truncationBits"} bits by zeroing the rest.
 *
 * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"
 * @method "_<<_keeping_bits"
 * @param "baseInteger" "whole number"
 *        A non-negative integer to shift and mask.
 * @param "shiftFactor" "integer"
 *        How many bit positions to shift left by (negative for a right shift).
 * @param "truncationBits" "whole number"
 *        The number of low-order bits to preserve after the shift (must
 *        be ≥ 0).
 * @returns "[0..∞)"
 *    ⎣_<<_keeping_bits × 2<sup>baseInteger</sup>⎦ mod 2<sup>shiftFactor</sup>
 * @raises "shift-and-truncate-requires-non-negative exception"
 * @raises "too-large-to-represent exception"
 */
Primitive "_<<_keeping_bits" is
[
	baseInteger : whole number,
	shiftFactor : integer,
	truncationBits : whole number
|
	Primitive 96 (failureCode : {
		shift-and-truncate-requires-non-negative code,
		too-large-to-represent code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : whole number;

/**
 * Answer all atoms referenced by the specified name in the module currently
 * undergoing compilation. If this name already refers to atoms in scope,
 * i.e., either ones 1) imported through the "Uses" or "Extends" sections of the
 * current module's header, 2) introduced by the "Names" section of the
 * current module's header, or 3) introduced by dynamic publication then, answer
 * these atoms. Otherwise, privately introduce a new atom.
 *
 * @category "Primitives" "Atoms" "Name Resolution" "Constructors"
 * @method "all atoms for_"
 * @param "name" "string"
 *        The name which should be resolved locally.
 * @returns "{atom|1..∞}"
 *    The set of all locally visible atoms that match the argument.
 * @raises "loading-is-over exception"
 */
Primitive "all atoms for_" is
[
	name : string
|
	Primitive 114 (failureCode : {
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : nonempty set of atom;

/**
 * Does {@param "anAtom"} have a property whose key is {@param "key"}?
 *
 * @category "Primitives" "Atoms" "Queries"
 * @method "_∈_"
 * @param "key" "atom"
 *        The property key.
 * @param "anAtom" "atom"
 *        An atom.
 * @returns "boolean"
 *    `true` if {@param "anAtom"} has a property whose key is {@param
 *    "key"}, `false` otherwise.
 * @raises "special-atom exception"
 */
Primitive "_∈_" is
[
	key : atom,
	anAtom : atom
|
	Primitive 122 (failureCode : {
		special-atom code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : boolean;

/**
 * Assuming that {@param "anAtom"} has a property whose key is {@param
 * "key"}, then answer the property value associated with the {@param
 * "key"}.
 *
 * @category "Primitives" "Atoms" "Queries"
 * @method "_[_]"
 * @param "anAtom" "atom"
 *        An atom.
 * @param "key" "atom"
 *        The property key.
 * @returns "any"
 *    The property value bound to the key.
 * @raises "key-not-found exception"
 * @raises "no-such-field exception"
 */
Primitive "_[_]" is
[
	anAtom : atom,
	key : atom
|
	Primitive 123 (failureCode : {
		key-not-found code,
		no-such-field code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * For {@param "anAtom"}, establish a property binding from {@param
 * "key"} to {@param "value"}. Any previous property binding for {@param
 * "key"} is replaced.
 *
 * @category "Primitives" "Atoms" "Mutators"
 * @method "_[_]:=_"
 * @param "anAtom" "atom"
 *        An atom.
 * @param "key" "atom"
 *        The property key.
 * @param "value" "any"
 *        The property value.
 * @returns "⊤"
 * @raises "special-atom exception"
 */
Primitive "_[_]:=_" is
[
	anAtom : atom,
	key : atom,
	value : any
|
	Primitive 124 (failureCode : {
		special-atom code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Remove from {@param "anAtom"} the property whose key is {@param "key"}.
 *
 * @category "Primitives" "Atoms" "Mutators"
 * @method "Remove_[_]"
 * @param "anAtom" "atom"
 *        An atom.
 * @param "key" "atom"
 *        A property key.
 * @returns "⊤"
 * @raises "key-not-found exception"
 * @raises "no-such-field exception"
 */
Primitive "Remove_[_]" is
[
	anAtom : atom,
	key : atom
|
	Primitive 125 (failureCode : {
		key-not-found code,
		no-such-field code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the module that issued the specified atom.
 *
 * @category "Primitives" "Atoms" "Queries"
 * @method "_'s⁇issuing module"
 * @param "anAtom" "atom"
 *        An atom.
 * @returns "module"
 *    The requested module.
 * @raises "special-atom exception"
 */
Primitive "_'s⁇issuing module" is
[
	anAtom : atom
|
	Primitive 127 (failureCode : {
		special-atom code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : module;

/**
 * Is {@param "name"} unambiguous in the {@method "current module"}?
 *
 * @category "Primitives" "Name Resolution"
 * @method "_is unambiguous"
 * @param "name" "string"
 *        The name in question.
 * @returns "boolean"
 *    {@method "true"} if the argument is unambiguous, {@method "false"}
 *    otherwise.
 * @raises "loading-is-over exception"
 */
Primitive "_is unambiguous" is
[
	name : string
|
	Primitive 129 (failureCode : {
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : boolean;

/**
 * Answer the {@param "index"}-th element of {@param "aTuple"}.
 *
 * @category "Primitives" "Tuples" "Queries"
 * @method "_[_]"
 * @param "aTuple" "tuple"
 *        A tuple.
 * @param "index" "natural number"
 *        The one-based index of the desired element.
 * @returns "any"
 *    The requested element.
 * @raises "subscript-out-of-bounds exception"
 */
Primitive "_[_]" is
[
	aTuple : tuple,
	index : natural number
|
	Primitive 131 (failureCode : {
		subscript-out-of-bounds code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Construct and answer a tuple based on the one provided but such that its
 * {@param "index"}-th element is {@param "value"}.
 *
 * @category "Primitives" "Tuples" "Transformers"
 * @method "_[_]→_"
 * @param "aTuple" "tuple"
 *        A tuple.
 * @param "index" "natural number"
 *        The one-based index of the element that should (potentially) differ
 *        in the resultant tuple.
 * @param "value" "any"
 *        The "replacement" value.
 * @returns "tuple"
 *    The requested tuple.
 * @raises "subscript-out-of-bounds exception"
 */
Primitive "_[_]→_" is
[
	aTuple : tuple,
	index : natural number,
	value : any
|
	Primitive 132 (failureCode : {
		subscript-out-of-bounds code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple;

/**
 * Construct and answer an integer interval tuple.
 *
 * @category "Primitives" "Tuples" "Constructors"
 * @method "_to_by_"
 * @param "start" "integer"
 *        The first value in the tuple.
 * @param "end" "integer"
 *        The last allowed value in the tuple. This value will only be the
 *        last value in the tuple if the difference between the first and last
 *        values is a multiple of the step size.
 * @param "delta" "integer"
 *        The step size of the interval.
 * @returns "<(-∞..∞)…|>"
 *    The requested tuple.
 * @raises "incorrect-argument-type exception"
 */
Primitive "_to_by_" is
[
	start : integer,
	end : integer,
	delta : integer
|
	Primitive 133 (failureCode : {
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple of integer;

/**
 * Construct and answer a slice (i.e. subtuple) of the specified tuple.
 *
 * @category "Primitives" "Tuples" "Transformers" "Queries"
 * @method "_[_.._]"
 * @param "aTuple" "tuple"
 *        A tuple.
 * @param "sliceStart" "natural number"
 *        The one-based start index (inclusive) of the desired slice.
 * @param "sliceEnd" "whole number"
 *        The one-based end index (inclusive) of the desired slice.
 * @returns "tuple"
 *    The requested tuple.
 * @raises "subscript-out-of-bounds exception"
 */
Primitive "_[_.._]" is
[
	aTuple : tuple,
	sliceStart : natural number,
	sliceEnd : whole number
|
	Primitive 135 (failureCode : {
		subscript-out-of-bounds code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple;

/**
 * Compute and answer a tuple containing the requested element types. Indices
 * that are out of bounds report {@type "⊥"} as their element type.
 *
 * @category "Primitives" "Types" "Tuples" "Queries"
 * @method "_[_.._]"
 * @param "aTupleType" "tuple meta"
 *        A tuple type.
 * @param "sliceStart" "natural number"
 *        The one-based index (inclusive) of the start of the slice.
 * @param "sliceEnd" "whole number"
 *        The one-based index (inclusive) of the end of the slice.
 * @returns "<(any)'s type…|>"
 *    The requested slice of element types.
 * @raises "subscript-out-of-bounds exception"
 * @raises "negative-size exception"
 */
Primitive "_[_.._]" is
[
	aTupleType : tuple meta,
	sliceStart : natural number,
	sliceEnd : whole number
|
	Primitive 142 (failureCode : {
		subscript-out-of-bounds code,
		negative-size code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple of any meta;

/**
 * Construct and answer a tuple whose elements are each {@param "value"}.
 *
 * @category "Primitives" "Tuples" "Constructors"
 * @method "_occurrences⁇of_"
 * @param "count" "whole number"
 *        The number of elements in the resulting tuple.
 * @param "value" "any"
 *        The repeated value.
 * @returns "tuple"
 *    A tuple containing {@param "count"} occurrences of {@param "value"}.
 * @raises "exceeds-vm-limit exception"
 */
Primitive "_occurrences⁇of_" is
[
	count : whole number,
	value : any
|
	Primitive 146 (failureCode : {
		exceeds-vm-limit code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple;

/**
 * Construct and answer a function implementation from the specified arguments.
 *
 * @category "Primitives" "Function Implementations" "Constructors"
 * @method "_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)"
 * @param "nybblecodes" "tuple of nybble"
 *        The Level One instructions as a tuple of nybblecodes.
 * @param "primitiveNumber" "unsigned short"
 *        The primitive number, or `0` if the result should not have primitive
 *        linkage.
 * @param "aFunctionType" "function meta"
 *        The function type of any function able to close the result.
 * @param "literals" "tuple"
 *        The literals used by the algorithm.
 * @param "localsCount" "whole number"
 *        The number of local variables used by the algorithm.
 * @param "outersCount" "whole number"
 *        The number of outer variables used by the algorithm.
 * @param "maximumStackDepth" "whole number"
 *        The maximum stack depth.
 * @returns "¢[…]→⊤"
 *    The requested function implementation.
 * @raises "invalid-primitive-number exception"
 * @raises "function-disagrees-with-primitive-restriction exception"
 * @raises "local-type-literal-is-not-a-type exception"
 * @raises "outer-type-literal-is-not-a-type exception"
 */
Primitive "_`#_:_(literals=_,`#locals_,`#outers_,stack depth=_)" is
[
	nybblecodes : tuple of nybble,
	primitiveNumber : unsigned short,
	aFunctionType : function meta,
	literals : tuple,
	localsCount : whole number,
	outersCount : whole number,
	maximumStackDepth : whole number
|
	Primitive 188 (failureCode : {
		invalid-primitive-number code,
		function-disagrees-with-primitive-restriction code,
		local-type-literal-is-not-a-type code,
		outer-type-literal-is-not-a-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : function implementation;

/**
 * Alias {@param "newName"} to {@param "oldAtom"}. This has the same effect
 * as import renaming, but behaves dynamically.
 *
 * @category "Primitives"
 * @method "Alias_to_"
 * @param "newName" "string"
 *        A {@type "string"} that represents the alias.
 * @param "oldAtom" "atom"
 *        An {@type "atom"} that represents the original name.
 * @returns "⊤"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "special-atom exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 * @raises "atom-already-exists exception"
 * @raises "up-arrow-must-follow-argument exception"
 */
Primitive "Alias_to_" is
[
	newName : string,
	oldAtom : atom
|
	Primitive 218 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		special-atom code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		atom-already-exists code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the method uniquely named by the specified atom.
 *
 * @category "Primitives" "Atoms" "Queries"
 * @method "method for_"
 * @param "anAtom" "atom"
 *        An atom.
 * @returns "method"
 *    The requested method.
 * @raises "no-method exception"
 */
Primitive "method for_" is
[
	anAtom : atom
|
	Primitive 220 (failureCode : {
		no-method code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : method;

/**
 * Lookup a definition of the method with the given name, given the
 * tuple of parameter types.
 *
 * @category "Primitives" "Methods" "Name Resolution"
 * @method "method definition of_for_"
 * @param "methodName" "atom"
 *        The name of the method.
 * @param "parameterTypes" "tuple of any meta"
 *        A tuple of parameter types. This must agree in length with the number
 *        of parameters expected by the method.
 * @returns "definition"
 *    The unique definition of {@param "methodName"} that best accords with the
 *    specified parameter types.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "no-method exception"
 * @raises "no-method-definition exception"
 * @raises "ambiguous-method-definition exception"
 */
Primitive "method definition of_for_" is
[
	methodName : atom,
	parameterTypes : tuple of any meta
|
	Primitive 222 (failureCode : {
		incorrect-number-of-arguments code,
		no-method code,
		no-method-definition code,
		ambiguous-method-definition code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : definition;

/**
 * Compute and answer the number of parameters required by a valid send of a
 * message {@param "methodName"}.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Queries"
 * @method "`|message_'s⁇parameters`|"
 * @param "methodName" "string"
 *        A method name.
 * @returns "[0..∞)"
 *    The number of parameters required to send the specified message.
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 */
Primitive "`|message_'s⁇parameters`|" is
[
	methodName : string
|
	Primitive 224 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : whole number;

/**
 * Does the specified message contain any lexical groups?
 *
 * @category "Primitives" "Name Resolution" "Methods" "Queries"
 * @method "message_contains groups"
 * @param "methodName" "string"
 *        A method name.
 * @returns "boolean"
 *    `true` if the specified message contains lexical groups, or `false`
 *    otherwise.
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 */
Primitive "message_contains groups" is
[
	methodName : string
|
	Primitive 225 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : boolean;

/**
 * Seal the named method at the specified signature. No further definitions
 * may be added at or below this signature. This facility is provided to secure
 * methods against dangerous, unscrupulous, or confusing extensions.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Seal method_at_"
 * @param "methodName" "string"
 *        The name of the method to seal.
 * @param "signature" "tuple of any meta"
 *        A tuple of parameter types. This is the signature at which the
 *       seal will be placed.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Seal method_at_" is
[
	methodName : string,
	signature : tuple of any meta
|
	Primitive 226 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Declare an abstract method with the specified name and signature. A concrete
 * definition is one whose parameter types and return type are strictly more
 * specific than the corresponding types of the abstract signature.
 *
 * Only extend the grammar of the current module if the atom was introduced by
 * the current module.
 *
 * @category "Primitives" "Methods" "Constructors" "Mutators"
 * @method "Abstract method_is_"
 * @param "methodName" "atom"
 *        The atom that uniquely names the abstract method to declare.
 * @param "signature" "function meta"
 *        The signature.
 * @returns "⊤"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "redefined-with-same-argument-types exception"
 * @raises "result-type-should-covary-with-arguments exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 * @raises "method-is-sealed exception"
 * @raises "up-arrow-must-follow-argument exception"
 */
Primitive "Abstract method_is_" is
[
	methodName : atom,
	signature : function meta
|
	Primitive 227 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		redefined-with-same-argument-types code,
		result-type-should-covary-with-arguments code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		method-is-sealed code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Does the method whose bundle has the specified name have a unique definition
 * for the given tuple of parameter types?
 *
 * @category "Primitives" "Atoms" "Methods" "Queries"
 * @method "_has definition for_"
 * @param "methodName" "atom"
 *        A method name (an atom).
 * @param "parameterTypes" "tuple of any meta"
 *        A tuple of parameter types. This must agree in length with the number
 *        of parameters expected by the method.
 * @returns "boolean"
 *    `true` if {@param "methodName"} has a unique definition for the specified
 *    parameter types, `false` otherwise.
 * @raises "no-method exception"
 * @raises "no-method-definition exception"
 * @raises "ambiguous-method-definition exception"
 */
Primitive "_has definition for_" is
[
	methodName : atom,
	parameterTypes : tuple of any meta
|
	Primitive 229 (failureCode : {
		no-method code,
		no-method-definition code,
		ambiguous-method-definition code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : boolean;

/**
 * Define the specified semantic restriction. Henceforth whenever the method
 * named by {@param "methodName"} is invoked with arguments accepted by
 * {@param "restriction"}, then apply {@param "restriction"} with the most specific
 * available types of the actual arguments. This is determined by the compiler
 * at the method's call site.
 *
 * A semantic restriction has two responsibilities. First, it may reject a
 * method invocation on any appropriate semantic grounds by calling
 * `Reject parse,expected:_`. Second, it may strengthen the type of value
 * produced at the call site by answering a subtype of the method's declared
 * return type.
 *
 * @category "Primitives" "Methods" "Constructors" "Mutators"
 * @category "Semantic Restrictions"
 * @method "Semantic restriction_is_"
 * @param "methodName" "atom"
 *        The name of the method to which the semantic restriction applies.
 * @param "restriction" "semantic restriction function"
 *        The restriction function.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "type-restriction-must-accept-only-types exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Semantic restriction_is_" is
[
	methodName : atom,
	restriction : semantic restriction function
|
	Primitive 231 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		type-restriction-must-accept-only-types code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Seal the named method at the specified signature. No further definitions
 * may be added at or below this signature. This facility is provided to secure
 * methods against dangerous, unscrupulous, or confusing extensions.
 *
 * @category "Primitives" "Methods" "Constructors" "Mutators"
 * @method "Seal method_at_"
 * @param "methodName" "atom"
 *        The atom that uniquely designates the method to seal.
 * @param "signature" "tuple of any meta"
 *        A tuple of parameter types. This is the signature at which the seal
 *        will be placed.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Seal method_at_" is
[
	methodName : atom,
	signature : tuple of any meta
|
	Primitive 232 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Register the given function for callback after the module undergoing
 * compilation has been unloaded.
 *
 * @category "Primitives" "Modules" "Mutators"
 * @method "After the current module is unloaded,⁇do_"
 * @param "aFunction" "function"
 *        The post-unload function.
 * @returns "⊤"
 * @raises "loading-is-over exception"
 */
Primitive "After the current module is unloaded,⁇do_" is
[
	aFunction : function
|
	Primitive 233 (failureCode : {
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Define a macro with the specified name and body. A macro is a method invoked
 * directly by the compiler as a consequence of parsing a sequence of tokens.
 * The arguments of a macro are parse nodes that structurally represent the
 * corresponding lexical expressions. The result of a macro is a parse node that
 * completely replaces the macro invocation; the compiler proceeds as if it had
 * built this parse node from the original tokens instead of the macro
 * invocation parse node.
 *
 * If a macro name contains the section sign (§), it must have a prefix function
 * for each occurrence of that character in the name.  The prefix function will
 * be invoked each time that character is "reached" in the method name while
 * parsing a potential call site, giving the macro the opportunity to alter the
 * current variable scope and other parsing state.
 *
 * Macro definitions are parametric by parameter types. They participate in
 * multiply polymorphic dispatch just as do methods.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Macro_is«_,»_"
 * @param "macroName" "atom"
 *        The name of the macro to define.
 * @param "prefixFunctions" "tuple of functions"
 *        A tuple of zero or more prefix functions.
 * @param "body" "macro function"
 *        The function that implements the macro.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "macro-argument-must-be-a-parse-node exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "redefined-with-same-argument-types exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "macro-prefix-functions-must-return-top exception"
 * @raises "macro-prefix-function-argument-must-be-a-parse-node exception"
 * @raises "macro-must-return-a-parse-node exception"
 * @raises "loading-is-over exception"
 * @raises "up-arrow-must-follow-argument exception"
 * @raises "inconsistent-argument-reordering exception"
 */
Primitive "Macro_is«_,»_" is
[
	macroName : atom,
	prefixFunctions : tuple of functions,
	body : macro function
|
	Primitive 236 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		macro-argument-must-be-a-parse-node code,
		exclamation-mark-must-follow-an-alternation-group code,
		redefined-with-same-argument-types code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		macro-prefix-functions-must-return-top code,
		macro-prefix-function-argument-must-be-a-parse-node code,
		macro-must-return-a-parse-node code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the module currently undergoing compilation.
 *
 * @category "Primitives" "Modules" "Queries"
 * @method "current module"
 * @returns "module"
 *    The module currently undergoing compilation.
 * @raises "loading-is-over exception"
 */
Primitive "current module" is
[
	Primitive 241 (failureCode : {
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : module;

/**
 * Answer the atom referenced by the specified name in the module currently
 * undergoing compilation. If this name already refers to an atom in scope,
 * i.e., either one 1) imported through the "Uses" or "Extends" sections of the
 * current module's header, 2) introduced by the "Names" section of the
 * current module's header, or 3) introduced by dynamic publication then answer
 * this atom. Otherwise, privately introduce a new atom.
 *
 * @category "Primitives" "Name Resolution" "Queries"
 * @method "atom for_"
 * @param "localName" "string"
 *        The name by which this atom is known locally.
 * @returns "atom"
 *    The requested atom.
 * @raises "ambiguous-name exception"
 * @raises "loading-is-over exception"
 */
Primitive "atom for_" is
[
	localName : string
|
	Primitive 245 (failureCode : {
		ambiguous-name code,
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : atom;

/**
 * Dynamically introduce {@param "newName"} as a public name. This has the same
 * effect as listing in the "Names" section of the current module, i.e., the
 * module currently undergoing compilation. This facilitates code generation in
 * some circumstances. This operation may only be invoked during compilation,
 * i.e., as the result of parsing or executing a top-level statement.
 *
 * @category "Primitives" "Modules" "Name Resolution" "Mutators"
 * @method "Export_as a new name"
 * @param "newName" "string"
 *        The name that should be introduced.
 * @returns "⊤"
 * @raises "ambiguous-name exception"
 * @raises "loading-is-over exception"
 */
Primitive "Export_as a new name" is
[
	newName : string
|
	Primitive 246 (failureCode : {
		ambiguous-name code,
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Compute and answer the semantic restrictions that would run at a call site
 * of {@param "aMethod"} applied with the specified tuple of arguments.
 *
 * @category "Primitives" "Methods" "Semantic Restrictions" "Queries"
 * @method "semantic restrictions for_given_"
 * @param "aMethod" "method"
 *        A method.
 * @param "arguments" "tuple of any meta"
 *        The tuple of arguments that should be used to filter the semantic
 *        restrictions.
 * @returns "<[…]→(⊤)'s type…|>"
 *    The requested semantic restrictions.
 */
Primitive "semantic restrictions for_given_" is
[
	aMethod : method,
	arguments : tuple of any meta
|
	Primitive 247 (failureCode : {
		incorrect-number-of-arguments code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple of semantic restriction function;

/**
 * Define the specified semantic restriction. Henceforth whenever the method
 * named by {@param "methodName"} is invoked with arguments accepted by {@param "restriction"},
 * then apply {@param "restriction"} with the most specific available types of the actual
 * arguments. This is determined by the compiler at the method's call site.
 *
 * A semantic restriction has two responsibilities. First, it may reject a
 * method invocation on any appropriate semantic grounds by calling
 * `Reject parse,expected:_`. Second, it may strengthen the type of value
 * produced at the call site by answering a subtype of the method's declared
 * return type.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @category "Semantic Restrictions"
 * @method "Semantic restriction_is_"
 * @param "methodName" "string"
 *        The name of the method to which the semantic restriction applies.
 * @param "restriction" "semantic restriction function"
 *        The restriction function.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "type-restriction-must-accept-only-types exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Semantic restriction_is_" is
[
	methodName : string,
	restriction : semantic restriction function
|
	Primitive 248 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		type-restriction-must-accept-only-types code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Define a macro with the specified name and body. A macro is a method invoked
 * directly by the compiler as a consequence of parsing a sequence of tokens.
 * The arguments of a macro are parse nodes that structurally represent the
 * corresponding lexical expressions. The result of a macro is a parse node that
 * completely replaces the macro invocation; the compiler proceeds as if it had
 * built this parse node from the original tokens instead of the macro
 * invocation parse node.
 *
 * If a macro name contains the section sign (§), it must have a prefix function
 * for each occurrence of that character in the name.  The prefix function will
 * be invoked each time that character is "reached" in the method name while
 * parsing a potential call site, giving the macro the opportunity to alter the
 * current variable scope and other parsing state.
 *
 * Macro definitions are parametric by parameter types. They participate in
 * multiply polymorphic dispatch just as do methods.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Macro_is«_,»_"
 * @param "macroName" "string"
 *        The name of the macro to define.
 * @param "prefixFunctions" "tuple of functions"
 *        A tuple of zero or more prefix functions.
 * @param "body" "macro function"
 *        The function that implements the macro.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "macro-argument-must-be-a-parse-node exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "redefined-with-same-argument-types exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "macro-prefix-functions-must-return-top exception"
 * @raises "macro-prefix-function-argument-must-be-a-parse-node exception"
 */
Primitive "Macro_is«_,»_" is
[
	macroName : string,
	prefixFunctions : tuple of functions,
	body : macro function
|
	Primitive 249 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		macro-argument-must-be-a-parse-node code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		redefined-with-same-argument-types code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		macro-prefix-functions-must-return-top code,
		macro-prefix-function-argument-must-be-a-parse-node code,
		macro-must-return-a-parse-node code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Declare an abstract method with the specified name and signature. A concrete
 * definition is one whose parameter types and return type are strictly more
 * specific than the corresponding types of the abstract signature.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Abstract method_is_"
 * @param "methodName" "string"
 *        The name of the abstract method to declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "redefined-with-same-argument-types exception"
 * @raises "result-type-should-covary-with-arguments exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 * @raises "method-is-sealed exception"
 * @raises "up-arrow-must-follow-argument exception"
 */
Primitive "Abstract method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive 251 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		redefined-with-same-argument-types code,
		result-type-should-covary-with-arguments code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		method-is-sealed code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Declare the intention to locally define a method with the specified name and
 * signature. If no such method is defined before compilation of the containing
 * module completes, then the compiler will emit an appropriate error message.
 *
 * Recursive methods must be forward declared. Mutually recursive methods must
 * forward declare all but the lexically first participant in the recursion.
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Forward method_is_"
 * @param "methodName" "string"
 *        The name of the method to forward declare.
 * @param "aFunctionType" "function meta"
 *        The signature.
 * @returns "⊤"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "redefined-with-same-argument-types exception"
 * @raises "result-type-should-covary-with-arguments exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 * @raises "method-is-sealed exception"
 * @raises "up-arrow-must-follow-argument exception"
 */
Primitive "Forward method_is_" is
[
	methodName : string,
	aFunctionType : function meta
|
	Primitive 252 (failureCode : {
		incorrect-argument-type code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		redefined-with-same-argument-types code,
		result-type-should-covary-with-arguments code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		method-is-sealed code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Read the next character from the standard input stream.
 *
 * @category "Primitives" "Standard I/O" "Synchronous IO"
 * @method "next character"
 * @returns "character"
 *    The next character from the standard input stream.
 * @raises "I/O-error exception"
 */
Primitive "next character" is
[
	Primitive 254 (failureCode : {
		I/O-error code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : character;

/**
 * Define the indicated grammatical restrictions. Each method name in
 * {@param "methodsToRestrict"} must accept the same number of arguments, though not
 * necessarily the same types (or the same order of types). Each element `e` of
 * {@param "exclusions"}, itself a set of method names, corresponds to an argument
 * position `n` of any method name in {@param "methodsToRestrict"}. The compiler rejects
 * parses of source text that invoke methods named in `e` when they occur
 * grammatically at argument position `n` of an invocation of any method named
 * in {@param "methodsToRestrict"}.
 *
 * Note that "argument position" corresponds to a blank, not to a top-level
 * repeating sequence (indicated by guillemet notation).
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Grammatical restriction_is_"
 * @param "methodsToRestrict" "nonempty set of string"
 *        A set of method names, each of which should be restricted.
 * @param "exclusions" "tuple of set of string"
 *        A tuple of sets of method names. The method names in the `n`-th set
 *        are restricted from occurring grammatically at the `n`-th argument
 *        position of any invocation of a method named in {@param "methodsToRestrict"}.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "ambiguous-name exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Grammatical restriction_is_" is
[
	methodsToRestrict : nonempty set of string,
	exclusions : tuple of set of string
|
	Primitive 255 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		ambiguous-name code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Print the argument to the application's standard output stream.
 *
 * @category "Primitives" "Standard I/O" "Synchronous IO"
 * @method "Print:_"
 * @param "text" "string"
 *        A string.
 * @returns "⊤"
 */
Primitive "Print:_" is
[
	text : string
|
	Primitive 258 (failureCode : {
		I/O-error code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Mark the standard input stream to allow at least {@param "count"}
 * characters of read ahead.
 *
 * @category "Primitives" "Standard I/O"
 * @method "Mark for_character|characters of read ahead"
 * @param "count" "whole number"
 *        The requested number of characters of read ahead.
 * @returns "⊤"
 * @raises "I/O-error exception"
 */
Primitive "Mark for_character|characters of read ahead" is
[
	count : whole number
|
	Primitive 261 (failureCode : {
		I/O-error code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Reset the standard input stream to the previously set mark.
 *
 * @category "Primitives" "Standard I/O"
 * @method "Reset to mark"
 * @returns "⊤"
 * @raises "I/O-error exception"
 */
Primitive "Reset to mark" is
[
	Primitive 262 (failureCode : {
		I/O-error code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Define the indicated grammatical restrictions. Each method name in
 * {@param "methodsToRestrict"} must accept the same number of arguments, though not
 * necessarily the same types (or the same order of types). Each element `e` of
 * {@param "exclusions"}, itself a set of method names, corresponds to an argument
 * position `n` of any method name in {@param "methodsToRestrict"}. The compiler rejects
 * parses of source text that invoke methods named in `e` when they occur
 * grammatically at argument position `n` of an invocation of any method named
 * in {@param "methodsToRestrict"}.
 *
 * Note that "argument position" corresponds to a blank, not to a top-level
 * repeating sequence (indicated by guillemet notation).
 *
 * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"
 * @method "Grammatical restriction_is_"
 * @param "methodsToRestrict" "nonempty set of atom"
 *        A set of method names, each of which should be restricted.
 * @param "exclusions" "tuple of set of atom"
 *        A tuple of sets of method names. The method names in the
 *       `n`-th set are restricted from occurring grammatically at the `n`-th
 *       argument position of any invocation of a method named in
 *       {@param "methodsToRestrict"}.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 * @raises "loading-is-over exception"
 */
Primitive "Grammatical restriction_is_" is
[
	methodsToRestrict : nonempty set of atom,
	exclusions : tuple of set of atom
|
	Primitive 264 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		loading-is-over code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Print the argument to the application's standard error stream.
 *
 * @category "Primitives" "Standard I/O" "Synchronous IO"
 * @method "Error:_"
 * @param "text" "string"
 *        A string.
 * @returns "⊤"
 */
Primitive "Error:_" is
[
	text : string
|
	Primitive 265 (failureCode : {
		I/O-error code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the set of all atoms exported by the current module.
 *
 * @category "Primitives" "Modules" "Queries"
 * @method "current module's exported names"
 * @returns "{atom|}"
 *    The set of atoms exported by the current module.
 * @raises "natural number"
 */
Primitive "current module's exported names" is
[
	Primitive 267 (failureCode : natural number);
	Private invoke _fail_primitive with failureCode
] : set of atom;

/**
 * Seal the each method named by an element of `methodNames` at each of its
 * existing abstract and method definitions. Ignore any macros.
 *
 * @category "Primitives" "Methods" "Mutators"
 * @method "Seal method|methods_at existing definitions"
 * @param "methodNames" "set of atom"
 *        A set of atoms that serve as method names.
 * @returns "⊤"
 * @raises "loading-is-over exception"
 */
Primitive "Seal method|methods_at existing definitions" is
[
	methodNames : set of atom
|
	Primitive 268 (failureCode : {
		loading-is-over code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Compute and answer an `extended integer` by rounding the argument toward
 * zero (`0`).
 *
 * @category "Primitives" "Numbers" "Integers" "Conversions"
 * @method "_→extended integer"
 * @param "aFloat" "float"
 *        A single-precision floating point number.
 * @returns "[-∞..∞]"
 *    The requested value.
 * @raises "cannot-convert-not-a-number-to-integer exception"
 */
Primitive "_→extended integer" is
[
	aFloat : float
|
	Primitive 289 (failureCode : {
		cannot-convert-not-a-number-to-integer code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : extended integer;

/**
 * Compute and answer an `extended integer` by rounding the argument toward
 * zero (`0`).
 *
 * @category "Primitives" "Numbers" "Integers" "Conversions"
 * @method "_→extended integer"
 * @param "aDouble" "double"
 *        A double-precision floating point number.
 * @returns "[-∞..∞]"
 *    The requested value.
 * @raises "cannot-convert-not-a-number-to-integer exception"
 */
Primitive "_→extended integer" is
[
	aDouble : double
|
	Primitive 319 (failureCode : {
		cannot-convert-not-a-number-to-integer code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : extended integer;

/**
 * Construct a supercast phrase.
 *
 * @category "Primitives"
 * @method "`«supercast(_::_)`»"
 * @param "baseExpression" "expression yielding any"
 *        The base phrase that produces the argument to be passed in a call.
 * @param "lookupType" "any meta"
 *        The type to use to lookup this argument rather than its actual type.
 * @returns "super cast phrase⇒any"
 *    A supercast phrase.
 * @raises "supercast-expression-type-must-not-be-top-or-bottom exception"
 * @raises "supercast-expression-must-not-also-be-a-supercast exception"
 * @raises "supercast-must-be-strict-supertype-of-expression-type exception"
 */
Primitive "`«supercast(_::_)`»" is
[
	baseExpression : expression yielding any,
	lookupType : any meta
|
	Primitive 346 (failureCode : {
		supercast-expression-type-must-not-be-top-or-bottom code,
		supercast-expression-must-not-also-be-a-supercast code,
		supercast-must-be-strict-supertype-of-expression-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : super cast phrase;

/**
 * Construct and answer an assignment expression.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "`«(_:=_)`»"
 * @param "variableUse" "variable use phrase"
 *        A variable use expression.
 * @param "valueExpression" "expression yielding any"
 *        An expression.
 * @returns "assignment phrase⇒⊤"
 *    An expression that describes assigning to the variable indicated by
 *    {@param "variableUse"} the result of running {@param "valueExpression"}. The result
 *    yields the same answer as {@param "valueExpression"}.
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "declaration-kind-does-not-support-assignment exception"
 */
Primitive "`«(_:=_)`»" is
[
	variableUse : variable use phrase,
	valueExpression : expression yielding any
|
	Primitive 350 (failureCode : {
		cannot-store-incorrectly-typed-value code,
		declaration-kind-does-not-support-assignment code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : assignment phrase;

/**
 * Reject the current parse. This causes the compiler to reject the
 * interpretation of the program text that resulted in execution of the code
 * that invoked this method. The argument is a description of the parse
 * rejection, but in positive terms that primarily assert what the caller was
 * expecting (on the compiler's behalf). It is, of course, also useful to state
 * what was actually discovered.
 *
 * Note that the Avail compiler attempts, in parallel, many different parses of
 * a statement. If the only parses syntactically accepted by the compiler are
 * semantically rejected by callers of this method, then and only then is the
 * statement deemed invalid and the arguments of such calls emitted by the
 * compiler as error messages to assist the programmer in correcting the
 * rejected statement.
 *
 * This method may only be invoked from the body of a macro function or a
 * semantic restriction function: it should only be invoked by the Avail
 * compiler, never by a semantically valid Avail program.
 *
 * @category "Primitives" "Semantic Restrictions"
 * @method "Reject parse,expected:_"
 * @param "expected" "string"
 *        A description of the cause of rejection, worded to sound good
 *        after {@code "Expected..."}.
 * @returns "⊥"
 * @raises "untimely-parse-rejection exception"
 */
Primitive "Reject parse,expected:_" is
[
	expected : string
|
	Primitive 352 (failureCode : {
		untimely-parse-rejection code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊥;

/**
 * Construct and answer an assignment statement.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "`«_:=_`»"
 * @param "variableUse" "variable use phrase"
 *        A variable use expression.
 * @param "valueExpression" "expression yielding any"
 *        An expression.
 * @returns "assignment phrase⇒⊤"
 *    A statement that describes assigning to the variable indicated by
 *    {@param "variableUse"} the result of running {@param "valueExpression"}.
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "declaration-kind-does-not-support-assignment exception"
 */
Primitive "`«_:=_`»" is
[
	variableUse : variable use phrase,
	valueExpression : expression yielding any
|
	Primitive 353 (failureCode : {
		cannot-store-incorrectly-typed-value code,
		declaration-kind-does-not-support-assignment code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : assignment phrase;

/**
 * Construct and answer a value reference expression.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "`«`↑_`»"
 * @param "variableUse" "variable use phrase"
 *        A variable use expression.
 * @returns "reference phrase⇒read ⊤/write ⊥"
 *    A variable reference expression that answers the variable described by
 *    {@param "variableUse"}.
 * @raises "declaration-kind-does-not-support-reference exception"
 */
Primitive "`«`↑_`»" is
[
	variableUse : variable use phrase
|
	Primitive 354 (failureCode : {
		declaration-kind-does-not-support-reference code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : variable reference phrase;

/**
 * Construct and answer a block from the specified tuple of argument
 * declarations, primitive linkage number, tuple of statements, return type, and
 * set of declared exceptions.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "`«[_`|Primitive__]:_^_`»"
 * @param "argumentDeclarations" "argument tuple"
 *        A tuple of argument declarations.
 * @param "primitiveNumber" "unsigned short"
 *        The primitive linkage number, or 0 for no primitive linkage.
 * @param "statements" "phrase tuple"
 *        A tuple of statements. Each element except for the last must be an
 *        assignment, declaration, label, sequence, or ⊤-valued send.
 * @param "returnType" "type"
 *        The return type.
 * @param "exceptions" "set of exception"
 *        The set of exceptions that may be raised.
 * @returns "block phrase⇒[…]→⊤"
 *    The requested block.
 * @raises "block-contains-invalid-statements exception"
 */
Primitive "`«[_`|Primitive__]:_^_`»" is
[
	argumentDeclarations : argument tuple,
	primitiveNumber : unsigned short,
	statements : phrase tuple,
	returnType : type,
	exceptions : set of exception
|
	Primitive 361 (failureCode : {
		block-contains-invalid-statements code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : block phrase;

/**
 * Generate and answer a function from the specified block.
 *
 * @category "Primitives" "Phrases" "Functions" "Conversions"
 * @method "_→function"
 * @param "aBlock" "block phrase"
 *        A block. Note that the block is treated as a top-level construct, so
 *        it must not refer to any outer variable declarations.
 * @returns "[…]→⊤"
 *    The requested function.
 * @raises "block-is-invalid exception"
 * @raises "block-must-not-contain-outers exception"
 * @raises "block-compilation-failed exception"
 */
Primitive "_→function" is
[
	aBlock : block phrase
|
	Primitive 362 (failureCode : {
		block-is-invalid code,
		block-must-not-contain-outers code,
		block-compilation-failed code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : function;

/**
 * Construct and answer a message send. {@param "messageName"} must be an atom which has
 * a message bundle.  The number and types of the argument expressions must
 * satisfy at least one of the method's existing definitions.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "send_with_:_"
 * @param "messageName" "atom"
 *        The name of the method to be invoked.
 * @param "argumentsList" "list phrase"
 *        The list phrase containing the argument expressions, corresponding
 *        left-to-right with the arguments of the method.
 * @param "returnType" "type"
 *        The expected (strengthened) return type of the method send.
 * @returns "send phrase⇒⊤"
 *    The requested message send.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 * @raises "incorrect-type-for-group exception"
 * @raises "exclamation-mark-must-follow-an-alternation-group exception"
 * @raises "incorrect-type-for-complex-group exception"
 * @raises "incorrect-use-of-double-dagger exception"
 * @raises "unbalanced-guillemets exception"
 * @raises "method-name-is-not-canonical exception"
 * @raises "expected-operator-after-backquote exception"
 * @raises "incorrect-type-for-boolean-group exception"
 * @raises "incorrect-type-for-counting-group exception"
 * @raises "octothorp-must-follow-a-simple-group exception"
 * @raises "question-mark-must-follow-a-simple-group exception"
 * @raises "case-insensitive-expression-canonization exception"
 * @raises "tilde-must-not-follow-argument exception"
 * @raises "double-question-mark-must-follow-a-token-or-simple-group exception"
 * @raises "alternative-must-not-contain-arguments exception"
 * @raises "vertical-bar-must-separate-tokens-or-simple-groups exception"
 * @raises "incorrect-type-for-numbered-choice exception"
 */
Primitive "send_with_:_" is
[
	messageName : atom,
	argumentsList : list phrase,
	returnType : type
|
	Primitive 383 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code,
		incorrect-type-for-group code,
		exclamation-mark-must-follow-an-alternation-group code,
		incorrect-type-for-complex-group code,
		incorrect-use-of-double-dagger code,
		unbalanced-guillemets code,
		method-name-is-not-canonical code,
		expected-operator-after-backquote code,
		incorrect-type-for-boolean-group code,
		incorrect-type-for-counting-group code,
		octothorp-must-follow-a-simple-group code,
		question-mark-must-follow-a-simple-group code,
		case-insensitive-expression-canonization code,
		tilde-must-not-follow-argument code,
		double-question-mark-must-follow-a-token-or-simple-group code,
		alternative-must-not-contain-arguments code,
		vertical-bar-must-separate-tokens-or-simple-groups code,
		incorrect-type-for-numbered-choice code,
		up-arrow-must-follow-argument code,
		inconsistent-argument-reordering code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : send phrase;

/**
 * Construct and answer a sequence from the specified tuple of statements.
 *
 * @category "Primitives" "Phrases" "Constructors"
 * @method "seq`«_`»"
 * @param "statements" "phrase tuple"
 *        A tuple of statements.
 * @returns "sequence phrase⇒⊤"
 *    The requested sequence.
 * @raises "sequence-contains-invalid-statements exception"
 */
Primitive "seq`«_`»" is
[
	statements : phrase tuple
|
	Primitive 387 (failureCode : {
		sequence-contains-invalid-statements code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : sequence phrase;

/**
 * Construct and answer a first-of-sequence node from the specified tuple of
 * statements.
 *
 * @category "Primitives"
 * @method "first-of-seq`«_`»"
 * @param "statements" "phrase tuple"
 *        A tuple of statements.
 * @returns "first of sequence phrase⇒⊤"
 *    The requested first-of-sequence node.
 * @raises "sequence-contains-invalid-statements exception"
 */
Primitive "first-of-seq`«_`»" is
[
	statements : phrase tuple
|
	Primitive 389 (failureCode : {
		sequence-contains-invalid-statements code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : first of sequence phrase;

/**
 * Construct and answer a fully parameterized pojo type.
 *
 * @category "Primitives" "Types" "POJO" "Constructors"
 * @method "_parameterized by_"
 * @param "javaName" "string"
 *        The fully qualified name of the Java class or interface.
 * @param "typeParameters" "tuple of any meta"
 *        The type arguments. The cardinality of this tuple must agree with the
 *        number of type parameters required by the Java class or interface.
 * @returns "(java.lang.Object)'s type"
 *    The requested pojo type.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "Java-class-not-available exception"
 */
Primitive "_parameterized by_" is
[
	javaName : string,
	typeParameters : tuple of any meta
|
	Primitive 500 (failureCode : {
		incorrect-number-of-arguments code,
		Java-class-not-available code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : pojo meta;

/**
 * Construct and answer a function that, when applied with arguments
 * corresponding to the specified parameter types, constructs a new pojo of
 * the specified type.
 *
 * The answered function adapts a reflective invocation of the Java constructor,
 * if any, that accepts the specified number and types of arguments. To
 * establish type conformance between Avail types and Java types for the purpose
 * of reflective constructor lookup and invocation, the following marshaling
 * rules are applied:
 *
 * <ul>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@method "_[_]"} is marshaled to {@code
 *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>
 * <li>{@method "_parameterized by_"} is marshaled to the reflected Java class
 *     or interface.</li>
 * <li>All other values are marshaled to
 *     {@code "com.avail.descriptor.AvailObject"}.</li>
 * </ul>
 *
 * @category "Primitives" "Functions" "POJO" "Constructors"
 * @method "constructor of_,⁇parameterized by_,⁇on failure doing_"
 * @param "aPojoType" "pojo meta"
 *        A pojo type.
 * @param "parameterTypes" "tuple of any meta"
 *        The parameter types accepted by the desired constructor.
 * @param "failFunction" "pojo failure function"
 *        The function to apply if an invocation of the constructor
 *        throws a Java exception.
 * @returns "[…]→java.lang.Object"
 *    The requested constructor invocation function.
 * @raises "pojo-type-is-abstract exception"
 * @raises "Java-method-not-available exception"
 */
Primitive "constructor of_,⁇parameterized by_,⁇on failure doing_" is
[
	aPojoType : pojo meta,
	parameterTypes : tuple of any meta,
	failFunction : pojo failure function
|
	Primitive 502 (failureCode : {
		pojo-type-is-abstract code,
		Java-method-not-available code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : pojo constructor;

/**
 * Construct and answer a variable that, when read or written, will pass
 * through to the instance field uniquely specified by the given pojo and field
 * name.
 *
 * @category "Primitives" "Variables" "POJO" "Constructors"
 * @method "_'s⁇_field"
 * @param "aPojo" "pojo"
 *        The pojo whose instance field should be bound to the answered
 *        variable.
 * @param "fieldName" "string"
 *        The name of the desired field.
 * @returns "read ⊤/write ⊥"
 *    A variable bound to the specified instance field.
 * @raises "Java-field-not-available exception"
 */
Primitive "_'s⁇_field" is
[
	aPojo : pojo,
	fieldName : string
|
	Primitive 504 (failureCode : {
		Java-field-not-available code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : variable;

/**
 * Construct and answer a variable that, when read or written, will pass
 * through to the static field specified by the given pojo type and field
 * name.
 *
 * @category "Primitives" "Variables" "POJO" "Constructors"
 * @method "_'s⁇_field"
 * @param "aPojoType" "pojo meta"
 *        A pojo type whose static field should be bound to the answered
 *        variable.
 * @param "fieldName" "string"
 *        The name of the desired field.
 * @returns "read ⊤/write ⊥"
 *    A variable bound to the specified static field.
 * @raises "Java-field-not-available exception"
 * @raises "Java-field-reference-is-ambiguous exception"
 */
Primitive "_'s⁇_field" is
[
	aPojoType : pojo meta,
	fieldName : string
|
	Primitive 505 (failureCode : {
		Java-field-not-available code,
		Java-field-reference-is-ambiguous code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : variable;

/**
 * Construct and answer a function that, when applied with arguments
 * corresponding to the specified parameter types, invokes a particular
 * instance method.
 *
 * The answered function adapts a reflective invocation of the Java method,
 * if any, that has the specified name and accepts the specified number and
 * types of arguments. The receiver is specified as the first argument. To
 * establish type conformance between Avail types and Java types for the purpose
 * of reflective method lookup and invocation, the following marshaling rules
 * are applied:
 *
 * <ul>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@method "_[_]"} is marshaled to {@code
 *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>
 * <li>{@method "_parameterized by_"} is marshaled to the reflected Java class
 *     or interface.</li>
 * <li>All other values are marshaled to
 *     {@code "com.avail.descriptor.AvailObject"}.</li>
 * </ul>
 *
 * @category "Primitives" "Functions" "POJO" "Constructors"
 * @method "method_._,⁇parameterized by_,⁇on failure doing_"
 * @param "aPojoType" "pojo meta"
 *        A pojo type.
 * @param "methodName" "string"
 *        The name of the desired method.
 * @param "parameterTypes" "tuple of any meta"
 *        The parameter types accepted by the desired method.
 * @param "failFunction" "pojo failure function"
 *        The function to apply if an invocation of the method
 *       throws a Java exception.
 * @returns "[…]→⊤"
 *    The requested instance method invocation function.
 * @raises "Java-method-not-available exception"
 * @raises "Java-method-reference-is-ambiguous exception"
 */
Primitive "method_._,⁇parameterized by_,⁇on failure doing_" is
[
	aPojoType : pojo meta,
	methodName : string,
	parameterTypes : tuple of any meta,
	failFunction : pojo failure function
|
	Primitive 506 (failureCode : {
		Java-method-not-available code,
		Java-method-reference-is-ambiguous code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : function;

/**
 * Construct and answer a function that, when applied with arguments
 * corresponding to the specified parameter types, invokes a particular
 * static method.
 *
 * The answered function adapts a reflective invocation of the Java method,
 * if any, that has the specified name and accepts the specified number and
 * types of arguments. To establish type conformance between Avail types and
 * Java types for the purpose of reflective method lookup and invocation, the
 * following marshaling rules are applied:
 *
 * <ul>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@method "_[_]"} is marshaled to {@code
 *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>
 * <li>{@method "_parameterized by_"} is marshaled to the reflected Java class
 *     or interface.</li>
 * <li>All other values are marshaled to
 *     {@code "com.avail.descriptor.AvailObject"}.</li>
 * </ul>
 *
 * @category "Primitives" "Functions" "POJO" "Constructors"
 * @method "static method_._,⁇parameterized by_,⁇on failure doing_"
 * @param "aPojoType" "pojo meta"
 *        A pojo type.
 * @param "methodName" "string"
 *        The name of the desired method.
 * @param "parameterTypes" "tuple of any meta"
 *        The parameter types accepted by the desired method.
 * @param "failFunction" "pojo failure function"
 *        The function to apply if an invocation of the method
 *       throws a Java exception.
 * @returns "[…]→⊤"
 *    The requested static method invocation function.
 * @raises "Java-method-not-available exception"
 * @raises "Java-method-reference-is-ambiguous exception"
 */
Primitive "static method_._,⁇parameterized by_,⁇on failure doing_" is
[
	aPojoType : pojo meta,
	methodName : string,
	parameterTypes : tuple of any meta,
	failFunction : pojo failure function
|
	Primitive 508 (failureCode : {
		Java-method-not-available code,
		Java-method-reference-is-ambiguous code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : function;

/**
 * Answer the {@param "index"}-th element of the specified pojo array.
 *
 * @category "Primitives" "POJO" "Queries"
 * @method "_[_]"
 * @param "anArray" "pojo array"
 *        A pojo array.
 * @param "index" "natural number"
 *        A one-based index into the pojo array.
 * @returns "any"
 *    The {@param "index"}-th element of {@param "anArray"}.
 * @raises "subscript-out-of-bounds exception"
 * @raises "Java-marshaling-failed exception"
 */
Primitive "_[_]" is
[
	anArray : pojo array,
	index : natural number
|
	Primitive 512 (failureCode : {
		subscript-out-of-bounds code,
		Java-marshaling-failed code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Mutate the specified pojo array such that its {@param "index"}-th element is
 * overwritten by {@param "value"}.
 *
 * @category "Primitives" "POJO" "Mutators"
 * @method "_[_]:=_"
 * @param "anArray" "pojo array"
 *        A pojo array.
 * @param "index" "natural number"
 *        A one-based index into the pojo array.
 * @param "value" "any"
 *        The value that should be written into the pojo array.
 * @returns "⊤"
 * @raises "cannot-store-incorrectly-typed-value exception"
 * @raises "subscript-out-of-bounds exception"
 * @raises "Java-marshaling-failed exception"
 */
Primitive "_[_]:=_" is
[
	anArray : pojo array,
	index : natural number,
	value : any
|
	Primitive 513 (failureCode : {
		cannot-store-incorrectly-typed-value code,
		subscript-out-of-bounds code,
		Java-marshaling-failed code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the return type of the Java method, if any, that has the specified
 * name and accepts the specified number and types of arguments. To establish
 * type conformance between Avail types and Java types for the purpose of
 * reflective method lookup and invocation, the following marshaling rules are
 * applied:
 *
 * <ul>
 * <li>{@type "Java byte"} is marshaled to {@code "java.lang.Byte.TYPE"}.</li>
 * <li>{@type "Java short"} is marshaled to {@code "java.lang.Short.TYPE"}.</li>
 * <li>{@type "Java int"} is marshaled to {@code "java.lang.Integer.TYPE"}.</li>
 * <li>{@type "Java long"} is marshaled to {@code "java.lang.Long.TYPE"}.</li>
 * <li>{@type "boolean"} is marshaled to {@code "java.lang.Boolean.TYPE"}.</li>
 * <li>{@type "Java char"} is marshaled to {@code "java.lang.Character.TYPE"}.</li>
 * <li>{@type "float"} is marshaled to {@code "java.lang.Float.TYPE"}.</li>
 * <li>{@type "double"} is marshaled to {@code "java.lang.Double.TYPE"}.</li>
 * <li>{@type "string"} is marshaled to {@code "java.lang.String"}.</li>
 * <li>{@method "_[_]"} is marshaled to {@code
 *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>
 * <li>{@method "_parameterized by_"} is marshaled to the reflected Java class
 *     or interface.</li>
 * <li>All other values are marshaled to
 *     {@code "com.avail.descriptor.AvailObject"}.</li>
 * </ul>
 *
 * @category "Primitives" "Functions" "POJO" "Constructors"
 * @method "return type of_._«parameterized by»⁇_"
 * @param "aPojoType" "pojo meta"
 *        A pojo type.
 * @param "methodName" "string"
 *        The name of the desired method.
 * @param "parameterTypes" "tuple of any meta"
 *        The parameter types accepted by the desired method.
 * @returns "(⊤)'s type"
 *    TODO
 * @raises "Java-method-not-available exception"
 * @raises "Java-method-reference-is-ambiguous exception"
 */
Primitive "return type of_._«parameterized by»⁇_" is
[
	aPojoType : pojo meta,
	methodName : string,
	parameterTypes : tuple of any meta
|
	Primitive 517 (failureCode : {
		Java-method-not-available code,
		Java-method-reference-is-ambiguous code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : type;

/**
 * Does the current fiber's environment have a value bound to {@param "key"}? This
 * effectively ascertains whether a fiber-local variable exists for the
 * specified fiber.
 *
 * @category "Primitives" "Concurrency" "Queries"
 * @method "_∈current fiber"
 * @param "key" "atom"
 *        The key whose existence should be queried.
 * @returns "boolean"
 *    `true` if the current fiber binds a value to {@param "key"}, `false`
 *    otherwise.
 * @raises "special-atom exception"
 */
Primitive "_∈current fiber" is
[
	key : atom
|
	Primitive 603 (failureCode : {
		special-atom code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : boolean;

/**
 * Answer the value bound to {@param "key"} in the current fiber's environment. Since
 * the fiber's environment essentially contains fiber-local variables (i.e.
 * bindings from atoms to arbitrary values), this operation effectively reads a
 * fiber-local variable.
 *
 * @category "Primitives" "Concurrency" "Queries"
 * @method "current fiber[_]"
 * @param "key" "atom"
 *        The key whose value should be obtained.
 * @returns "any"
 *    The value bound to {@param "key"} within the current fiber's environment.
 * @raises "no-such-fiber-variable exception"
 */
Primitive "current fiber[_]" is
[
	key : atom
|
	Primitive 604 (failureCode : {
		no-such-fiber-variable code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * Remove the binding indicated by {@param "key"} from the current fiber's
 * environment.
 *
 * @category "Primitives" "Concurrency" "Mutators"
 * @method "Remove current fiber[_]"
 * @param "key" "atom"
 *        The key whose binding should be removed.
 * @returns "⊤"
 * @raises "no-such-fiber-variable exception"
 * @raises "special-atom exception"
 */
Primitive "Remove current fiber[_]" is
[
	key : atom
|
	Primitive 606 (failureCode : {
		no-such-fiber-variable code,
		special-atom code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Fork a new fiber at the specified priority. The new fiber will invoke the
 * given function with the supplied arguments.
 *
 * @category "Primitives" "Concurrency" "Control Structures"
 * @method "Invoke_with_,⁇forked at priority_"
 * @param "aFunction" "function"
 *        A function.
 * @param "arguments" "tuple"
 *        The arguments to the function.
 * @param "priority" "byte"
 *        The priority of the new fiber.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 */
Primitive "Invoke_with_,⁇forked at priority_" is
[
	aFunction : function,
	arguments : tuple,
	priority : byte
|
	Primitive 615 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Fork a new fiber at the specified priority. The new fiber will invoke the
 * given function with the supplied arguments.
 *
 * @category "Primitives" "Concurrency" "Control Structures"
 * @method "invoke_with_,⁇forked at priority_"
 * @param "aFunction" "function"
 *        A function.
 * @param "arguments" "tuple"
 *        The arguments to the function.
 * @param "priority" "byte"
 *        The priority of the new fiber.
 * @returns "fiber→⊤"
 *    The new fiber.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 */
Primitive "invoke_with_,⁇forked at priority_" is
[
	aFunction : function,
	arguments : tuple,
	priority : byte
|
	Primitive 616 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : fiber;

/**
 * Attempt to join the specified fiber. If the fiber has already terminated,
 * then return immediately; otherwise, arrange to unpark the current fiber when
 * the specified fiber terminates and park the current fiber.
 *
 * @category "Primitives" "Concurrency" "Synchronization" "Control Structures"
 * @method "Attempt to join_"
 * @param "aFiber" "fiber"
 *        A fiber.
 * @returns "⊤"
 * @raises "fiber-cannot-join-itself exception"
 */
Primitive "Attempt to join_" is
[
	aFiber : fiber
|
	Primitive 617 (failureCode : {
		fiber-cannot-join-itself code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * Answer the result of running the specified fiber to successful completion.
 * This method may only be called safely after an affirmative answer from
 * `_has result`.
 *
 * @category "Primitives" "Concurrency" "Queries"
 * @method "_'s⁇result"
 * @param "aFiber" "fiber"
 *        A fiber.
 * @returns "any"
 *    The result yielded by the specified fiber. This is the value produced by
 *    the fiber's outermost continuation, i.e., its base function.
 * @raises "fiber-result-unavailable exception"
 * @raises "fiber-produced-incorrectly-typed-result exception"
 */
Primitive "_'s⁇result" is
[
	aFiber : fiber
|
	Primitive 620 (failureCode : {
		fiber-result-unavailable code,
		fiber-produced-incorrectly-typed-result code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : any;

/**
 * When at least the specified number of milliseconds have elapsed, fork a new
 * fiber at the specified priority. The new fiber will invoke the given function
 * with the supplied arguments. A best effort will be made to start the fiber as
 * soon as the delay has expired, but no real-time guarantees are made.
 *
 * @category "Primitives" "Concurrency" "Time" "Control Structures"
 * @method "In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_"
 * @param "delayMillis" "nonnegative extended integer"
 *        The minimum number of milliseconds to delay the start of the new
 *       fiber.
 * @param "aFunction" "function"
 *        A function.
 * @param "arguments" "tuple"
 *        The arguments to the function.
 * @param "priority" "byte"
 *        The priority of the new fiber.
 * @returns "⊤"
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 */
Primitive "In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_" is
[
	delayMillis : nonnegative extended integer,
	aFunction : function,
	arguments : tuple,
	priority : byte
|
	Primitive 622 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : ⊤;

/**
 * When at least the specified number of milliseconds have elapsed, fork a new
 * fiber at the specified priority. The new fiber will invoke the given function
 * with the supplied arguments. A best effort will be made to start the fiber as
 * soon as the delay has expired, but no real-time guarantees are made.
 *
 * @category "Primitives" "Concurrency" "Time" "Control Structures"
 * @method "in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_"
 * @param "delayMillis" "nonnegative extended integer"
 *        The minimum number of milliseconds to delay the start of the new
 *       fiber.
 * @param "aFunction" "function"
 *        A function.
 * @param "arguments" "tuple"
 *        The arguments to the function.
 * @param "priority" "byte"
 *        The priority of the new fiber.
 * @returns "fiber→⊤"
 *    The new fiber.
 * @raises "incorrect-number-of-arguments exception"
 * @raises "incorrect-argument-type exception"
 */
Primitive "in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_" is
[
	delayMillis : nonnegative extended integer,
	aFunction : function,
	arguments : tuple,
	priority : byte
|
	Primitive 623 (failureCode : {
		incorrect-number-of-arguments code,
		incorrect-argument-type code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : fiber;

/**
 * Construct and answer a new atom. Associate with the atom the supplied string,
 * which should be a name used for debugging purposes only. Atoms have identity
 * and all atoms are distinct, regardless of whether their debug names are
 * equal. When this atom occurs as a key within a fiber's environment, any new
 * fibers created by this fiber will also include this key and the associated
 * value at creation time.
 *
 * @category "Primitives" "Atoms" "Concurrency" "Constructors"
 * @method "new⁇heritable«fiber-local»⁇atom named_"
 * @param "debugName" "string"
 *        A name to associate with the atom for debugging purposes.
 *       This name does not participate in atom comparison.
 * @returns "atom"
 *    A new atom, distinct from every other atom answered by a different
 *    invocation of this primitive, that represents a heritable fiber-local
 *    variable.
 * @raises "ambiguous-name exception"
 * @raises "atom-already-exists exception"
 */
Primitive "new⁇heritable«fiber-local»⁇atom named_" is
[
	debugName : string
|
	Primitive 624 (failureCode : {
		ambiguous-name code,
		atom-already-exists code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : atom;

/**
 * Replace the value with a new value in the tuple at the location indicated
 * by the path tuple.
 *
 * @category "Primitives" "Tuples" "Maps" "Transformers"
 * @method "_«[_]»→_"
 * @param "aTuple" "tuple"
 *        The target tuple.
 * @param "pathTuple" "two or more tuple"
 *        The tuple providing the path to follow to reach the location
 *        to be updated.
 * @param "newValue" "any"
 *        The replacement value.
 * @returns "tuple"
 *    a new tuple with the new value installed at the proposed location.
 * @raises "subscript-out-of-bounds exception"
 * @raises "incorrect-argument-type exception"
 * @raises "key-not-found exception"
 */
Primitive "_«[_]»→_" is
[
	aTuple : tuple,
	pathTuple : two or more tuple,
	newValue : any
|
	Primitive 700 (failureCode : {
		subscript-out-of-bounds code,
		incorrect-argument-type code,
		key-not-found code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : tuple;

/**
 * Replace the value at the location indicated by the path tuple of the target
 * map with the new value.
 *
 * @category "Primitives" "Tuples" "Maps" "Transformers"
 * @method "_«[_]»→_"
 * @param "aMap" "map"
 *        The target map.
 * @param "pathTuple" "nonempty tuple"
 *        The tuple providing the path to follow to reach the location
 *        to be updated.
 * @param "newValue" "any"
 *        The replacement value.
 * @returns "map"
 *    a new map with the new value installed at the proposed location
 * @raises "subscript-out-of-bounds exception"
 * @raises "incorrect-argument-type exception"
 * @raises "key-not-found exception"
 */
Primitive "_«[_]»→_" is
[
	aMap : map,
	pathTuple : nonempty tuple,
	newValue : any
|
	Primitive 701 (failureCode : {
		subscript-out-of-bounds code,
		incorrect-argument-type code,
		key-not-found code}ᵀ);
	Private invoke _fail_primitive with failureCode
] : map;

