/*
 * Special Objects.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * GENERATED FILE
 * * Generator: com.avail.tools.bootstrap.BootstrapGenerator
 * * Last Versioned As: $$Revision$$
 *
 * DO NOT MODIFY MANUALLY. ALL MANUAL CHANGES WILL BE LOST.
 */

Module "Special Objects"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Origin"
Uses
Names
	/*  78 */ "-∞",
	/* 111 */ "Euler's number",
	/*  21 */ "VM error codes",
	/*  44 */ "abstract definition",
	/*   1 */ "any",
	/*  69 */ "any meta",
	/*  62 */ "argument phrase",
	/* 122 */ "argument tuple",
	/*  53 */ "assignment phrase",
	/*  11 */ "atom",
	/*  54 */ "block phrase",
	/*   2 */ "boolean",
	/* 129 */ "byte",
	/*   3 */ "character",
	/*  38 */ "code point",
	/*   9 */ "continuation",
	/*  10 */ "continuation meta",
	/*  92 */ "continuation variable",
	/*  61 */ "declaration phrase",
	/* 123 */ "declaration tuple",
	/*  43 */ "definition",
	/*  12 */ "double",
	/*  96 */ "empty map",
	/* 104 */ "empty tuple",
	/*  24 */ "exception",
	/*  52 */ "expression phrase",
	/* 126 */ "expression yielding any",
	/*  13 */ "extended integer",
	/*  18 */ "extended integer meta",
	/*  71 */ "false",
	/*  25 */ "fiber",
	/* 132 */ "fiber meta",
	/*  93 */ "field map",
	/* 120 */ "field tuple",
	/*  94 */ "field type map",
	/* 119 */ "field type tuple",
	/* 140 */ "first of sequence phrase",
	/*  15 */ "float",
	/*  45 */ "forward definition",
	/*   4 */ "function",
	/*   6 */ "function implementation",
	/*   5 */ "function meta",
	/*  17 */ "integer",
	/*  95 */ "key-value tuple",
	/*  63 */ "label phrase",
	/*  59 */ "list phrase",
	/*  55 */ "literal phrase",
	/* 116 */ "literal token",
	/*  58 */ "literal token meta",
	/*  65 */ "local constant phrase",
	/*  64 */ "local variable phrase",
	/*  47 */ "macro definition",
	/* 109 */ "macro function",
	/*  39 */ "map",
	/*  19 */ "map meta",
	/*  40 */ "message bundle",
	/*  41 */ "message bundle tree",
	/*  42 */ "method",
	/*  46 */ "method definition",
	/*  20 */ "module",
	/*  67 */ "module constant phrase",
	/*  66 */ "module variable phrase",
	/*  37 */ "natural number",
	/*  97 */ "non-empty map",
	/*  99 */ "non-empty set",
	/* 136 */ "nonempty set of atom",
	/* 135 */ "nonempty set of string",
	/* 133 */ "nonempty string",
	/* 137 */ "nonempty tuple",
	/* 118 */ "nonnegative extended integer",
	/*  31 */ "nontype",
	/*  82 */ "null",
	/*  90 */ "nullary procedure",
	/*  16 */ "number",
	/* 101 */ "nybble",
	/*  22 */ "object",
	/*  23 */ "object meta",
	/* 141 */ "permuted list phrase",
	/*  50 */ "phrase",
	/* 113 */ "phrase meta",
	/* 121 */ "phrase tuple",
	/*  80 */ "pojo",
	/*  87 */ "pojo array",
	/*  85 */ "pojo array meta",
	/*  86 */ "pojo constructor",
	/*  89 */ "pojo exception",
	/* 127 */ "pojo failure function",
	/*  84 */ "pojo meta",
	/*  88 */ "pojo self",
	/*  83 */ "pojo self type",
	/*  81 */ "pojo⊥",
	/*  91 */ "predicate function",
	/*  76 */ "primitive failure function",
	/*  68 */ "primitive failure reason phrase",
	/* 131 */ "readable extended integer variable",
	/* 107 */ "semantic restriction function",
	/*  57 */ "send phrase",
	/*  51 */ "sequence phrase",
	/*  26 */ "set",
	/*  27 */ "set meta",
	/* 114 */ "set of atom",
	/* 134 */ "set of exception",
	/*  75 */ "set of string",
	/*  28 */ "string",
	/* 115 */ "token",
	/*  70 */ "true",
	/*  32 */ "tuple",
	/*  33 */ "tuple meta",
	/* 117 */ "tuple of any meta",
	/* 125 */ "tuple of expressions yielding any",
	/*  48 */ "tuple of functions",
	/* 138 */ "tuple of integer",
	/* 102 */ "tuple of nybble",
	/* 108 */ "tuple of semantic restriction function",
	/* 128 */ "tuple of set of atom",
	/*  74 */ "tuple of set of string",
	/*  72 */ "tuple of string",
	/* 100 */ "tuple of tuple",
	/* 130 */ "tuple of tuple of any meta",
	/*  73 */ "tuple of type",
	/* 139 */ "two or more tuple",
	/*  34 */ "type",
	/* 112 */ "type of Euler number",
	/*  14 */ "type of tuple of type of any",
	/* 110 */ "type of two",
	/* 106 */ "type of zero",
	/* 105 */ "unary procedure",
	/* 103 */ "unsigned short",
	/*   7 */ "variable",
	/*   8 */ "variable meta",
	/*  56 */ "variable reference phrase",
	/*  60 */ "variable use phrase",
	/*  36 */ "whole number",
	/*  98 */ "whole number meta",
	/* 124 */ "write-only expression variable",
	/*  77 */ "∅",
	/*  79 */ "∞",
	/*  35 */ "⊤",
	/*  29 */ "⊥",
	/*  30 */ "⊥meta"
Body

_any                                    ::= special object 1;
_boolean                                ::= special object 2;
_character                              ::= special object 3;
_function                               ::= special object 4;
_function_meta                          ::= special object 5;
_function_implementation                ::= special object 6;
_variable                               ::= special object 7;
_variable_meta                          ::= special object 8;
_continuation                           ::= special object 9;
_continuation_meta                      ::= special object 10;
_atom                                   ::= special object 11;
_double                                 ::= special object 12;
_extended_integer                       ::= special object 13;
_type_of_tuple_of_type_of_any           ::= special object 14;
_float                                  ::= special object 15;
_number                                 ::= special object 16;
_integer                                ::= special object 17;
_extended_integer_meta                  ::= special object 18;
_map_meta                               ::= special object 19;
_module                                 ::= special object 20;
_VM_error_codes                         ::= special object 21;
_object                                 ::= special object 22;
_object_meta                            ::= special object 23;
_exception                              ::= special object 24;
_fiber                                  ::= special object 25;
_set                                    ::= special object 26;
_set_meta                               ::= special object 27;
_string                                 ::= special object 28;
_bottom                                 ::= special object 29;
_bottom_meta                            ::= special object 30;
_nontype                                ::= special object 31;
_tuple                                  ::= special object 32;
_tuple_meta                             ::= special object 33;
_type                                   ::= special object 34;
_top                                    ::= special object 35;
_whole_number                           ::= special object 36;
_natural_number                         ::= special object 37;
_code_point                             ::= special object 38;
_map                                    ::= special object 39;
_message_bundle                         ::= special object 40;
_message_bundle_tree                    ::= special object 41;
_method                                 ::= special object 42;
_definition                             ::= special object 43;
_abstract_definition                    ::= special object 44;
_forward_definition                     ::= special object 45;
_method_definition                      ::= special object 46;
_macro_definition                       ::= special object 47;
_tuple_of_functions                     ::= special object 48;
_phrase                                 ::= special object 50;
_sequence_phrase                        ::= special object 51;
_expression_phrase                      ::= special object 52;
_assignment_phrase                      ::= special object 53;
_block_phrase                           ::= special object 54;
_literal_phrase                         ::= special object 55;
_variable_reference_phrase              ::= special object 56;
_send_phrase                            ::= special object 57;
_literal_token_meta                     ::= special object 58;
_list_phrase                            ::= special object 59;
_variable_use_phrase                    ::= special object 60;
_declaration_phrase                     ::= special object 61;
_argument_phrase                        ::= special object 62;
_label_phrase                           ::= special object 63;
_local_variable_phrase                  ::= special object 64;
_local_constant_phrase                  ::= special object 65;
_module_variable_phrase                 ::= special object 66;
_module_constant_phrase                 ::= special object 67;
_primitive_failure_reason_phrase        ::= special object 68;
_any_meta                               ::= special object 69;
_true                                   ::= special object 70;
_false                                  ::= special object 71;
_tuple_of_string                        ::= special object 72;
_tuple_of_type                          ::= special object 73;
_tuple_of_set_of_string                 ::= special object 74;
_set_of_string                          ::= special object 75;
_primitive_failure_function             ::= special object 76;
_empty_set                              ::= special object 77;
_negative_infinity                      ::= special object 78;
_positive_infinity                      ::= special object 79;
_pojo                                   ::= special object 80;
_pojo_bottom                            ::= special object 81;
_null                                   ::= special object 82;
_pojo_self_type                         ::= special object 83;
_pojo_meta                              ::= special object 84;
_pojo_array_meta                        ::= special object 85;
_pojo_constructor                       ::= special object 86;
_pojo_array                             ::= special object 87;
_pojo_self                              ::= special object 88;
_pojo_exception                         ::= special object 89;
_nullary_procedure                      ::= special object 90;
_predicate_function                     ::= special object 91;
_continuation_variable                  ::= special object 92;
_field_map                              ::= special object 93;
_field_type_map                         ::= special object 94;
_key_value_tuple                        ::= special object 95;
_empty_map                              ::= special object 96;
_non_empty_map                          ::= special object 97;
_whole_number_meta                      ::= special object 98;
_non_empty_set                          ::= special object 99;
_tuple_of_tuple                         ::= special object 100;
_nybble                                 ::= special object 101;
_tuple_of_nybble                        ::= special object 102;
_unsigned_short                         ::= special object 103;
_empty_tuple                            ::= special object 104;
_unary_procedure                        ::= special object 105;
_type_of_zero                           ::= special object 106;
_semantic_restriction_function          ::= special object 107;
_tuple_of_semantic_restriction_function ::= special object 108;
_macro_function                         ::= special object 109;
_type_of_two                            ::= special object 110;
_Euler_number                           ::= special object 111;
_type_of_Euler_number                   ::= special object 112;
_phrase_meta                            ::= special object 113;
_set_of_atom                            ::= special object 114;
_token                                  ::= special object 115;
_literal_token                          ::= special object 116;
_tuple_of_any_meta                      ::= special object 117;
_nonnegative_extended_integer           ::= special object 118;
_field_type_tuple                       ::= special object 119;
_field_tuple                            ::= special object 120;
_phrase_tuple                           ::= special object 121;
_argument_tuple                         ::= special object 122;
_declaration_tuple                      ::= special object 123;
_write_only_expression_variable         ::= special object 124;
_tuple_of_expressions_yielding_any      ::= special object 125;
_expression_yielding_any                ::= special object 126;
_pojo_failure_function                  ::= special object 127;
_tuple_of_set_of_atom                   ::= special object 128;
_byte                                   ::= special object 129;
_tuple_of_tuple_of_any_meta             ::= special object 130;
_readable_extended_integer_variable     ::= special object 131;
_fiber_meta                             ::= special object 132;
_nonempty_string                        ::= special object 133;
_set_of_exception                       ::= special object 134;
_nonempty_set_of_string                 ::= special object 135;
_nonempty_set_of_atom                   ::= special object 136;
_nonempty_tuple                         ::= special object 137;
_tuple_of_integer                       ::= special object 138;
_two_or_more_tuple                      ::= special object 139;
_first_of_sequence_phrase               ::= special object 140;
_permuted_list_phrase                   ::= special object 141;

/**
 * The practical abstract root of the Avail type lattice. {@code "any"} is the
 * second most senior type, inferior only to {@method "⊤"}. It includes every
 * value available to an Avail program, i.e., every Avail value except for the
 * unexposed special value nil.
 *
 * {@code "any"} is made extremely useful by the interaction of polymorphism
 * and semantic restrictions. Many algorithms can be codified once in terms of
 * {@code "any"} and then strengthened via a semantic restriction that
 * extrapolates a stronger result subtype from the static input types.
 *
 * {@code "any"} is the most general type that may appear in the following
 * contexts:
 *
 * <ul>
 * <li>As a parameter type of a function type.</li>
 * <li>As the read type of a variable type.</li>
 * <li>As a leading type or the default type of a tuple type.</li>
 * <li>As the element type of a set type.</li>
 * <li>As the key type or value type of a map type.</li>
 * <li>As the field type of an object type.</li>
 * <li>As the type parameter of a pojo type.</li>
 * </ul>
 *
 * @category "Primitives" "Types"
 * @type "any"
 * @supertype "⊤"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-any.html"
 */
Primitive "any" is
[
	_any
];

/**
 * The enumeration of the special atoms {@method "true"} and {@method "false"}.
 * All primitive interrogatives use classical (Boolean) bivalence and all stable
 * primitive interrogatives obey the three classical (Aristotelian) laws of
 * thought.
 *
 * Bivalent logic assigns either {@method "true"} or {@method "false"} as the
 * unique truth value of every proposition. A primitive interrogative, i.e.
 * {@method "boolean" "boolean-valued"} primitive, is stable iff it reliably answers
 * either {@method "true"} or {@method "false"} for a given set of arguments.
 *
 * The three classical laws of thought are:
 *
 * <ul>
 * <li><strong>The law of identity: P → P.</strong> For every stable primitive
 * interrogative {@code "prim_,_,_"}, then {@code "prim A, B, C = prim A, B, C"}.
 * </li>
 * <li><strong>The law of noncontradiction: ¬(P ∧ ¬P).</strong> For every
 * stable primitive interrogative {@code "prim_,_,_"}, then {@method
 * "(prim A, B, C ∧ ¬prim A, B, C) = false"}.</li>
 * <li><strong>The law of excluded middle: P ∨ ¬P.</strong> For every primitive
 * interrogative {@code "prim_,_,_"}, then {@code
 * "((prim A, B, C = true) ∨ (prim A, B, C = false)) = true"}.</li></ul>
 *
 * Note that values may be instances of many enumerations. This means that Avail
 * directly supports other logical systems, such as Kleene's three-valued logic
 * of indeterminacy, whose truth values are {@code "true"}, {@code "false"}, 
 * and {@code "unknown"}. Implementation of this system would proceed directly
 * from creation of an atom to represent {@code "unknown"} and the formation of
 * a new enumeration that contained the standard {@method "true"} and {@method
 * "false"} atoms and also the {@code "unknown"} atom. New logical operations
 * could then be written in terms of this new enumeration.
 *
 * @category "Primitives" "Types"
 * @type "boolean"
 * @supertype "atom"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"
 */
Primitive "boolean" is
[
	_boolean
];

/**
 * A character is a sign or symbol in the semiotic sense: an entity with
 * distinct identity that is nonetheless generally intended and understood to
 * represent something other than itself. The visual representation of a
 * character is a glyph. A character is necessarily distinct from how it is
 * written or printed. The same character will differ in any two handwritten
 * occurrences, even when the same person is responsible for the production of
 * both. Likewise the printed representation of a character will differ by font
 * or style. So a character has identity independent of any and all glyphs that
 * transcribe it.
 *
 * Avail is only concerned with character value, not meaning or transcription. A
 * character is always equal to itself and always unequal to another character.
 * Characters are immutable and possess but a single intrinsic property:
 * {@method "_'s⁇code point" Unicode code point}. Unicode is an international
 * standard for the codification of all widely used characters. A code point is
 * a numeric value that is uniquely associated with a character relative to some
 * system of codification. Thus a character's Unicode code point singularly
 * identifies it within the Unicode scheme.
 *
 * A character literal is expressed as a cent sign {@code "¢"} (U+00A2) followed
 * by a single-character lexeme or length-one string literal. Avail character
 * literal notation is provided by the method {@method "¢…"}. The
 * single-character form is sufficient for nearly every character, but the
 * string literal form must be employed when the desired character is a
 * quotation mark {@code "\""} (U+0022), semicolon {@code ";"} (U+003B), or
 * nonprintable character.
 *
 * @category "Primitives" "Types"
 * @type "character"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"
 * @see "http://www.unicode.org/"
 * @see "http://www.unicode.org/standard/standard.html"
 */
Primitive "character" is
[
	_character
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function"
 * @alias "[…]→⊤"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function.html"
 */
Primitive "function" is
[
	_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function meta"
 * @alias "[…]→⊤'s type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function.html"
 */
Primitive "function meta" is
[
	_function_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "function implementation"
 * @alias "¢[…]→⊤"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function-implementation.html"
 */
Primitive "function implementation" is
[
	_function_implementation
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable.html"
 */
Primitive "variable" is
[
	_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable meta"
 * @supertype "nontypes type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable.html"
 */
Primitive "variable meta" is
[
	_variable_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation"
 * @alias "$[…]→⊥"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-continuation.html"
 */
Primitive "continuation" is
[
	_continuation
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation meta"
 * @alias "($[…]→⊥)'s type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-continuation.html"
 */
Primitive "continuation meta" is
[
	_continuation_meta
];

/**
 * An {@code "atom"} is a mutable value associated with a module-allocated
 * name. For each name that appears in the {@code "Names"} section of a module's
 * header, the compiler associates that name with a new atom. For each name that
 * appears in the {@code "Uses"} or {@code "Extends"} section of a module's
 * header, the compiler associates that name with the atom introduced by the
 * module that named it. During compilation of a module, an atom may be
 * retrieved by presenting its name, a string, to the primitive method {@method
 * "atom for_"}. If the atom was neither introduced by the current module nor
 * imported from another module, then {@method "atom for_"} privately
 * introduces a new atom into the {@method "current module"}; a subsequent send
 * with the same argument within the context of the same module will produce the
 * same atom.
 *
 * In ordinary use, the primary asset of an atom is its distinction from every
 * other value, including an equivalently named atom that originated in a
 * different module. Consider the values {@method "true"} and {@method "false"}
 * from classical logic. The principal characteristic of each is its distinction
 * from the other. In other words, {@method "true"} and {@method "false"}
 * differ by identity rather than by some measurable quantity. In Avail, the
 * values {@method "true"} and {@method "false"} are special atoms; they are
 * issued by the virtual machine rather than some module. The type {@type
 * "boolean"} is simply the finite enumeration of these two atoms.
 *
 * In addition to a {@method "_'s⁇name" name} and an {@method "_'s⁇issuing
 * module" issuing module}, an atom also comprises a collection of bindings,
 * called properties. Since an atom has identity, it can {@method "_[_]:=_"
 * acquire new properties}, {@method "_[_]:=_" update existing properties}, and
 * {@method "Remove_[_]" lose properties altogether}. A property is an
 * association between another atom — the property key — and an arbitrary value
 * — the property value. The properties of an atom are not enumerable, thus
 * ensuring modular usage; an algorithm can only query or alter a property for
 * which it possesses the key.
 *
 * The type {@code "atom"} has every atom as an instance. atom is a complete
 * type. Though its properties are analogous to the bindings of a map or the
 * attributes of an object, {@code "atom"} does not require (or permit) type
 * parameters for the property key type or the property value type. These
 * limitations are a direct consequence of mutability.
 *
 * Note that special atoms cannot participate in the property mechanism. For
 * instance, the special atom true cannot be either the target or the property
 * key of a property interrogation. It can be a property value, however.
 *
 * @category "Primitives" "Types" "Atoms"
 * @type "atom"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-atom.html"
 */
Primitive "atom" is
[
	_atom
];

/**
 * A double — that is, an IEEE 754 double-precision floating point number — is
 * an approximation of a real number. The representation uses 64 binary digits,
 * hereinafter bits, organized as 1 sign bit, 52 bits of mantissa, and 11 bits
 * of exponent. The sign bit distinguishes positive (sign bit = 0) and negative
 * (sign bit = 1) values. The mantissa encodes the significant binary digits of
 * the number. The exponent scales the mantissa by a particular power of 2.
 * Finite double values range from {@code "-1.79769313486231570e+308"} to
 * {@code "1.79769313486231570e+308"}. The closest to zero nonzero double values
 * are {@code "±4.94065645841246544e-324"}. Positive zero ({@code "0.0"}) and
 * negative zero ({@code "-0.0"}) are considered distinct. Infinities are
 * supported, but indicate an overflow of representational limits (rather than
 * {@code "±∞"}). Some encodings do not represent real values; such a value is a
 * not-a-number ({@code "NaN"}). No two differing {@code "NaN"} encodings are
 * considered equal. This is a departure from a strict interpretation of IEEE
 * 754.
 *
 * In Avail, a literal double begins with one or more decimal digits, contains a
 * full stop {@code "."} (U+002E) and fractional part, and optionally ends with
 * exponential notation — an {@code "E"} (U+0045) or {@code "e"} (U+0065)
 * followed by one or more decimal digits.
 *
 * Though {@code "double"} numerically subsumes {@type "float"}, they are
 * considered siblings because their values differ by internal representation.
 * {@code "double"} is not a supertype of {@type "float"}. No float value is
 * also a double value, and no double value is also a float value.
 *
 * @category "Primitives" "Types" "Numbers"
 * @type "double"
 * @supertype "number"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-double.html"
 */
Primitive "double" is
[
	_double
];

/**
 * An integer is a discrete number, i.e., it has no fractional part. As such,
 * integers are excellent for counting and labeling.
 *
 * The literal representation of an integer is a sequence of one or more decimal
 * digits. Negative integer literals are created using the method {@method
 * "-_"}, which defines a semantic restriction that strengthens the answer's
 * type to an instance type whenever the argument's value is precisely known.
 * {@method "∞"} and {@method "-∞"} are positive and negative infinity,
 * respectively.
 *
 * @category "Primitives" "Types" "Numbers"
 * @type "extended integer"
 * @alias "[-∞..∞]"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"
 */
Primitive "extended integer" is
[
	_extended_integer
];

/**
 * A tuple type whose default type is {@type "any meta" any's type}.
 *
 * @category "Primitives" "Types"
 * @type "type of tuple of type of any"
 * @alias "<any's type…|>'s type"
 */
Primitive "type of tuple of type of any" is
[
	_type_of_tuple_of_type_of_any
];

/**
 * A float — that is, an IEEE 754 single-precision floating point number — is an
 * approximation of a real number. The representation uses 32 bits, organized as
 * 1 sign bit, 23 bits of mantissa, and 8 bits of exponent. Finite float values
 * range from {@code "-3.40282347e+38"} to {@code "3.40282347e+38"}. The
 * closest to zero nonzero float values are {@code "±1.40239846e-45"}. Positive
 * zero ({@code "0.0"}) and negative zero ({@code "-0.0"}) are considered
 * distinct. Infinities are supported, but indicate an overflow of
 * representational limits (rather than {@code "±∞"}). Some encodings do not
 * represent real values; such a value is a not-a-number ({@code "NaN"}). No
 * two differing {@code "NaN"} encodings are considered equal. This is a
 * departure from a strict interpretation of IEEE 754.
 *
 * The float type is provided only for interoperation with the Java programming
 * language. Use of float values is generally discouraged; prefer double values
 * whenever possible. There is no syntax for specifying a literal float.
 * Instead, use the method {@method "_→float"} to convert a double value to a
 * float value.
 *
 * @category "Primitives" "Types" "Numbers"
 * @type "float"
 * @supertype "number"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-float.html"
 */
Primitive "float" is
[
	_float
];

/**
 * A number is an immutable mathematical object. Uses of numbers include
 * counting, annotating entities to distinguish them, and measuring the
 * magnitudes of quantities. Avail natively supports integers and two distinct
 * precisions of floating-point approximations of real numbers. {@type
 * "extended integer" Integers} are discrete, and thus excel at counting and
 * labeling. Real numbers form a continuum, and are therefore suitable for
 * taking measurements.
 *
 * @category "Primitives" "Types" "Numbers"
 * @type "number"
 * @supertype "nontype"
 * @see {@type "double"}
 * @see {@type "extended integer"}
 * @see {@type "float"}
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-number.html"
 */
Primitive "number" is
[
	_number
];

/**
 * The type of all finite integers.
 *
 * @category "Primitives" "Types"
 * @type "integer"
 * @alias "(-∞..∞)"
 * @supertype "extended integer"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"
 */
Primitive "integer" is
[
	_integer
];

/**
 * Avail's integral type specifies four parameters for completion:
 *
 * <ul>
 * <li>The lower bound is an integer which specifies the smallest allowed value.
 * The floor operation, {@method "⎣_⎦"}, answers the lower bound of an integral
 * type.</li>
 * <li>The lower bound inclusion indicator is a {@type "boolean"} value that
 * establishes whether the lower bound is a member of the integral type. When
 * this value is {@method "true"}, then the lower bound is included in the
 * type's membership. When this value is {@method "false"}, then it is not so
 * included. The method {@method "⎣_⎦is inclusive"} answers the lower bound
 * inclusion indicator of an integral type.</li>
 * <li>The upper bound is an integer which specifies the largest allowed value.
 * The ceiling operation, {@method "⎡_⎤"}, answers the upper bound of an
 * integral type.</li>
 * <li>The upper bound inclusion indicator is a {@type "boolean"} value that
 * establishes whether the upper bound is a member of the integral type. When
 * this value is {@method "true"}, then the upper bound is included in the
 * type's membership. When this value is {@method "false"}, then it is not so
 * included. The method {@method "⎡_⎤is inclusive"} answers the upper bound
 * inclusion indicator of an integral type.</li>
 * </ul>
 *
 * @category "Primitives" "Types"
 * @type "extended integer meta"
 * @alias "[-∞..∞]'s type"
 * @see {@method "integer range from_(inclusive=_)to_(inclusive=_)"}
 * @see {@method "[_.._]"}
 * @see {@method "[_.._)"}
 * @see {@method "(_.._]"}
 * @see {@method "(_.._)"}
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"
 */
Primitive "extended integer meta" is
[
	_extended_integer_meta
];

/**
 * The map type specifies three parameters for completion:
 * <ul>
 * <li>The key type specifies a type that includes every key of the domain. The
 * method {@method "_'s⁇key type"} answers the key type of a map type.</li>
 * <li>The value type specifies a type that includes every value of the
 * codomain. The method {@method "_'s⁇value type"} answers the value type of a
 * map type.</li>
 * <li>The cardinality restriction is an {@method "extended integer meta"
 * integral type} that specifies the range of sizes that describe instances. The
 * method {@method "`|`|_`|`|"} answers the cardinality restriction of a map
 * type. The floor operation, {@method "⎣_⎦"}, answers the lower bound of a
 * map type's cardinality restriction. The ceiling operation, {@method "⎡_⎤"},
 * answers the upper bound of a map type's cardinality restriction.</li>
 * </ul>
 *
 * @category "Primitives" "Types"
 * @type "map meta"
 * @alias "{any→any|}'s type"
 * @see {@method "{_→_|_}"}
 * @see {@method "{_→_|_.._}"}
 * @see {@method "{_→_|_..}"}
 * @see {@method "{_→_|_}"}
 * @see {@method "{_→_|}"}
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-map.html"
 */
Primitive "map meta" is
[
	_map_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module.html"
 */
Primitive "module" is
[
	_module
];

/**
 * Answer a {@type "tuple"} containing all of the error codes well-known to
 * the Avail virtual machine.
 *
 * @category "Primitives" "Constants"
 * @method "VM error codes"
 * @returns "VM error codes's type"
 */
Primitive "VM error codes" is
[
	_VM_error_codes
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "object"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-object.html"
 */
Primitive "object" is
[
	_object
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "object meta"
 * @alias "object's type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-object.html"
 */
Primitive "object meta" is
[
	_object_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "exception"
 * @supertype "object"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-exception.html"
 */
Primitive "exception" is
[
	_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "fiber"
 * @alias "fiber→⊤"
 * @supertype "nontype"
 */
Primitive "fiber" is
[
	_fiber
];

/**
 * A set is an immutable, finite, unordered collection of distinct, homogeneous
 * values, called members or elements. The number of elements is the cardinality
 * of the set. Breaking this down:
 *
 * <ul>
 * <li>Immutable means that the composition of a set is not subject to change.
 * No operations are, or can be, defined to modify a set in any way; only
 * operations that derive new sets from existing sets are expressible.</li>
 * <li>Finite means that the cardinality of a set is never the value {@method
 * "∞"}. To store a set in memory requires space proportional to its
 * cardinality, and memory is clearly always finite. Additional limits to the
 * practical cardinality of sets may be imposed by the implementation.</li>
 * <li>Unordered means that the members of a set do not occur in any particular
 * order. Any two sets with the same membership are therefore equal.</li>
 * <li>Distinct means that a member occurs only once in the membership of a set.
 * Thus a value is either a member of a set or it is not.</li>
 * <li>Homogeneous means that the members of a set universally conform to a
 * single most general type.</li>
 * </ul>
 *
 * A literal set is expressed as a left curly bracket {@code "{"} (U+007B),
 * then a list of members separated by commas {@code ","} (U+002C), and finally
 * a right curly bracket {@code "}"} (U+007D). The empty set is written as
 * {@method "∅"} (U+2205).
 *
 * The elements of a set need not be known statically. Sets are constructed with
 * the method {@method "{«_‡,»}"}; there is no special built-in syntax for
 * constructing sets. When the compiler can infer an instance type for each
 * argument expression of a particular send of this message, then the semantic
 * restriction is able to strengthen the result to an instance type, thereby
 * according it the same force as a literal understood primitively by the
 * compiler.
 *
 * @category "Primitives" "Types"
 * @type "set"
 * @alias "{any|}"
 * @supertype "nontype"
 * @see {@method "{«_‡,»}"}
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-set.html"
 */
Primitive "set" is
[
	_set
];

/**
 * The set type specifies two parameters for completion:
 *
 * <ul>
 * <li>The member type (or element type) specifies a type that includes every
 * member. The method {@method "_'s⁇element|member type"} answers the member
 * type of a set type.</li>
 * <li>The cardinality restriction is an {@method "extended integer meta"
 * integral type} that specifies the range of sizes that describe instances. The
 * method {@method "`|`|_`|`|"} answers the cardinality restriction of a set
 * type. The floor operation, {@method "⎣_⎦"}, answers the lower bound of a set
 * type's cardinality restriction. The ceiling operation, {@method "⎡_⎤"},
 * answers the upper bound of a set type's cardinality restriction.</li>
 * </ul>
 *
 * @category "Primitives" "Types"
 * @type "set meta"
 * @alias "{any|}'s type"
 * @see {@method "{_|_}"}
 * @see {@method "{_|_.._}"}
 * @see {@method "{_|_..}"}
 * @see {@method "{_|}"}
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-set.html"
 */
Primitive "set meta" is
[
	_set_meta
];

/**
 * A string represents text without respect to style or encoding. Naturally, the
 * content of a string consists of {@type "character"}s arrayed in a fixed
 * order.
 *
 * Like integer and double literals, string literals are understood directly by
 * the Avail compiler. A string literal begins with a quotation mark {@code
 * "\""} (U+0022), continues with arbitrary Unicode characters optionally
 * interleaved with escape sequences, and ends with a quotation mark. The string
 * literal metacharacters are quotation mark and reverse solidus {@code "\\"}
 * (U+005C) — also called backslash. A reverse solidus alters the meaning of the
 * next character, called the escaped character:
 *
 * <ul>
 * <li>When the escaped character is reverse solidus or quotation mark, then its
 * special meaning as a metacharacter is disabled.</li>
 * <li>When the escaped character is {@code "t"} (U+0074), then the intended
 * character is character tabulation (U+0009), also called horizontal tab.</li>
 * </ul>
 * <li>When the escaped character is {@code "n"} (U+006E), then the intended
 * character is line feed (U+000A)</li>.
 * <li>When the escaped character is {@code "r"} (U+0072), then the intended
 * character is carriage return (U+000D).</li>
 * <li>When the escaped character is left parenthesis {@code "("} (U+0028),
 * then the compiler expects a sequence of hexadecimal numerals separated by
 * commas {@code ","} (U+002C) and finally a right parenthesis {@code ")"}
 * (U+0029). Each hexadecimal numeral must denote an integral value from
 * {@code "0"} to {@code "10FFFF"}<sub>16</sub> ({@code
 * "1114111"}<sub>10</sub>); the case of the hexadecimal digits {@code "A"}
 * through {@code "F"} does not matter. Each number represents the character
 * associated with the Unicode code point of the same value. The construct as a
 * whole then denotes a sequence of characters.</li>
 * <li>When the escaped character is line feed (U+000A), then the compiler
 * elides the line feed altogether. This permits a string literal to span
 * multiple lines without forcing its content to span multiple lines. Note that
 * an occurrence of carriage return (U+000D) after the reverse solidus, or even
 * the combination carriage return+line feed, is treated similarly; it is
 * stripped from the resulting string.</li>
 * <li>When the escaped character is vertical line {@code "|"} (U+007C), then
 * the compiler discards all whitespace from the beginning of the same line up
 * to the reverse solidus. This region is not permitted to contain characters
 * other than whitespace, in fact. This feature permits nice formatting of
 * multiline string literals within source code, and is particularly powerful in
 * conjunction with escaping of line feeds.</li>
 * </ul>
 *
 * The empty string is written as {@code "\"\""}. It is the same value as the
 * empty tuple, {@code "<>"}.
 *
 * @category "Primitives" "Types"
 * @type "string"
 * @alias "<character…|>"
 * @supertype "tuple"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-string.html"
 */
Primitive "string" is
[
	_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "⊥"
 * @alias "⊥"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-bottom.html"
 */
Primitive "⊥" is
[
	_bottom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "⊥meta"
 * @alias "⊥'s type"
 */
Primitive "⊥meta" is
[
	_bottom_meta
];

/**
 * Every value that is not itself a type is an instance of the primitive type
 * {@code "nontype"}. The subtypes of {@code "nontype"} are therefore those
 * types whose instances are not themselves types. Except for {@method "⊤"},
 * {@method "any"}, and {@method "type"}, every primitive type is a subtype of
 * {@code "nontype"}. It is a sibling of {@method "type"}, and every value is
 * either an instance of {@code "nontype"} or {@method "type"}.
 *
 * @category "Primitives" "Types"
 * @type "nontype"
 * @supertype "any"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-nontype.html"
 */
Primitive "nontype" is
[
	_nontype
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple"
 * @alias "<any…|>"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-tuple.html"
 */
Primitive "tuple" is
[
	_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple meta"
 * @alias "<any…|>'s type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-tuple.html"
 */
Primitive "tuple meta" is
[
	_tuple_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type"
 * @alias "⊤'s type"
 */
Primitive "type" is
[
	_type
];

/**
 * The true abstract root of the Avail type lattice. It is pronounced "top" and
 * written as the down tack (⊤) character. Every Avail value is an instance
 * of {@code "⊤"}, and every Avail type is a subtype of {@code "⊤"}.
 *
 * {@code "⊤"} is distinct from {@method "any"} in that it includes exactly one
 * additional value: the special value {@code "nil"}. This value does not
 * satisfy any public protocol and is not available to an Avail programmer. It
 * is, however, implicitly returned from every procedure, i.e., function whose
 * return type is {@code "⊤"}. Thus {@code "nil"} is the value produced iff no
 * value is produced. The virtual machine uses {@code "nil"} to simplify
 * several core algorithms, but exposure of nil to an Avail programmer would not
 * yield a net good.
 *
 * {@code "⊤"} typically appears in Avail code in only a few select contexts:
 *
 * <ul>
 * <li>As the {@method "_'s⁇return type" return type} of a function type. In
 * this context, it signifies that the function does not produce a value, i.e.,
 * it produces the unexposed value {@code "nil"}.</li>
 * <li>As the {@method "_'s⁇return type" return type} of a continuation type. In
 * this context, it signifies that the continuation will not produce a value,
 * i.e., it produces the unexposed value {@code "nil"}.</li>
 * <li>As the {@method "_'s⁇read type" read type} of a variable type. In this
 * context, it signifies that no value may be read from the variable, i.e., the
 * variable is write-only.</li>
 * <li>As the idempotent initial value of an accumulator variable whose
 * intermediate and final results represent a chain of type intersections. (Note
 * that the type intersection of {@code "⊤"} with some type {@code "X"} is
 * always {@code "X"}.)</li>
 * <li>As the result of a semantic restriction on a procedure that serves only
 * to reject parses based on the static types of the arguments (but does not
 * strengthen the return type).</li>
 * <li>As the {@method "_'s⁇result type" result type} of a phrase. In this
 * context, it signifies that the phrase serves as a statement (and not merely
 * as an expression).</li>
 * </ul>
 *
 * A function whose declared return type is {@code "⊤"} is still permitted to
 * answer an actual (non-{@code "nil"}) value. This is consistent with the type
 * lattice, since every value is an instance of {@code "⊤"}. It is useful,
 * moreover, because a semantic restriction may strengthen the return type of a
 * {@code "⊤"}-valued function at a particular call site to a subtype of
 * {@code "⊤"}.
 *
 * {@code "⊤"} is expressly forbidden from occurring in most contexts, including
 * the following:
 *
 * <ul>
 * <li>As a parameter type of a function type.</li>
 * <li>As the write type of a variable type. This also implies that it cannot
 * be the type of an actual variable.</li>
 * <li>As a leading type or the default type of a tuple type.</li>
 * <li>As the element type of a set type.</li>
 * <li>As the key type or value type of a map type.</li>
 * <li>As the field type of an object type.</li>
 * <li>As the type parameter of a pojo type.</li>
 * </ul>
 *
 * Note that these prohibitions, when considered in aggregate, negate any
 * possible value that could be gleaned from exposing the special value {@code
 * "nil"} to an Avail program. They conspire together to ensure that nil could
 * never be retained by an Avail value. It may therefore only exist as a
 * temporary within a continuation, i.e., an item on the local stack of a
 * function call. A reflective query of a continuation's temporaries that would
 * answer {@code "nil"} will instead produce a variable whose read type is
 * {@method "⊥"}.
 *
 * @category "Primitives" "Types"
 * @type "⊤"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-top.html"
 */
Primitive "⊤" is
[
	_top
];

/**
 * The type of all counting numbers.
 *
 * @category "Primitives" "Types"
 * @type "whole number"
 * @alias "[0..∞)"
 * @supertype "extended integer"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"
 */
Primitive "whole number" is
[
	_whole_number
];

/**
 * The type of all positive numbers. This is also the type of all subscripts.
 *
 * @category "Primitives" "Types"
 * @type "natural number"
 * @alias "[1..∞)"
 * @supertype "extended integer"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"
 */
Primitive "natural number" is
[
	_natural_number
];

/**
 * The type of all reserved Unicode code points.
 *
 * @category "Primitives" "Types"
 * @type "code point"
 * @alias "[0..1114111]"
 * @supertype "whole number"
 */
Primitive "code point" is
[
	_code_point
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "map"
 * @alias "{any→any|}"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-map.html"
 */
Primitive "map" is
[
	_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "message bundle"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-message-bundle.html"
 */
Primitive "message bundle" is
[
	_message_bundle
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "message bundle tree"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-message-bundle-tree.html"
 */
Primitive "message bundle tree" is
[
	_message_bundle_tree
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "method"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-method.html"
 */
Primitive "method" is
[
	_method
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "definition"
 * @supertype "type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-definition.html"
 */
Primitive "definition" is
[
	_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "abstract definition"
 * @supertype "definition"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-abstract-definition.html"
 */
Primitive "abstract definition" is
[
	_abstract_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "forward definition"
 * @supertype "definition"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-forward-definition.html"
 */
Primitive "forward definition" is
[
	_forward_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "method definition"
 * @supertype "definition"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-method-definition.html"
 */
Primitive "method definition" is
[
	_method_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "macro definition"
 * @supertype "definition"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-macro-definition.html"
 */
Primitive "macro definition" is
[
	_macro_definition
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of functions"
 * @alias "<[…]→⊤…|>"
 */
Primitive "tuple of functions" is
[
	_tuple_of_functions
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase"
 * @alias "phrase⇒⊤"
 * @supertype "nontype"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-phrase.html"
 */
Primitive "phrase" is
[
	_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "sequence phrase"
 * @alias "sequence phrase⇒⊤"
 * @supertype "phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-sequence-phrase.html"
 */
Primitive "sequence phrase" is
[
	_sequence_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "expression phrase"
 * @alias "expression phrase⇒⊤"
 * @supertype "phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-expression-phrase.html"
 */
Primitive "expression phrase" is
[
	_expression_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "assignment phrase"
 * @alias "assignment phrase⇒⊤"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-assignment-phrase.html"
 */
Primitive "assignment phrase" is
[
	_assignment_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "block phrase"
 * @alias "block phrase⇒[…]→⊤"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-block-phrase.html"
 */
Primitive "block phrase" is
[
	_block_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "literal phrase"
 * @alias "literal phrase⇒any"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-literal-phrase.html"
 */
Primitive "literal phrase" is
[
	_literal_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable reference phrase"
 * @alias "reference phrase⇒variable"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable-reference-phrase.html"
 */
Primitive "variable reference phrase" is
[
	_variable_reference_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "send phrase"
 * @alias "send phrase⇒⊤"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-send-phrase.html"
 */
Primitive "send phrase" is
[
	_send_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "literal token meta"
 * @alias "(literal token⇒any)'s type"
 * @supertype "token's type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-literal-token.html"
 */
Primitive "literal token meta" is
[
	_literal_token_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "list phrase"
 * @alias "list phrase⇒tuple"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-list-phrase.html"
 */
Primitive "list phrase" is
[
	_list_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "variable use phrase"
 * @alias "variable use phrase⇒any"
 * @supertype "expression phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable-use-phrase.html"
 */
Primitive "variable use phrase" is
[
	_variable_use_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "declaration phrase"
 * @alias "declaration phrase⇒⊤"
 * @supertype "phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-declaration-phrase.html"
 */
Primitive "declaration phrase" is
[
	_declaration_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "argument phrase"
 * @alias "argument phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-argument-phrase.html"
 */
Primitive "argument phrase" is
[
	_argument_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "label phrase"
 * @alias "label phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-label-phrase.html"
 */
Primitive "label phrase" is
[
	_label_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "local variable phrase"
 * @alias "local variable phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-local-variable-phrase.html"
 */
Primitive "local variable phrase" is
[
	_local_variable_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "local constant phrase"
 * @alias "local constant phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-local-constant-phrase.html"
 */
Primitive "local constant phrase" is
[
	_local_constant_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module variable phrase"
 * @alias "module variable phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module-variable-phrase.html"
 */
Primitive "module variable phrase" is
[
	_module_variable_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "module constant phrase"
 * @alias "module constant phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module-constant-phrase.html"
 */
Primitive "module constant phrase" is
[
	_module_constant_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "primitive failure reason phrase"
 * @alias "primitive failure reason phrase⇒⊤"
 * @supertype "declaration phrase"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-primitive-failure-reason-phrase.html"
 */
Primitive "primitive failure reason phrase" is
[
	_primitive_failure_reason_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "any meta"
 * @alias "any's type"
 * @supertype "type"
 */
Primitive "any meta" is
[
	_any_meta
];

/**
 * The special atom that represents truth. {@method "true"} is an instance of
 * {@type "boolean"}.
 *
 * @category "Primitives" "Constants"
 * @method "true"
 * @returns "true's type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"
 */
Primitive "true" is
[
	_true
];

/**
 * The special atom that represents falsehood. {@method "false"} is an instance
 * of {@type "boolean"}.
 *
 * @category "Primitives" "Constants"
 * @method "false"
 * @returns "false's type"
 * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"
 */
Primitive "false" is
[
	_false
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of string"
 * @alias "<string…|>"
 */
Primitive "tuple of string" is
[
	_tuple_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of type"
 * @alias "<⊤'s type…|>"
 */
Primitive "tuple of type" is
[
	_tuple_of_type
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of set of string"
 * @alias "<{string|}…|>"
 */
Primitive "tuple of set of string" is
[
	_tuple_of_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of string"
 * @alias "{string|}"
 */
Primitive "set of string" is
[
	_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "primitive failure function"
 * @alias "[[1..∞)]→⊥"
 */
Primitive "primitive failure function" is
[
	_primitive_failure_function
];

/**
 * Answer the empty {@type "set"}.
 *
 * @category "Primitives" "Constants"
 * @method "∅"
 * @returns "∅'s type"
 */
Primitive "∅" is
[
	_empty_set
];

/**
 * Answer negative infinity.
 *
 * @category "Primitives" "Constants"
 * @method "-∞"
 * @returns "-∞'s type"
 */
Primitive "-∞" is
[
	_negative_infinity
];

/**
 * Answer positive infinity.
 *
 * @category "Primitives" "Constants"
 * @method "∞"
 * @returns "∞'s type"
 */
Primitive "∞" is
[
	_positive_infinity
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo"
 * @alias "java.lang.Object"
 * @supertype "nontype"
 */
Primitive "pojo" is
[
	_pojo
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo⊥"
 * @supertype "pojo"
 */
Primitive "pojo⊥" is
[
	_pojo_bottom
];

/**
 * Answer Java {@code "null"}.
 *
 * @category "Primitives" "Constants"
 * @method "null"
 * @returns "null's type"
 */
Primitive "null" is
[
	_null
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo self type"
 * @supertype "atom"
 */
Primitive "pojo self type" is
[
	_pojo_self_type
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo meta"
 * @alias "java.lang.Object's type"
 */
Primitive "pojo meta" is
[
	_pojo_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo array meta"
 * @alias "any[]'s type"
 */
Primitive "pojo array meta" is
[
	_pojo_array_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo constructor"
 * @alias "[…]→java.lang.Object"
 */
Primitive "pojo constructor" is
[
	_pojo_constructor
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo array"
 * @alias "any[]"
 */
Primitive "pojo array" is
[
	_pojo_array
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Constants"
 * @method "pojo self"
 * @returns "pojo self's type"
 */
Primitive "pojo self" is
[
	_pojo_self
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo exception"
 * @alias "java.lang.Throwable"
 */
Primitive "pojo exception" is
[
	_pojo_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nullary procedure"
 * @alias "[]→⊤"
 */
Primitive "nullary procedure" is
[
	_nullary_procedure
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "predicate function"
 * @alias "[]→boolean"
 */
Primitive "predicate function" is
[
	_predicate_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "continuation variable"
 * @alias "↑$[…]→⊥"
 */
Primitive "continuation variable" is
[
	_continuation_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field map"
 * @alias "{atom→any|}"
 */
Primitive "field map" is
[
	_field_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field type map"
 * @alias "{atom→any's type|}"
 */
Primitive "field type map" is
[
	_field_type_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "key-value tuple"
 * @alias "<<any…|2>…|>"
 */
Primitive "key-value tuple" is
[
	_key_value_tuple
];

/**
 * Answer the empty {@type "map"}.
 *
 * @category "Primitives" "Constants"
 * @method "empty map"
 * @returns "{}'s type"
 */
Primitive "empty map" is
[
	_empty_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "non-empty map"
 * @alias "{any→any|1..∞}"
 */
Primitive "non-empty map" is
[
	_non_empty_map
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "whole number meta"
 * @alias "[0..∞)'s type"
 */
Primitive "whole number meta" is
[
	_whole_number_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "non-empty set"
 * @alias "{any|1..∞}"
 */
Primitive "non-empty set" is
[
	_non_empty_set
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of tuple"
 * @alias "<tuple…|>"
 */
Primitive "tuple of tuple" is
[
	_tuple_of_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nybble"
 * @alias "[0..15]"
 */
Primitive "nybble" is
[
	_nybble
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of nybble"
 * @alias "<[0..15]…|>"
 */
Primitive "tuple of nybble" is
[
	_tuple_of_nybble
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "unsigned short"
 * @alias "[0..65535]"
 */
Primitive "unsigned short" is
[
	_unsigned_short
];

/**
 * Answer the empty {@type "tuple"}.
 *
 * @category "Primitives" "Constants"
 * @method "empty tuple"
 * @returns "<>'s type"
 */
Primitive "empty tuple" is
[
	_empty_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "unary procedure"
 * @alias "[⊥]→⊤"
 */
Primitive "unary procedure" is
[
	_unary_procedure
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of zero"
 * @alias "0's type"
 */
Primitive "type of zero" is
[
	_type_of_zero
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "semantic restriction function"
 * @alias "[…]→⊤'s type"
 */
Primitive "semantic restriction function" is
[
	_semantic_restriction_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of semantic restriction function"
 * @alias "<[…]→⊤'s type…|>"
 */
Primitive "tuple of semantic restriction function" is
[
	_tuple_of_semantic_restriction_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "macro function"
 * @alias "[…]→phrase⇒⊤"
 */
Primitive "macro function" is
[
	_macro_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of two"
 * @alias "2's type"
 */
Primitive "type of two" is
[
	_type_of_two
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Constants"
 * @method "Euler's number"
 * @returns "2.718281828459045d's type"
 */
Primitive "Euler's number" is
[
	_Euler_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "type of Euler number"
 * @alias "2.718281828459045d's type"
 */
Primitive "type of Euler number" is
[
	_type_of_Euler_number
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase meta"
 * @alias "(phrase⇒⊤)'s type"
 */
Primitive "phrase meta" is
[
	_phrase_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of atom"
 * @alias "{atom|}"
 */
Primitive "set of atom" is
[
	_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "token"
 * @supertype "nontype"
 */
Primitive "token" is
[
	_token
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "literal token"
 * @supertype "token"
 */
Primitive "literal token" is
[
	_literal_token
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of any meta"
 * @alias "<any's type…|>"
 */
Primitive "tuple of any meta" is
[
	_tuple_of_any_meta
];

/**
 * The type of all nonnegative integers.
 *
 * @category "Primitives" "Types"
 * @type "nonnegative extended integer"
 * @alias "[0..∞]"
 */
Primitive "nonnegative extended integer" is
[
	_nonnegative_extended_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field type tuple"
 * @alias "<<atom, any's type…|2>…|>"
 */
Primitive "field type tuple" is
[
	_field_type_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "field tuple"
 * @alias "<<atom, any…|2>…|>"
 */
Primitive "field tuple" is
[
	_field_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "phrase tuple"
 * @alias "<phrase⇒⊤…|>"
 */
Primitive "phrase tuple" is
[
	_phrase_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "argument tuple"
 * @alias "<argument phrase⇒⊤…|>"
 */
Primitive "argument tuple" is
[
	_argument_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "declaration tuple"
 * @alias "<declaration phrase⇒⊤…|>"
 */
Primitive "declaration tuple" is
[
	_declaration_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "write-only expression variable"
 * @supertype "variable"
 */
Primitive "write-only expression variable" is
[
	_write_only_expression_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of expressions yielding any"
 * @alias "<expression phrase⇒any…|>"
 */
Primitive "tuple of expressions yielding any" is
[
	_tuple_of_expressions_yielding_any
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "expression yielding any"
 * @alias "expression phrase⇒any"
 */
Primitive "expression yielding any" is
[
	_expression_yielding_any
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "pojo failure function"
 * @alias "[java.lang.Throwable]→⊥"
 */
Primitive "pojo failure function" is
[
	_pojo_failure_function
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of set of atom"
 * @alias "<{atom|}…|>"
 */
Primitive "tuple of set of atom" is
[
	_tuple_of_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "byte"
 * @alias "[0..255]"
 */
Primitive "byte" is
[
	_byte
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of tuple of any meta"
 * @alias "<<any's type…|>…|>"
 */
Primitive "tuple of tuple of any meta" is
[
	_tuple_of_tuple_of_any_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "readable extended integer variable"
 * @alias "read [-∞..∞]/write ⊥"
 */
Primitive "readable extended integer variable" is
[
	_readable_extended_integer_variable
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "fiber meta"
 * @alias "(fiber→⊤)'s type"
 */
Primitive "fiber meta" is
[
	_fiber_meta
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty string"
 * @alias "character+"
 */
Primitive "nonempty string" is
[
	_nonempty_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "set of exception"
 * @alias "{exception|}"
 */
Primitive "set of exception" is
[
	_set_of_exception
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty set of string"
 * @alias "{string|1..∞}"
 */
Primitive "nonempty set of string" is
[
	_nonempty_set_of_string
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty set of atom"
 * @alias "{atom|1..∞}"
 */
Primitive "nonempty set of atom" is
[
	_nonempty_set_of_atom
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "nonempty tuple"
 * @alias "any+"
 */
Primitive "nonempty tuple" is
[
	_nonempty_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "tuple of integer"
 * @alias "<(-∞..∞)…|>"
 */
Primitive "tuple of integer" is
[
	_tuple_of_integer
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "two or more tuple"
 * @alias "<any…|2..∞>"
 */
Primitive "two or more tuple" is
[
	_two_or_more_tuple
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "first of sequence phrase"
 * @alias "first of sequence phrase⇒⊤"
 */
Primitive "first of sequence phrase" is
[
	_first_of_sequence_phrase
];

/**
 * TODO: Special object description goes here.
 *
 * @category "Primitives" "Types"
 * @type "permuted list phrase⇒tuple"
 * @alias "permuted list phrase"
 */
Primitive "permuted list phrase" is
[
	_permuted_list_phrase
];

