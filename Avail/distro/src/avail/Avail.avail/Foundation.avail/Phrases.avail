/*
 * Phrases.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Phrases"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Bootstrap",
	"Early Conditionals",
	"Early Control Structures",
	"Early Definers",
	"Early Enumeration Support",
	"Early Literals",
	"Early Variables"
Names
	"Evaluate|evaluate_",
	"restricted send_with_:_",
	"this token:…",
	"_compiled",
	"``_``",
	"`«↓_`»",
	"`«<«_‡,»>`»",
	"`«[_`|_]:_`»",
	"`«[_]:_`»"
Body

/**
 * Make "_'s type" bind more tightly than phrase type construction.
 * 
 * @method "_⇒_"
 * @returns "⊤"
 */
Invoke
[
	exclusions ::= cast {"_'s⁇type"} into [t : {string|natural number} | t];
	Grammatical restriction "_⇒_" is <∅, exclusions>;
]
with <>;

Semantic restriction "_'s⁇value" is
[
	tokenType : literal token's type
|
	tokenType's value type
];

/**
 * Construct and answer a (synthetic) literal token whose artificial source text
 * is the description of the value.
 * 
 * @method "``_``"
 * @param "value" "any"
 *        Any value, irrespective of whether an Avail compiler would be able to
 *        construct such a literal.
 * @returns "literal token"
 *        A literal token that embeds the argument.
 * @category "Phrases" "Constructors"
 */
Public method "``_``" is
[
	value : any
|
	`value` (“value”)
] : literal token;

/**
 * Strengthen literal token building to covary with the literal value's type.
 * 
 * @method "``_``"
 * @restricts "any meta"
 */
Semantic restriction "``_``" is
[
	value : any meta
|
	literal token ⇒ value
];

/**
 * Strengthen literal <em>node</em> building to covary with the type of object
 * inside the passed literal token.
 * 
 * @method "‘_’"
 * @restricts "literal token's type"
 */
Semantic restriction "‘_’" is
[
	aLiteralToken : literal token's type
|
	literal phrase ⇒ (aLiteralToken's value type)
];

/**
 * Construct and answer a variable use expression from the specified
 * declaration.
 * 
 * @method "`«↓_`»"
 * @param "decl" "declaration phrase"
 *        The declaration that introduced the referenced entity.
 * @returns "variable use phrase"
 *          A variable use expression.
 * @category "Phrases" "Constructors"
 */
Public method "`«↓_`»" is
[
	decl : declaration phrase
|
	«↓decl» (`decl's token's lexeme`)
] : variable use phrase;

/**
 * Construct and answer a list phrase from the specified tuple.
 * 
 * @method "`«<«_‡,»>`»"
 * @param "aTuple" "<<>, expression phrase⇒any…|whole number>"
 *        A tuple of expressions.
 * @returns "list phrase"
 *          The requested list.
 * @category "Phrases" "Constructors"
 */
Public method "`«<«_‡,»>`»" is
[
	aTuple : <<>, expression phrase⇒any…|whole number>
|
	aTuple → list phrase
] : list phrase;

/**
 * Construct and answer a block from the specified argument declarations,
 * statements, and return type.
 * 
 * @method "`«[_`|_]:_`»"
 * @param "args" "<<>, argument phrase…|whole number>"
 *        A tuple of argument declarations.
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>,
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		args
	|
		Primitive 0
		statements
	] : returnType ^ ∅»
] : block phrase;

/**
 * @method "`«[_`|_]:_`»"
 * @restricts "<<>, argument phrase…|whole number>'s type"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_`|_]:_`»" is
[
	args : <<>, argument phrase…|whole number>'s type,
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase⇒([…]→cast returnType's instance into [t : type | t])
];

/**
 * Construct and answer an arity-0 block from the specified statements and
 * return type.
 * 
 * @method "`«[_]:_`»"
 * @param "statements" "<<>, phrase…|whole number>"
 *        A tuple of statements.
 * @param "returnType" "type"
 *        The return type of the function described by the block.
 * @returns "block phrase"
 *          A block.
 * @category "Phrases" "Constructors"
 */
Public method "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>,
	returnType : type
|
	«[
		<>
	|
		Primitive 0
		statements
	] : returnType ^ ∅»
];

/**
 * @method "`«[_]:_`»"
 * @restricts "<<>, phrase…|whole number>'s type"
 * @restricts "type's type"
 */
Semantic restriction "`«[_]:_`»" is
[
	statements : <<>, phrase…|whole number>'s type,
	returnType : type's type
|
	block phrase⇒([…]→cast returnType's instance into [t : type | t])
];

/**
 * @method "send_with_:_"
 * @restricts "atom's type"
 * @restricts "list phrase's type"
 * @restricts "type's type"
 */
Semantic restriction "send_with_:_" is
[
	aMethod : atom's type,
	arguments : list phrase's type,
	returnType : type's type
|
	/* Parse nodes have identity, so it isn't safe to strengthen more than
	 * this.
	 */
	send phrase⇒cast returnType's instance into [t : type | t]
];

Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type
|
	expressionType's semantic type's type
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrases's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type
|
	if |blockType| = 1 then
	[
		if blockType's instance's type ⊆ type then [function meta]
		else [cast blockType's instance into [t : function meta's type | t]]
	]
	else [function meta]
];

/**
 * An expression phrase's type's semantic type is always a value's type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "expression phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	expressionType : expression phrase's type's type
|
	any meta
];

/**
 * A block type's semantic type is always a function type.
 *
 * @method "_'s⁇semantic type"
 * @restricts "block phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	blockType : block phrase's type's type
|
	function meta
];

/**
 * A list type's semantic type is always a tuple of values.
 * 
 * @method "_'s⁇semantic type"
 * @restricts "list phrase's type's type"
 */
Semantic restriction "_'s⁇semantic type" is
[
	listType : list phrase's type's type
|
	tuple meta
];

/**
 * The function type of a function generated from a block is the same as the
 * block's semantic type.
 * 
 * @method "_→function"
 * @restricts "block phrase's type"
 */
Semantic restriction "_→function" is
[
	blockType : block phrase's type
|
	blockType's semantic type
];

/**
 * Answer the actual token that occurs in the source text at the indicated
 * position.
 * 
 * @method "this token:…"
 * @param "t" "token"
 *        A token actually occurring at the invocation site in the source.
 */
Public method "this token:…" is
[
	t : token
|
	t
] : token;

Semantic restriction "_'s⁇expressions" is
[
	listType : list phrase's type
|
	semanticType ::= listType's semantic type;
	upper ::=
		cast |semanticType's leading types| + 1 into [t : natural number | t];
	leadingTypes : tuple := <>;
	From 1 to upper do
	[
		index : natural number
	|
		leadingTypes := concatenate
			<leadingTypes, <expression phrase ⇒ semanticType[index]>>;
		true
	];
	strongLeadingTypes ::=
		cast leadingTypes
		into [t : <<>, any meta… | whole number> | t];
	defaultType ::= cast strongLeadingTypes[upper] into [t : any meta | t];
	<strongLeadingTypes, defaultType… | ||semanticType||>
];

Semantic restriction "_'s⁇token" is
[
	literalType : literal phrase's type
|
	literal token ⇒ (literalType's semantic type)
];

/**
 * Construct a {@type "function"} to evaluate the specified {@type "phrase"}.
 *
 * @method "_compiled"
 * @param "aPhrase" "phrase"
 * @returns "[…]→⊤"
 */
Public method "_compiled" is
[
	aPhrase : phrase
|
	«[<> | <aPhrase>] : aPhrase's semantic type» → function
] : function;

Semantic restriction "_compiled" is
[
	phraseType : phrase's type
|
	function accepting <> and returning phraseType's semantic type 
];

/**
 * Evaluate the specified {@type "phrase"} to produce its value.
 *
 * @method "Evaluate|evaluate_"
 * @param "aPhrase" "phrase"
 * @returns "⊤"
 */
Public method "Evaluate|evaluate_" is
[
	aPhrase : phrase
|
	Invoke aPhrase compiled with <>;
] : ⊤;

Semantic restriction "Evaluate|evaluate_" is
[
	phraseType : phrase's type
|
	phraseType's semantic type
];

/*
 * This is a bootstrap function invoker, needed by "restricted send_with_:_" in
 * order to procure a result from a function application.
 */
Private method "private invoke_with_" is
[
	aFunction : function,
	arguments : tuple
|
	Primitive 40 (failureCode : natural number);
	Invoke early failure function with <failureCode>
] : ⊤;

Semantic restriction "private invoke_with_" is
[
	functionType : function meta,
	argumentsType : tuple meta
|
	type
];

/**
 * Given a {@type "atom" message}, a {@type "tuple"} of its argument {@type
 * "expression phrase"}s, and its basic return type, answer a {@type
 * "send phrase"} with an appropriately strengthened return type. This runs the
 * semantic restrictions associated with the indicated {@type "method"}, and
 * therefore is only appropriate to call from a semantic restriction or a macro.
 *
 * @method "restricted send_with_:_"
 * @param "message" "atom"
 *        The name of the target {@type "method"}.
 * @param "args" "expression phrase*"
 *        The argument expressions at the virtualized call site.
 * @param "basicReturnType" "type"
 *        The basic return type of the {@type "method"}, before any semantic
 *        restrictions have been applied.
 * @returns "send phrase"
 */
Public method "restricted send_with_:_" is
[
	message : atom,
	args : <<>, expression phrase⇒any…|whole number>,
	basicReturnType : type
|
	weakArgsTypeTuple : tuple := <>;
	From 1 to |args| do
	[
		index : natural number
	|
		argPhrase ::= cast args[index] into [t : phrase | t];
		weakArgsTypeTuple :=
			concatenate <eject weakArgsTypeTuple, <argPhrase's semantic type>>;
		true
	];
	argsTypeTuple ::= cast weakArgsTypeTuple
		into [t : <<>, any meta…|whole number> | t];
	restrictions ::=
		semantic restrictions for (method for message) given argsTypeTuple;
	returnType : type := basicReturnType;
	From 1 to |restrictions| do
	[
		index : natural number
	|
		restriction ::= cast restrictions[index] into [t : function | t];
		strongType ::= private invoke restriction with argsTypeTuple;
		returnType := eject returnType ∩ strongType;
		true
	];
	send message with args→list phrase : returnType
];
