/*
 * Methods.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Methods"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Bootstrap",
	"Control Structures",
	"Definers",
	"Early Conditionals",
	"Enumeration Support",
	"Exceptions",
	"Literals",
	"Logic",
	"Math",
	"Tuples",
	"Types",
	"Variables"
Names
	"_is«not»?implemented at_"
Body

/**
 * Answer the {@method "method"} named by {@param "methodName"}.
 *
 * @method "method for_"
 * @param "methodName" "string"
 *        The name of the method, which will be resolved to an atom in the
 *        context of the current module.
 * @returns "method"
 *          The requested method.
 * @category "Methods" "Queries"
 */
Method "method for_" is
[
	methodName : string
|
	methodAtom ::= atom for methodName;
	method for methodAtom
] : method;

/**
 * @method "method definition of_for_"
 * @restricts "atom's type"
 * @restricts "<any meta…|>'s type"
 */
Semantic restriction "method definition of_for_" is
[
	methodNameType : atom's type,
	parametersType : <any meta…|>'s type
|
	result : type := ⊤;
	If |methodNameType| = 1 ∧ [⎣parametersType⎦ = ⎡parametersType⎤] then
	[
		args : <any meta…|> := <>;
		From 1 to ⎣parametersType⎦ do
		[
			index : natural number
		|
			args := (eject args) ++ <parametersType[index]'s instance>;
		];
		methodName ::= methodNameType's instance;
		If methodName has definition for args then
		[
			result := (method definition of methodName for args)'s type;
		];
	];
	result
];

/**
 * @method "_'s⁇function"
 * @restricts "method definition's type"
 */
Semantic restriction "_'s⁇function" is
[
	definitionType : method definition's type
|
	if |definitionType| = 1 then
	[
		definitionType's instance's function's type
	]
	else
	[
		⊤
	]
];

/**
 * Is {@param "aMethod"} concrete at the specified {@type "method site"}?
 *
 * @method "_is«not»?concrete at_"
 * @param "aMethod" "method"
 *        A method.
 * @param "negation" "boolean"
 *        {@method "true"} if the sense of the query is reversed.
 * @param "argTypes" "<any's type…|>"
 *        The parameter types of the target {@type "method site"}.
 * @returns "boolean"
 *          {@method "true"} if the specified {@type "method site"} of {@param
 *          "aMethod"} is an {@type "implementation site"}, {@method "false"}
 *          otherwise.
 * @category "Methods" "Queries"
 */
Public method "_is«not»?implemented at_" is
[
	methodName : atom,
	negation : boolean,
	argTypes : <any's type…|>
|
	ok : boolean := false;
	If methodName has definition for argTypes then
	[
		theDefinition ::= method definition of methodName for argTypes;
		ok := theDefinition ∈ method definition;
	];
	negation ≠ ok
];
