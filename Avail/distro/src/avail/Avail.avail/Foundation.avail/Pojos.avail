/*
 * Pojos.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Pojos"
Versions
	"dev"
Uses
	"Bootstrap",
	"Control Structures",
	"Enumeration Support",
	"Literals",
	"Math",
	"Tuples",
	"Types"
Names
	"_[]"
Body

/**
 * @method "_[_]"
 * @restricts "any's type's type"
 * @restricts "whole number's type's type"
 */
Semantic restriction "_[_]" is
[
	elementMeta : any's type's type,
	lengthType : whole number's type's type
|
	elementMeta's instance [lengthType's instance]'s type
];

/**
 * @method "new_[_]"
 * @restricts "any's type's type"
 * @restricts "whole number's type"
 */
Semantic restriction "new_[_]" is
[
	elementMeta : any's type's type,
	lengthType : whole number's type
|
	elementMeta's instance [lengthType]
];

/**
 * @method "`|_`|"
 * @restricts "pojo array's type"
 */
Semantic restriction "`|_`|" is
[
	arrayType : pojo array's type
|
	||arrayType||
];

/**
 * @method "constructor_<«_‡,»>(fail with_)"
 * @restricts "pojo's type's type"
 * @restricts "<any's type…|>'s type"
 * @restricts "[pojo exception]→⊤'s type"
 */
Semantic restriction "constructor_<«_‡,»>(fail with_)" is
[
	pojoMeta : pojo's type's type,
	parameterTypes : <any's type…|>'s type,
	failFunction : [pojo exception]→⊤'s type
|
	args : <any's type…|> := <>;
	From 1 to ⎡parameterTypes⎤ do
	[
		index : natural number
	|
		arg ::= parameterTypes[index]'s instance;
		args := eject ↑args ++ <arg>;
	];
	function accepting args and returning ⊤
];

/**
 * @method "method_._<«_‡,»>,⁇on failure do_"
 * @restricts "pojo's type's type"
 * @restricts "string's type"
 * @restricts "<any's type…|>'s type"
 * @restricts "[pojo exception]→⊤'s type"
 */
Semantic restriction "method_._<«_‡,»>,⁇on failure do_" is
[
	pojoMeta : pojo's type's type,
	methodName : string's type,
	parameterTypes : <any's type…|>'s type,
	failFunction : [pojo exception]→⊤'s type
|
	args : <any's type…|> := <pojoMeta's instance>;
	From 1 to ⎡parameterTypes⎤ do
	[
		index : natural number
	|
		arg ::= parameterTypes[index]'s instance;
		args := eject ↑args ++ <arg>;
	];
	function accepting args and returning ⊤
];

/**
 * @method "static method_._<«_‡,»>,⁇on failure do_"
 * @restricts "pojo's type's type"
 * @restricts "string's type"
 * @restricts "<any's type…|>'s type"
 * @restricts "[pojo exception]→⊤'s type"
 */
Semantic restriction "static method_._<«_‡,»>,⁇on failure do_" is
[
	pojoMeta : pojo's type's type,
	methodName : string's type,
	parameterTypes : <any's type…|>'s type,
	failFunction : [pojo exception]→⊤'s type
|
	args : <any's type…|> := <>;
	From 1 to ⎡parameterTypes⎤ do
	[
		index : natural number
	|
		arg ::= parameterTypes[index]'s instance;
		args := eject ↑args ++ <arg>;
	];
	function accepting args and returning ⊤
];

/**
 * @method "_[_]"
 * @restricts "pojo array's type"
 * @restricts "natural number's type"
 */
Semantic restriction "_[_]" is
[
	arrayType : pojo array's type,
	index : natural number's type
|
	arrayType's element type
];

/**
 * @method "_→tuple"
 * @restricts "pojo's array's type"
 */
Semantic restriction "_→tuple" is
[
	arrayType : pojo array's type
|
	<<>, arrayType's element type… | ||arrayType||>
];
