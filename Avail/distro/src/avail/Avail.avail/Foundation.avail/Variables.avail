/*
 * Variables.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Variables"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Early Variables"
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Definers",
	"Early Logic",
	"Early Math",
	"Enumeration Support",
	"Literals"
Names
	/* Dynamic variable creation. */
	"(↓new`↑_:=_)",
	"(↓new`↑_`?=_)",

	/* Automatically quoted increment/decrement. */
	"_↑++",
	"++_↑",
	"(_↑++)",
	"(++_↑)",
	"_↑--",
	"--_↑",
	"(_↑--)",
	"(--_↑)",

	/* Dynamic increment/decrement. */
	"_++",
	"++_",
	"(_++)",
	"(++_)",
	"_--",
	"--_",
	"(_--)",
	"(--_)",

	/* Variable assignment. */
	"_is assigned",
	"_↑is assigned",
	"_↑is unassigned",
	"↓_else_"
Body

/**
 * @method "↓_"
 * @restricts "variable meta"
 */
Semantic restriction "↓_" is
[
	varType : variable meta
|
	varType's read type
];

Private method "eject restriction function" is
[
	[
		varType : variable meta
	|
		varType's read type
	]
];

/**
 * @method "eject_↑"
 * @restricts "variable meta"
 */
Semantic restriction "eject_↑" is eject restriction function;

/**
 * @method "eject_"
 * @restricts "variable meta"
 */
Semantic restriction "eject_" is eject restriction function;

/**
 * Is the specified variable unassigned?
 *
 * @method "_↑is unassigned"
 * @category "Primitives" "Variables"
 * @param "var" "variable"
 * @returns "boolean"
 *    {@method "true"} if the variable does not contain a value, {@method
 *    "false"} otherwise.
 */
Public method "_↑is unassigned" is
[
	var : variable
|
	Primitive 17;
] : boolean;

/**
 * Does the specified variable contain a value?
 *
 * @method "_is assigned"
 * @category "Variables"
 * @param "var" "variable"
 * @returns "boolean"
 *    {@method "true"} if the variable contains a value, {@method "false"}
 *    otherwise.
 */
Public method "_is assigned" is [var : variable | ¬var is unassigned];

/**
 * Does the specified variable contain a value?
 *
 * @method "_is assigned"
 * @category "Variables"
 * @param "var" "variable"
 * @returns "boolean"
 *    {@method "true"} if the variable contains a value, {@method "false"}
 *    otherwise.
 */
Public method "_↑is assigned" is [var : variable | ¬var is unassigned];

Private method "swap semantic restriction" is
[
	[
		typeA : variable meta,
		typeB : variable meta
	|
		if typeA's read type ⊆ typeB's write type
			∧ [ typeB's read type ⊆ typeB's write type ]
		then [⊤]
		else
		[
			Reject parse, expected:
				"variable's read/write types to be cross-compatible"
		]
	]
];

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 * 
 * @method "Swap_and_"
 * @restricts "variable meta"
 * @restricts "variable meta"
 */
Semantic restriction "Swap_and_" is swap semantic restriction;

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 * 
 * @method "Swap_and_"
 * @restricts "variable meta"
 * @restricts "variable meta"
 */
Semantic restriction "Swap_↑and_↑" is swap semantic restriction;

/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new`↑_:=_)"
 * @category "Variables"
 * @param "containmentType" "any meta"
 *         The containment type.
 * @param "initialValue" "any"
 *        The initial value.
 * @returns "variable"
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new`↑_:=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	var ?= initialValue;
	var
] : variable;

/**
 * Reject the current parse if the variable type does not accept the initial
 * value.
 * 
 * @method "(↓new`↑_:=_)"
 * @restricts "any meta's type"
 * @restricts "any meta"
 */
Semantic restriction "(↓new`↑_:=_)" is
[
	containmentMeta : any meta's type,
	valueType : any meta
|
	If ¬valueType's type ⊆ containmentMeta then
	[
		messageTuple ::= concatenate <
			"containment type (",
			“containmentMeta”,
			" to support initial value (",
			“valueType”,
			")">;
		Reject parse, expected: cast messageTuple into [t : string | t]
	];
	⊤
];

/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new`↑_`?=_)"
 * @category "Variables"
 * @param "containmentType" "any meta"
 * @param "initialValue" "any"
 * @returns "variable"
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new`↑_`?=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	var ?= initialValue;
	var
] : variable;

Private method "increment function" is
[
	[
		var : number→/→⊥
	|
		var ?= ↓var + 1;
	] : ⊤
];

Private method "increment/decrement semantic restriction" is
[
	[
		varType : (number→/→⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		⊤
	]
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "_↑++"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_↑++" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "_↑++"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "_↑++" is increment/decrement semantic restriction;

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "_++"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_++" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "_++"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "_++" is increment/decrement semantic restriction;

Private method "valued post-increment function" is
[
	[
		var : number→/→⊥
	|
		value ::= eject var;
		var ?= value + 1;
		value
	] : ⊤
];

Private method "valued post-increment semantic restriction" is
[
	[
		varType : (number→/→⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		varType's read type
	]
];

/**
 * Remember the current value of the specified variable, increment the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_↑++)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the increment.
 */
Public method "(_↑++)" is valued post-increment function;

/**
 * Since the increment happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_↑++)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(_↑++)" is valued post-increment semantic restriction;

/**
 * Remember the current value of the specified variable, increment the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_++)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the increment.
 */
Public method "(_++)" is valued post-increment function;

/**
 * Since the increment happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_++)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(_++)" is valued post-increment semantic restriction;

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "++_↑"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "++_↑" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "++_↑"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "++_↑" is increment/decrement semantic restriction;

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "++_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "++_" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "++_"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "++_" is increment/decrement semantic restriction;

Private method "valued pre-increment function" is
[
	[
		var : number→/→⊥
	|
		var ?= ↓var + 1;
		↓var
	]
];

Private method "valued pre-increment semantic restriction" is
[
	[
		varType : (number→/→⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		readType ::= varType's read type;
		if readType ⊆ extended integer then
		[
			readRange ::= cast readType into [ t : extended integer meta | t ];
			lower ::= ⎣readRange⎦ + 1;
			upper ::= ⎡readRange⎤ + 1;
			integer range
				from lower (inclusive = ⎣readRange⎦ is inclusive)
				to upper (inclusive = ⎡readRange⎤ is inclusive)
		]
		else
		[
			readType
		]
	]
];

/**
 * Increment the specified value and answer its new value.
 * 
 * @method "(++_↑)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument after the increment.
 */
Public method "(++_↑)" is valued pre-increment function;

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by one.
 * 
 * @method "(++_↑)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(++_↑)" is valued pre-increment semantic restriction;

/**
 * Increment the specified value and answer its new value.
 * 
 * @method "(++_)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument after the increment.
 */
Public method "(++_)" is valued pre-increment function;

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by one.
 * 
 * @method "(++_)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(++_)" is valued pre-increment semantic restriction;

/**
 * Answer a function that accepts a variable and decrements it.
 * 
 * @method "decrement function"
 * @category "Variables"
 * @param "var" "variable"
 * @returns "[variable]→⊤"
 *    The requested function.
 */
Private method "decrement function" is
[
	[
		var : number→/→⊥
	|
		var ?= ↓var - 1;
	] : ⊤
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * @method "_↑--"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_↑--" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "_↑--"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "_↑--" is increment/decrement semantic restriction;

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * @method "_--"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "_--" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "_--"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "_--" is increment/decrement semantic restriction;

Private method "valued post-decrement function" is
[
	[
		var : number→/→⊥
	|
		value ::= eject var;
		var ?= value - 1;
		value
	]
];

Private method "valued post-decrement semantic restriction" is
[
	[
		varType : (number→/→⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		varType's read type
	]
];

/**
 * Remember the current value of the specified variable, decrement the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_↑--)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the decrement.
 */
Public method "(_↑--)" is valued post-decrement function;

/**
 * Since the decrement happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_↑--)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(_↑--)" is valued post-decrement semantic restriction;

/**
 * Remember the current value of the specified variable, decrement the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_--)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *    The value of the argument prior to the decrement.
 */
Public method "(_--)" is valued post-decrement function;

/**
 * Since the decrement happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_--)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(_--)" is valued post-decrement semantic restriction;

/**
 * Decrement the variable by one. This is intended for use as a statement.
 *
 * @method "--_↑"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "--_↑" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "--_↑"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "--_↑" is increment/decrement semantic restriction;

/**
 * Decrement the variable by one. This is intended for use as a statement.
 *
 * @method "--_"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "⊤"
 */
Public method "--_" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "--_"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "--_" is increment/decrement semantic restriction;

Private method "valued pre-decrement function" is
[
	[
		var : number→/→⊥
	|
		var ?= ↓var - 1;
		↓var
	]
];

Private method "valued pre-decrement semantic restriction" is
[
	[
		varType : (number→/→⊥)'s type
	|
		If ¬varType's write type ⊆ number then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		readType ::= varType's read type;
		if readType ⊆ extended integer then
		[
			readRange ::= cast readType into [ t : extended integer meta | t ];
			lower ::= ⎣readRange⎦ - 1;
			upper ::= ⎡readRange⎤ - 1;
			integer range
				from lower (inclusive = ⎣readRange⎦ is inclusive)
				to upper (inclusive = ⎡readRange⎤ is inclusive)
		]
		else
		[
			readType
		]
	]
];

/**
 * Decrement the specified value and answer its new value.
 *
 * @method "(--_↑)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *           The value of the argument after the decrement.
 */
Public method "(--_↑)" is valued pre-decrement function;

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by negative
 * one.
 * 
 * @method "(--_↑)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(--_↑)" is valued pre-decrement semantic restriction;

/**
 * Decrement the specified value and answer its new value.
 *
 * @method "(--_)"
 * @category "Variables" "Mathematics" "Integers"
 * @param "var" "number→/→⊥"
 *        A numeric variable.
 * @returns "number"
 *           The value of the argument after the decrement.
 */
Public method "(--_)" is valued pre-decrement function;

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by negative
 * one.
 * 
 * @method "(--_)"
 * @restricts "(number→/→⊥)'s type"
 */
Semantic restriction "(--_)" is valued pre-decrement semantic restriction;

/* Disallow the variable increment/decrement operations from appearing as the
 * argument to parentheses.
 */
Invoke
[
	parens ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	forbid ::=
		cast
			<
				"_↑++", "++_↑", "(_↑++)", "(++_↑)",
				"_↑--", "--_↑", "(_↑--)", "(--_↑)"
			>→set
		into [ t : {string|whole number} | t ];
	Grammatical restriction parens is <forbid>;
]
with <>;

/**
 * If {@param "var"} is assigned, then answer its contents. Otherwise, apply
 * {@param "else"} and answer its result.
 *
 * @method "↓_else_"
 * @category "Variables"
 * @param "var" "variable"
 *        A {@type "variable"}.
 * @param "else" "[]→any"
 *        A function that is applied only if {@param "var"} is unassigned.
 * @returns "any"
 *          Either the content of {@param "var"} or the result of applying
 *          {@param "else"}.
 */
Public method "↓_else_" is
[
	var : variable,
	else : function accepting <> and returning any
|
	if var is assigned then [↓var] else else
] : any;

/**
 * @method "↓_else_"
 * @restricts "variable meta"
 * @restricts "(function accepting <> and returning any)'s type"
 */
Semantic restriction "↓_else_" is
[
	varType : variable meta,
	else : (function accepting <> and returning any)'s type
|
	varType's read type ∪ else's return type
];

/* This is always invalid, so we might as well forbid it early. */
Grammatical restriction {"`↑_↑"} is <{"`↑_↑"}>;

/*
 * Don't allow explicit quoting to compose with unquoted operators.
 */

Grammatical restriction
{
	"Clear_",
	"Clear_↑",
	"eject_",
	"eject_↑",
	"_++",
	"++_",
	"(_++)",
	"(++_)",
	"_--",
	"--_",
	"(_--)",
	"(--_)",
	"_is assigned",
	"_↑is assigned",
	"_is unassigned",
	"_↑is unassigned"
} is <{"`↑_↑"}>;

Grammatical restriction {"Swap_↑and_↑"} is <{"`↑_↑"}, {"`↑_↑"}>;
Grammatical restriction
{
	"atomically read_↑and store_",
	"atomically read_↑and add_",
	"_↑`?=_",
	"_↑`?=_'s⁇initialization"
} is <{"`↑_↑"}, ∅>;

Grammatical restriction {"atomically compare_to_and,⁇if equal,⁇store_"} is
	<{"`↑_↑"}, ∅, ∅>;
