/*
 * Categories.avail
 * Copyright Â© 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Categories"
Versions
"dev"
Body

/**
 * An assertion is a sincere, executable comment that 
 * documents a program precondition, postcondition, invariant, or other 
 * behavioral assumption. Probably only appropriate for program elements in 
 * /avail/Avail/Foundation/Assertions.
 * @category "Assertions"
 */

/**
 * I/O operations that do not block the calling fiber.
 * @category "Asynchronous I/O"
 */

/**
 * An atom is a discrete unit of identity, and may have mutable, potentially fiber-heritable properties.
 * @category "Atoms" 
 */

/**
 * Computational backtracking. Probably only appropriate for program elements in /avail/Avail/Foundation/Backtracking.
 * @category "Backtracking" 
 */

/**
 * Bootstrap functionality. This category should not appear on the website.
 * @category "Bootstrap"
 */

/**
 * Dynamic type strengthening.
 * @category "Casts"
 */

/**
 * Abstract (i.e., type neutral) aggregate data management.
 * @category "Collections"
 */

/**
 * Access to the current fiber, Inter-fiber communication, concurrent control structures, and synchronization devices.
 * @category "Concurrency"
 */

/**
 * Conditional control structures.
 * @category "Conditionals"
 */

/**
 * Producing a value from one or more values that specify the (immutable) composition or (mutable) state of the result.
 * @category "Constructors"
 */

/**
 * Methods focused on continuations and labels.
 * @category "Continuations"
 */

/**
 * Conditionals, loops, early exits, and other serial constructs that influence a fiber's flow of control.
 * @category "Control Structures"
 */

/**
 * Converting between similar values of different kinds.
 * @category "Conversions"
 */

/**Data structures and abstractions.
 * @category "Data Abstractions"
 */

/**A declaration causes a program element to become available under a given name.
 * @category "Declarations"
 */

/**
 * Dimensions and units, dimensioned quantities, etc.
 * @category "Dimensional Analysis"
 */

/**
 * Methods focused on enumerations and instance types.
 * @category "Enumerations"
 */

/**
 * Raising and handling exceptions.
 * @category "Exception Handling"
 */

/**
 * Named failure conditions that participate in nonlocal recovery and propagation.
 * @category "Exceptions"
 */

/**
 * Interacting with file systems, files, file principals, etc.
 * @category "File Systems"
 */

/**
 * Application and partial application of functions.
 * @category "Function Application"
 */

/**
 * Methods focused on function implementations. Subtypes of function implementation.
 * @category "Function Implementations"
 */

/**
 * A future is a proxy for an operation that may not have completed yet.
 * @category "Futures"
 */

/**
 * Methods focused on extended integers and integers. Subtypes of extended integer.
 * @category "Integers"
 */

/**
 * Logical operators.
 * @category "Logic"
 */

/**
 * Loop control structures.
 * @category "Loops"
 */

/**
 * Methods focused on maps. Subtypes of map.
 * @category "Maps"
 */

/**
 * Numeric constants and arithmetic operations.
 * @category "Mathematics"
 */

/**
 * Methods focused on methods.
 * @category "Methods"
 */

/**
 * Sockets, IP addresses, network protocols, etc.
 * @category "Networking"
 */

/**
 * Methods focused on numbers. Subtypes of number.
 * @category "Numbers"
 */

/**
 * Methods focused on objects. Subtypes of object.
 * @category "Objects"
 */

/**
 * Automatic observing of assignments to variables within transactional boundaries.
 * @category "Observing"
 */

/**
 * Methods focused on phrases. Subtypes of phrase.
 * @category "Phrases"
 */

/**
 * Plain old Java objects. interaction with the Java programming language and libraries.
 * @category "POJO"
 */ 

/**
 * A primitive is provided by the Avail virtual machine, not the Avail standard library. Applies to any method implementation that has a Primitive statement as the first line following the (optional) argument section. Also applies to any special object.
 * @category "Primitives"
 */

/**
 * Interrogating the state of a value.
 * @category "Queries"
 */

/**
 * Relational operators.
 * @category "Relations"
 */

/**
 * Methods focused on sets. Subtypes of set.
 * @category "Sets"
 */

/**
 * Interacting with the virtual machine's standard input, output, and error streams.
 * @category "Standard I/O"
 */

/**
 * Generating printable representations of values.
 * @category "Stringification"
 */

/**
 * Methods focused on strings. Subtypes of string.
 * @category "Strings"
 */

/**
 * Synchronization devices.
 * @category "Synchronization"
 */

/**
 * I/O operations that block the calling fiber.
 * @category "Synchronous I/O"
 */

/**
 * Deriving a value from a similar value and one or more other values. This is essentially the functional equivalent of a mutator (setter).
 * @category "Transformers"
 */

/**
 * Methods focused on tuples. Subtypes of tuple.
 * @category "Tuples"
 */

/**
 * Methods focused on types. Types and metatypes.
 * @category "Types"
 */

/**
 * Unicode support, character classification, conversion between characters and code points, etc.
 * @category "Unicode"
 */

/**
 * Declaration of test suites and test cases. Tools for writing test cases. Running test suites.
 * @category "Unit Testing"
 */

/**
 * Methods focused on variables. Subtypes of variable.
 * @category "Variables"
 */
