/*
 * Combinatorics.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Combinatorics"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Foundation"
Names
	"_`!"
Body

[
	sum      ::= {"_+_", "_-_"};
	product  ::= {"_×_", "_÷_", "_mod_"};
	negation ::= {"-_"};
	power    ::= {"_^_"};
	fac      ::= {"_`!"};

	/**
	 * Establish the precedence of factorial. 
	 * 
	 * @method "_`!"
	 * @forbids 1 "_+_" "_-_" "_×_" "_÷_" "_mod_" "-_" "_^_" "_`!"
	 */
	Grammatical restriction fac is <sum ∪ product ∪ negation ∪ power ∪ fac>;
]();

/**
 * Compute the factorial of {@param "n"}.
 *
 * @method "_`!"
 * @param "n" "whole number"
 * @returns "natural number"
 *          The factorial of {@param "n"}.
 */
Stable abstract method "_`!" is [[0..∞]]→[1..∞];

Method "_`!" is [n : [0..1] | 1];

Method "_`!" is
[
	n : [2..∞)
|
	left fold 2 to n through [k : [2..∞), s : [2..∞) | k × s]
];

Method "_`!" is [n : ∞'s type | ∞];

/**
 * @method "_`!"
 * @restricts "[0..∞]'s type"
 */
Semantic restriction "_`!" is [n : [0..∞]'s type | [⎣n⎦!..⎡n⎤!]];

/**
 * @method "_`!"
 * @restricts "[0..∞)'s type"
 */
Semantic restriction "_`!" is [n : [0..∞)'s type | [⎣n⎦!..⎡n⎤!+1)];
