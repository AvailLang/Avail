/*
 * Synchronous.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Synchronous"
Versions
	"1.0.0 DEV 2014-04-28"
Extends
	"Common" = ("Write_to_", "read«at most»?_byte|bytes from_")
Uses
	"Address",
	"Foundation",
	"Primitives"
Names
	/* Connection. */
	"Connect_to_"
Body

/**
 * Synchronously connect a {@type "client socket"} to a remote {@type "socket
 * address"}.
 *
 * @method "Connect_to_"
 * @param "s" "client socket"
 * @param "peerAddress" "socket address"
 * @returns "⊤"
 */
Public method "Connect_to_" is
[
	s : client socket,
	peerAddress : socket address
|
	semName ::= format "connect semaphore for ‘①’" with s's name;
	sem ::= a semaphore named semName with 0 out of 1 permits;
	killer : exception;
	Ignore: a fiber connecting s to peerAddress,
		on success doing [Signal sem;]
		on failure doing [e : exception | killer := e; Signal sem;];
	Await sem;
	If killer is assigned then [Raise killer];
] : ⊤;

/**
 * Synchronously write data to a {@type "client socket"}.
 *
 * @method "Write_to_"
 * @param "data" "byte*"
 * @returns "⊤"
 */
Method "Write_to_" is
[
	data : byte*,
	s : client socket
|
	semName ::= format "write semaphore for ‘①’" with s's name;
	sem ::= a semaphore named semName with 0 out of 1 permits;
	killer : exception;
	Ignore: a fiber writing data to s,
		on success doing [Signal sem;]
		on failure doing [e : exception | killer := e; Signal sem;];
	Await sem;
	If killer is assigned then [Raise killer];
] : ⊤;

/**
 * Synchronously read data from a {@type "client socket"}.
 *
 * @method "read«at most»?_byte|bytes from_"
 * @param "soft" "boolean"
 *        If {@method "true"}, then {@param "count"} is treated "softly". In
 *        this case, the operation will return data as soon as data becomes
 *        available, even if fewer than {@param "count"} bytes were read.
 *        Otherwise, hold out for either {@param "count"} bytes to become
 *        available or end-of-stream to be reached.
 * @param "count" "whole number"
 *        The maximum number of bytes to read from the connection.
 * @param "s" "client socket"
 * @returns "byte*"
 */
Method "read«at most»?_byte|bytes from_" is
[
	soft : boolean,
	count : whole number,
	s : client socket
|
	semName ::= format "read semaphore for ‘①’" with s's name;
	sem ::= a semaphore named semName with 0 out of 1 permits;
	data : byte* := <>;
	killer : exception;
	endOfStream : boolean := false;
	Until
	[
		remaining ::= cast count - |data| into [t : whole number | t];
		Ignore: a fiber reading remaining bytes from s,
			on success doing
			[
				justRead : byte*,
				atEnd : boolean
			|
				If atEnd then [endOfStream := true;]
				else [data := eject data ++ justRead;];
				Signal sem;
			]
			on failure doing [e : exception | killer := e; Signal sem;];
		Await sem;
		If killer is assigned then [Raise killer];
		soft ∨ endOfStream ∨ |data| = count
	];
	data
] : byte*;
