/*
 * File Open Options.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "File Open Options"
Versions
	"dev"
Uses
	"Foundation"
Names
	"open option",

	/* File open options. */
	"append",
	"create",
	"create new",
	"delete on close",
	"read",
	"sparse",
	"synchronize all",
	"synchronize data",
	"truncate existing",
	"write"
Body

/**
 * Answer the {@type "atom"} that indicates a file opened for writing should be
 * initially positioned at the end.  This is irrelevant, since files have no
 * current position.  However, file iterators may respect this flag.
 *
 * @method "append"
 * @returns "open option"
 */
Public "append" is a new atom;

/**
 * Answer the {@type "atom"} that indicates a file opened for writing should be
 * created if it does not yet exist.
 *
 * @method "create"
 * @returns "open option"
 */
Public "create" is a new atom;

/**
 * Answer the {@type "atom"} that an attempt to open the file for writing should
 * fail if it already exists.  If the file did not exist, a new file should be
 * created.
 *
 * @method "create"
 * @returns "open option"
 */
Public "create new" is a new atom;
Public "delete on close" is a new atom;
Public "read" is a new atom;
Public "sparse" is a new atom;
Public "synchronize all" is a new atom;
Public "synchronize data" is a new atom;
Public "truncate existing" is a new atom;
Public "write" is a new atom;

_open_option ::= {
	append,
	create,
	create new,
	delete on close,
	read,
	sparse,
	synchronize all,
	synchronize data,
	truncate existing,
	write
}ᵀ;

Public method "open option" is [_open_option];
