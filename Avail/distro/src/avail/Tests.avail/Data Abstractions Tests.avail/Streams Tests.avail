/*
 * Streams Tests.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Streams Tests"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Common"

Names
	"streams test suite"
Body

/* The test suite identifier. */
"streams test suite" is a new atom;

New test suite streams test suite extends data abstractions test suite;

Test "for each of do" in streams test suite is
[
	a ::= a stream over <1,2,3,4>;
	b : tuple := <>;
	For each of a do [n : natural number | b ++= <n>;];
	Require: b = <1,2,3,4>;
];

Test "macro for each of do" in streams test suite is
[
	a ::= a stream over <1,2,3,4,5>;
	b : natural number* := <>;
	For each element of a do
	[
	 	If element is even then [b := b ++ <element>;];
	];
	Require: b = <2,4>;
];

Test "stream (take from_while_)" in streams test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a counting reader from 1 to 100 limited to 10 elements;
	result ::= take from iter while [n : [1..100] | n ≤ 5];
	For each result do
	[
		element : [1..100]
	|
		Require: element = ref[(index++)];
	];
	Require: iter's current element = 6;
];

Test "stream (take…from_§while_)" in streams test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a counting reader from 1 to 100 limited to 10 elements;
	result ::= take n from iter while [n ≤ 5];
	For each element of result do [Require: element = ref[(index++)];];
	Require: iter's current element = 6;
];

Test "stream (take from_until_)" in streams test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a counting reader from 1 to 100 limited to 10 elements;
	result ::= take from iter until [n : [1..100] | n ≥ 6];
	For each element of result do [Require: element = ref[(index++)];];
	Require: iter's current element = 6;
];

Test "stream (take…from_§until_)" in streams test suite is
[
	ref ::= 1 to 5;
	index : natural number := 1;
	iter ::= a counting reader from 1 to 100 limited to 10 elements;
	result ::= take n from iter until [n ≥ 6];
	For each element of result do [Require: element = ref[(index++)];];
	Require: iter's current element = 6;
];