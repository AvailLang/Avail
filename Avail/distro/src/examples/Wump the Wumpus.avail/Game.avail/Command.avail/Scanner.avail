/*
 * Scanner.avail
 * Copyright © 1993-2015, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Scanner"
Versions
	"1.0.0 DEV 2014-04-28"
Uses
	"Avail"
Names
	/* Token types. */
	"command token",
	"number token",
	"string token",

	/* Tokenization. */
	"tokenize_",

	/* Exceptions. */
	"runaway-string exception"
Body

/**
 * A runaway-string exception is raised by {@method "tokenize_"} when an
 * unterminated quoted string is encountered.
 *
 * @type "runaway-string exception"
 * @supertype "exception"
 */
Public explicit class "runaway-string exception" extends exception;

/**
 * Tokenize the specified string. Tokens are 1) sequences of letters, 2)
 * sequences of Arabic numerals, or 3) individual nonwhitespace characters.
 * Ignore whitespace.
 *
 * @method "tokenize_"
 * @param "s" "string"
 *        The {@type "string"} to tokenize.
 * @return "<nonempty string…|>"
 *         A tuple of tokens.
 * @raises "runaway-string exception"
 *         If {@param "s"} includes an unterminated quoted string.
 */
Public method "tokenize_" is
[
	s : string
|
	tokens : <nonempty string…|> := <>;
	i : natural number := 1;
	Until i > |s| do
	[
		/* Ignore whitespace. */
		While s[i] is whitespace do [i++;];
		If i ≤ |s| then
		[
			/* Remember where the current token began. */
			tokenStart ::= i;
			c ::= s[i];
			/* Consecutive letters constitute a token. */
			If c is a letter then
			[
				While [i++; i ≤ |s| ∧ s[i] is a letter];
			]
			/* Consecutive Arabic numerals constitute a token. */
			else if [c is an Arabic numeral] then
			[
				While [i++; i ≤ |s| ∧ s[i] is an Arabic numeral];
			]
			/* A string token begins and ends with a quotation mark ("). */
			else if [c = ¢"\""] then
			[
				While [i++; i ≤ |s| ∧ s[i] ≠ ¢"\""];
				i++;
				/* "_[_]else_" is less strict about the subscript, saving us a
				 * cast here. Characters and numbers are disjoint, so zero (0)
				 * is a good default value here (as the logic around it will
				 * cause the exception to be raised).
				 */
				If s[i-1] else [0] ≠ ¢"\"" then
				[
					Raise a runaway-string exception
				];
			]
			/* Any other character is considered a token. */
			else
			[
				i++;
			];
			/* The new token ranges from the remembered start position up to the
			 * current index (exclusive). Copy the appropriate slice of the
			 * source string and append it to the tuple of tokens.
			 */
			t ::= cast s[tokenStart..i-1] into [x : nonempty string | x];
			tokens ++= <t>;
		];
	];
	tokens
] : <nonempty string…|>;
