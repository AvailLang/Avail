/**
 * BMI Calculator.avail
 * Copyright (c) 2011, Richard Arriaga.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "BMI Calculator"
Extends
Uses
	"Kernel"
Names
Body


Method "⊤" is [ void; ];

/* The BMI Calculator is take from the assignment 2.33 in Java How to Program
 *
 * This program utilizes 5 methods to run:
 * 	1) "Print_" - prints a string to the console
 *
 *	2) "Ask for_with the question,_" - Prompts a user with a question (2nd arg)
 *		and accepts console input that is stored as a string and then converted
 *		to the type indicated in first argument.  Currently this method can 
 *		handle integers ("an integer" method that returns integer type), floats 
 *		("a float" a method that returns float type ), and string ("a string" 
 *		method that returns string type).  
 * 		  For example:
 *			Ask for an integer with the question, "Please enter an integer: ";
 *		will prompt the user on the console with the question:
 *			"Please enter an integer: "
 * 		The response entered by the user will then be converted into an integer.
 *		If the user does not provide the required type as indicated in the
 *		the method, the user will automatically be prompted for a new input
 *		after clarification of the input requirement.
 *
 *	3) "Loop_until_do" - An Avail continuation that loops through a block
 *		(first argument - a function) until a condition is met (second argument, 
 *		a boolean). Each time the condition is not met in the second argument, 
 *		an action defined by the third argument (a block/function) is performed 
 *		(once condition is met, the "do" action is not performed).
 *
 *	4)  "«if_then_‡else»else_" - An Avail control structure that checks the
 *		conditions to see if a boolean of true is returned.  Once a true 
 *		statement is located, the following block is implemented.  The outcome
 *		of this control structure can be stored in a variable (even functions!).
 *		The "else if_then_" portion of this control structure can be repeated
 *		an infinite number of times.
 *
 *	5)	"_as float" - converts any number to a floating point number.
 */

Method "Calculate BMI" is
[	
	/* Declare uninitialized variables to hold the weight and height. */
	weightInPounds : integer;
	heightInInches : integer;

	/* Prompt user for the weight in question. */
	Loop 
	[
		/* Prompt user for integer input with provided question */
		weightInPounds := 
			Ask for an integer with the question, "Enter Weight (in pounds): ";
	] until 
	[
		/* Condition to be met for loop to end.  We want the user to have a
		 * positive weight. 
		 */
		weightInPounds >= 0;
	] do 
	[
		/* Print in the event the user enters a negative or 0 weight. */
		Print "Weight must be a positive integer";
	];

	/* Prompt user for the height in question. */

	Loop 
	[
		heightInInches := 
			Ask for an integer with the question, "Enter Height (in inches): ";	
	] until [ 
		heightInInches > 0;
	] do [
		Print "Height must be a positive integer";
	];


	/* Declare and initialize the float bmi with the operations:
	 * 	multiplication, division, and exponentiation.
	 * "as float" converts the integer, 703 to a float.
	 */
	 
	bmi :  float := ((weightInPounds * 703) / (heightInInches^2)) as float;

	/* Print statement.  The "_then_" in this print statement concatenates
	 * the first string, "Your Body Mass Index (BMI) is ", with the second 
	 * string, bmi as basic string.  "_as basic string" converts the float, bmi,
	 * into a string.  A conditional block, "«if_then_‡else»else_", is appended 
	 * to the print statement.  It determines what body type the float, bmi, 
	 * represents by determining which conditional if statement is true. Once
	 * the correct condition is met, a string is returned to be appended to the 
	 * string to be printed. "\n" indicates a new line. 
	 */
	 
	Print "Your Body Mass Index (BMI) is " 
		then bmi as basic string then 
		". " then 
		if bmi < 18.5 then ["You are underweight.\n";]
			else if 18.5 <= bmi < 24.9 then ["You are normal.\n";]
			else if 24.9 <= bmi < 29.9 then ["You are overweight.\n";]
			else ["You are obese.\n";];
	
	/* Print the body type bmi ranges */
	Print "Body Types";
	Print "===================================";
	Print "Underweight: less than 18.5";
	Print "Normal:      between 18.5 and 24.9";
	Print "Overweight:  between 25 and 29.9";
	Print "Obese:       30 or greater\n";
]:⊤;

Calculate BMI;