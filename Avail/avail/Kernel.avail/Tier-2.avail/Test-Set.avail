/**
 * .../Tier-2/Test-Set.avail
 * Copyright Â© 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-Set"
Extends
Uses
	"Tier-1",
	"BlockA",
	"BlockB",
	"Continuation",
	"Set"
Names
Body


[
	/* Test sets a little bit... */
	x : set;
	x := {1,2,3,4};
	x := x with 9;
	Assert x = {9,2,4,3,1};
	x := x without 3 intersect {7,8,2,8,8,8,9,3};
	if x not = {9,2} then [Crash "Problem in 'without' or 'intersect'.";];
	x := x union {7,6};
	if x not = {9,6,2,7} then [Crash "Problem in 'union'.";];
	x := x minus {7,2,3};
	if x not = {9,6} then [Crash "Problem in 'minus'.";];
	if not x <= x then [Crash "Problem in <=.";];
	if not x <= x with 99 then [Crash "Problem in <=.";];
	if not {} <= x then [Crash "Problem in <=.";];
]();

/*
[
	s : set of integer := {};
	From 1 to 10000 do [x : integer |
		s := s with x;
	];
	Assert || s || = 10000;
]();
*/