/**
 * .../Tier-2/Set.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Set"
Extends
Uses
	"Tier-1",
	"BlockA",
	"Number",
	"Tuple"
Names
	"_∈_",
	"_includes_",
	"_union_",
	"_U_",
	"_intersect_",
	"_minus_",
	"_with_",
	"_without_",
	"_<=_"
Body


/* Set manipulation primitives... */

Method "_∈_" is [elem : any, s : set |
	Primitive 101;
] : boolean;

Method "_includes_" is [s : set, elem : any |
	elem ∈ s;
] : boolean;

Method "_union_" is [s1 : set, s2 : set |
	Primitive 102;
] : set;

Restriction "_union_" is [st1 : setType, st2 : setType |
	/* This one's a neat trick.  Let t1 be st1's content type and let t2
	   be st2's content type.  If t1 and t2 have no common subtype
	   except the uninstantiable type terminates, then the sets must
	   be disjoint.  */
	lowerBound ::= if type intersection of st1 content type and (st2 content type)
			= terminates then [
		st1 sizes lower bound + st2 sizes lower bound;
	] else [
		st1 sizes lower bound max st2 sizes lower bound;
	];
	set [lowerBound .. st1 sizes upper bound + st2 sizes upper bound + 1)
		of type union of st1 content type and (st2 content type);
];

Method "_U_" is [s1 : set, s2 : set |
	Primitive 102;
] : set;

Restriction "_U_" is [st1 : setType, st2 : setType |
	/* This one's a neat trick.  Let t1 be st1's content type and let t2
	   be st2's content type.  If t1 and t2 have no common subtype
	   except the uninstantiable type terminates, then the sets must
	   be disjoint.  */
	lowerBound ::= if type intersection of st1 content type and (st2 content type)
			= terminates then [
		st1 sizes lower bound + st2 sizes lower bound;
	] else [
		st1 sizes lower bound max st2 sizes lower bound;
	];
	set [lowerBound .. st1 sizes upper bound + st2 sizes upper bound + 1)
		of type union of st1 content type and (st2 content type);
];

Method "_intersect_" is [s1 : set, s2 : set |
	Primitive 103;
] : set;

Restriction "_intersect_" is [st1 : setType, st2 : setType |
	/* No need to optimize for intersection of content types being terminates, as
	   the canonization of set types already does this. */
	set [0 ..  (st1 sizes upper bound min st2 sizes upper bound) + 1)
		of type intersection of st1 content type and (st2 content type);
];

Method "_minus_" is [s1 : set, s2 : set |
	Primitive 104;
] : set;

Restriction "_minus_" is [st1 : setType, st2 : setType |
	if type intersection of st1 content type and (st2 content type) = terminates then [
		/* No elements could possibly overlap because terminates is uninstantiable. */
		st1;
	] else [
		/* Some elements could overlap. */
		set [(st1 sizes lower bound - st2 sizes upper bound) max 0
				 ..  st1 sizes upper bound + 1)
			of (st1 content type);
	];
];

Method "_with_" is [s : set, element : any |
	Primitive 105;
] : set;

Restriction "_with_" is [st : setType, et : type |
	set [st sizes lower bound .. st sizes upper bound + 2)
		of type union of st content type and et;
];

Method "_without_" is [s : set, element : any |
	Primitive 106;
] : set;

Restriction "_without_" is [st : setType, et : type |
	if type intersection of st content type and et = terminates then [
		/* The element could not be present because terminates is uninstantiable. */
		st;
	] else [
		/* The element could be present. */
		set [(st sizes lower bound - 1) max 0 .. st sizes upper bound + 1)
			of (st content type);
	];
];

Method "_<=_" is [s1 : set, s2 : set |
	/* Answer true iff s1 is a subset of s2. */
	Primitive 107;
] : boolean;


Method "_do_" is [s : set, blk : [terminates]->void |
	s as tuple do [element : any |
		blk apply <element>;
	];
] : void;

Restriction "_do_" is [st : setType, bt : functionType |
	if not st content type <= bt[1] then [
		Fail parse "block requires an instance of "
			then bt[1] as basic string
			then ", but might be passed an instance of "
			then st content type as basic string;];
	void;
];


/* Now set up the precedence levels of the combining operators */

tests			::= {"_includes_" , "_<=_"};
intersections	::= {"_intersect_" , "_minus_"};
unions		::= {"_union_" , "_U_"};
adjustment		::= {"_with_" , "_without_"};

tests			can't have <{},		{}>;
intersections	can't have <unions,	intersections U unions>;
unions		can't have <{},		unions>;
adjustment		can't have <{},		adjustment>;

