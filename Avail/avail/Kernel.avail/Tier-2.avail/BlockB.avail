/**
 * .../Tier-2/BlockB.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "BlockB"
Extends
Uses
	"Tier-1",
	"BlockA",
	"Continuation",
	"Number",
	"Tuple"
Names
	"stub block taking_and applying_to_and argument tuple returning_",
	"name of block invoker",
	"_(«_‡,»)"
Body


/**
 * Block evaluation with a (chevron-group) tuple of arguments...
 */
Method "_(«_‡,»)" is [block : [...]->void, args : tuple |
	block apply args;
] : void;

Restriction "_(«_‡,»)" is [blkType : functionType, argsType : tupleType |
	/* The arguments are a chevron group, so the exact count is known at the
	 * call site.
	 */
	size ::= argsType sizes lower bound;
	Assert size = argsType sizes upper bound;
	if blkType arguments type sizes not = argsType sizes then [
		Fail parse "Argument count could not be determined statically.";];
	From 1 to size do [i : natural number |
		if not argsType[i] <= blkType[i] then [
			Fail parse "Argument #"
				then i as basic string
				then " has the wrong type for this function invocation.";];];
	blkType result;
];


/**
 * Advanced stub building.  This is for when you *need* a block with
 * a particular signature, and it must invoke some code with the
 * arguments bundled in a tuple.
 */
Method "stub block taking_and applying_to_and argument tuple returning_" is [
		argTypes : tuple of type,
		message : atom,
		clientArg : any,
		resultType : type |
	Primitive 71;
] : [...]-> void;

privateInvoker ::= lookup "_apply_";

Method "name of block invoker" is [privateInvoker;];
