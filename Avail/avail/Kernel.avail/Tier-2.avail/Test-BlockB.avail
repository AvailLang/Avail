/**
 * .../Tier-2/Test-BlockB.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-BlockB"
Extends
Uses
	"Tier-1",
	"BlockA",
	"BlockB",
	"Continuation",
	"Number"
Names
Body


/* Test the "_apply_" operation. */

Assert [123] apply <> = 123;
Assert [x : integer | <<x>>] apply <123> = <<123>>;
Assert [x : any, y : any | <<x>,<y>>] apply <"hello", 123> = <<"hello">, <123>>;


/* Test the block evaluation operation "_(«_‡,»)". */

Assert [123]() = 123;
Assert [x : integer | <<x>>] (123) = <<123>>;
Assert [x : any | [y : any | <<x>,<y>>]]("hello")(123) = <<"hello">, <123>>;


/* Test the "cast_into_" method. */

z : integer := 123;
Assert cast z into [x : [100..200] | x] = 123;

/* Test its strengthened result type. */
blockT ::= [cast z into [x : [100..200] | x] otherwise [456]] type;
t ::= blockT result;
Assert t <= [100..456];
Assert 100 type <= t;
Assert 456 type <= t;
Assert 123 type <= t;

/* Test that we can invoke a primitive block which fails. */
addPrim ::= [x : extended integer, y : extended integer |
	Primitive 1 (ignored : whole number);
	1000
] : number;

Assert addPrim(10,20) = 30;
Assert addPrim(INF, -INF) = 1000;
/* Run it enough times to become optimized. */
From 1 to 100 do [x : integer |
	Assert addPrim(INF, -INF) = 1000;
];
