/**
 * .../Tier-3/Console.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Console"
Extends
Uses
	"Tier-3",
	"Date-Time"
Names
	"a string",
	"input character from console",
	"get user input",
	"Ask for_with the question,_",
	"Ask for a number between_and_with the question,_",
	"Ask for a tuple of integers with the question,_"
Body

Method "a string" is [string];

Method "input character from console" is
[
	Primitive 254 (failureCode : natural number);
	Crash "read from console failed"
] : character;


Method "get user input" is [
 
 	stream : string := "";
 	charInput : character;
 	
 	Loop 
 	[
 		charInput := input character from console;

 		if charInput not = $"\n" then [ stream := stream then <charInput>;];
 	] until
 	[
 		charInput = $"\n"
 	];
 	
 	stream
 ]:string;

/** A function that queries a user for an input of a specific type.
 *  Currently the function can handle integers, floats, strings and defaults
 *  to a string.  Syntax to obtain:
 *		1) integer - integer or an integer
 *			ex: Ask for an integer with the question "give me integer:";
 *		2) float - float or a float
 *			ex: Ask for an integer with the question "give me float:";
 *		3) date - date or a date (must be of form YYYY-MM-DD)
 *			ex: Ask for a date with the question "give me date:";
 *		4) string - string or a string
 *			ex: Ask for a string with the question "give me string:"; 
 */
Forward "Ask for_with the question,_" for [type, string] -> any;
 
Method "Ask for_with the question,_" is
[
	inputType : type,
	question : string
|
	Print question;
	
	stream : string := get user input;
	
	Switch inputType
		case string do
		[
			stream
		]:
		case integer do
		[
			catch 
			[ 
				e : Invalid Numeral 
			|
				Print "The prompt requires an integer input. " then stream then 
					" is not an integer.\n";  
				Ask for an integer with the question, question
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Ask for an integer with the question, question
			] in
			[
				convert stream to an integer
			]
		]:
		case float do
		[
			catch 
			[ 
				e : Invalid Numeral 
			|
				Print "The prompt requires a decimal number input. " then 
				stream then " is not a decimal number.\n";  
				Ask for a float with the question, question
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Ask for an integer with the question, question
			] in
			[
				convert stream to a float
			]

		]:
		case date do
		[
			catch 
			[ 
				e : Invalid Date Format 
			|
				Print "The prompt requires an input of a date of" then
				" the format YYYY-MM-DD, where:\n" then 
				"	YYYY is a four digit year integer\n" then
				"	MM is a two digit month integr from 01 through 12\n" then
				"	DD is a two digit day integer from 01 through 31\n";
				 
				Print stream then " is not a properly formated date.\n";  
				
				Ask for a date with the question, question
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Ask for an integer with the question, question
			] in
			[
				convert stream of form YYYY-MM-DD to a date
			]
		]:
		default
		[
			Crash "Invalid type.  Can't ever get here.\n"
		]
]:any;

Restriction "Ask for_with the question,_" is
[
	inputTypeType : any type type,
	questionType : string type
|
	availableTypes : set := {string type,integer type,float type,date type};

	if not (availableTypes includes inputTypeType)
	then [Fail parse "The method, 'Ask for_with the question,_', does " then
				"not support the type" then inputTypeType as basic string
				then "\n"];

	inputTypeType instance
];

Method "Ask for a number between_and_with the question,_" is
[
	bound1 : integer,
	bound2 : integer,
	question : string
|
	upperBound : integer;
	lowerBound : integer;
	userInput : integer;
	
	if bound1 < bound2 then 
	[
		upperBound := bound2;
		lowerBound := bound1;
	] else
	[
		upperBound := bound1;
		lowerBound := bound2;
	];

	Loop 
	[
		userInput := Ask for an integer with the question, question;
	] until
	[
		lowerBound <= userInput <= upperBound
	] do
	[
		Print userInput as basic string then " is not a valid response\n";
	];
	
	userInput
]:integer;

Forward "Ask for a tuple of integers with the question,_" for 
	[string] -> <integer…|0..∞>;

Method "Ask for a tuple of integers with the question,_" is
[
	question : string
|
	$method;
	Print question;
	
	stream : string := get user input;
	strmSize : whole number := ||stream||;
	tempTupleResult : <integer…|0..∞> := <>;
	
	if strmSize > 1 then
	[

		blanks : <natural number…|0..∞> := 
			all indexes of stream where [ ch : character | ch = $" "];
		if ||blanks|| = 0 then 
		[
			input : integer;
			catch 
			[ 
				e : Invalid Numeral 
			|
				Print "The prompt requires a set of integers as input. " then
					stream then " contains a non-integer.\n";
				Restart method
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Restart method
			] in
			[
				input := convert stream to an integer;
				tempTupleResult := tempTupleResult then <input>; 
			];
			<input>
		]
		else 
		[
			start : natural number := 1;
			lastInput : integer;
			input : integer;
			
		
			blanks do
			[
				b : natural number
			|
				catch 
				[ 
					e : Invalid Numeral 
				|
					Print "The prompt requires a set of integers as input. " then
						stream then " contains a non-integer.\n";
					Restart method
				],
				[
					e : Invalid Character
				|
					Print "The input received, " 
						then stream then 
						" contains invalid characters.\n";
					Restart method
				] in
				[
					input := convert (stream[start..b-1]) to an integer;
				];
				tempTupleResult := tempTupleResult then <input>;
				start := b + 1;
			];
			lastLower : natural number := 
				blanks[cast ||blanks|| into [n : natural number | n]] + 1;
			lastUpper : natural number := 
				cast strmSize into [n : natural number | n];

			catch 
			[ 
				e : Invalid Numeral 
			|
				Print "The prompt requires a set of integers as input. " then
					stream then " contains a non-integer.\n";
				Restart method
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Restart method
			] in
			[			
				lastInput := 
					convert (stream[lastLower..lastUpper]) to an integer;
			];
			tempTupleResult := tempTupleResult then <lastInput>;
		];
	] else
	[
		catch 
			[ 
				e : Invalid Numeral 
			|
				Print "The prompt requires a set of integers as input. " then
					stream then " contains a non-integer.\n";
				Restart method
			],
			[
				e : Invalid Character
			|
				Print "The input received, " 
					then stream then 
					" contains invalid characters.\n";
				Restart method
			] in
			[
				input : integer := convert stream to an integer;
				tempTupleResult := tempTupleResult then <input>;
			];
	];
	tempTupleResult
]:<integer…|0..∞>;