/**
 * .../Tier-2/Character.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Character"
Extends
Uses
	"Tier-1",
	"Container",
	"Continuation",
	"Integer",
	"Set",
	"Tuple"
Names
	"_is letter",
	"_is uppercase",
	"_is lowercase",
	"uppercase_",
	"lowercase_"
Body

/*
	(1 to: 65535) select: [:x | (Character value: x) isLetter and: [(Character value: x - 1) isLetter not]]
	#(65 97 192 216 248 12352 13312 65136 65313 65345 65377)

	(0 to: 65535) select: [:x | (Character value: x) isLetter and: [(Character value: x + 1) isLetter not]]
	#(90 122 214 246 8191 12799 59391 65277 65338 65370 65503)

	(1 to: 65535) select: [:x |
		| c c2 | c := x asCharacter.  c2 := (x - 1) asCharacter.
		(c isLetter & c isUppercase) and: [(c2 isLetter & c2 isUppercase) not]]
	#(65 192 216 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 313 315 317 319 321 323 325 327 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 379 381 385 388 390 393 398 403 406 412 415 418 420 423 425 428 430 433 437 439 444 452 455 458 461 463 465 467 469 471 473 475 478 480 482 484 486 488 490 492 494 902 904 908 910 913 931 978 986 988 990 992 994 996 998 1000 1002 1004 1006 1025 1038 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1217 1219 1221 1223 1225 1227 1329 4256 65313)

	(0 to: 65535) select: [:x |
		| c c2 | c := x asCharacter.  c2 := (x + 1) asCharacter.
		(c isLetter & c isUppercase) and: [(c2 isLetter & c2 isUppercase) not]]
	#(90 214 222 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 313 315 317 319 321 323 325 327 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 377 379 381 386 388 391 395 401 404 408 413 416 418 420 423 425 428 431 435 437 440 444 453 456 459 461 463 465 467 469 471 473 475 478 480 482 484 486 488 490 492 494 902 906 908 911 929 939 980 986 988 990 992 994 996 998 1000 1002 1004 1006 1036 1071 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1217 1219 1221 1223 1225 1227 1366 4293 65338)
*/


Method "_is letter" is [c : character |
	cp ::= code point of c;
	if cp < 128
		then [
			65 <= cp <= 90
				| 97 <= cp <= 122;]
		else [
			if cp < 8192
				then [
					192 <= cp <= 214
						| 216 <= cp <= 246
						| 248 <= cp <= 8191;]
				else [
					12352 <= cp <= 12799
						| 13312 <= cp <= 59391
						| 65136 <= cp <= 65277
						| 65313 <= cp <= 65338
						| 65345 <= cp <= 65370
						| 65377 <= cp <= 65503;];];];

privateIrregularUppercaseSet ::= {256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,313,315,317,319,321,323,325,327,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,377,379,381,385,386,388,390,391,393,394,395,398,399,400,401,403,404,406,407,408,412,413,415,416,418,420,423,425,428,430,431,433,434,435,437,439,440,444,452,453,455,456,458,459,461,463,465,467,469,471,473,475,478,480,482,484,486,488,490,492,494,902,904,905,906,908,910,911,978,979,980,986,988,990,992,994,996,998,1000,1002,1004,1006,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1217,1219,1221,1223,1225,1227};

Method "_is uppercase" is [c : character |
	cp ::= code point of c;
	if cp < 128
		then [
			65 <= cp <= 90;]
		else [
			if cp < 8192
				then [
					(192 <= cp <= 222 & cp not = 215)
						| (913 <= cp <= 939 & cp not = 930)
						| (1025 <= cp <= 1071 & cp not = 1037)
						| 1329 <= cp <= 1366
						| 4256 <= cp <= 4293
						| [privateIrregularUppercaseSet includes cp;];]
				else [
					65313 <= cp <= 65338;];];];
