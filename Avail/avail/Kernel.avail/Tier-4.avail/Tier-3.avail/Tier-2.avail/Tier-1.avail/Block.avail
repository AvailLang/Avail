/**
 * .../Tier-1/Block.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Block"
Extends
Uses
	"Tier-0",
	"Integer"
Names
	"_arguments type",
	"_[_]",
	"_result",
	"block type taking_and returning_",
	"[«_‡,»]->_",
	"[...]->_",
	"stub block taking_arguments and returning_",
	"_compiledCode",
	"_outerVars",
	"_argument count",
	"function from_outer variables_"
Body



/**
 * Answer a function type that includes as instances all functions that have the
 * specified return type.
 */
Method "[...]->_" is [result : type |
	Primitive 39;
] : functionType;

/**
 * Private method declaration helper (bootstrapping workaround).
 */
Method "Method_is_requires_returns_"
is [
		name : string,
		body : [...]-> void,
		requires: [...]-> boolean,
		returns : [...]-> type |
	Primitive 254 (failureCode : natural number);
	Failed;
] : void;

/**
 * Private tuple constructor (bootstrapping workaround)...
 */
Method "<«_‡,»>" is [t : tuple |
	t;
] : tuple
requires [tt : tupleType |
	true;
]
returns [tt : tupleType |
	tt;
];


/* Block type constructors / extractors... */

Method "_arguments type" is [ct : functionType |
	Primitive 35;
] : tupleType;

Method "_[_]" is [ct : functionType, index : natural number |
	Primitive 36 (failureCode : natural number);
	Failed;
] : type;


/**
 * Answer the return result type for this function type.
 */
Method "_result" is [ct : functionType |
	Primitive 37;
] : type;

tupleOfType ::= Special Object 73;

Method "block type taking_and returning_" is [args : tupleOfType, ret : type |
	Primitive 34;
] : functionType;

/**
 * Create a function type.
 */
Method "[«_‡,»]->_" is [types : tupleOfType, result : type |
	block type taking types and returning result;
] : functionType;


/* Simple block stub construction... */

Method "stub block taking_arguments and returning_" is [
		n : whole number,
		a : any |
	Primitive 70;
] : [...]-> any;


/* Detailed accessing (for object dumping / loading). */

Method "_compiledCode" is [c : function |
	Primitive 72;
] : compiledCode;

Method "_privateNumArgs" is [c : compiledCode |
	Primitive 180;
] : whole number;

Method "_argument count" is [c : function |
	c compiledCode privateNumArgs;
] : whole number;

Method "_privateSizes" is [tt : tupleType |
	Primitive 138;
] : integerType;

Method "_privateLowerBound" is [range : integerType |
	Primitive 8;
] : extended integer;

Method "_privateUpperBound" is [range : integerType |
	Primitive 9;
] : extended integer;

/* Here's the implementation of the conditional downcast */
Method "Private*_?:=_" is [var : container, arg : any |
	Primitive 11 (failureCode : natural number);
	Failed;
] : void;

Method "_argument count" is [c : functionType |
	argTypes ::= c arguments type;
	sizes ::= argTypes privateSizes;
	Assert sizes privateLowerBound = sizes privateUpperBound;
	result : whole number;
	Private *&result ?:= sizes privateLowerBound;
	result;
] : whole number;

Method "_outerVars" is [c : function |
	Primitive 73;
] : tuple;


/**
 * Function construction (for dumping/loading, but some day we could build all
 * the stub generation primitives this way).
 */
Method "function from_outer variables_" is [
		c : compiledCode,
		outers : tuple |
	Primitive 74 (failureCode : natural number);
	Failed;
] : function;

