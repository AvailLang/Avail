/**
 * .../Tier-1/Block.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Block"
Extends
Uses
	"Tier-0",
	"Integer"
Names
	"||_||",
	"_[_]",
	"_result",
	"block type taking_and returning_",
	"[]->_",
	"[_]->_",
	"[...]->_",
	"stub block taking_arguments and returning_",
	"_compiledCode",
	"_outerVars",
	"closure from_outer variables_"
Body


/* Private tuple constructors (bootstrapping workaround)... */

Method "<«_‡,»>" is [t : tuple |
	t;
] : tuple;



/* Block type constructors / extractors... */

Method "||_||" is [ct : closureType |
	Primitive 35;
	Failed;
] : integer;

Method "_[_]" is [ct : closureType, index : natural number |
	Primitive 36;
	Failed;
] : type;

Method "_result" is [ct : generalizedClosureType |
	/* Answer the return result type for this generalized closure type. */
	Primitive 37;
	Failed;
] : type;

Method "block type taking_and returning_" is [args : tuple, ret : type |
	Primitive 34;
	Failed;
] : closureType;

Method "[«_‡,»]->_" is [types : tuple, result : type |
	/* Create a two or more argument closure type. */
	block type taking types and returning result;
] : closureType;

Method "[...]->_" is [result : type |
	/* Answer a generalized closure type.  It will be a supertype of []->result,
	   [terminates]->result, [terminates,terminates]->result, etc.  It will also
	   be a subtype of generalizedClosure, but not a subtype of closure.  Its
	   type will be generalizedClosureType.  */
	Primitive 39;
	Failed;
] : generalizedClosureType;


/* Simple block stub construction... */

Method "stub block taking_arguments and returning_" is [n : integer, a : all |
	Primitive 70;
	Failed;
] : closure;


/* Detailed accessing (for object dumping / loading). */

Method "_compiledCode" is [c : closure |
	Primitive 72;
	Failed;
] : compiledCode;

Method "_outerVars" is [c : closure |
	Primitive 73;
	Failed;
] : tuple;


/* Closure construction (for dumping/loading, but some day we could
   build all the stub generation primitives this way). */

Method "closure from_outer variables_" is [c : compiledCode, outers : tuple |
	Primitive 74;
	Failed;
] : closure;

