/**
 * .../Tier-2/Test-Integer.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-Integer"
Extends
Uses
	"Tier-1",
	"Integer"
Names
Body


Assert integer range INF type plus -INF type = terminates;
Assert integer range extended integer plus extended integer = extended integer;
Assert integer range [5..INF] plus [-INF..-10] = extended integer;
Assert integer range [5..INF) plus (-INF..-10] = integer;
Assert integer range [-5..INF) plus (-INF..10] = integer;
Assert integer range integer plus integer = integer;
Assert integer range [2..10] plus [3..8] = [5..18];


Assert integer range INF type times -INF type = -INF type;
Assert integer range INF type times -5 type = -INF type;
Assert integer range 5 type times -INF type = -INF type;
Assert integer range 6 type times 9 type = 54 type;
Assert integer range [-3..5] times [-4..-2] = [-20..12];
Assert integer range [0..3] times [-4..-2] = [-12..0];
Assert integer range [-3..0] times [-4..-2] = [0..12];
Assert integer range 0 type times -INF type = terminates;
Assert integer range 0 type times INF type = terminates;

Method "phony_+_" is
[
	a : extended integer,
	b : extended integer
|
	Primitive 1 (failureReason : string);
	Print failureReason;
	Print "Answering 0 instead.";
	0;
] : extended integer;

Assert phony 1 + 2 = 3;
Assert phony 2 + 2 = 4;
Assert phony INF + INF = INF;
Assert phony -INF + -INF = -INF;
Assert phony INF + -INF = 0;
