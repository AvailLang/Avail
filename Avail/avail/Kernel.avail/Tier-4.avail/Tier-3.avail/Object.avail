/**
 * .../Tier-3/Object.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Object"
Extends
Uses
	"Tier-2"
Names
	"Object",
	"_name",
	"_as objectType",
	"_as object",
	"_new with_",
	"_altered with_",
	"Rule_",
	"_as map",
	"_instance",
	"_is implicit subtype of_with_",
	"_is explicit subtype of_with_",
	"_is explicit subtype of_",
	"_->_",
	"_->_result",
	"fieldMap",
	"fieldTypeMap",
	"_has fields_",
	"implicit subtype of_with_named_",
	"explicit subtype of_with_named_"
Body



/* Conversions between maps and objectTypes. */

Method "fieldMap" is [map from cyclicType to all;];
Method "fieldTypeMap" is [map from cyclicType to type;];

Method "_as objectType" is [m : fieldTypeMap |
	/* Now it's declared publicly with a return type of objectType... */
	Primitive 63;
	Failed;
] : objectType;

Method "_as map" is [o : objectType |
	Primitive 64;
	Failed;
] : fieldTypeMap;



/* Extract an objectMeta from an objectMetaMeta (the objectMetaMeta's sole instance). */

Method "_instance" is [omm : objectMetaMeta |
	Primitive 66;
	Failed;
] : objectMeta;


/* Extract an objectType from an objectMeta (the objectMeta's sole instance). */

Method "_instance" is [om : objectMeta |
	Primitive 65;
	Failed;
] : objectType
returns [omm : objectMetaMeta |
	omm instance;
] : objectMeta;


/* Conversion to/from maps and creation validation. */

validationList : tuple of [terminates]->boolean;
validationList := <>;

Method "_private as unvalidated object" is [m : fieldMap |
	Primitive 61;
	Failed;
] : [->] as objectType;

Method "_as object" is [m : fieldMap |
	obj ::= m private as unvalidated object;
	validationList do [blk : [terminates]->boolean |
		ok ::= cast obj into blk otherwise [true;];
		if not ok then [
			Crash <"Object validation failed", blk>;
		];
	];
	obj;
] : [->] as objectType;


/* This private method is used to record type names for use in
   printing and debugging object structures. */


Method "Give type_the name_" is [t : objectType, name : string |
	Primitive 68;
	Failed;
] : void;

/* Get the type name.*/

Method "_name" is [t : objectType |
	Primitive 69;
	Failed;
] : string;

/* New type name... */

Method "Object" is [[->] as objectType;] : [->] as objectType type;
Give type Object the name "Object";


/* Conversion from object to map (now that Object is defined). */

Method "_as map" is [o : Object |
	Primitive 62;
	Failed;
] : fieldMap;



/* Conversion from tuples to objects. */

Method "_new with_" is [ot : objectType, t : tuple of (tuple like <cyclicType, all>) |
	m : fieldMap := [->];
	t do [pair : tuple like <cyclicType, all> |
		if m[pair[1]]? then [Crash "Duplicate key in ""_new with_"" argument.";];
		*&m[pair[1]] := pair[2];
	];
	/* Now fill in the keys generated by explicit subtyping... */
	ot as map keys do [k : cyclicType |
		if not m[k]? then [
			*&m[k] := k;
		];
	];
	m as object;
] : Object
returns [oM : objectMeta, tT : tupleType |
	mustMatch ::= oM instance as map;
	m : fieldTypeMap := [->];
	leading : tuple of type := tT leading types;
	if ||leading|| < tT sizes upper bound then [
		leading := leading then <tT default type>;
	];
	leading do [leadingType : type |
		cast leadingType into [pairType : tupleType |
			cast pairType[1] into [key : cyclicType |
				valueType ::= pairType[2];
				if key = cyclicType then [
					Crash "Keys for ""_new with"" must be statically known and subtypes of cyclicType.";];
				if m[key]? then [Crash "Duplicate key in ""_new from_"" argument.";];
				if mustMatch[key]? & [not valueType <= mustMatch[key];] then [
					Crash <"Value for key ", key,
						" not strong enough in ""_new from_"".  I got:",
						valueType, " but I need ", mustMatch[key]>;
				];
				*&m[key] := valueType;
			];
		];
	];
	/* Now fill in the keys generated by explicit subtyping... */
	oM instance as map do [k : cyclicType, v : type |
		if not m[k]? then [
			if k = v then [
				*&m[k] := k;
			] else [
				Crash " Missing key for instance creation via ""_new with_"".";
			];
		];
	];
	result ::= m as objectType;
	Assert result <= oM instance;
	result;
] : objectType;


/* Incrementally constructing an object from another with changes. */

Method "_altered with_" is [o : Object, t : tuple of (tuple like <cyclicType, all>) |
	m : fieldMap := o as map;
	t do [pair : tuple like <cyclicType, all> |
		*&m[pair[1]] := pair[2];
	];
	m as object;
] : Object
returns [oT : objectType, tT : tupleType |
	m : fieldTypeMap := oT as map;
	keysEncountered : set of cyclicType := {};
	leading : tuple of type := tT leading types;
	if ||leading|| < tT sizes upper bound then [
		leading := leading then <tT default type>;
	];
	leading do [leadingType : type |
		cast leadingType into [pairType : tupleType |
			cast pairType[1] into [key : cyclicType |
				if keysEncountered includes key then [
					Crash "Duplicate key encountered in tuple of pairs in ""_altered with_"".";];
				keysEncountered := keysEncountered with key;
				valueType ::= pairType[2];
				if key = cyclicType then [
					Crash "Keys for ""_altered with"" must be statically known and subtypes of cyclicType.";];
				*&m[key] := valueType;
			];
		];
	];
	m as objectType;
] : objectType;

/* Incrementally constructing an objectType from another with changes.  Note that using this
    incremental type constructor produces a type at the call site that is known to be an objectType,
    but nothing more specific.  That's because the meta-types available at compile time at the
    call site do not provide enough information to step downwards to actual types.  Since these
    objectTypes will tend to be used in type declarations (and therefore executed at compile time
    to produce actual strong types), this is probably good enough. */

Method "_altered with_" is [ot : Object type, t : tuple of (tuple like <cyclicType, type>) |
	m : fieldTypeMap := ot as map;
	t do [pair : tuple like <cyclicType, type> |
		*&m[pair[1]] := pair[2];
	];
	m as objectType;
] : Object type;


Method "Rule_" is [rule : [terminates]->boolean |
	validationList := validationList then <rule>;
] : void
requires [ruleT : closureType |
	ruleT[1] type <= objectType;
];


/* Getting instance variable types from object types... */

{"_->_"} can't have <{},{"_result"}>;
{"_result"} can't have <{"_->_"}>;

Method "_->_" is [ot : objectType, key : cyclicType |
	ot as map [key];
] : type
requires [om : objectMeta, key : cyclicType |
	om instance as map [key]?;
]
returns [om : objectMeta, key : cyclicType |
	if om instance as map [key]? then [
		(om instance as map [key]) type;
	] else [
		/* For lack of anything better.  Really should raise exception eventually. */
		terminates;
	];
];

Method "_->_result" is [ot : objectType, key : cyclicType |
	cast ot as map [key] into [x : closureType | x result;];
] : type
requires [om : objectMeta, key : cyclicType |
	om instance as map [key]?
		& [
			om instance as map [key] <= []->all;
		];
]
returns [om : objectMeta, key : cyclicType |
	if om instance as map [key]? then [
		cast (om instance as map [key]) into [x : closureType | x result type;];
	] else [
		/* For lack of anything better.  Really should raise exception eventually. */
		terminates;
	];
];



/* Getting instance variables from objects... */

Method "_->_" is [o : Object, key : cyclicType |
	/* Now that keys are cyclic types we know at link time what attribute key is
	   being accessed by an invocation of "_->_".  Thus, we know from the
	   objectType precisely the type of the attribute value.  */
	o as map [key];
] : all
requires [ot : objectType, key : cyclicType |
	ot as map [key]?;
]
returns [ot : objectType, key : cyclicType |
	if ot as map [key]? then [
		ot as map [key];
	] else [
		/* For lack of anything better.  Really should raise exception eventually. */
		terminates;
	];
];

Method "_->_result" is [o : Object, key : cyclicType |
	/* Since the objectType version of this has the same selector, we
	   must define the same method here in case someone wants to
	   use this particular pattern. */
	cast o as map [key] into [x : closureType | x result;];
] : all
requires [ot : objectType, key : cyclicType |
	ot as map [key]?
		& [
			ot as map [key] <= closure;
		];
]
returns [ot : objectType, key : cyclicType |
	if ot as map [key]? then [
		cast ot as map [key] into [x : closureType | x result;];
	] else [
		/* For lack of anything better.  Really should raise exception eventually. */
		terminates;
	];
];



Method "implicit subtype of_with_named_" is [
		superType : objectType,
		conditions : fieldTypeMap,
		newName : string |
	intersection ::= type intersection of superType and (conditions as objectType);
	Give type intersection the name newName;
	intersection;
] : objectType;

Method "explicit subtype of_with_named_" is [
		superType : objectType,
		conditions : fieldTypeMap,
		newName : string |
	newKey ::= new cyclic type newName;
	implicit subtype of superType with conditions [newKey->newKey] named newName;
] : objectType;


Method "_is implicit subtype of_with_" is [
		newName : string,
		superType : objectType,
		conditions : fieldTypeMap |
	intersection ::= type intersection of superType and (conditions as objectType);
	Method newName is stub block taking 0 arguments and returning intersection;
	Give type intersection the name newName;
] : void;

Method "_is implicit subtype of_with_" is [
		newName : string,
		superTypes : tuple of objectType as listType,
		conditions : fieldTypeMap |
	intersection : objectType := conditions as objectType;
	<superTypes> do [each : objectType |
		intersection := type intersection of intersection and each;
	];
	Method newName is stub block taking 0 arguments and returning intersection;
	Give type intersection the name newName;
] : void;

Method "_is explicit subtype of_with_" is [
		newName : string,
		superTypes : tuple of objectType as listType,
		conditions : fieldTypeMap |
	/* This constructs an explicit subtype.  An explicit subtype is like an implicit
	   subtype, but it adds a generated key that makes the type unique even if
	   there is no (other) added representation. */
	newKey ::= new cyclic type newName;
	newName is implicit subtype of superTypes with conditions [newKey->newKey];
] : void;

Method "_is explicit subtype of_with_" is [
		newName : string,
		superType : objectType,
		conditions : fieldTypeMap |
	newKey ::= new cyclic type newName;
	newName is implicit subtype of superType with conditions [newKey->newKey];
] : void;

Method "_is explicit subtype of_" is [
		newName : string,
		superTypes : tuple of objectType as listType |
	newName is explicit subtype of superTypes with [->];
] : void;

Method "_is explicit subtype of_" is [
		newName : string,
		superType : objectType |
	newName is explicit subtype of superType with [->];
] : void;

Method "_has fields_" is [ot : Object type, fields : tuple of string |
	/* Define some postfix accessor methods for these fields. */
	fields do [fieldString : string |
		fieldCyc ::= lookup fieldString;

		/* Define an instance-side accessor... */
		Method "_" then fieldString
		is
			stub block taking <ot>
			and applying name of list block invoker
			to [args : list |
				cast <args>[1] into [o : Object |
					o as map [fieldCyc];];]
			and argument list returning (ot as map [fieldCyc])
		returns
			stub block taking <ot type>
			and applying name of list block invoker
			to [args : list |
				cast <args>[1] into [o : objectType |
					o as map [fieldCyc];];]
			and argument list returning type;

	];
];

