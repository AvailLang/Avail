/**
 * .../Tier-3/Test-ObjectTypes.avail
 * Copyright Â© 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-ObjectTypes"
Extends
Uses
	"Tier-2",
	"Object",
	"Enum"
Names
Body



/* Test objects. */

a ::= lookup "a";
b ::= lookup "b";
c ::= lookup "c";

[
	X ::= [a->integer][b->integer] as objectType;
	Y ::= [a->any] as objectType;
	Assert X <= Y;  /* X is a subtype of Y */
]();

T ::= [a->integer][b->integer] as objectType;
[
	o : T;
	o := T new with <<a,123>,<b,456>,<c,789>>;
	Assert o type <= [a->[123..123]][b->[456..456]][c->[789..789]] as objectType;
]();

[
	anObj ::= Object new with <<a,{10,11,20}>>;
	anObjType ::= anObj type;
	Assert anObjType <= [a->set [3..3] of [10..20]] as objectType;
]();

[
	anObjType ::= [a->set [3..3] of [10..20]] as objectType;
	anObjMeta ::= anObjType type;
	Assert anObjMeta instance = anObjType;
]();

[
	anObjType ::= [a->set [3..3] of [10..20]] as objectType;
	anObjMeta ::= anObjType type;
	anObjMetaMeta ::= anObjMeta type;
	Assert anObjMetaMeta instance = anObjMeta;
	Assert anObjMetaMeta instance instance = anObjType;
]();

[
	anObjType ::= [a->set [3..3] of [10..20]] as objectType;
	anObjMeta ::= anObjType type;
	anObjMetaMeta ::= anObjMeta type;
	Assert anObjType <= Object;
	Assert anObjMeta <= objectType;
	Assert anObjMetaMeta <= objectMeta;
]();

