/**
 * .../Tier-3/Tuple.avail
 * Copyright Â© 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Tuple"
Extends
Uses
	"Tier-2",
	"Enum"

Names

Body


Restriction "_[_]" is
[
	ttt : tupleType type,
	i : natural number type
|
	tt ::= ttt instance;
	/* Compute the type union of all the possible types it could be,
	   depending on what indices could be applied. */
	possible : type := terminates;
	low ::= i lower bound;
	high ::= i upper bound;
	From low min (|| tt leading types || + 1)
		to high min (|| tt leading types || + 1)
		do [ x : natural number |
			possible := type union of tt[x] type and possible;
		];
	possible;
];

[
	t : tuple [1..3] like <"frog" type, 5 type> default 1 type type := <"frog", 5, 1 type>;
	x : "frog" type := t[1];
	y : 5 type := t[2];
	z : 1 type type := t[3];
]();

[
	tt : (tuple [1..3] like <"frog" type, 5 type> default 1 type) type := <"frog", 5, 1> type;
	x : "frog" type type := tt[1];
	y : 5 type type := tt[2];
	z : 1 type type := tt[3];
]();
