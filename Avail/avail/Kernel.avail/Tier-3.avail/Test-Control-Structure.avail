/**
 * ../Tier-3/Test-Exceptions.avail
 * Copyright Â© 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-Control-Structure"
Extends
Uses
	"Tier-2",
	"Control-Structure",
	"Exception"
Names
Body

switchCase1: string := Switch 1 
	case 6 do ["huh?"]: 
	case 9 do ["Nope"]: 
	default ["meh"];

Assert switchCase1 = "meh";

switchCase2: string := Switch "Moo\n"
	case "Who\n" do ["huh?"]: 
	case "Moo\n" do ["Makes Sense"]: 
	default ["meh"];

Assert switchCase2 = "Makes Sense";

switchCase3: string := Switch 2.2
	case 2.3 do ["huh?"]: 
	case 2.2 do ["Makes Sense"]: 
	default ["meh"];

Assert switchCase3 = "Makes Sense";

switchCase4 : string :=  Switch true
	case true do
	[ 
		c : integer := 1;
		c as basic string
	]:
	default
	[ 
		Switch true
			case true do
			[
				c : integer := 2;
				c as basic string
			]:
			default 
			[
				c : integer := 3;
				c as basic string
			]
	];

Assert switchCase4 = "1";
Assert switchCase4 type <= string;

ifThenElseRepeat1 : integer;
if false then [ifThenElseRepeat1 := 1;] 
	else if false then [ifThenElseRepeat1 := 2;]
	else if false then [ifThenElseRepeat1 := 3;]  
 	else [ifThenElseRepeat1 := 4;];

Assert ifThenElseRepeat1 = 4;	
 
ifThenElseRepeat2 : integer;
if false then [ifThenElseRepeat2 := 1;] 
	else if true then [ifThenElseRepeat2 := 2;]
	else if false then [ifThenElseRepeat2 := 3;]  
 	else [ifThenElseRepeat2 := 4;];

Assert ifThenElseRepeat2 = 2;	
 
ifThenElseRepeat3 : integer :=
	if false then [1] 
		else if false then [2]
		else if false then [3]  
	 	else [4];

Assert ifThenElseRepeat3 = 4;
 
ifThenElseRepeat4 : integer :=
	if false then [1] 
		else if false then [2]
		else if true then [3]  
	 	else [4];

Assert ifThenElseRepeat4 = 3;
	