/**
 * .../Tier-3/Object.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Object"
Extends
Uses
	"Tier-2",
	"Enum"
Names
	"objectType", "objectMeta",
	"Object",
	"_names",
	"_as objectType",
	"_as object",
	"_new with_",
	"_altered with_",
	"Rule_",
	"_as map",
	"_is implicit subtype of«_‡,»«with«_->_‡,»»",
	"_is explicit subtype of«_‡,»«with«_->_‡,»»",
	"_->_",
	"_->_result",
	"fieldMap",
	"fieldTypeMap",
	"_has fields_",
	"Give type_the name_"
Body


privateObjectType ::= Special Object 23;

Method "objectType" is [privateObjectType] : privateObjectType type;
Method "objectMeta" is [objectType type];

Method "fieldMap" is [map from atom to any];
Method "fieldTypeMap" is [map from atom to (any type)];

Method "_as objectType" is [m : fieldTypeMap |
	/* Now it's declared publicly with a return type of objectType... */
	Primitive 63;
] : objectType;

/* Conversions between maps and objectTypes. */

Method "_as map" is [o : objectType |
	Primitive 64;
] : fieldTypeMap;



/* Conversion to/from maps and creation validation. */

validationList : tuple of [terminates]->boolean;
validationList := <>;

Method "_private as unvalidated object" is [m : fieldMap |
	Primitive 61;
] : [->] as objectType;

Method "_as object" is [m : fieldMap |
	obj ::= m private as unvalidated object;
	validationList do [blk : [terminates]->boolean |
		ok ::= cast obj into blk otherwise [true];
		if not ok then [
			Crash <"Object validation failed", blk>
		];
	];
	obj
] : [->] as objectType;


/* This private method is used to record type names for use in
   printing and debugging object structures. */


Method "Give type_the name_" is [t : objectType, name : string |
	Primitive 68;
] : void;

/* Get the type name.*/

Method "_names" is [t : objectType |
	Primitive 69;
] : set of string;

/* New type name... */

privateObject ::= Special Object 22;
Method "Object" is [privateObject] : privateObjectType;
Give type Object the name "Object";


/* Conversion from object to map (now that Object is defined). */

Method "_as map" is [o : Object |
	Primitive 62;
] : fieldMap;



/* Conversion from tuples to objects. */

Method "_new with_" is [
		ot : objectType,
		t : tuple of (tuple like <atom, any>) |
	m : fieldMap := [->];
	t do [pair : tuple like <atom, any> |
		if m[pair[1]]? then [Crash "Duplicate key in \"_new with_\" argument."];
		*↑m[pair[1]] := pair[2];
	];
	/* Now fill in the keys generated by explicit subtyping... */
	ot as map keys do [k : atom |
		if not m[k]? then [
			*↑m[k] := k;
		];
	];
	m as object
] : Object;

Restriction "_new with_" is [oM : objectMeta, tT : tupleType |
	mustMatch ::= oM instance as map;
	m : fieldTypeMap := [->];
	leading : tuple of type := tT leading types;
	if ||leading|| < tT sizes upper bound then [
		leading := leading then <tT default type>;
	];
	leading do [leadingType : type |
		cast leadingType into [pairType : tupleType |
			cast pairType[1] into [keyType : atom type |
				valueType ::= cast pairType[2] into [t : any type | t];
				if keyType = atom then [
					Fail parse "Keys for \"_new with_\" must be statically known and proper subtypes of atom."];
				if ||keyType instances|| > 1 then [
					Fail parse "Key for \"_new with_\" must be statically known and an instance type (not union) of atom."];
				key ::= keyType instance;
				if m[key]? then [Crash "Duplicate key in \"_new from_\" argument."];
				if mustMatch[key]? & [not valueType <= mustMatch[key]] then [
					Crash <"Value for key ", key,
						" not strong enough in \"_new from_\".  I got:",
						valueType, " but I need ", mustMatch[key]>
				];
				*↑m[key] := valueType;
			];
		];
	];
	/* Now fill in the keys generated by explicit subtyping... */
	oM instance as map do [k : atom, v : type |
		if not m[k]? then [
			if k type = v then [
				*↑m[k] := k type;
			] else [
				Crash " Missing key for instance creation via \"_new with_\"."
			];
		];
	];
	result ::= m as objectType;
	Assert result <= oM instance;
	result
] : objectType;


/* Incrementally constructing an object from another with changes. */

Method "_altered with_" is [o : Object, t : tuple of (tuple like <atom, any>) |
	m : fieldMap := o as map;
	t do [pair : tuple like <atom, any> |
		*↑m[pair[1]] := pair[2];
	];
	m as object
] : Object;

Restriction "_altered with_" is [oT : objectType, tT : tupleType |
	m : fieldTypeMap := oT as map;
	keysEncountered : set of atom := {};
	leading : tuple of type := tT leading types;
	if ||leading|| < tT sizes upper bound then [
		leading := leading then <tT default type>;
	];
	leading do [leadingType : type |
		cast leadingType into [pairType : tupleType |
			cast pairType[1] into [keyType : atom type |
				valueType ::= cast pairType[2] into [t: any type | t];
				if keyType = atom then [
					Fail parse "Keys for \"_altered with_\" must be statically known and proper subtypes of atom."];
				if ||keyType instances|| > 1 then [
					Fail parse "Key for \"_altered with_\" must be statically known and an instance type (not union) of atom."];
				key ::= keyType instance;
				if keysEncountered includes key then [
					Crash "Duplicate key encountered in tuple of pairs in \"_altered with_\"."];
				keysEncountered := keysEncountered with key;
				*↑m[key] := valueType;
			];
		];
	];
	m as objectType
] : objectType;

/* Incrementally constructing an objectType from another with changes.  Note that using this
    incremental type constructor produces a type at the call site that is known to be an objectType,
    but nothing more specific.  That's because the metatypes available at compile time at the
    call site do not provide enough information to step downwards to actual types.  Since these
    objectTypes will tend to be used in type declarations (and therefore executed at compile time
    to produce actual strong types), this is probably good enough. */

Method "_altered with_" is [ot : Object type, t : tuple of (tuple like <atom, any type>) |
	m : fieldTypeMap := ot as map;
	t do [pair : tuple like <atom, any type> |
		*↑m[pair[1]] := pair[2];
	];
	m as objectType
] : Object type;


Method "Rule_" is [rule : [terminates]->boolean |
	validationList := validationList then <rule>;
] : void;

Restriction "Rule_" is [ruleT : functionType |
	if not ruleT[1] type <= objectType then [
		Fail parse "construction validation rule to apply to an object type"];
	void
];


/* Getting instance variable types from object types... */

{"_->_"} can't have <{},{"_result"}>;
{"_result"} can't have <{"_->_"}>;

Method "_->_" is [ot : objectType, key : atom |
	ot as map [key]
] : type;

Restriction "_->_" is [om : objectMeta, keyT : atom type |
	/* Require that the atom's static type be at least a union type for which
	   all instances can be looked up in the static object type. */
	good ::= om instances as tuple all [ot : objectType |
		keyT instances as tuple all [key : any |
			ot as map [key]?]];
	if not good then [
		Fail parse "No such field in this object type"];
	result : type := terminates;
	om instances do [ot : objectType |
		keyT instances do [key : any |
			strongKey : atom;
			*↑strongKey ?:= key;
			result := type union of result and ot as map [strongKey];];];
	result type
];


Method "_->_result" is [ot : objectType, key : atom |
	cast ot as map [key] into [x : functionType | x result]
] : type;

Restriction "_->_result" is [om : objectMeta, keyT : atom type |
	good ::= |keyT| = 1 & [
			om instance as map [keyT instance]? & [
				om instance as map [keyT instance] <= []->any]];
	if not good then [
		Fail parse "No such field in this object type"];
	cast om instance as map [keyT instance]
		into [x : functionType | x result type]
];




/* Getting instance variables from objects... */

Method "_->_" is [o : Object, key : atom |
	/* Now that keys are cyclic types we know at link time what attribute key is
	   being accessed by an invocation of "_->_".  Thus, we know from the
	   objectType precisely the type of the attribute value.  */
	o as map [key]
] : any;

Restriction "_->_" is [ot : objectType, keyT : atom type |
	$escape : type;
	good ::= keyT not = terminates & [
		keyT instances as tuple all [shouldBeAtom : any |
			shouldBeAtom type <= atom]];
	if not good then [
		Fail parse "No such field in object"];
	union : type := terminates;
	map ::= ot as map;
	keyT instances do [shouldBeAtom : any |
		if map[shouldBeAtom]? then [
			union := type union of union and map[shouldBeAtom];
		] else [
			Exit escape with terminates];];
	union
];

Method "_->_result" is [o : Object, key : atom |
	/* Since the objectType version of this has the same selector, we
	   must define the same method here in case someone wants to
	   use this particular pattern. */
	cast o as map [key] into [x : functionType | x result]
] : any;

Restriction "_->_result" is [ot : objectType, keyT : atom type |
	good ::= if |keyT| = 1 then [
			exactAtom ::= keyT instance;
			ot as map [exactAtom]?
				& [
					ot as map [exactAtom] <= function
				]]
		else [
			Fail parse
				"Expected type of second argument of\
				\| \"_->_result\" to be a specific atom type"];
	if not good then [
		Fail parse "No such field in object"];
	if |keyT| = 1 then [
		exactAtom ::= keyT instance;
		if ot as map [exactAtom]? then [
			cast ot as map [exactAtom] into [x : functionType | x result]]
		else [
			/* For lack of anything better.  Really should raise exception eventually. */
			terminates]]
	else [
		terminates]
];



Method "_is implicit subtype of«_‡,»«with«_->_‡,»»" is [
		newName : string,
		superTypes : tuple [1..INF) of objectType,
		optionalConditions : tuple [0..1] of
			tuple [1..INF) of
				tuple like <atom, any type> |
	conditionsMap : map from atom to any type := [->];
	if ||optionalConditions|| > 0 then [
		optionalConditions[1] do [pair : tuple like <atom, any type> |
			conditionsMap := conditionsMap[pair[1] -> pair[2]];];];
	intersection : objectType := conditionsMap as objectType;
	superTypes do [each : objectType |
		intersection := type intersection of intersection and each;
	];
	bodyType ::= block type taking <> and returning (intersection type);
	bodyBlock ::= stub block
		with function type bodyType
		invoking [ intersection ];
	Method newName is bodyBlock;
	Give type intersection the name newName;
] : void;


/**
 * This constructs an explicit subtype.  An explicit subtype is like an implicit
 * subtype, but it adds a generated key that makes the type unique even if there
 * is no (other) added representation.
 */
Method "_is explicit subtype of«_‡,»«with«_->_‡,»»" is [
		newName : string,
		superTypes : tuple of objectType,
		optionalConditions : tuple [0..1] of
			tuple [1..INF) of
				tuple like <atom, any type> |
	newKey ::= new atom newName;
	conditionsMap : map from atom to any type := [newKey -> newKey type];
	if ||optionalConditions|| > 0 then [
		optionalConditions[1] do [pair : tuple like <atom, any type> |
			conditionsMap := conditionsMap[pair[1] -> pair[2]];];];
	intersection : objectType := conditionsMap as objectType;
	superTypes do [each : objectType |
		intersection := type intersection of intersection and each;
	];
	bodyType ::= block type taking <> and returning (intersection type);
	bodyBlock ::= stub block
		with function type bodyType
		invoking [ intersection ];
	Method newName is bodyBlock;
	Give type intersection the name newName;
] : void;


/**
 * Define some postfix accessor methods for these fields.
 */
Method "_has fields_" is [ot : Object type, fields : tuple of string |
	fields do [fieldString : string |
		fieldKey ::= lookup fieldString;
		bodyType ::= block type taking <ot> and returning ot as map [fieldKey];
		restrictionType ::= block type taking <ot type> and returning type;
		newMethodName ::= "_" then fieldString;
		newBody ::= stub block
			with function type bodyType
			invoking [o : Object | o as map [fieldKey]];
		newRestriction ::= stub block
			with function type restrictionType
			invoking [oT : objectType | oT as map [fieldKey]];
		strongerRestriction : [...]-> type;
		* ↑strongerRestriction ?:= newRestriction;

		/* Define an instance-side getter... */
		Method newMethodName is newBody;
		Restriction newMethodName is strongerRestriction;
	];
];
