/**
 * .../Tier-3/Enum.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Enum"
Extends
Uses
	"Tier-2"
Names
	"_instance"
Body

Forward "_instance" for [type]->any;

/* This method was defined earlier, but we couldn't add the restriction until
   now. */
Restriction "_instances" is
[
	eT : type type
|
	result ::= if |eT| = INF then
		[
			Assert eT = type;
			set;
		]
		else
		[
			if |eT| = 0 then
			[
				Assert eT = terminates;
				{} type;
			]
			else
			[
				/* It looks like |eT| > 1 is possible, but actually it isn't
				 * because we are dealing with metatypes here.
				 */
				Assert |eT| = 1;
				instance ::= cast eT instance into [ t : type | t; ];
				strong : any type;
				*↑strong ?:= instance;
				if |instance| not = INF then
				[
					set [0..|strong|+1) of strong;
				]
				else
				[
					set [0..INF) of strong;
				];
			];
		];
	Assert result <= set;
	Print "\nDEBUG: _instances("
		then eT as basic string
		then ") ∋ "
		then result as basic string
		then "\n";
	result;
] : set type;

Method "_instance" is
[
	e : type
|
	if |e| not = 1 then [Crash "Type must have exactly one instance";];
	e instances as tuple [1];
] : any;

Restriction "_instance" is [eT : type type |
	result ::= if |eT| not = INF then
	[
		union : type := terminates;
		instances ::= cast eT instances into [ t : set of any type | t; ];
		instances do
		[
			membershipType : any type
		|
			union := type union of union and membershipType;
		];
		union;
	]
	else
	[
		any;
	];
/*
	Print "\nDEBUG: _instance("
		then eT as basic string
		then ") ∈ "
		then result as basic string
		then "\n";
*/
	result;
] : type;

Assert boolean instances = {false, true};
Assert string type instances = {string};
Assert string type instance = string;
Assert (type union of 1 type and 2 type) instances = {1, 2};


