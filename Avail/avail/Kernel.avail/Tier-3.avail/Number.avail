/**
 * .../Tier-3/Number.avail
 * Copyright Â© 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Number"
Extends
Uses
	"Tier-2",
	"Tuple",
	"Exception",
	"Control-Structure",
	"Object"
	
Names
	"an integer",
	"a float",
	"_r_",
	"convert_to an integer",
	"convert_to a float",
	"Invalid Numeral",
	"Invalid Character"

Body

Method "an integer" is [integer];
Method "a float" is [float];

/** Conversions **/


result ::= lookup "result";

"Invalid Character" is explicit subtype of Exception with
	result -> string;

"Invalid Numeral" is explicit subtype of Exception with
	result -> string;

digitZero ::= #"0";
digitNine ::= #"9";
lettera ::= #"a";
letterz ::= #"z";
letterA ::= #"A";
letterZ ::= #"Z";

Method "_r_" is 
[
	radix : [2..36], 
	digits : string 
|
	/* Variable-radix string to integer conversion.
	   For example, 16r"ff" is 255. */
	answer :  integer := 0;
	digits do 
	[
		char : character 
	|
		dig ::= code point of char;
		
		digValue ::= if digitZero <= dig <= digitNine then 
		[		
	 		dig - digitZero
		] else if lettera <= dig <= letterz then
		[
			dig - lettera + 10
		] else if letterA <= dig <= letterZ then 
		[
			dig - letterA + 10
		] else 
		[
			Raise Invalid Character with digits
		];
	
		if digValue >= radix | digValue < 0 then [
			Raise Invalid Numeral with digits];
		
		answer := answer * radix + digValue;
	];
	cast answer into [a: whole number | a]
];

Restriction "_r_" is [radixType : [2..36] type, digitsType : string type |
	maxStringSize ::= digitsType sizes upper bound;
	if maxStringSize is finite then [
		/* Compute a rough bound based on the string size and radix. */
		finiteMaxStringSize ::= cast maxStringSize into [w : whole number | w];
		maxRadix ::= radixType upper bound;
		[0..maxRadix ^ finiteMaxStringSize)
	] else [
		whole number
	]
];

/* Convert string to integer */
Method "convert_to an integer" is
[
	str : string
|
	if str[1] = $"-" then 
	[
		stream : string := "";
		
		stream := stream then (str[2..||str||]);

		(-1) * (10 r stream)
	] else 
	[
		10 r str
	]
]: integer;

/* Convert string to float */
Method "convert_to a float" is
[
	str : string
|
	decimalLocation : natural number := 1;
	wholeNumStream : string := "";
	decimalStream : string := "";
	
	Until [ str[decimalLocation] = $"." ]
	loop
	[
		decimalLocation := decimalLocation + 1;
	];

	wholeNumStream := wholeNumStream then (str[1..(decimalLocation - 1)]);	

	decimalStream := decimalStream then (str[(decimalLocation + 1)..||str||]);	

	wholeNum : integer := convert wholeNumStream to an integer;

	decimalUnit : float := ((convert decimalStream to an integer) as float) / 
		(10^||decimalStream||);

	if wholeNum < 0 then
	[
		wholeNum - decimalUnit
	] else
	[
		wholeNum + decimalUnit
	]
]: float;
