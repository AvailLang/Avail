/**
 * .../Tier-1/Tuple.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Tuple"
Extends
Uses
	"Tier-0",
	"Block",
	"Container",
	"Integer",
	"Type"
Names
	"<_,_`…`|_>",
	"tuple_like_default_",
	"tuple_of_",
	"tuple of_",
	"tuple like_",
	"<«_‡,»>",
	"_leading types",
	"_default type",
	"_sizes",
	"_sizes lower bound",
	"_sizes upper bound",
	"`|`|_`|`|",
	"_[_.._]",
	"union of types in_",
	"union of types in_at indices_through_"
Body


/* Tuple constructor... */

Method "<«_‡,»>" is [t : tuple |
	t
] : tuple;

Restriction "<«_‡,»>" is [tType : tupleType |
	tType
] : tupleType;

/* Tuple type constructor... */

Method "<_,_`…`|_>" is [
		typeTuple : tupleOfAnyMeta,
		defaultType : any type,
		sizeRange : whole number type |
	Primitive 137;
] : tupleType;

Method "tuple_like_default_" is [
		sizeRange : whole number type,
		typeTuple : tupleOfAnyMeta,
		defaultType : any type |
	<typeTuple, defaultType…|sizeRange>
] : tupleType;

Method "tuple_of_" is [sizeRange : whole number type, elementType : any type |
	tuple sizeRange
	like <>
	default elementType
] : tupleType;

Method "tuple of_" is [elementType : any type |
	tuple whole number
		like <>
		default elementType
] : tupleType;



/* Accessors for tupleTypes... */

Method "_leading types" is [tt: tupleType |
	Primitive 139;
] : tuple whole number like <> default type;

Method "_default type" is [tt : tupleType |
	Primitive 140;
] : type;



setOfString ::= Special Object 75;

/* Precedence rule to prevent problems later. */

Method "_private as set" is [t : tuple of string |
	Primitive 109;
] : set;

Restriction "_private as set" is [tt : (tuple of string) type |
	setOfString
];

<"_lower bound", "_upper bound"> private as set
	can't have <<"_sizes"> private as set>;


Method "_sizes" is [tt : tupleType |
	Primitive 138;
] : whole number type;

Method "_sizes lower bound" is [tt : tupleType |
	/* This is syntactically overloaded for a stronger return type, even though
	 * it isn't the case for terminates.
	 */
	result : whole number;
	* ↑result ?:= (tt sizes) lower bound;
	result
] : whole number;

Method "_sizes upper bound" is [tt : tupleType |
	/* This is syntactically overloaded for a stronger return type, even though
	 * it isn't the case for terminates.
	 */
	result : [0..INF];
	* ↑result ?:= (tt sizes) upper bound;
	result
] : [0..INF];




/* Tuple size extraction... */

Method "`|`|_`|`|" is [t : tuple |
	/* Compute size of tuple. */
	Primitive 130;
] : whole number;

Restriction "`|`|_`|`|" is [tT : tupleType |
	tT sizes
];


/* Another tuple type constructor... */

Method "tuple like_" is [elementTypes : tuple of any type |
	tuple ||elementTypes|| type
		like elementTypes
		default terminates
] : tupleType;


/* Some tuple type operations... */

Method "_[_]" is [
		tt : tupleType,
		i : natural number |
	/* Indices out of range are simply the type terminates. */
	Primitive 141;
] : type;

Restriction "_[_]" is [
		ttt : tupleType type,
		it : natural number type |
	type
];

Method "_[_.._]" is [
		tt : tupleType,
		start : natural number,
		end : whole number |
	/* Indices out of range are simply the type terminates. */
	Primitive 142 (failureCode : natural number);
	Failed
] : tuple of (any type);


/* Union of an entire tuple of types... */

Method "union of types in_" is [
		typesTuple : tuple of type |
	Primitive 38;
] : type;


/* Union of the types at some of the indices of a tupleType... */
/* I really should give this a more distinct name than the method
   we just defined, as one works on a tuple of types and the other
   works on a type for tuples. */

Method "union of types in_at indices_through_" is [
		tt : tupleType,
		start : natural number,
		end : whole number |
	Primitive 143 (failureCode : natural number);
	Failed
] : type;

