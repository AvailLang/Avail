/**
 * .../Tier-1/Set.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Set"
Extends
Uses
	"Tier-0",
	"Container",
	"Integer",
	"Tuple",
	"Type"
Names
	"{_|_}",
	"set_of_",
	"set of_",
	"_content type",
	"_sizes",
	"_sizes lower bound",
	"_sizes upper bound",
	"||_||",
	"_as tuple",
	"_as set",
	"{«_‡,»}"
Body


/* Set type construction / accessing */

Method "{_|_}" is [contentType : any type , sizes : whole number type |
	Primitive 111;
] : setType;

Method "set_of_" is [sizes : whole number type, contentType : any type |
	{contentType|sizes};
] : setType;

Method "set of_" is [elementType : any type |
	set whole number of elementType;
] : setType;

Method "_content type" is [st : setType |
	Primitive 113;
] : any type;

Method "_sizes" is [st : setType |
	Primitive 112;
] : whole number type;


/* Set manipulation primitives... */

Method "||_||" is [s : set |
	Primitive 100;
] : whole number;

Restriction "||_||" is [st : setType |
	st sizes;
] : integerType;


/* Helper arithmetic... */

Method "_private plus_" is [a : number, b : number |
	Primitive 1 (failureCode : natural number);
	Failed;
] : number;

Restriction "_private plus_" is [aT : integerType, bT : integerType |
	extended integer;
];


/* Conversion operations... */

Method "_as tuple" is [s : set |
	/* Convert the set to a tuple, with arbitrary (and unstable) ordering. */
	Primitive 110;
] : tuple;

Restriction "_as tuple" is [st : setType |
	tuple whole number
		like <>
		default st content type;
];

Method "_as set" is [t : tuple |
	Primitive 109;
] : set;

Restriction "_as set" is [tt : tupleType |
	sizes ::= tt sizes;
	minSize ::= (type union of [1..sizes upper bound private plus 1) and sizes) lower bound;
	maxSize ::= sizes upper bound;
	mergedType ::= type union of (union of types in tt leading types) and (tt default type);
	range ::= [minSize..maxSize private plus 1);
	merged : any type;
	*↑merged ?:= mergedType;
	set (type intersection of range and whole number) of merged;
] : setType;

<"_lower bound", "_upper bound"> as set can't have <<"_sizes"> as set>;

Method "_sizes lower bound" is [st : setType |
	/* This is syntactically overloaded for a stronger return type. */
	result : [0..INF);
	* ↑result ?:= (st sizes) lower bound;
	result;
] : [0..INF);

Method "_sizes upper bound" is [st : setType |
	/* This is syntactically overloaded for a stronger return type. */
	result : [0..INF];
	* ↑result ?:= (st sizes) upper bound;
	result;
] : [0..INF];



/* Set constructors... */

Method "{«_‡,»}" is [t : tuple |
	/* Construct a set from the comma-separated tuple of values. */
	t as set;
] : set;

Restriction "{«_‡,»}" is [tt : tupleType |
	sizes ::= tt sizes;
	minSize ::= (type union of [1..sizes upper bound private plus 1) and sizes) lower bound;
	maxSize ::= sizes upper bound;
	mergedType ::= type union of (union of types in tt leading types) and (tt default type);
	range ::= [minSize..maxSize private plus 1);
	merged : any type;
	*↑merged ?:= mergedType;
	set (type intersection of range and whole number) of merged;
] : setType;

Assert ||{}|| = 0;
Assert ||{100}|| = 1;
Assert ||{100,200}|| = 2;
Assert ||{
		256,258,260,262,264,266,268,270,272,274,276
	}|| = 11;

Assert ||{
		256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
		294,296,298,300,302,304,306,308,310,313,315,317,319,321,323,325,327,330,332,
		334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
		372,374,376,377,379,381,385,386,388,390,391,393,394,395,398,399,400,401,403,
		404,406,407,408,412,413,415,416,418,420,423,425,428,430,431,433,434,435,437,
		439,440,444,452,453,455,456,458,459,461,463,465,467,469,471,473,475,478,480,
		482,484,486,488,490,492,494,902,904,905,906,908,910,911,978,979,980,986,988,
		990,992,994,996,998,1000,1002,1004,1006,1120,1122,1124,1126,1128,1130,1132,
		1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1168,1170,1172,1174,1176,
		1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,
		1208,1210,1212,1214,1217,1219,1221,1223,1225,1227
	}|| = 189;
