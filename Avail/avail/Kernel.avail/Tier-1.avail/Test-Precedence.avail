/**
 * .../Tier-1/Test-Precedence.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Test-Precedence"
Extends
Uses
	"Tier-0",
	"Block",
	"Set",
	"Tuple"
Names
Body


/* Stub test parsing methods. */

Method "_+_" is [a : integer, b : integer |
	a;
] : integer;

Method "_*_" is [a : integer, b : integer |
	a;
] : integer;

Method "_*_+_" is [a : integer, b : integer, c : integer |
	a;
] : integer;

Method "_+_*_" is [a : integer, b : integer, c : integer |
	a;
] : integer;


{"_+_"} can't have <{"_*_"} , {"_+_", "_*_", "_+_*_", "_*_+_"}>;
{"_*_"} can't have <{"_+_", "_+_*_", "_*_+_"} , {"_+_", "_*_", "_+_*_", "_*_+_"}>;
{"_*_+_"} can't have <{"_+_", "_*_+_" , "_+_*_"} , {"_+_", "_*_", "_*_+_", "_+_*_"} , {"_+_", "_*_", "_+_*_", "_*_+_"}>;
{"_+_*_"} can't have <{} , {"_+_", "_*_+_" , "_+_*_"} , {"_+_", "_*_", "_+_*_", "_*_+_"}>;


/*	"Generate all sequences of + and * up to 8 operands."
	| x a |
	[	x := (1 to: 7) each.
		a := Array new: x.
		From 1 to: x do: [:i | a at: i put: #(' + 1' ' * 1') each].
		a inject: 'Discard 1' into: [:s1 :s2 | s1 , s2]
	] captureAll
*/

Discard 1 + 1;
Discard 1 * 1;
Discard 1 + 1 + 1;
Discard 1 + 1 * 1;
Discard 1 * 1 + 1;
Discard 1 * 1 * 1;
Discard 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 * 1;
/* Discard 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 + 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 + 1 * 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 + 1 * 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 + 1 * 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 + 1 * 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 + 1 * 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 + 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 + 1 * 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 * 1 + 1;
Discard 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1;
*/
