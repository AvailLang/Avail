/**
 * Kernel/Syntax.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
System Module "Syntax"
Extends
	"Tier-4"
Uses
Names
	"Macro_is_",
	"make assignment variable_expression_",
	"_expression type",
	"_:=_",
	"(_:=_)",
	"&_",
	"…:_",
	"…::=_",
	"…:_:=_",
	"$…:_",
	"…",
	"[««…:_‡,»|»«$…:_;»«_;»]«:_»"
Body




Method "Macro_is_" is [name : string, block : [...]-> parseNode |
	Primitive 249 (failureCode : all);
	Failed;
] : void;


Method "make assignment variable_expression_" is [
		v : variableUseNode,
		e : parseNode |
	Primitive 353 (failureCode : all);
	Crash "Failed to create assignment";
] : parseNode;


Method "_expression type" is [
		e : parseNode |
	Primitive 351;
] : type;


Macro "_:=_" is [v : variableUseNode, e : parseNode |
	Primitive 353 (failureCode : string);
	Fail parse failureCode;
] : parseNode;


Macro "(_:=_)" is [v : variableUseNode, e : parseNode |
	Primitive 350 (failureCode : string);
	Fail parse failureCode;
] : parseNode;

Macro "&_" is [v : variableUseNode |
	Primitive 354 (failureCode : string);
	Fail parse failureCode;
] : parseNode;
