/**
 * Joy-Joy.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Joy-Joy"
Extends
Uses "Kernel"
Names
Body

/*  Define a trivial Joy interpreter, directly *embedded* in the Avail syntax. */

/* Some useful types... */
stack ::= tuple of all;
funct ::= [stack]->stack;

/* Polymorphic utility for evaluation... */
Method "_run_" is [a : all, s : stack | <a> then  s; ]:stack;
Method "_run_" is [f : funct, s : stack | f(s); ]:stack;
Method "_runAll_" is [t : tuple, s : stack |
	s2 : stack := s;
	t do [x : all | s2 := x run s2; ];
	s2;
];

/* Some useful primitive operations... */
pop : funct := [s:stack | s[2..||s||];];
dup : funct := [s:stack | <s[1]> then s;];
swap : funct := [s:stack | <s[2],s[1]> then (s[3..||s||]); ];
print : funct := [s:stack | Print s[1]; s[2..||s||];];
i : funct := [s:stack |
	cast s[1] into [t : tuple |
		t runAll (s[2..||s||]); ]; ];
is : funct := [s:stack |
	cast s[1] into [str : string |
		cast s[2] into [t : tuple |
			Method str is [ [s:stack | t runAll s;]; ]; ]; ];
	s[2..||s||];   /* leaves quoted program on stack */
];
Method "+" is [ [s:stack |
	cast s[1..2] into [t : tuple like <integer, integer> |
		<t[1]+t[2]> then (s[3..||s||]);]; ]; ];
Method "*" is [ [s:stack |
	cast s[1..2] into [t : tuple like <integer, integer> |
		<t[1]*t[2]> then (s[3..||s||]);]; ]; ];


/* Quoting (0, 1, >1)... */
Method "[]" is [<>;];
Method "[_]" is [x : all | <x>;];
Method "[_]" is [aList : list | <aList>;];

/* And, of course, the outer 'evaluator'... */
Method "_Joy run" is [t : tuple |
	residue ::= t runAll <>;
	Assert residue = <>;
]:void;


[[dup, *], "square", is, pop] Joy run;

[5, square, print] Joy run;

