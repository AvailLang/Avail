/**
 * Foundations-Expressions.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Foundations-Expressions"
Extends
	"Kernel"
Uses
Names
	"Expression",
	"Term",
	"Sequent",
	"_premises",
	"_consequent",
	"_assumptions",
	"_conclusion"


Body


name ::= lookup "name";
premises ::= lookup "premises";
consequent ::= lookup "consequent";
assumptions ::= lookup "assumptions";
conclusion ::= lookup "conclusion";


"Expression" is explicit subtype of Object;

"Term" is explicit subtype of Expression with
	[name->string];

"Sequent" is explicit subtype of Expression with
	[premises -> set of Term]
	[consequent -> Term];

"Assertion" is explicit subtype of Expression with
	[assumptions -> set of Sequent]
	[conclusion -> Sequent];


Abstract method "_as string" for [Expression]->string;

Method "_as string" is [term:Term |
	term -> name;
]:string;

Method "_as string" is [sequent : Sequent |
	result : string := "{";
	first : boolean := true;
	sequent -> premises do [premise : Term |
		if not first then [
			result := result then ", ";
			first := false;
		];
		result := result then premise as string;
	];
	result := result then "} |- " then sequent -> consequent as string;
	result;
]:string;

Method "_as string" is [assertion : Assertion |
	result : string := "{";
	first : boolean := true;
	assertion -> assumptions do [assumption : Sequent |
		if not first then [
			result := result then ", ";
			first := false;
		];
		result := result then assumption as string;
	];
	result := result then "} |--> " then assertion -> conclusion as string;
	result;
]:string;


Method "new Term_" is [s : string |
	Term new with <
		<name, s>
	>;
];


Method "_|-_" is [prems : set of Term, con : Term |
	Sequent new with <
		<premises, prems>,
		<consequent, con>
	>;
] : Sequent;

Method "_|-->_" is [assumps : set of Sequent, con : Sequent |
	Assertion new with <
		<assumptions, assumps>,
		<conclusion, con>
	>;
] : Assertion;

a : Term := new Term "a";
b : Term := new Term "b";
c : Term := new Term "c";

[
	th1 ::= {{} |- a} |--> {b} |- c;
	Print th1 as string;
]: void ();

