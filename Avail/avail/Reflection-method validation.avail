/**
 * Reflection-method validation.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Reflection-method validation"
Extends
Uses
	"Kernel",
	"Reflection-methods"
Names
	"Requires Clause Exception",
	"reasonString",
	"validate types for message_argument types_if fail_"

Body



/* Support for compiling message sends... */


reasonString ::= lookup "reasonString";
"Requires Clause Exception" is explicit subtype of Exception with [reasonString -> string];



/* Now, a validation routine which takes a bundle and some argument
   types, attempts to run validation, and if this fails, runs a failure block. */

Method "validate types for message_argument types_if fail_" is [
		bundle : messageBundle,
		argTypes : tuple of type,
		ifFail : [string]->terminates |
	if argTypes any [argType : type | argType = terminates;] then [
		ifFail("argument of """
			then bundle message name
			then """ to be some type other  than terminates");
	];
	sigs ::= bundle signatures;
	matching : tuple of signature := <>;
	sigs do [sig : signature |
		sigBodyType ::= sig bodyType;
		if 1 to ||sigBodyType|| all [i : natural number |
				argTypes [i] <= sigBodyType [i];] then [
			matching := matching then <sig>;
		];
	];
	chosenMethod ::= if ||matching|| = 1 then [
		matching[1];
	] else [
		bestMatches : tuple of signature := <>;
		matching do [sig : signature |
			body ::= sig bodyType;
			isBest ::= matching all [sig2 : signature |
				body2 ::= sig2 bodyType;
				1 to ||body|| all [i : natural number |
					body[i] <= body2[i];
				];
			];
			if isBest then [
				bestMatches := bestMatches then <sig>;
			];
		];
		if ||bestMatches|| = 0 then [
			ifFail("at least one signature to be applicable");
		];
		if ||bestMatches|| not = 1 then [
			ifFail("passed types to select a single most specific method");
		];
		bestMatches[1];
	];

	/* Now let's run the chosenMethod's returns block to get our type. */
	catch [reason : Requires Clause Exception |
		ifFail (reason->reasonString);
	] in [
		chosenMethod returns block apply argTypes;
	];
] : type;


