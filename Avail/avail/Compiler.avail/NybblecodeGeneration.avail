/**
 * Compiler/NybblecodeGeneration.avail
 * Copyright Â© 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "NybblecodeGeneration"
Extends
Uses
	"Kernel",
	"NybblecodeEncoding"
Names
	"Nybblecode Generator",
	"new Nybblecode Generator",

	"_call_type_",
	"_close_numOuters_",
	"_get literal_",
	"_get local_can clear_",
	"_get outer_can clear_",
	"_get type at depth_",
	"_make tuple_",
	"_pop",
	"_push label",
	"_push literal_",
	"_push local_is last_",
	"_push outer_is last_",
	"_set literal_",
	"_set local_",
	"_set outer_",
	"_super call_type_"

Body


/* This module defines the final code generator part of the metacircular Avail compiler. */

nybble ::= [0..15];

nybbles ::= lookup "nybbles";


"Nybblecode Generator" is implicit subtype of Factory with
	[nybbles -> & : tuple of nybble]
	[resultType -> []->tuple of nybble];



/* Instance creation... */

Method "new Nybblecode Generator" is [
	nybs : tuple of nybble := <>;
	Nybblecode Generator new with <
		<nybbles, &nybs>,
		<resultType, [Crash "Don't call";] : tuple of nybble>
	>;
];



/* Low level nybble emission... */

Method "_emit_" is [cg : Nybblecode Generator, nybs : tuple of nybble |
	*cg -> nybbles := *cg -> nybbles then nybs;
];

Method "_put integer_" is [cg : Nybblecode Generator, int : whole number |
	/* All operands are encoded this way to keep code small and easy to decompile. */
	cast int into [n : [0..9] |
		cg emit <n>;
	] otherwise [
		cast int into [n : [10..57] |
			cg emit <(n - 10) / 16 + 10, (n - 10) mod 16>;
		] otherwise [
			cast int into [n : [58..313] |
				cg emit <13, (n - 58) / 16, (n - 58) mod 16>;
			] otherwise [
				cast int into [n : [314..16r"FFFF"] |
					cg emit <14,
						n / 4096 mod 16,
						n / 256 mod 16,
						n / 16 mod 16,
						n mod 16>;
				] otherwise [
					cast int into [n : [0..16r"FFFFFFFF"] |
						cg emit <15,
							n / 268435456 mod 16,
							n / 16777216 mod 16,
							n / 1048576 mod 16,
							n / 65536 mod 16,
							n / 4096 mod 16,
							n / 256 mod 16,
							n / 16 mod 16,
							n mod 16>;
					] otherwise [
						Crash "Integer out of range";
					];
				];
			];
		];
	];
];



Method "_call_type_" is [
		cg : Nybblecode Generator,
		selectorIndex : natural number
		typeIndex : natural number |
	cg emit callNybbles;
	cg put integer selectorIndex;
	cg put integer typeIndex;
];

Method "_close_numOuters_" is [
		cg : Nybblecode Generator,
		codeIndex : natural number,
		numOuters : whole number |
	cg emit closeNybbles;
	cg put integer numOuters;
	cg put integer codeIndex;
];

Method "_get literal_" is [cg : Nybblecode Generator, litIndex : natural number |
	cg emit getLiteralNybbles;
	cg put integer litIndex;
];

Method "_get local_can clear_" is [
		cg : Nybblecode Generator,
		localIndex : natural number,
		canClear : boolean |
	if canClear then [cg emit getLocalClearingNybbles;]
	else [cg emit getLocalNybbles;];
	cg put integer localIndex;
];

Method "_get outer_can clear_" is [
		cg : Nybblecode Generator,
		outerIndex : natural number,
		canClear : boolean |
	if canClear then [cg emit getOuterClearingNybbles;]
	else [cg emit getOuterNybbles;];
	cg put integer outerIndex;
];

Method "_get type at depth_" is [cg : Nybblecode Generator, depth : whole number |
	cg emit getTypeNybbles;
	cg put integer depth;
];

Method "_make tuple_" is [cg : Nybblecode Generator, count : whole number |
	cg emit makeTupleNybbles;
	cg put integer count;
];

Method "_pop" is [cg : Nybblecode Generator |
	cg emit popNybbles;
];

Method "_push label" is [cg : Nybblecode Generator |
	cg emit pushLabelNybbles;
];

Method "_push local_is last_" is [
		cg : Nybblecode Generator,
		localIndex : natural number,
		isLast : boolean |
	if isLast then [cg emit pushLocalLastNybbles;]
	else [cg emit pushLocalNybbles;];
	cg put integer localIndex;
];

Method "_push outer_is last_" is [
		cg : Nybblecode Generator,
		outerIndex : natural number,
		isLast : boolean |
	if isLast then [cg emit pushOuterLastNybbles;]
	else [cg emit pushOuterNybbles;];
	cg put integer outerIndex;
];

Method "_push literal_" is [cg : Nybblecode Generator, litIndex : natural number |
	cg emit pushLiteralNybbles;
	cg put integer litIndex;
];

Method "_set literal_" is [cg : Nybblecode Generator, litIndex : natural number |
	cg emit setLiteralNybbles;
	cg put integer litIndex;
];

Method "_set local_" is [cg : Nybblecode Generator, localIndex : natural number |
	cg emit setLocalNybbles;
	cg put integer localIndex;
];

Method "_set outer_" is [cg : Nybblecode Generator, outerIndex : natural number |
	cg emit setOuterNybbles;
	cg put integer outerIndex;
];

Method "_super call_type_" is [
		cg : Nybblecode Generator,
		selectorIndex : natural number,
		typeIndex : nural number |
	cg emit superCallNybbles;
	cg put integer selectorIndex;
	cg put integer typeIndex;
];



/* And this is how to find out what nybbles were generated... */

Method "_result" is [cg : Nybblecode Generator |
	*cg -> nybbles;
] : tuple of nybble;

