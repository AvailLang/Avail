/**
 * IO-object loading.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "IO-object loading"
Extends
Uses
	"Kernel",
	"IO-file",
	"IO-input file",
	"IO-objects"
Names
	"Load from_"
Body


/* Helper method... */

Forward "Read integer from_" for [Input File] -> [0..INF);

Method "Read integer from_" is [file : Input File |
	/* Load int in little-endian, 7 bits at a time, where setting the high bit
	   indicates the integer is continued. */
	b ::= next file;
	cast b into [b2 : [128..255] |
		Read integer from file * 128 + b2 - 128;
	] otherwise [
		b;
	];
] : [0..INF);


/* Public access... */

Method "Load from_" is [file : Input File |
	/* Load an object from the file.  The subobjects are written in topological
	   order (bottom-up), so that part's easy.  The only complication is that
	   the link from a container to its value is not considered part of the ordering.
	   (this trick breaks all cycles).  A second pass is required in order to fix up
	   all the containers. */

	n ::= Read integer from file;
	objects : tuple := <>;
	delayedAssignments : tuple of tuple like <[1..INF), [0..INF)> := <>;

	1 to n do [i : [1..INF) |
		size ::= Read integer from file;
		ints : tuple of [0..INF) := 1 to size collect [k : [1..INF) |
			Read integer from file;
		];
		if ints[1] = 17 & size = 3 then [
			delayedAssignments := delayedAssignments then <<i, ints[3]>>;
			ints := ints [1..2];
		];
		exp ::= ints collect [k : [0..INF) |
			if k is odd then [
				cast k / 2 into [m : [1..INF) |
					objects [m];
				];
			] else [
				k / 2;
			];
		];
		objects := objects then <exp imploded>;
	];

	/* Now fix up all the containers that had values... */
	delayedAssignments do [pair : tuple like <[1..INF), [0..INF)> |
		rawInt ::= pair[2];
		val ::= if rawInt is odd then [
			cast rawInt / 2 into [m : [1..INF) |
				objects [m];
			];
		] else [
			rawInt / 2;
		];
		cast objects [pair[1]] into [c : container |
			*c ?:= val;
		];
	];
	cast Read integer from file into [m : [1..INF) |
		objects [m];
	];
];

