/**
 * Backtrack-test.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Backtrack-test"
Extends
Uses
	"Backtrack-main",
	"2-main"
Names
Body

x ::= capture all [maybe;];

Assert x = <true,false>;

y1 ::= capture all [{each (1 to 4), each (1 to 4)};];

Assert y1 = <
		{1},{1,2},{1,3},{1,4},
		{2,1},{2},{2,3},{2,4},
		{3,1},{3,2},{3},{3,4},
		{4,1},{4,2},{4,3},{4}>;

y2 ::= capture first 5 of [{each (1 to 4), each (1 to 4)};];

Assert y2 = <{1},{1,2},{1,3},{1,4}, {2,1}>;


z ::= capture all [<maybe, each<1,3,5>>;];

Assert z = <
		<true,1>,<true,3>,<true,5>,
		<false,1>,<false,3>,<false,5>>;


/* Now let's solve the eight queens problem... */

queens ::= [n : natural number |
	t : tuple of natural number := 1 to n;
	1 to n do [i : natural number |
		t := t [i -> each 1 to n];
		1 to i - 1 do [j : natural number |
			if t[i] = t[j] then [fail;];
			if |t[i] - t[j]| = i - j then [fail;];
		];
	];
	t;
];

Assert capture first 1 of [queens(5);] = <<1,3,5,2,4>>;

