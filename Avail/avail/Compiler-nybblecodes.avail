/**
 * Compiler-nybblecodes.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Compiler-nybblecodes"
Extends
Uses
	"Kernel",
	"Compiler-nybblecode generation"
Names
	"Instruction",
	"Call Instruction",
	"Close Instruction",
	"Get Literal Instruction",
	"Get Variable Instruction",
		"Get Local Instruction",
		"Get Outer Instruction",
	"Get Type Instruction",
	"Label Instruction",
	"Make List Instruction",
	"Pop Instruction",
	"Push Label Instruction",
	"Push Literal Instruction",
	"Push Variable Instruction",
		"Push Local Instruction",
		"Push Outer Instruction",
	"Return Instruction",
	"Set Literal Instruction",
	"Set Variable Instruction",
		"Set Local Instruction",
		"Set Outer Instruction",
	"Super Call Instruction",
	"Verify Type Instruction",

	"new Call Instruction literal index_",
	"new Close Instruction literal index_number of outers_",
	"new Get Literal Instruction literal index_",
	"new Get Local Instruction local index_",
	"new Get Outer Instruction outer index_",
	"new Get Type Instruction depth_",
	"new Label Instruction",
	"new Make List Instruction count_",
	"new Pop Instruction",
	"new Push Label Instruction",
	"new Push Literal Instruction literal index_",
	"new Push Local Instruction local index_",
	"new Push Outer Instruction outer index_",
	"new Return Instruction",
	"new Set Literal Instruction literal index_",
	"new Set Local Instruction local index_",
	"new Set Outer Instruction outer index_",
	"new Super Call Instruction literal index_",
	"new Verify Type Instruction type index_",

	"_index",
	"_canClear",
	"_isLast",

	"_emit instruction_"
Body


/* This module defines the target instructions of the Avail compiler.  */

/* First, some field names... */
index ::= lookup "index";
numCopied ::= lookup "numCopied";
canClear ::= lookup "canClear";
depth ::= lookup "depth";
count ::= lookup "count";
isLast ::= lookup "isLast";
label ::= lookup "label";

"Instruction" is explicit subtype of Object;
	"Call Instruction" is explicit subtype of Instruction with
			[index -> natural number];
	"Close Instruction" is explicit subtype of Instruction with
			[numCopied -> whole number]
			[index -> natural number];
	"Get Literal Instruction" is explicit subtype of Instruction with
			[index -> natural number];
	"Get Variable Instruction" is explicit subtype of Instruction with
			[canClear -> & : boolean];
		"Get Local Instruction" is explicit subtype of Get Variable Instruction with
			[index -> natural number];
		"Get Outer Instruction" is explicit subtype of Get Variable Instruction with
			[index -> natural number];
	"Get Type Instruction" is explicit subtype of Instruction with
			[depth -> whole number];
	"Label Instruction" is explicit subtype of Instruction;
	"Make List Instruction" is explicit subtype of Instruction with
			[count -> whole number];
	"Pop Instruction" is explicit subtype of Instruction;
	"Push Label Instruction" is explicit subtype of Instruction;
	"Push Literal Instruction" is explicit subtype of Instruction with
			[index -> natural number];
	"Push Variable Instruction" is explicit subtype of Instruction with
			[isLast -> & : boolean];
		"Push Local Instruction" is explicit subtype of Push Variable Instruction with
			[index -> natural number];
		"Push Outer Instruction" is explicit subtype of Push Variable Instruction with
			[index -> natural number];
	"Return Instruction" is explicit subtype of Instruction;
	"Set Literal Instruction" is explicit subtype of Instruction with
			[index -> natural number];
	"Set Variable Instruction" is explicit subtype of Instruction;
		"Set Local Instruction" is explicit subtype of Set Variable Instruction with
			[index -> natural number];
		"Set Outer Instruction" is explicit subtype of Set Variable Instruction with
			[index -> natural number];
	"Super Call Instruction" is explicit subtype of Instruction with
			[index -> natural number];
	"Verify Type Instruction" is explicit subtype of Instruction with
			[index -> natural number];


(Instruction altered with <<index, integer>>) has fields <"index">;
Get Variable Instruction has fields <"canClear">;
Push Variable Instruction has fields <"isLast">;



/* Instruction creation... */

Method "new Call Instruction literal index_" is [litIndex : natural number |
	Call Instruction new with <
		<index, litIndex>
	>;
];

Method "new Close Instruction literal index_number of outers_" is [
		litIndex : natural number,
		numOuters : whole number |
	Close Instruction new with <
		<numCopied, numOuters>,
		<index, litIndex>
	>;
];

Method "new Get Literal Instruction literal index_" is [litIndex : natural number |
	Get Literal Instruction new with <
		<index, litIndex>
	>;
];

Method "new Get Local Instruction local index_" is [
		localIndex : natural number |
	canClearFlag : boolean;
	Get Local Instruction new with <
		<index, localIndex>,
		<canClear, &canClearFlag>
	>;
];

Method "new Get Outer Instruction outer index_" is [
		outerIndex : natural number |
	canClearFlag : boolean;
	Get Outer Instruction new with <
		<index, outerIndex>,
		<canClear, &canClearFlag>
	>;
];

Method "new Get Type Instruction depth_" is [depthValue : whole number |
	Get Type Instruction new with <
		<depth, depthValue>
	>;
];

Method "new Label Instruction" is [
	Label Instruction new with <>;
];

Method "new Make List Instruction count_" is [listSize : whole number |
	Make List Instruction new with <
		<count, listSize>
	>;
];

Method "new Pop Instruction" is [
	Pop Instruction new with <>;
];

Method "new Push Label Instruction" is [
	Push Label Instruction new with <>;
];

Method "new Push Literal Instruction literal index_" is [litIndex : natural number |
	Push Literal Instruction new with <
		<index, litIndex>
	>;
];

Method "new Push Local Instruction local index_" is [
		localIndex : natural number |
	isLastFlag : boolean;
	Push Local Instruction new with <
		<index, localIndex>,
		<isLast, &isLastFlag>
	>;
];

Method "new Push Outer Instruction outer index_" is [
		outerIndex : natural number |
	isLastFlag : boolean;
	Push Outer Instruction new with <
		<index, outerIndex>,
		<isLast, &isLastFlag>
	>;
];

Method "new Return Instruction" is [
	Return Instruction new with <>;
];

Method "new Set Literal Instruction literal index_" is [litIndex : natural number |
	Set Literal Instruction new with <
		<index, litIndex>
	>;
];

Method "new Set Local Instruction local index_" is [localIndex : natural number |
	Set Local Instruction new with <
		<index, localIndex>
	>;
];

Method "new Set Outer Instruction outer index_" is [outerIndex : natural number |
	Set Outer Instruction new with <
		<index, outerIndex>
	>;
];

Method "new Super Call Instruction literal index_" is [litIndex : natural number |
	Super Call Instruction new with <
		<index, litIndex>
	>;
];

Method "new Verify Type Instruction type index_" is [typeIndex : natural number |
	Verify Type Instruction new with <
		<index, typeIndex>
	>;
];




/* Instruction emission methods... */

Abstract method "_emit instruction_" for [Nybblecode Generator, Instruction]->void;

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Call Instruction |
	cg call instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Close Instruction |
	cg close instr->index numOuters instr->numCopied;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Get Literal Instruction |
	cg get literal instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Get Local Instruction |
	cg get local instr->index can clear *instr->canClear;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Get Outer Instruction |
	cg get outer instr->index can clear *instr->canClear;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Get Type Instruction |
	cg get type at depth instr->depth;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Label Instruction |
	/* Do nothing.  I represent a label, NOT a push of that label. */
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Make List Instruction |
	cg make list instr->count;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Pop Instruction |
	cg pop;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Push Label Instruction |
	cg push label;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Push Literal Instruction |
	cg push literal instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Push Local Instruction |
	cg push local instr->index is last *instr->isLast;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Push Outer Instruction |
	cg push outer instr->index is last *instr->isLast;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Return Instruction |
	cg return;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Set Literal Instruction |
	cg set literal instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Set Local Instruction |
	cg set local instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Set Outer Instruction |
	cg set outer instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Super Call Instruction |
	cg super call instr->index;
];

Method "_emit instruction_" is [cg : Nybblecode Generator, instr : Verify Type Instruction |
	cg verify type instr->index;
];


