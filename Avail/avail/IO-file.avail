/**
 * IO-file.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "IO-file"
Extends
Uses
	"Kernel"
Names
	"File",
	"_named_",
	"_exists",
	"_is readable",
	"_is writable",
	"_is executable",
	"Rename_to_",
	"Unlink_from filesystem",
	"_position",
	"_size",
	"_go to_",
	"Close_",
	"handle"
Body


/* I define the simple file i/o operations for Avail. */

privateHandle ::= lookup "handle";

Method "handle" is [privateHandle;];

"File" is explicit subtype of Object with
	[handle->cyclicType];


/* Instance creation... */

Abstract method "_named_" for [File type, string]->File
returns [ftT : File type type, strT : string type |
	ftT instance;
];

/* Filename inquiries... */

Method "_exists" is [filename : string |
	[filename : string |
		Primitive 170;
		Failed;
	] : boolean (filename);
] : boolean;

Method "_is readable" is [filename : string |
	[filename : string |
		Primitive 171;
		Failed;
	] : boolean (filename);
] : boolean;

Method "_is writable" is [filename : string |
	[filename : string |
		Primitive 172;
		Failed;
	] : boolean (filename);
] : boolean;

Method "_is executable" is [filename : string |
	[filename : string |
		Primitive 173;
		Failed;
	] : boolean (filename);
] : boolean;

/* Filename operations... */

Method "Rename_to_" is [source : string, destination : string |
	[source : string, destination : string |
		Primitive 174;
		Failed;
	] : void (source, destination);
] : void;

Method "Unlink_from filesystem" is [filename : string |
	[filename : string |
		Primitive 175;
		Failed;
	] : void (filename);
] : void;

/* Basic accessing... */

Method "_position" is [file: File |
	[handle : cyclicType |
		Primitive 167;
		Failed;
	] : [0..INF] (file -> handle);
] : [0..INF];

Method "_size" is [file : File |
	[handle : cyclicType |
		Primitive 166;
		Failed;
	] : [0..INF] (file -> handle);
] : [0..INF];

Method "_is at end" is [file : File |
	file position + 1 > file size;
] : boolean;

Method "_go to_" is [file : File, newPosition : [0..INF] |
	[handle : cyclicType, newPosition : [0..INF] |
		Primitive 168;
		Failed;
	] : void (file -> handle, newPosition);
] : void;

Method "Close_" is [file : File |
	[handle : cyclicType |
		Primitive 163;
		Failed;
	] : void (file -> handle);
] : void;


