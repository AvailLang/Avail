/**
 * Process-process.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Process-process"
Extends
Uses
	"3-main"
Names
	"_priority",
	"_priority_",
	"_suspend",
	"_resume",
	"_terminate",
	"current process",
	"_[_]",
	"_[_]:=_"
Body


/* Process support.  Processes in Avail are lightweight, but not manually
   scheduled like fibers.  The scheduler time-slices all ready-to-run processes
   that have the highest ready priority.  There is no provision for blocking
   other processes from running except the use of semaphores and other
   synchronization media, or by asking a process to suspend / resume.
   There is no quota system inmplemented yet, but eventually processes
   will be granted time-slices from their originating processes.  When a
   parent process dies, its quota is permanently distributed among its
   live children.  While a parent process is alive it may apportion fractions
   of its time slice to its children processes.  This is a form of sandboxing
   similar to pointer abstraction and garbage collection.  Even memory
   allocation may be sandboxed in this way eventually, but that's a lot
   harder.
*/


Method "_priority" is [p : process |
	Primitive 20;
	Failed;
] : [0..100];


Method "_priority_" is [p : process, priority : [0..100] |
	Primitive 21;
	Failed;
] : void;

Method "_suspend" is [p : process |
	Primitive 22;
	Failed;
] : void;

Method "_resume" is [p : process |
	Primitive 23;
	Failed;
] : void;

Method "_terminate" is [p : process |
	Primitive 24;
	Failed;
] : void;

Method "current process" is [
	Primitive 25;
	Failed;
] : process;

Method "_[_]" is [p : process, key : cyclicType |
	/* Lookup a process variable. */
	Primitive 26;
	Failed;
] : all;

Method "_[_]:=_" is [p : process, key : cyclicType, value : all |
	/* Set a process variable. */
	Primitive 27;
	Failed;
] : void;
