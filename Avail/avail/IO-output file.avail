/**
 * IO-output file.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "IO-output file"
Extends
Uses
	"Kernel",
	"IO-file"
Names
	"Output File",
	"Write_to_"
Body


/* I define the simple file output operations for Avail. */

/* handle ::= lookup "handle"; */

"Output File" is explicit subtype of File;


/* Instance creation... */

Method "_named_" is [fileType : Output File type, name : string |
	fileHandle : integer := [theName : string |
		Primitive 161;
		Failed;
	] : integer (name);
	Output File new with <
		<handle, fileHandle>
	>;
] : Output File;


/* Basic accessing... */

Method "Write_to_" is [bytes : tuple of byte, file : Output File |
	residue ::= ([handle : integer, bytes2 : tuple of byte |
		Primitive 164;
		Failed;
	] : tuple of byte) (file -> handle, bytes);
	if ||residue|| > 0 then [Crash "File write didn't finish all bytes.";];
] : void;

Method "Write_to_" is [theByte : byte, file : Output File |
	Write <theByte> to file;
] : void;


