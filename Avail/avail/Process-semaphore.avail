/**
 * Process-semaphore.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Process-semaphore"
Extends
Uses
	"3-main",
	"Process-process"
Names
	"Semaphore",
	"signal_",
	"wait for_",
	"_critical section_"
Body


/* A semaphore is the simplest and most common mechanism of
   synchronization.  That doesn't mean it's the easiest to use or the
   safest, or the most powerful, however. */


waiters ::= lookup "waiters";
excessSignals ::= lookup "excessSignals";

"Semaphore" is explicit subtype of Object with
	[waiters -> & : tuple of process]
	[excessSignals -> & : integer];

Method "wait for_" is [sem : Semaphore |
	/* Answer void.  If this process later gets blown off this semaphore
	   for other reasons (simulated timeout, deadlock victim, explicit
	   termination), an appropriate exception must be raised within this
	   process immediately. */
	Primitive 28;
	Failed;
] : void;

Method "signal_" is [sem : Semaphore |
	Primitive 29;
	Failed;
] : void;


Method "_critical section_" is [sem : Semaphore, blk : []->void |
	wait for sem;
	blk();
	signal sem;
] : void;

Method "_critical section_" is [sem : Semaphore, blk : []->all |
	/* Note - this is an override to allow the block's value to be used. */
	wait for sem;
	result ::= blk();
	signal sem;
	result;
] : all
returns [st : Semaphore type, blkt : closureType |
	blkt result;
];

