/**
 * 3-test exceptions.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "3-test exceptions"
Extends
Uses
	"2-main",
	"3-exception",
	"3-object"
Names
Body



/* Now some concrete Exception subtypes... */

result ::= lookup "result";

"Division By Zero Exception" is explicit subtype of Exception with [result->extended integer];


/* Test exceptions. */

Method "TestA_" is [i : integer |
	catch [ex : Division By Zero Exception |
		ex result;
	] in [
		if i > 5 then [Raise Division By Zero Exception with i - 10;]
		else [i + 10;];
	];
];

Method "Run1" is [
	1 to 10 collect [i : [1..10] |
		catch [ex : Division By Zero Exception | 0;]
		in [TestA i;];
	];
];

Assert Run1 = <11,12,13,14,15,-4,-3,-2,-1,0>;


Method "TestB_" is [i : integer |
	catch
		[ex : Division By Zero Exception | ex result;],
		[ex : Exception | Crash "A general exception was thrown";],
		[ex : Division By Zero Exception | ex result + 100;]
	in [
		if i > 5 then [Raise Division By Zero Exception with i - 10;]
		else [i + 10;];
	];
];

Method "Run2" is [
	1 to 10 collect [i : [1..10] |
		catch [ex : Division By Zero Exception | 0;]
		in [TestB i;];
	];
];


Assert Run2 = <11,12,13,14,15,96,97,98,99,100>;

