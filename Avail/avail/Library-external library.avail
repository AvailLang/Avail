/**
 * Library-external library.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Library-external library"
Extends
Uses
	"Kernel",
	"Library-primitives"
Names
	"External Library",
	"new External Library",
	"External Entry Point",
	"Open_file_",
	"_function_"
Body

/* I define the mechanism by which Avail can call dynamic-link libraries. */

privateHandle ::= lookup "handle";
privateDeclaration ::= lookup "declaration";

Method "handle" is [privateHandle;];


"External Library" is explicit subtype of Object with
	[privateHandle -> integer];

"External Entry Point" is explicit subtype of Object with
	[privateHandle -> integer]
	[privateDeclaration -> string];


Method "new External Library" is [
	External Library new with <
		<privateHandle, create primitive library>
	>;
] : External Library;

Method "Open_file_" is [
		lib : External Library,
		fileName : string |
	Open primitive library lib->privateHandle file fileName;
] : void;


Method "_function_" is [
		library : External Library,
		declaration : string |
	entryPointHandle ::= library->privateHandle declare primitive function declaration;
	External Entry Point new with <
		<privateHandle, entryPointHandle>,
		<privateDeclaration, declaration>
	>;
] : External Entry Point;

Method "_(_)" is [
		entryPoint : External Entry Point,
		arguments : list |
	invoke primitive entry point entryPoint -> privateHandle
		with arguments <arguments>;
] : all;
