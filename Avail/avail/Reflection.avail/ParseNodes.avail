/**
 * Reflection/ParseNodes.avail
 * Copyright Â© 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "ParseNodes"
Extends
Uses
	"Kernel"
Names

	"parseNode",
	"markerNode",
	"expressionNode",
	"assignmentNode",
	"blockNode",
	"literalNode",
	"referenceNode",
	"sendNode",
	"superCastNode",
	"tupleNode",
	"variableUseNode",
	"declarationNode",
	"argumentNode",
	"labelNode",
	"localVariableNode",
	"localConstantNode",
	"moduleVariableNode",
	"moduleConstantNode"

Body


/* This module deals with primitive parse nodes.  These are used for the macro
 * subsystem, which is ultimately used to define all of the syntax of Avail.
 * Still in development as of 2010.12.30.
 */

privateParseNode          ::= Special Object 50;
privateMarkerNode         ::= Special Object 51;
privateExpressionNode     ::= Special Object 52;
privateAssignmentNode     ::= Special Object 53;
privateBlockNode          ::= Special Object 54;
privateLiteralNode        ::= Special Object 55;
privateReferenceNode      ::= Special Object 56;
privateSendNode           ::= Special Object 57;
privateSuperCastNode      ::= Special Object 58;
privateTupleNode          ::= Special Object 59;
privateVariableUseNode    ::= Special Object 60;
privateDeclarationNode    ::= Special Object 61;
privateArgumentNode       ::= Special Object 62;
privateLabelNode          ::= Special Object 63;
privateLocalVariableNode  ::= Special Object 64;
privateLocalConstantNode  ::= Special Object 65;
privateModuleVariableNode ::= Special Object 66;
privateModuleConstantNode ::= Special Object 67;

Method "parseNode"          is [privateParseNode;] : primType;
Method "markerNode"         is [privateMarkerNode;] : primType;
Method "expressionNode"     is [privateExpressionNode;] : primType;
Method "assignmentNode"     is [privateAssignmentNode;] : primType;
Method "blockNode"          is [privateBlockNode;] : primType;
Method "literalNode"        is [privateLiteralNode;] : primType;
Method "referenceNode"      is [privateReferenceNode;] : primType;
Method "sendNode"           is [privateSendNode;] : primType;
Method "superCastNode"      is [privateSuperCastNode;] : primType;
Method "tupleNode"          is [privateTupleNode;] : primType;
Method "variableUseNode"    is [privateVariableUseNode;] : primType;
Method "declarationNode"    is [privateDeclarationNode;] : primType;
Method "argumentNode"       is [privateArgumentNode;] : primType;
Method "labelNode"          is [privateLabelNode;] : primType;
Method "localVariableNode"  is [privateLocalVariableNode;] : primType;
Method "localConstantNode"  is [privateLocalConstantNode;] : primType;
Method "moduleVariableNode" is [privateModuleVariableNode;] : primType;
Method "moduleConstantNode" is [privateModuleConstantNode;] : primType;


/* parseNode accessors */

/* NOT YET IMPLEMENTED */
