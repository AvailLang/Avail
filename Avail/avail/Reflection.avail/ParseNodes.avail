/**
 * Reflection/ParseNodes.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "ParseNodes"
Extends
Uses
	"Kernel"
Names
	"parseNode",
		"assignmentNode",
		"blockNode",
		"tupleNode",
		"literalNode",
		"referenceNode",
		"sendNode",
		"superCastNode",
		"variableDeclarationNode",
			"syntheticConstantNode",
			"initializingDeclarationNode",
				"constantDeclarationNode",
			"labelNode",
			"syntheticDeclarationNode",
		"variableUseNode",

	"_expression",
	"_variable",
	"_arguments",
	"_primitive number",
	"_statements",
	"_node value type",
	"_needed variables",
	"_expressionType",
	"_literal token",
	"_literal value",
	"_message",
	"_bundle",
	"_implementation set",
	"_variable name",
	"_is argument",
	"_variable declaration",
	"_is last use"

Body


/* This module deals with primitive parse nodes.  These are used for the macro
 * subsystem, which is ultimately used to define all of the syntax of Avail.
 * Still in development as of 2010.11.11.
 */


privateAssignmentNode              ::= Special Object 50;
privateBlockNode                   ::= Special Object 51;
privateConstantDeclarationNode     ::= Special Object 52;
privateInitializingDeclarationNode ::= Special Object 53;
privateLabelNode                   ::= Special Object 54;
privateTupleNode                   ::= Special Object 55;
privateLiteralNode                 ::= Special Object 56;
privateParseNode                   ::= Special Object 57;
privateReferenceNode               ::= Special Object 58;
privateSendNode                    ::= Special Object 59;
privateSuperCastNode               ::= Special Object 60;
privateSyntheticConstantNode       ::= Special Object 61;
privateSyntheticDeclarationNode    ::= Special Object 62;
privateVariableDeclarationNode     ::= Special Object 63;
privateVariableUseNode             ::= Special Object 64;


Method "assignmentNode" is [privateAssignmentNode;] : primType;
Method "blockNode" is [privateBlockNode;] : primType;
Method "constantDeclarationNode" is [privateConstantDeclarationNode;] : primType;
Method "initializingDeclarationNode" is [privateInitializingDeclarationNode;] : primType;
Method "labelNode" is [privateLabelNode;] : primType;
Method "tupleNode" is [privateTupleNode;] : primType;
Method "literalNode" is [privateLiteralNode;] : primType;
Method "parseNode" is [privateParseNode;] : primType;
Method "referenceNode" is [privateReferenceNode;] : primType;
Method "sendNode" is [privateSendNode;] : primType;
Method "superCastNode" is [privateSuperCastNode;] : primType;
Method "syntheticConstantNode" is [privateSyntheticConstantNode;] : primType;
Method "syntheticDeclarationNode" is [privateSyntheticDeclarationNode;] : primType;
Method "variableDeclarationNode" is [privateVariableDeclarationNode;] : primType;
Method "variableUseNode" is [privateVariableUseNode;] : primType;


/* parseNode accessors */

/* NOT YET IMPLEMENTED (cloned from the message bundle stuff as a template) */
/*
Method "_message" is [bundle : messageBundle |
	Primitive 211;
	Failed;
] : cyclicType;

Method "_message parts" is [bundle : messageBundle |
	Primitive 212;
	Failed;
] : tuple of string;
*/
