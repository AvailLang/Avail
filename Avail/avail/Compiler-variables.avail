/**
 * Compiler-variables.avail
 * Copyright (c) 2010, Mark van Gulik.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Compiler-variables"
Extends
Uses
	"Kernel"
Names
	"Variable",
	"Argument",
	"Local",
	"Label",
	"Global",

	"new Argument name_type_",
	"new Local name_type_",
	"new Label name_type_",
	"new Global name_type_literal_",

	"_name",
	"_myType",
	"_literal",
	"_variable type"
Body


/* This module defines the concept of variables, apart from syntactic concerns.
   It's part of the metacircular Avail compiler.  */

/* Here's as good a place as any to describe the way variables work in the
   Avail Level One interpreter (and therefore the compiler).  A block may have a
   label, which is an unassignable variable whose value is the continuation at
   entry to the block.  The label is constructed at the last possible moment (but
   before needed information is destroyed).  Block arguments occupy slots of
   the continuation.  Locals immediately follow, but these slots contain variables
   rather than directly containing values the way arguments do.  The compiler
   keeps track of locals and arguments, and (hopefully) doesn't mix up their
   different representations.  Note that we save memory and time by not
   constructing variables for arguments, as assignments to arguments are
   already outlawed for reasons other than performance.  When a block refers
   to variables outside its scope, these variables must have been previously
   saved in the closure's "outer" variables.  The compiler pushes argument
   values or local variables (or even a label value), and then uses a "close"
   instruction to create the block (also called a "closure").  Global variables
   are a bit easier, in that the variable itself is stored in the code's literals. */


name ::= lookup "name";
myType ::= lookup "myType";
literal ::= lookup "literal";

"Variable" is explicit subtype of Object with
		[name -> string]
		[myType -> type];
	"Argument" is explicit subtype of Variable;
	"Local" is explicit subtype of Variable;
	"Label" is explicit subtype of Variable with
		[myType -> continuationType];   /* strengthened type */
	"Global" is explicit subtype of Variable with
		[literal -> container];


Variable has fields <"name", "myType">;
Global has fields <"literal">;


Method "new Argument name_type_" is [n : string, t : type |
	Argument new with <
		<name, n>,
		<myType, t>
	>;
];

Method "new Local name_type_" is [n : string, t : type |
	Local new with <
		<name, n>,
		<myType, t>
	>;
];

Method "new Label name_type_" is [n : string, t : continuationType |
	Label new with <
		<name, n>,
		<myType, t>
	>;
];

Method "new Global name_type_literal_" is [n : string, t : type, lit : container |
	Assert lit type contentType <= t;
	Global new with <
		<name, n>,
		<myType, t>,
		<literal, lit>
	>;
];




Method "_variable type" is [var : Variable |
	var myType;
] : type;

Method "_variable type" is [var : Local |
	& : var myType;
] : containerType;

Method "_variable type" is [var : Global |
	var literal type;
] : containerType;

