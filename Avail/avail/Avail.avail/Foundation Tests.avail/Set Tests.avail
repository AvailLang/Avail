/*
 * Set Tests.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Set Tests"
Versions
	"dev"
Uses
	"Common",
	"Foundation",
	"Unit Testing"
Names
	"set test suite"
Body

/* The test suite identifier. */
"set test suite" is a new atom;

New test suite set test suite extends foundation test suite;

/* Set Algebra */
Test "set union" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	
	Require: a ∪ b = {1,2,3,4,5,6};
	Require: b ∪ a = {1,2,3,4,5,6};
	Require: a ∪ a = a;
	Require: a ∪ ∅ = a;
];

Test "set intersection" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	
	Require: a ∩ b = {3,4};
	Require: a ∩ a = a;
	Require: b ∩ a = {3,4};
	Require: a ∩ ∅ = ∅;
];

Test "relative complement" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	
	Require: a \ b = {1,2};
	Require: b \ a = {5,6};
	Require: a \ ∅ = a;
	Require: ∅ \ a = ∅;
	Require: a \ a = ∅;
];

Test "symmetric difference" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a Δ b = {1,2,5,6};
	Require: b Δ a = {1,2,5,6};
	Require: a Δ ∅ = a;
	Require: ∅ Δ a = a;
	Require: a Δ a = ∅;
	Require: ∅ Δ ∅ = ∅;
];

Test "set includes element" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a ∋ 3;
];

Test "set excludes element" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a ∌ 6;
];

Test "set proper subset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {1,2,3,4,5};
	Require: a ⊂ b;
	Require: ∅ ⊂ a;
];

Test "set not proper subset" in set test suite is
[
	a ::= {1,2,3,4,5};
	b ::= {1,6};
	Require: b ⊄ a;
	Require: a ⊄ a;
	Require: a ⊄ ∅;
];

Test "set is a superset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {1,2,3};
	Require: a ⊇ b;
	Require: a ⊇ a;
	Require: a ⊇ ∅;
];

Test "set is not a superset" in set test suite is
[
	a ::= {1,2,3,4};
	b ::= {3,4,5,6};
	Require: a ⊉ b;
	Require: ∅ ⊉ b;
];

Test "add element to set" in set test suite is
[
	a ::= {1,2,3,4};
	Require: a + 5000 = {1,2,3,4,5000};
];

/* Other set method tests*/
Test "set cardinality" in set test suite is
[
	a ::= {1,2,3,4};
	Require: |a| = 4;
	Require: |∅| = 0;
	Require: ∅ is empty = true;
];

Test "map through" in set test suite is
[
 	a ::= {1,2,3,4};
 	b ::= map a through [n : natural number | n × 2];
 	Require: b = {2,4,6,8};
];

Test "map and filter" in set test suite is
[
 	a ::= {1,2,3,4};
 	b ::= map and filter a by 
 	[
 	 	n : natural number,
 	 	accept : [natural number]→⊤
 	 | 
 	 	m ::= n + 2;
 		If m mod 2 = 0 then
 		[
 		 	accept(m);
 		];
 	];
 	Require: b = {4,6};
];

Test "any satisfies" in set test suite is
[
 	a ::= {1,2,3,4};
 	b ::= any of a satisfies [n : natural number | n mod 2 = 0];
 	c ::= any of a satisfies [n : natural number | n > 200];
 	Require: b = true;
 	Require: c = false;
];