/*
 * Variables.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Variables"
Versions
	"dev"
Extends
Uses
	"Bootstrap",
	"Early Control Structures",
	"Early Definers",
	"Early Literals",
	"Early Logic",
	"Early Math",
	"Enumeration Support"
Names
	"(↓new↑_:=_)",
	"(↓new↑_`?=_)",
	"_++",
	"++_",
	"(_++)",
	"(++_)",
	"_--",
	"--_",
	"(_--)",
	"(--_)",
	"_is assigned",
	"↓_else_"
Body

/**
 * @method "↓_"
 * @restricts "variable meta"
 */
Semantic restriction "↓_" is
[
	varType : variable meta
|
	varType's read type
];

/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new↑_:=_)"
 * @param "containmentType" "any meta"
 * @param "initialValue" "any"
 * Parameters:
 *    containmentType - The containment type.
 *    initialValue - The initial value.
 * @returns "variable"
 * Returns:
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new↑_:=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	↓var ?= initialValue;
	var
] : variable;

/**
 * Reject the current parse if the variable type does not accept the initial
 * value.
 * 
 * @method "(↓new↑_:=_)"
 * @restricts "any meta's type"
 * @restricts "any meta"
 */
Semantic restriction "(↓new↑_:=_)" is
[
	containmentMeta : any meta's type,
	valueType : any meta
|
	If ¬valueType's type ⊆ containmentMeta then
	[
		messageTuple ::= concatenate <
			"containment type (",
			“containmentMeta”,
			" to support initial value (",
			“valueType”,
			")">;
		Reject parse, expected: cast messageTuple into [t : string | t]
	];
	⊤
];

/**
 * Construct and answer a new variable with the specified containment type and
 * initial value.
 *
 * @method "(↓new↑_`?=_)"
 * @param "containmentType" "any meta"
 * @param "initialValue" "any"
 * Parameters:
 *    containmentType - The containment type.
 *    initialValue - The initial value.
 * @returns "variable"
 * Returns:
 *    A new variable capable of retrieving and storing values of the specified
 *    containment type. The variable contains `initialValue`.
 */
Public method "(↓new↑_`?=_)" is
[
	containmentType : any meta,
	initialValue : any
|
	var ::= new ↑containmentType;
	↓var ?= initialValue;
	var
] : variable;

/**
 * Does the specified variable contain a value?
 *
 * @method "_is assigned"
 * @param "var" "variable"
 * Parameters:
 *    var - A variable.
 * @returns "boolean"
 * Returns:
 *    `true` if the variable contains a value (i.e. because it has previously
 *    been assigned), `false` otherwise.
 */
Public method "_is assigned" is
[
	var : variable
|
	¬var is unassigned
];

/**
 * Two variables may exchange contents iff the read type of each is a subtype of
 * the write type of the other. If this is not the case, then reject the parse.
 * 
 * @method "swap_and_"
 * @restricts "variable meta"
 * @restricts "variable meta"
 */
Semantic restriction "swap_and_" is
[
	typeA : variable meta,
	typeB : variable meta
|
	if typeA's read type ⊆ typeB's write type
		∧ [ typeB's read type ⊆ typeB's write type ]
	then
	[
		⊤
	]
	else
	[
		Reject parse, expected:
			"variable's read/write types to be cross-compatible"
	]
];

/**
 * Answer a function that accepts a variable and increments it.
 * 
 * @method "increment function"
 * @param "var" "variable"
 * @returns "⊤"
 * Returns:
 *    The requested function.
 */
Private method "increment function" is
[
	[
		var : variable
	|
		↓var ?= cast eject var into [ t : number | t + 1 ];
	] : ⊤
];

/**
 * Answer a function suitable for semantically restricting increment/decrement
 * statements.
 * 
 * @method "increment/decrement semantic restriction"
 * @param "varType" "variable meta"
 * @returns "⊤"
 * Returns:
 *    A function that accepts a variable type and requires that it be able to
 *    read/write numbers. It answers ⊤.
 */
Private method "increment/decrement semantic restriction" is
[
	[
		varType : variable meta
	|
		If (¬varType's read type ⊆ number)
			∨ [ ¬varType's write type ⊆ number ]
		then
		[
			Reject parse, expected: "variable to accept and yield numbers"
		];
		⊤
	]
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "_++"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 */
Public method "_++" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "_++"
 * @restricts "variable meta"
 */
Semantic restriction "_++" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, increment the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_++)"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 * @returns "⊤"
 * Returns:
 *    The value of the argument prior to the increment.
 */
Public method "(_++)" is
[
	var : variable
|
	value ::= eject var;
	↓var ?= cast value into [ t : number | t + 1 ];
	value
] : ⊤;

/**
 * Since the increment happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_++)"
 * @restricts "variable meta"
 */
Semantic restriction "(_++)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	varType's read type
];

/**
 * Increment the variable by one. This is intended for use as a statement.
 * 
 * @method "++_"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 */
Public method "++_" is increment function;

/**
 * The autoincrement statement should accept only numeric variables.
 * 
 * @method "++_"
 * @restricts "variable meta"
 */
Semantic restriction "++_" is increment/decrement semantic restriction;

/**
 * Increment the specified value and answer its new value.
 * 
 * @method "(++_)"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument after the increment.
 */
Public method "(++_)" is
[
	var : variable
|
	↓var ?= cast eject var into [ t : number | t + 1 ];
	↓var
];

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by one.
 * 
 * @method "(++_)"
 * @restricts "variable meta"
 */
Semantic restriction "(++_)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [ t : extended integer meta | t ];
		lower ::= ⎣readRange⎦ + 1;
		upper ::= ⎡readRange⎤ + 1;
		integer range
			from lower (inclusive = ⎣readRange⎦ is inclusive)
			to upper (inclusive = ⎡readRange⎤ is inclusive)
	]
	else
	[
		readType
	]
];

/**
 * Answer a function that accepts a variable and decrements it.
 * 
 * @method "decrement function"
 * @param "var" "variable"
 * Returns:
 *    The requested function.
 */
Private method "decrement function" is
[
	[
		var : variable
	|
		↓var ?= cast eject var into [ t : number | t - 1 ];
	] : ⊤
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * @method "_--"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 */
Public method "_--" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "_--"
 * @restricts "variable meta"
 */
Semantic restriction "_--" is increment/decrement semantic restriction;

/**
 * Remember the current value of the specified variable, decrement the variable
 * by one, and answer the remembered value. This is intended for use as an
 * expression.
 * 
 * @method "(_--)"
 * @param "var" "variable"
 * Parameters:
 *    var - A numeric variable.
 * @returns "⊤"
 * Returns:
 *    The value of the argument prior to the decrement.
 */
Public method "(_--)" is
[
	var : variable
|
	value ::= eject var;
	↓var ?= cast value into [ t : number | t - 1 ];
	value
] : ⊤;

/**
 * Since the decrement happens after the value is queried, then simply answer
 * the read type of the variable.
 * 
 * @method "(_--)"
 * @restricts "variable meta"
 */
Semantic restriction "(_--)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	varType's read type
];

/**
 * Decrement the variable by one. This is intended for use as a statement.
 * 
 * Parameters:
 *    var - A numeric variable.
 *
 * @method "--_"
 * @param "var" "variable"
 * @returns "⊤"
 */
Public method "--_" is decrement function;

/**
 * The autodecrement statement should accept only numeric variables.
 * 
 * @method "--_"
 * @restricts "variable meta"
 */
Semantic restriction "--_" is increment/decrement semantic restriction;

/**
 * Decrement the specified value and answer its new value.
 * 
 * Parameters:
 *    var - A numeric variable.
 * Returns:
 *    The value of the argument after the decrement.
 *
 * @method "(--_)"
 * @param "var" "variable"
 */
Public method "(--_)" is
[
	var : variable
|
	↓var ?= cast eject var into [ t : number | t - 1 ];
	↓var
];

/**
 * Preserve the read type of the numeric variable. This can actually be
 * tightened for integral types to adjust the bounds of result type by negative
 * one.
 * 
 * @method "(--_)"
 * @restricts "variable meta"
 */
Semantic restriction "(--_)" is
[
	varType : variable meta
|
	If (¬varType's read type ⊆ number)
		∨ [ ¬varType's write type ⊆ number ]
	then
	[
		Reject parse, expected: "variable to accept and yield numbers"
	];
	readType ::= varType's read type;
	if readType ⊆ extended integer then
	[
		readRange ::= cast readType into [ t : extended integer meta | t ];
		lower ::= ⎣readRange⎦ - 1;
		upper ::= ⎡readRange⎤ - 1;
		integer range
			from lower (inclusive = ⎣readRange⎦ is inclusive)
			to upper (inclusive = ⎡readRange⎤ is inclusive)
	]
	else
	[
		readType
	]
];

/* Disallow the variable increment/decrement operations from appearing as the
 * argument to parentheses.
 */
Invoke
[
	parens ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	forbid ::=
		cast
			<
				"_++", "++_", "(_++)", "(++_)",
				"_--", "--_", "(_--)", "(--_)"
			>→set
		into [ t : {string|whole number} | t ];
	Grammatical restriction parens is <forbid>;
]
with <>;

/**
 * If {@param "var"} is assigned, then answer its contents. Otherwise, apply
 * {@param "else"} and answer its result.
 *
 * @method "↓_else_"
 * @param "var" "variable"
 *        A {@type "variable"}.
 * @param "else" "[]→any"
 *        A function that is applied only if {@param "var"} is unassigned.
 * @returns "any"
 *          Either the content of {@param "var"} or the result of applying
 *          {@param "else"}.
 */
Public method "↓_else_" is
[
	var : variable,
	else : function accepting <> and returning any
|
	if var is assigned then [↓var] else else
] : any;

/**
 * @method "↓_else_"
 * @restricts "variable meta"
 * @restricts "(function accepting <> and returning any)'s type"
 */
Semantic restriction "↓_else_" is
[
	varType : variable meta,
	else : (function accepting <> and returning any)'s type
|
	varType's read type ∪ else's return type
];
