/*
 * Very Early Definers.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Very Early Definers"
Versions
	"dev"
Uses
	"Bootstrap"
Names
	"Method_is_"
Body

/**
 * Construct and answer a tuple from the lexically specified expressions. The
 * hard work here is done automatically by the Avail compiler.
 *
 * @method "<«_‡,»>"
 * @param "elements" "tuple"
 *        The desired tuple, lexically constructed by the compiler.
 * @returns "tuple"
 *          The argument.
 */
Primitive "<«_‡,»>" is
[
	elements : tuple
|
	elements
] : tuple;

/**
 * Define a new method.
 * 
 * @method "Method_is_"
 * @param "methodName" "string"
 *        The method to extend.
 * @param "function" "function"
 *        An implementation of the method.
 * @returns "⊤"
 */
Primitive "Method_is_" is
[
	methodName : string,
	function : function
|
	Primitive 253 (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;

/**
 * Define a new method.
 * 
 * @method "Method_is_"
 * @param "methodName" "atom"
 *        The method to extend.
 * @param "function" "function"
 *        An implementation of the method.
 * @returns "⊤"
 */
Primitive "Method_is_" is
[
	methodName : atom,
	function : function
|
	Primitive 228 (failureCode : natural number);
	Invoke early failure function with <failureCode>;
] : ⊤;
