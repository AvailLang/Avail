/*
 * Casts.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "Casts"
Versions
	"dev"
Uses
	"Assertions",
	"Atoms",
	"Bootstrap",
	"Control Structures" =
	(
		"From_to_do_",
		"If|if_then_«else if_then_»«else_»",
		"(_)"
	),
	"Definers",
	"Exceptions",
	"Functions",
	"Literals",
	"Logic",
	"Math",
	"Objects",
	"Strings",
	"Tuples",
	"Types",
	"Variables"
Names
	/* Casts. */
	"Cast|cast each of_into_",
	"Cast|cast each of_into_else_",
	"Cast|cast_into_",
	"Cast|cast_into«_‡,»«else_»",

	/* Exception types. */
	"bad-cast exception",
	"bad-multiway-cast exception"
Body

"source type" is a new field atom;
"destination type" is a new field atom;

/**
 * {@method "Cast|cast_into«_‡,»«else_»"} raises a bad-multiway-cast exception
 * when no default case has been supplied and none of the cast functions accept
 * the supplied value.
 *
 * @type "bad-multiway-cast exception"
 * @supertype "exception"
 * @category "Casts" "Exceptions"
 */
Public class "bad-multiway-cast exception" extends exception
	with field
		source type : type;

/**
 * {@method "Cast|cast_into_"} raises a bad-cast exception when the specified
 * function does not accept the supplied value.
 *
 * @type "bad-cast exception"
 * @supertype "bad-multiway-cast exception"
 * @category "Casts" "Exceptions"
 */
Public class "bad-cast exception" extends bad-multiway-cast exception
	with field
		destination type : type;

/**
 * If the function {@param "accept"} accepts {@param "value"} as an argument
 * (based on its runtime type), then invoke {@param "accept"} with {@param
 * "value"}. Otherwise, raise a {@type "bad-cast exception"}.
 *
 * @method "Cast|cast_into_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "[⊥]→⊤"
 *        The function to invoke if `value` is a subtype of the its parameter
 *        type.
 * returns The result of {@param "accept"}.
 * @raises "bad-cast exception"
 *         If {@param "value"} is not an instance of {@param "accept"}'s
 *         parameter type.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast_into_" is
[
	value : any,
	accept : [⊥]→⊤
|
	valueType ::= value's type;
	paramType ::= accept's type[1];
	if valueType ⊆ paramType then
	[
		accept(value);
	]
	else
	[
		Raise a bad-cast exception with
			source type ::= valueType,
			destination type ::= paramType
	];
] : ⊤;

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast_into_"
 * @restricts "any's type"
 * @restricts "[⊥]→⊤'s type"
 */
Semantic restriction "Cast|cast_into_" is
[
	valueType : any's type,
	acceptType : [⊥]→⊤'s type
|
	targetType ::= acceptType[1];
	If valueType ⊆ targetType then
	[
		Reject parse, expected:
			format "necessary cast expression, but “①” is a subtype of “②”"
			with valueType, acceptType[1]
	];
	If valueType ∩ targetType = ⊥ then
	[
		Reject parse, expected:
			format "allowed cast expression, but “①” and “②” are disjoint"
			with valueType, acceptType[1]
	];
	acceptType's return type
];

/**
 * Invoke the first function of {@param "caseTuple"} that accepts {@param
 * "value"}. If no such function is specified, then invoke {@param "else"}. If
 * {@param "else"} is not specified, then raise a {@type
 * "bad-multiway-cast exception"}.
 * 
 * @method "Cast|cast_into«_‡,»«else_»"
 * @param "value" "any"
 *        An arbitrary value.
 * @param "caseTuple" "<[⊥]→⊤…|2..>"
 *        A tuple of arity-1 functions. The first of these able to accept
 *        {@param "value"} will be applied to it.
 * @param "else" "<[]→⊤…|0..1>"
 *        An optional arity-0 function. If provided, then it will be invoked iff
 *        no function of `caseTuple` is able to accept {@param "value"}.
 * @returns "⊤"
 *          The result of whatever function is applied.
 * @raises "bad-multiway-cast exception"
 *         If no {@param "else"} function was supplied and no function of
 *         {@param "caseTuple"} was able to accept {@param "value"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast_into«_‡,»«else_»" is
[
	value : any,
	caseTuple : <[⊥]→⊤…|2..>,
	else : <[]→⊤…|0..1>
|
	index : natural number := 1;
	[
		$body;
		If index > |caseTuple| then
		[
			(else[1] else
			[
				[
					Raise a bad-multiway-cast exception with
						source type ::= value's type
				]
			])();
		]
		else if [value ∈ caseTuple[index]'s type[1]] then
		[
			caseTuple[index](value);
		]
		else
		[
			↑index++;
			Restart body
		];
	]();
] : ⊤;

/**
 * Strengthen the return type of `Cast|cast_into«_‡,»«else_»` so that it may be
 * used as a value-producing expression. If any case is unnecessary or invalid,
 * then reject the current parse.
 * 
 * @method "Cast|cast_into«_‡,»«else_»" 
 * @restricts "any meta"
 * @restricts "<[⊥]→⊤…|2..>'s type"
 * @restricts "<[]→⊤…|0..1>'s type"
 */
Semantic restriction "Cast|cast_into«_‡,»«else_»" is
[
	valueType : any meta,
	caseTuple : <[⊥]→⊤…|2..>'s type,
	else : <[]→⊤…|0..1>'s type
|
	acceptSize ::= relevant |caseTuple|;
	union : type := ⊥;
	From 1 to acceptSize do
	[
		index : natural number
	|
		functionType ::= caseTuple[index];
		If valueType ⊆ functionType[1] then
		[
			Reject parse, expected:
				"necessary cast expression, but "
				++ “valueType”
				++ " is a subtype of "
				++ “functionType[1]”
		];
		If valueType ∩ (functionType[1]) = ⊥ then
		[
			Reject parse, expected:
				"allowed cast expression, but "
				++ “valueType”
				++ " is not a supertype of "
				++ “functionType[1]”
		];
		union := eject ↑union ∪ functionType's return type;
	];
	If ⎣else⎦ = 1 then
	[
		union := eject ↑union ∪ else[1]'s return type;
	];
	union
];

/**
 * If the function {@param "accept"} accepts each element of {@param "values"},
 * respectively, as an argument (based on its runtime type), then invoke {@param
 * "accept"} with {@param "values"}. Otherwise, raise a {@type "bad-cast
 * exception"}.
 *
 * @method "Cast|cast each of_into_"
 * @param "values" "tuple"
 *        A tuple.
 * @param "accept" "function"
 *        The function to invoke if each element of {@param "values"} is a
 *        subtype of the corresponding parameter type.
 * returns The result of {@param "accept"}.
 * @raises "bad-cast exception"
 *         If any element of {@param "values"} is not an instance of the
 *         corresponding parameter type of {@param "accept"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast each of_into_" is
[
	values : tuple,
	accept : function
|
	valueTypes ::= map values through [t : any | t's type];
	sig ::= accept's type's parameters' type;
	limit ::= cast ⎡sig⎤ into [t : natural number | t];
	paramTypes ::= map 1 to limit through [t : natural number | sig[t]];
	Assert: |valueTypes| = |paramTypes|;
	zipped ::= valueTypes zip paramTypes;
	ok ::= each of zipped satisfies [t : <type…|2> | t[1] ⊆ t[2]];
	if ok then
	[
		invoke accept with values;
	]
	else
	[
		Raise a bad-cast exception with
			source type ::= valueTypes' type,
			destination type ::= paramTypes' type
	];
];

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast each of_into_"
 * @restricts "any's type"
 * @restricts "function's type"
 */
Semantic restriction "Cast|cast each of_into_" is
[
	valuesType : tuple meta,
	acceptType : function meta
|
	If ⎣valuesType⎦ ≠ ⎡valuesType⎤ then
	[
		Reject parse, expected:
			"number of inputs to be known exactly"
	];
	paramsType ::= acceptType's parameters' type;
	If ⎣paramsType⎦ ≠ ⎡paramsType⎤ then
	[
		Reject parse, expected:
			"function signature to be known exactly"
	];
	If ⎣valuesType⎦ ≠ ⎣paramsType⎦ then
	[
		Reject parse, expected:
			"number of inputs to match number of function parameters"
	];
	From 1 to ⎣valuesType⎦ do
	[
		index : natural number
	|
		valueType ::= valuesType[index];
		paramType ::= paramsType[index];
		If valueType ⊆ paramType then
		[
			Reject parse, expected:
				format "necessary cast expression, but “①” is a subtype of “②”"
				with valueType, paramType
		];
		If ¬paramType ⊆ valueType then
		[
			Reject parse, expected:
				format
					"allowed cast expression, but “①” is not a supertype of \
					\|“②”"
				with valueType, paramType
		];
	];
	acceptType's return type
];

/**
 * If the function {@param "accept"} accepts each element of {@param "values"},
 * respectively, as an argument (based on its runtime type), then invoke {@param
 * "accept"} with {@param "values"}. Otherwise, apply {@param "reject"}.
 *
 * @method "Cast|cast each of_into_else_"
 * @param "values" "tuple"
 *        A tuple.
 * @param "accept" "function"
 *        The function to invoke if each element of {@param "values"} is a
 *        subtype of the corresponding parameter type.
 * @param "reject" "[]→⊤"
 *        The function to invoke if any element of {@param "values"} is not a
 *        subtype of the corresponding parameter type of {@param "accept"}.
 * @returns The result of {@param "accept"} or {@param "reject"}.
 * @category "Casts" "Control Structures" "Conditionals"
 */
Public method "Cast|cast each of_into_else_" is
[
	values : tuple,
	accept : function,
	reject : []→⊤
|
	valueTypes ::= map values through [t : any | t's type];
	sig ::= accept's type's parameters' type;
	limit ::= cast ⎡sig⎤ into [t : natural number | t];
	paramTypes ::= map 1 to limit through [t : natural number | sig[t]];
	Assert: |valueTypes| = |paramTypes|;
	zipped ::= valueTypes zip paramTypes;
	ok ::= each of zipped satisfies [t : <type…|2> | t[1] ⊆ t[2]];
	if ok then
	[
		invoke accept with values;
	]
	else reject;
];

/**
 * Reject the parse if the cast is either unnecessary or disallowed.
 *
 * @method "Cast|cast each of_into_else_"
 * @restricts "any's type"
 * @restricts "function's type"
 * @restricts "[]→⊤'s type"
 */
Semantic restriction "Cast|cast each of_into_else_" is
[
	valuesType : tuple meta,
	acceptType : function meta,
	rejectType : []→⊤'s type
|
	If ⎣valuesType⎦ ≠ ⎡valuesType⎤ then
	[
		Reject parse, expected:
			"number of inputs to be known exactly"
	];
	paramsType ::= acceptType's parameters' type;
	If ⎣paramsType⎦ ≠ ⎡paramsType⎤ then
	[
		Reject parse, expected:
			"function signature to be known exactly"
	];
	If ⎣valuesType⎦ ≠ ⎣paramsType⎦ then
	[
		Reject parse, expected:
			"number of inputs to match number of function parameters"
	];
	From 1 to ⎣valuesType⎦ do
	[
		index : natural number
	|
		valueType ::= valuesType[index];
		paramType ::= paramsType[index];
		If valueType ⊆ paramType then
		[
			Reject parse, expected:
				format "necessary cast expression, but “①” is a subtype of “②”"
				with valueType, paramType
		];
		If ¬paramType ⊆ valueType then
		[
			Reject parse, expected:
				format
					"allowed cast expression, but “①” is not a supertype of \
					\|“②”"
				with valueType, paramType
		];
	];
	acceptType's return type ∪ rejectType's return type
];
