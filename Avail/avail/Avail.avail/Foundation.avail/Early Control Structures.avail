/*
 * Cast.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Early Control Structures"
Versions
	"dev"
Uses
	"Bootstrap",
	"Early Assertions",
	"Early Definers",
	"Early Literals",
	"Early Enumeration Support"
Names
	"Ignore:_",
	"From_to_do_",
	"Cast|cast_into_else_",
	"Cast|cast_into_",
	"(_)"
Body

/**
 * Ignore the specified value. This allows the return value of an expression to
 * be discarded, effectively converting it into a statement.
 * 
 * @method "Ignore:_"
 * @param "value" "any"
 *        An arbitrary value which will be ignored.
 * @returns "⊤"
 * @category "Control Structures" "Conversions"
 */
Public method "Ignore:_" is
[
	value : any
|
	/* No implementation required. */
] : ⊤;

/**
 * Establish grammatical boundaries around an expression. This serves to assist
 * the compiler in disambiguating expressions. Used well, it also improves
 * readability of source text by programmers.
 *
 * @method "(_)"
 * @param "value" "any"
 *        A value, usually produced by a method send expression.
 * @returns "any"
 *        The argument.
 * @category "Control Structures"
 */
Public method "(_)" is
[
	value : any
|
	value
];

/**
 * A parenthesized expression should have the same static return type that it
 * would were the parentheses not present.
 * 
 * @method "(_)"
 * @restricts "type"
 */
Semantic restriction "(_)" is
[
	value : type
|
	value
];

/**
 * Establish a conditional expression whose static return type is the type union
 * of its two possible functions' return types.
 * 
 * @method "If|if_then_else_"
 * @restricts "boolean's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	predicate : boolean's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type ∪ falseFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is true (which it is).
 * 
 * @method "If|if_then_else_"
 * @restricts "true's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	tautology : true's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	trueFunction's return type
];

/**
 * Strengthen the static return type to that of the function to invoke when the
 * predicate is false (which it is).
 * 
 * @method "If|if_then_else_"
 * @restricts "false's type's type"
 * @restricts "nullary procedure's type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "If|if_then_else_" is
[
	contradiction : false's type's type,
	trueFunction : nullary procedure's type,
	falseFunction : nullary procedure's type
|
	falseFunction's return type
];

/*
 * This is used very frequently in the system library, so strengthen it early.
 */

/**
 * @method "eject_"
 * @restricts "variable meta"
 */
Semantic restriction "eject_" is
[
	varType : variable meta
|
	varType's read type
];

/**
 * If the function `accept` accepts `value` as an argument (based on its
 * runtime type), then invoke `accept` with `value`. Otherwise, invoke `reject`
 * instead.
 * 
 * This method effects a dynamic type cast of `value` to the type of `accept`'s
 * only parameter. While type casts are occasionally necessary even in runtime
 * code, this facility is primarily intended for use by semantic restriction
 * functions. Used in this way it leads to a stronger static type system.
 *
 * @method "Cast|cast_into_else_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "function accepting <⊥> and returning ⊤"
 *        The function to invoke if `value` is a subtype of the its parameter
 *        type.
 * @param "reject" "nullary procedure"
 *        The function to invoke if `value` is not a subtype of the parameter
 *        type of `accept`.
 * @returns "⊤"
 * @category "Bootstrap" "Casts" "Conditionals"
 */
Public method "Cast|cast_into_else_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤,
	reject : nullary procedure
|
	if value's type ⊆ accept's type[1] then
	[
		invoke accept with <value>;
	]
	else reject;
] : ⊤;

/**
 * If the function `accept` accepts `value` as an argument (based on its
 * runtime type), then invoke `accept` with `value`. Otherwise, cause an
 * assertion failure. This is obsolete once exceptions are available, and should
 * not be exported beyond this package.
 *
 * @method "Cast|cast_into_"
 * @param "value" "any"
 *        A value.
 * @param "accept" "function accepting <⊥> and returning ⊤"
 *        The function to invoke if `value` is a subtype of the its parameter
 *        type.
 * @returns "⊤"
 * @category "Bootstrap" "Casts" "Conditionals"
 */
Public method "Cast|cast_into_" is
[
	value : any,
	accept : function accepting <⊥> and returning ⊤
|
	if value's type ⊆ accept's type[1] then
	[
		invoke accept with <value>;
	]
	else
	[
		t : tuple := concatenate <
			"Failed run-time cast: ",
			(primitive description of value),
			" was not an instance of ",
			(primitive description of accept's type[1])>;
		s : string;
		↓↑s ?= t;
		Assert: false (s)
	];
] : ⊤;

/**
 * Strengthen the return type of `Cast|cast_into_else` so that it may be used as
 * a value-producing expression. If the type cast is unnecessary, then reject
 * the current parse.
 * 
 * @method "Cast|cast_into_else_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 * @restricts "nullary procedure's type"
 */
Semantic restriction "Cast|cast_into_else_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type,
	reject : nullary procedure's type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If value ∪ accept[1] = value then
	[
		/* This is the expected case, i.e., the function argument is a subtype
		 * of `value`, but logical negation isn't available yet.
		 */
	]
	else
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" is not a supertype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type ∪ reject's return type
];

/**
 * Strengthen the return type of `Cast|cast_into_` so that it may be used as a
 * value-producing expression. If the type cast is unnecessary or invalid, then
 * reject the current parse.
 * 
 * @method "Cast|cast_into_"
 * @restricts "any meta"
 * @restricts "(function accepting <⊥> and returning ⊤)'s type"
 */
Semantic restriction "Cast|cast_into_" is
[
	value : any meta,
	accept : (function accepting <⊥> and returning ⊤)'s type
|
	If value ⊆ accept[1] then
	[
		messageTuple ::= concatenate <
			"necessary cast expression, but ",
			“value”,
			" is a subtype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	If value ∩ accept[1] = ⊥ then
	[
		messageTuple ::= concatenate <
			"allowed cast expression, but ",
			“value”,
			" is not a supertype of ",
			“accept[1]”>;
		cast messageTuple into
		[
			message : string
		|
			Reject parse, expected: message
		];
	];
	accept's return type
];

/* Nesting parentheses directly is bad style, and leads to confusing
 * expressions, so forbid it.
 */
Invoke
[
	names ::= cast <"(_)">→set into [ t : {string|natural number} | t ];
	Grammatical restriction names is <names>;
]
with <>;

/**
 * The cardinality of ⊥ is also ⊥. This is supplied to disambiguate "`|`|_`|`|".
 * 
 * @method "`|`|_`|`|"
 * @param "bottomMeta" "⊥'s type"
 * @returns "⊥"
 * @category "Types" "Queries"
 */
Method "`|`|_`|`|" is
[
	bottomMeta : ⊥'s type
|
	⊥
];

/**
 * Strengthen `Invoke|invoke_with_` to the invoked function's return type.
 * 
 * @method "Invoke|invoke_with_"
 * @restricts "function meta"
 * @restricts "tuple meta"
 */
Semantic restriction "Invoke|invoke_with_" is
[
	aFunction : function meta,
	arguments : tuple meta
|
	aFunction's return type
];

/**
 * Basic counting loop with early exit support. Invoke `action` once with each
 * consecutive number in the range established by `start` and `end`.
 * 
 * @method "From_to_do_"
 * @param "start" "natural number"
 *        The start value, inclusive.
 * @param "end" "integer range from 0 (inclusive=true) to ∞ (inclusive=true)"
 *        The end value, inclusive.
 * @param "action" "function accepting <⊥> and returning boolean"
 *        A function that accepts a value in the specified range. If it answers
 *        `true`, then continue to iterate; if it answers `false`, then
 *        terminate iteration early.
 * @returns "⊤"
 * @category "Bootstrap" "Control Structures" "Loops"
 */
Public method "From_to_do_" is
[
	start : natural number,
	end : integer range from 0 (inclusive=true) to ∞ (inclusive=true),
	action : function accepting <⊥> and returning boolean
|
	value : natural number := start;
	Invoke
	[
		$loop;
		If value ≤ end then
		[
			continue ::= invoke action with <value>;
			value := cast value + 1 into [ i : natural number | i ];
			If continue then
			[
				Restart loop
			];
		];
	] : ⊤
	with <>;
] : ⊤;

/**
 * Sanity check the function's arguments against the implied range of iteration.
 * 
 * @method "From_to_do_"
 * @restricts "natural number's type"
 * @restricts "(integer range from 0 (inclusive=true) to
 * ∞ (inclusive=true))'s type"
 * @restricts "(function accepting <⊥> and returning boolean)'s type"
 */
Semantic restriction "From_to_do_" is
[
	start : natural number's type,
	end : (integer range from 0 (inclusive=true) to ∞ (inclusive=true))'s type,
	action : (function accepting <⊥> and returning boolean)'s type
|
	lower ::= start's genuine lower bound;
	If lower ≤ end's genuine upper bound then
	[
		upper ::= cast end's genuine upper bound + 1
			into [ t : extended integer | t ];
		subscripts ::= integer range
			from lower (inclusive = lower's type ⊆ start)
			to upper (inclusive = false);
		If subscripts ⊆ action[1] then
		[
			/* This is the happy case, but logical negation isn't available yet.
			 */
		]
		else
		[
			messageTuple ::= concatenate <
				"repeatedly applied function to accept all integers from ",
				“lower”,
				" to ",
				“end's genuine lower bound”,
				" (but it only accepts ",
				“action[1]”,
				")">;
			cast messageTuple into
			[
				message : string
			|
				Reject parse, expected: message
			]
		];
	];
	⊤
];

/* Don't permit `(_)` as the second argument of `Assert:_(_)`. */
Invoke
[
	cast ::= [ t : {string|natural number} | t ];
	names ::= cast <"Assert:_(_)">→set into cast;
	exclusions ::= cast <"(_)">→set into cast;
	Grammatical restriction names is <∅, exclusions>;
]
with <>;
