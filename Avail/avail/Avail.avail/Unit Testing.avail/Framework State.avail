/*
 * Framework State.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Framework State"
Versions
	"dev"
Uses
	"Foundation",
	"Types"
Names
	"root suite",
	"root suite:=_",
	"suite lock",
	"suite atoms by module",
	"suite atoms by module:=_",
	"suites by atom",
	"suites by atom:=_",
	"test atoms by module",
	"test atoms by module:=_",
	"tests by atom",
	"tests by atom:=_"
Body

/**
 * The lock that guards the unit test suite's data structures.
 *
 * @global "suite lock" "non-reentrant mutex"
 */
suiteLock : non-reentrant mutex := a non-reentrant mutex named "suite lock";
Public method "suite lock" is [suiteLock];

/**
 * The root unit test suite, guarded by the {@method "suite lock"}.
 *
 * @global "rootSuite" "root unit test suite"
 */
rootSuite : root unit test suite := a root unit test suite with
	suite ID ::= root test suite ID,
	child suite IDs ::= <>,
	suite fixture setup ::= <>,
	suite fixture tear down ::= <>,
	test fixture setup ::= <>,
	test fixture tear down ::= <>,
	unit tests ::= <>;
Public variable ↑rootSuite is "root suite";

/**
 * The test suite atoms, organized by {@type "module"} and guarded by the
 * {@method "suite lock"}.
 *
 * @global "suiteAtomsByModule" "{module→{atom|}|}"
 */
suiteAtomsByModule : {module→{atom|}|} := {};
Public variable ↑suiteAtomsByModule is "suite atoms by module";

/**
 * The declared unit test suites, keyed by atom, guarded by the {@method
 * "suite lock"}.
 *
 * @global "suitesByAtom" "{atom→unit test suite|}"
 */
suitesByAtom : {atom→unit test suite|} := {};
Public variable ↑suitesByAtom is "suites by atom";

/**
 * The test atoms, organized by {@type "module"} and guarded by the
 * {@method "test lock"}.
 *
 * @global "testAtomsByModule" "{module→{atom|}|}"
 */
testAtomsByModule : {module→{atom|}|} := {};
Public variable ↑suiteAtomsByModule is "test atoms by module";

/**
 * The unit tests, organized by test identifier, guarded by the {@method
 * "test lock"}.
 *
 * @global "testsByAtom" "{atom→unit test|}"
 */
testsByAtom : {atom→unit test|} := {};
Public variable ↑testsByAtom is "tests by atom";
