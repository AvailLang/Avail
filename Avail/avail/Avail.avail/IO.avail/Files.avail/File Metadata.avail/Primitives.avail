/*
 * Primitives.avail
 * Copyright © 1993-2014, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Primitives"
Versions
	"dev"
Uses
	"File Names",
	"File Types" =
	(
		"file type"→"actual file type",
		…
	),
	"Foundation"
Names
	/* Types. */
	"file metadata",

	/* Aggregate metadata. */
	"_'s⁇metadata(follow if symlink=_)",
	"_'s⁇metadata«(don't follow if symlink)»?",

	/* Metadata accessors. */
	"_'s⁇creation time",
	"_'s⁇file ID",
	"_'s⁇file type",
	"_'s⁇last access time",
	"_'s⁇last modification time",
	"_'s⁇size",

	/* Semi-private types. */
	"signed long"
Body

/* Field atoms. */
"name" is a new field atom;
"file ID" is a new field atom;
"file type" is a new field atom;
"creation time" is a new field atom;
"last modification time" is a new field atom;
"last access time" is a new field atom;
"size" is a new field atom;

Public method "signed long" is [[0..2^63 - 1]];

/**
 * A file metadata provides an aggregate view of the metadata for a file. It
 * includes information about the {@method "_'s⁇file type" file type},
 * {@method "_'s⁇creation time" creation}, {@method "_'s⁇last modification time"
 * last modification}, and {@method "_'s⁇last access time" last access times},
 * {@method "_'s⁇access rights" access rights}, {@type "_'s⁇size" size}, and
 * {@method "_'s⁇owner" user} and {@method "_'s⁇group"} {@type "principal"}s. It
 * also includes an {@method "_'s⁇file ID" identifier} that uniquely
 * identifies the file (though how uniquely is platform-specific).
 *
 * Note that file metadata is only guaranteed valid at the time of the
 * underlying {@method "_'s⁇metadata(follow if symlink=_)" file system query},
 * and is outdated immediately thereafter.
 *
 * @type "file metadata"
 */
Public class "file metadata" extends object
	with fields
		name : file name,
		public file ID : any,
		public file type : actual file type,
		public creation time : signed long,
		public last modification time : signed long,
		public last access time : signed long,
		public size : signed long;

/**
 * Obtain the {@type "file metadata" metadata} for the file named by the given
 * {@type "file name"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇metadata(follow if symlink=_)"
 * @param "fn" "file name"
 * @param "followIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should be followed if it refers to a
 *        symbolic link, {@method "false"} otherwise.
 * @returns "file metadata"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 */
[
	fileTypes ::= <regular file, directory, symbolic link, special file>;
	Public method "_'s⁇metadata(follow if symlink=_)" is
	[
		fn : file name,
		followIfSymlink : boolean
	|
		t ::=
			[
				s : string,
				f : boolean
			|
				Primitive 436 (e : {
					invalid-path code,
					permission-denied code,
					I/O-error code}ᵀ);
				Raise an exception for e
			] : <pojo, [1..4], signed long…|6> (fn's name, followIfSymlink);
		a file metadata with
			name ::= fn,
			file ID ::= t[1],
			file type ::= fileTypes[t[2]],
			creation time ::= t[3],
			last modification time ::= t[4],
			last access time ::= t[5],
			size ::= t[6]
	] : file metadata;
]();

/**
 * Obtain the {@type "file metadata" metadata} for the file named by the given
 * {@type "file name"}.
 *
 * @method "_'s⁇metadata(follow if symlink=_)"
 * @param "fn" "file name"
 * @param "dontFollowIfSymlink" "boolean"
 *        {@method "true"} if {@param "fn"} should not be followed if it refers
 *        to a symbolic link, {@method "false"} otherwise.
 * @returns "file metadata"
 * @raises "invalid-path exception"
 *         If {@param "fn"} cannot be understood as a path.
 * @raises "permission-denied exception"
 *         If permission is denied to use the file named by {@param "fn"}.
 * @raises "I/O exception"
 *         If an I/O exception occurs.
 */
Public method "_'s⁇metadata«(don't follow if symlink)»?" is
[
	fn : file name,
	dontFollowIfSymlink : boolean
|
	fn's metadata (follow if symlink = ¬dontFollowIfSymlink)
] : file metadata;

/**
 * Answer the unique identifier associated with the specified {@type
 * "file metadata"}. The identifier is only guaranteed to be unique if the file
 * system should remain static, because some file systems permit reuse of
 * identifiers for files that have been deleted. The exact uniqueness
 * constraints are therefore platform-specific.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇file ID"
 * @param "m" "file metadata"
 * @returns "any"
 *          An opaque identifier.
 */

/**
 * Answer the {@type "file type"} associated with the specified {@type
 * "file metadata"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇file type"
 * @param "m" "file metadata"
 * @returns "file type"
 */

/**
 * Answer the creation time associated with the specified {@type
 * "file metadata"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * TODO: [TLS] This should produce a calendrical answer, not milliseconds since
 * the Epoch.
 *
 * @method "_'s⁇creation time"
 * @param "m" "file metadata"
 * @returns "[0..2^63 - 1]"
 *          The number of milliseconds since the Unix Epoch (00:00:00 UTC,
 *          Thursday, 1 January 1970).
 */

/**
 * Answer the most recent modification time associated with the specified {@type
 * "file metadata"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * TODO: [TLS] This should produce a calendrical answer, not milliseconds since
 * the Epoch.
 *
 * @method "_'s⁇last modification time"
 * @param "m" "file metadata"
 * @returns "[0..2^63 - 1]"
 *          The number of milliseconds since the Unix Epoch (00:00:00 UTC,
 *          Thursday, 1 January 1970).
 */

/**
 * Answer the most recent access time associated with the specified {@type
 * "file metadata"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * TODO: [TLS] This should produce a calendrical answer, not milliseconds since
 * the Epoch.
 *
 * @method "_'s⁇last access time"
 * @param "m" "file metadata"
 * @returns "[0..2^63 - 1]"
 *          The number of milliseconds since the Unix Epoch (00:00:00 UTC,
 *          Thursday, 1 January 1970).
 */

/**
 * Answer the file size associated with the specified {@type "file metadata"}.
 *
 * Note that the answer is only guaranteed valid at the time of the underlying
 * file system query, and is outdated immediately thereafter.
 *
 * @method "_'s⁇size"
 * @param "m" "size"
 * @returns "[0..2^63 - 1]"
 */
