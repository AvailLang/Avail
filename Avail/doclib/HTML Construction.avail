/*
 * HTML Construction.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "HTML Construction"
Versions
	"Dev"
Extends

Uses
	"Avail"
Names
	"<…«…=_»>«_»</…>",
	
	"abstract tagged element",
	"empty tagged element",
	"generate_",
	"tagged element"
Body

attributes ::= $attributes;
tag ::= $tag;
Public explicit class "abstract tagged element" extends object
	with fields
		tag : token,
		attributes : <<token, string…|2>…|>;

Public explicit class "empty tagged element" extends abstract tagged element;

elements ::= $elements;
Public explicit class "tagged element" extends abstract tagged element
	with fields
	elements : <any…|>;

/**
 * Build a tagged element.
 *
 * Parameters:
 *	startElementName : token,
 *	attributes : <<token, string…|2>…|>,
 *	contents : <any…|>,
 *	endElementName : token
 * Returns:
 *    a tagged element
 */
Public method "<…«…=_»>«_»</…>" is
[
	startElementName : token,
	atts : <<token, string…|2>…|>,
	contents : <any…|>,
	endElementName : token
|
	a tagged element with
		tag := startElementName,
		attributes := atts,
		elements := contents

]: tagged element;

q: tagged element := <b ferret="jello">"fish"<p>"boat"</p>"nope"</b>;
Print: "q=";
Print: primitive description of (q);
Print: "\n\n";

Forward method "generate_" is [tagged element]→string;

/**
 * Generate a string form of an tagged element
 *
 * Parameters:
 *    ate - tagged element
 * Returns:
 *    string representation of a tagged element
 */
Public method "generate_" is
[
 	ate : tagged element
 |
 	output : string := "<" ++ ate's tag's lexeme;
 	For each ate's attributes do
 	[
 	 	att : <token, string…|2>
 	 |
 	 	output := output ++ " " ++att[1]'s lexeme ++ "=\"" ++ att[2] ++ "\"";
 	];
 	output := output ++ ">";
 	For each ate's elements do
 	[
 	 	element : any
 	 |
 	 	output := if element's type ⊆ tagged element then [
 	 		 output ++ generate cast element into [ e : tagged element | e]
 	 	] else if [ element's type ⊆ string ] then  [ 
 	 		output ++ cast element into [e : string | e]
 	 	] else [
 	 		output ++ primitive description of element
 	 	];
 	];
	output ++ "</" ++ ate's tag's lexeme ++ ">"
]: string;

Print: generate q;
