<?xml version="1.0" encoding="UTF-8"?>
<!--
build.xml
Copyright Â© 1993-2014, The Avail Foundation, LLC.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of the contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-->
<project name="Avail" default="avail-dev">
	<property name="path.avail" value="${basedir}" />
	<property name="path.avail.src" value="${path.avail}/src"/>
	<property name="path.avail.bin" value="${path.avail}/bin"/>
	<property name="path.avail.distro" value="${path.avail}/distro"/>
	<property name="path.avail.resources" value="${path.avail}/resources"/>
	<property name="path.avail.jar" value="${path.avail.distro}/lib"/>

	<property name="jar.avail" value="Avail.jar"/>
	<property name="path.jar.avail" value="${path.avail.jar}/${jar.avail}"/>
	<property name="path.jar.dev" value="${path.avail.jar}/AvailDev.jar"/>

	<property
		name="path.build-time"
		value="${path.avail.resources}/build-time.txt"/>
	<condition property="skip.build-time" value="true">
		<and>
			<available file="${path.build-time}"/>
			<uptodate targetfile="${path.build-time}">
				<srcfiles dir="${path.avail.src}"/>
			</uptodate>
		</and>
	</condition>

	<property
		name="path.interpreter"
		value="${path.avail.bin}/com/avail/interpreter"/>
	<property
		name="path.primitives"
		value="${path.interpreter}/primitive"/>
	<property
		name="path.primitives-list"
		value="${path.interpreter}/All_Primitives.txt"/>
	<condition property="skip.primitives-list" value="true">
		<and>
			<available file="${path.primitives-list}"/>
			<uptodate targetfile="${path.primitives-list}">
				<srcfiles
					dir="${path.avail.src}"
					includes="com/avail/interpreter/primitive/*.java"/>
			</uptodate>
		</and>
	</condition>

	<!--
		Build the Avail sources.
	-->
	<target
			name="build-sources"
			description="Build the Avail sources.">
		<mkdir dir="${path.avail.bin}"/>
		<javac
				destdir="${path.avail.bin}"
				source="1.7"
				target="1.7"
				encoding="UTF-8"
				includeantruntime="true"
				includejavaruntime="true"
				debug="true"
				optimize="true"
				deprecation="true">
			<src path="${path.avail.src}"/>
			<exclude name="**/test/**"/>
		</javac>
	</target>

	<!--
		Build the Avail tests.
	-->
	<target
			name="build-tests"
			description="Build the Avail tests.">
		<mkdir dir="${path.avail.bin}"/>
		<javac
				destdir="${path.avail.bin}"
				source="1.7"
				target="1.7"
				encoding="UTF-8"
				includeantruntime="true"
				includejavaruntime="true"
				classpath="${path.avail.distro}/lib/junit.jar"
				debug="true"
				optimize="true"
				deprecation="true">
			<src path="${path.avail.src}"/>
			<include name="**/test/**"/>
		</javac>
	</target>

	<!--
		Produce a file containing the build time that can be included as a
		resource.
	-->
	<target
			name="generate-build-time"
			unless="skip.build-time"
			description="Generate a resource that contains the build time.">
		<tstamp>
			<format property="build.time" pattern="yyyyMMdd.HHmmss.SSS"/>
		</tstamp>
		<echo file="${path.build-time}" append="no" message="${build.time}"/>
	</target>

	<!--
		Produce a file containing the complete list of primitives. This is
		needed for locating the primitives within a JAR.
	-->
	<target
			name="generate-primitives-list"
			unless="skip.primitives-list"
			description="Generate a resource that lists the primitive classes.">
		<fileset
				id="primitives"
				dir="${path.primitives}"
				includes="P_*.class"
				excludes="*$*.class">
		</fileset>
		<pathconvert
			property="one-primitive-per-line"
			refid="primitives"
			pathsep="${line.separator}">
		</pathconvert>
		<echo
			file="${path.primitives-list}"
			append="no"
			message="${one-primitive-per-line}"/>
		<!--
			Remove the absolute path to the "bin" directory, replacing the
			remaining path separators with dots.
		-->
		<property
			name = "primitive.package"
			value="com.avail.interpreter.primitive"/>
		<replaceregexp file="${path.primitives-list}"
			match=".*[\\/]([^\\/]+)\.class"
			replace="${primitive.package}.\1"
			byline="true"/>
	</target>

	<!--
		Copy the generated properties files to the correct locations for Ant to
		find them.
	-->
	<target
			name="relocate-generated-properties-files"
			description="Move the generated properties files.">
		<copy todir="${path.avail.bin}/com/avail/tools/bootstrap">
			<fileset
				dir="${path.avail.src}/com/avail/tools/bootstrap"
				includes="**/*_${user.language}.properties"/>
		</copy>
	</target>
	
	<!--
		Run the generator that produces the error code properties file.
	-->
	<target
			name="generate-error-code-names"
			depends="relocate-generated-properties-files"
			description="Generate ErrorCodeNames_*.properties.">
		<java
				classpath="${path.avail.bin}"
				classname="com.avail.tools.bootstrap.ErrorCodeNamesGenerator"/>
	</target>

	<!--
		Run the generator that produces the special objects properties file.
	-->
	<target
			name="generate-special-object-names"
			depends="relocate-generated-properties-files"
			description="Generate SpecialObjectNames_*.properties.">
		<java
				classpath="${path.avail.bin}"
				classname="com.avail.tools.bootstrap.SpecialObjectNamesGenerator"/>
	</target>

	<!--
		Run the generator that produces the primitives properties file.
	-->
	<target
			name="generate-primitive-names"
			depends="relocate-generated-properties-files"
			description="Generate ErrorCodeNames_*.properties.">
		<java
				classpath="${path.avail.bin}"
				classname="com.avail.tools.bootstrap.PrimitiveNamesGenerator"/>
	</target>

	<!--
		Run the all property file generators.
	-->
	<target
			name="generate-properties"
			depends="
				generate-error-code-names,
				generate-special-object-names,
				generate-primitive-names"
			description="Generate ErrorCodeNames_*.properties."/>

	<!--
		Run the code generator that produces the Avail bootstrap library from
		the property files.
	-->
	<property
		name="path.distro.bootstrap"
		value="${path.avail.distro}/src/avail/Avail.avail/Foundation.avail/Bootstrap.avail"/>
	<target
			name="generate-bootstrap"
			depends="relocate-generated-properties-files"
			description="Generate the bootstrap Avail library.">
		<java
				classpath="${path.avail.bin}"
				classname="com.avail.tools.bootstrap.BootstrapGenerator"/>
		<copy todir="${path.distro.bootstrap}">
			<fileset
				dir="${path.avail.src}/com/avail/tools/bootstrap/generated/${user.language}/Bootstrap.avail"
				includes="**"/>
		</copy>
	</target>

	<!--
		Build everything.
	-->
	<target
			name="build-all"
			depends="
				build-sources,
				build-tests,
				generate-build-time,
				generate-primitives-list"
			description="Initialize the build.">
	</target>

	<!--
		Build the Avail virtual machine.
	-->
	<target
			name="avail-vm"
			depends="
				build-sources,
				generate-build-time,
				generate-primitives-list"
			description="Build the Avail virtual machine as a library.">
		<jar jarfile="${path.jar.avail}" update="false">
			<manifest>
				<attribute name="Build-Version" value="${build.time}"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Sealed" value="true"/>
			</manifest>
			<fileset
				dir="${path.avail.bin}"
				excludes="
					**/tests/**,
					com/avail/environment/**,
					com/avail/tools/**,
					com/avail/utility/fsm/**,
					com/avail/utility/json/**"/>
			<fileset
				dir="${path.avail}"
				includes="resources/build-time.txt"/>
		</jar>
	</target>

	<!--
		Build the Avail development environment.
	-->
	<target
			name="avail-dev"
			depends="avail-vm"
			description="Build the Avail development environment.">
		<jar jarfile="${path.jar.dev}" update="false">
			<manifest>
				<attribute name="Build-Version" value="${build.time}"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Class-Path" value="${jar.avail}"/>
				<attribute
					name="Main-Class"
					value="com.avail.environment.AvailWorkbench"/>
				<attribute name="Sealed" value="true"/>
			</manifest>
			<fileset
				dir="${path.avail.bin}"
				includes="com/avail/environment/**"/>
			<fileset
				dir="${path.avail}"
				includes="resources/**"/>
		</jar>
	</target>
	
	<!--
		Install Avail.
	-->
	<condition
			property="path.install"
			value="C:\Program Files\Avail">
		<and>
			<not>
				<isset property="path.install"/>
			</not>
			<os family="windows"/>
		</and>
	</condition>
	<condition
			property="path.install"
			value="/usr/local/avail">
		<not>
			<isset property="path.install"/>
		</not>
	</condition>
	<condition
			property="path.install.bin"
			value="${path.install}\bin">
		<os family="windows"/>
	</condition>
	<condition
			property="path.install.bin"
			value="${path.install}/bin">
		<not>
			<os family="windows"/>
		</not>
	</condition>
	<target
			name="install"
			depends="avail-vm, avail-dev">
		<copy todir="${path.install}" preservelastmodified="true">
			<fileset
				dir="${path.avail.distro}"
				excludes="**/dummy.txt"/>
		</copy>
		<chmod perm="644" maxparallel="300">
			<fileset dir="${path.install}"/>
		</chmod>
		<chmod perm="755" maxparallel="300">
			<dirset dir="${path.install}"/>
		</chmod>
		<chmod perm="755" maxparallel="300">
			<fileset file="${path.install}/bin/avail-dev"/>
		</chmod>
		<echo level="info">
ATTENTION ==========================================================
Be sure to set AVAIL_HOME to:

	${path.install}

And update your path to include:

	${path.install.bin}

For example, a user of bash might include something like the
following in the appropriate shell config file:

	export AVAIL_HOME=${path.install}
	export PATH=$PATH:${path.install.bin}

Once your path has been updated, from any directory you can launch
the Avail workbench like this:

	avail-dev

To develop Avail code, you will also need to set AVAIL_ROOTS to a
valid module root path. If AVAIL_ROOTS is not set, then avail-dev
temporarily sets it to:

	avail=$HOME/.avail/repos/avail.repo,${path.install}/src/avail;\
	examples=$HOME/.avail/repos/examples.repo,${path.install}/src/examples

This is convenient for experimenting with Avail, but must be
extended with custom module roots as you develop your own modules.
====================================================================
		</echo>
	</target>

	<!--
		Clean the build directory.
	-->
	<target
			name="clean"
			description="Clean the build environment.">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${path.avail.bin}" includes="**"/>
		</delete>
		<delete quiet="true" file="${path.jar.avail}"/>
		<delete quiet="true" file="${path.jar.dev}"/>
	</target>

	<!--
		Uninstall Avail.
	-->
	<target
			name="uninstall"
			description="Uninstall the Avail development environment.">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${path.install}" includes="**"/>
		</delete>
	</target>
</project>
