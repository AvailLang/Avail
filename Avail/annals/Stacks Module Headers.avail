/*
 * Stacks Module Headers.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Stacks Module Headers" 
Versions
	"Dev"
Extends

Uses
	"Avail"
	
Names
	"_'s⁇alias",
	"_'s⁇available methods",
	"_'s⁇current version",
	"_'s⁇exported methods",
	"_'s⁇extends modules",
	"_has all methods available",
	"_'s⁇identifier",
	"_'s⁇local methods",
	"_'s⁇name",
	"_'s⁇uses modules",
	"_'s⁇versions",
	"method identifier",
	"module antecedent",
	"module header",
	"module identifier"
	
Body

"alias" is a new field atom;
"all methods available" is a new field atom;
"available methods" is a new field atom;
"exported methods" is a new field atom;
"extends modules" is a new field atom;	
"identifier" is a new field atom;
"local methods" is a new field atom;
"name" is a new field atom;
"uses modules" is a new field atom;
"versions" is a new field atom;

/**
 * A class that defines an identifier for a module  
 * 
 * @type "module identifier"
 * @supertype {@type "object" object}
 * @category Stacks
 * @field "name" "string"
 * 	the module name
 * @field "version" "string"
 * 	the version of the module 
 * @author Richard Arriaga
 */
Public class "module identifier" extends object
	with fields
		name : string,
		versions : <string…|1..>;

/**
 * module identifier current version accessor
 *
 * @method "_'s⁇current version"
 * @categories "Stacks"
 * @param "modId" "module identifier" 
 *		a module identifier
 * @returnType "string"
 *		the module version
 * @author "Richard Arriaga"
 */
Public method "_'s⁇current version" is
[
 	modId : module identifier
 |
 	modId's versions[1]
 ]:string;


/**
 * A class that defines a method identifier  
 * 
 * @type "method identifier"
 * @supertype {@type "object" object}
 * @category Stacks
 * @field "name" "string"
 * 	the method identifier
 * @field "alias" "string"
 * 	an alias for this method
 * @author Richard Arriaga
 */
Public class "method identifier" extends object
	with fields
		name : string,
		alias : string;

/**
 * A module and its importance to a module header.  It contains identifier
 * information as well as which methods are included, all or some. 
 * 
 * @type "module antecedent"
 * @supertype {@type "object" object}
 * @category Stacks
 * @field "identifier" "module identifier"
 * 	the module name and versions
 * @field "all methods available" "boolean"
 * 	are all methods in that module available for use/extends here
 * @field "available methods" "<method identifier…|>"
 * 	if all methods not available, what methods are available
 * @field "local methods" "<method identifier…|>"
 * 	methods not exported from module
 * @author Richard Arriaga
 */
Public class "module antecedent" extends object
	with fields
		identifier : module identifier,
		all methods available : boolean,
		available methods : <method identifier…|>,
		local methods : <method identifier…|>;

/**
 * module antecedent identifier accessor
 *
 * @method "_has all methods available"
 * @categories "Stacks"
 * @param "antecedent" "module antecedent" 
 *		a module antecedent
 * @returnType "boolean"
 *		are all the modules methods available
 * @author "Richard Arriaga"
 */
Public method "_has all methods available" is
[
 	antecedent : module antecedent
 |
 	antecedent's all methods available
 ]:boolean;

 /**
  * A module and its importance to a module header.  It contains identifier
  * information as well as which methods are included, all or some. 
  * 
  * @type "module header"
  * @supertype {@type "object" object}
  * @category Stacks
  * @field "identifier" "module identifier"
  * 	the module name and versions
  * @field "exported methods" "<method identifier…|>"
  * 	all public methods made public by this module.
  * @field "extends modules" "<module antecedent…|>"
  * 	all modules this module extends
  * @field "uses modules" "<module antecedent…|>"
  * 	all modules this module uses
  * @author Richard Arriaga
  */
 Public class "module header" extends object
 	with fields
 		identifier : module identifier,
 		exported methods : <method identifier…|>,
 		extends modules : <module antecedent…|>,
 		uses modules : <module antecedent…|>;
 