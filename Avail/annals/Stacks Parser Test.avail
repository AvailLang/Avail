/*
 * Stacks Stream Parser.avail
 * Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "Stacks Parser Test"
Versions
"Dev"
Extends

Uses
	"Avail",
	"Avail Scanner",
	"Stacks Scanner"
Names


Body
test ::= "purple
/*
* Core.avail
* Copyright © 1993-2012, Mark van Gulik and Todd L Smith.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
*
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
*
* * Neither the name of the copyright holder nor the names of the contributors
*   may be used to endorse or promote products derived from this software
*   without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/




/**
* A base unit is metrically irreducible; though * it may be reduced to smaller*
* quanta, it may not be reduced to simpler *terms. Examples of base units are * 
* meters (m), seconds (s), or grams (g). {@type \"number\" extent} type 
*
* @type \"base unit\"
* @supertype \"unit\" garble
*  stuff
*/
Public explicit class \"base unit\" extends unit
	with fields
		unit map : {atom→1's type|1};


/**
* Construct and answer a {@type \"dimensioned quantity\"} type with the specified
* {@type \"number\" extent} type.
*
* @method \"dimensioned_\"
* @param \"magnitudeType\" \"number's type\"
*        The magnitude type.
* @returns \"dimensioned quantity\"
*          The requested {@type \"dimensioned quantity\"} type.
*/
Public method \"dimensioned_\" is
[
	magnitudeType : number's type
|
	extend dimensioned quantity with extent : magnitudeType
] : dimensioned quantity's type;

Semantic restriction \"dimensioned_\" is
[
	magnitudeType : number's type's type
|
	(extend dimensioned quantity with extent : magnitudeType's instance)'s type
];";

it : iterator of character := an iterator over test;
scanner : stacks scanner := a stacks scanner with it;
Obtain Stacks comments from scanner;
Print: format "scanner's comments[1]=“①”\n\n" with scanner's comments[1];
q ::= concatenate scanner's comments[1] separated by "_";
Print: q; Print: "\n\n\n\n";
Print: format "scanner's comments[2]=“①”\n\n" with scanner's comments[2];
v ::= concatenate scanner's comments[2] separated by "_";
Print: v; Print: "\n";
