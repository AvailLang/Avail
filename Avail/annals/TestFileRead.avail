/*
 * TestFileRead.avail
 * Copyright © 1993-2013, Mark van Gulik and Todd L Smith.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

System Module "TestFileRead"
Versions
/* TODO: Set versions */
Extends
/* TODO: Extended modules */
Uses
	"Avail",
	"Avail Scanner",
	"Stacks Scanner",
	"Stacks Lexer"
Names
/* TODO: Exports */
Body

[testDir ::= "annals";
fn ::= testDir ++ "/Patricia Trie.avail" as file name;

scanner : stacks scanner := a stacks scanner with fn;
Obtain Stacks comments from scanner;
/*For each of scanner's comments do
[
 	c : raw comment
 |
 	Print: concatenate c's comment tokens separated by " ~ ";
 	Print: "\n\n";
];*/

/*Obtain Stacks comments from scanner;*/
For each scanner's comments do
[
 	rc : raw comment
 |
 	For each of rc's comment tokens do
 	[
 	 	s : stacks token
 	 |
 	 	Print: format "‘①’-“②”, " with s's lexeme,s's line;
 	 	/*Print: format "“①” is a subtype of special stacks token : “②”\n" 
 	 		with s, s's type ⊆ special stacks token;*/
	];
	Print: "\n\n";
	Print: format "rc's comment type=“①”\n" with rc's comment type;
	Print: format "|rc's comment tokens|=“①”\n" with |rc's comment tokens|;
	Print: format "rc's special token regions=“①”\n\n" with rc's special token regions;
];
/*Print: output ++ "\n";

encodeMe : string := "⊤⊥↓↑±∅∊∰∡℀";
byteData ::= take at most ∞ from a utf8 encoding iterator that buffers 
			10 characters of an iterator over encodeMe using a UTF-8 codec;
Print: format "byteData=“①”\n" with byteData;
altered ::= <95, 138, 164, 226, 138, 165, 226, 134, 147, 226, 134, 145, 194, 177, 226, 136, 133, 226, 136, 138, 226, 136, 176, 226, 136, 161, 226, 132, 128>;
di : decoding iterator := a decoding iterator of an iterator over altered using a UTF-8 codec;
shouldntWork ::= take at most ∞ from di;*/
]();