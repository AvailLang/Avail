/*
 * build.gradle
 * Copyright Â© 1993-2021, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.dokka'
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "16"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = "16"
		freeCompilerArgs = ['-Xjvm-default=compatibility']
		languageVersion = "1.5"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Avail.
	implementation rootProject

	// Kotlin.
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

	// JSR-305 null analysis framework.
	implementation "com.google.code.findbugs:jsr305:$jsr_version"
}

// Copy the generated bootstrap property files into the build directory, so that
// the executable tools can find them as resources.
task relocateGeneratedPropertyFiles(type: Copy) {
	def pathBootstrap =
		fileTree("$projectDir/src/main/kotlin/com/avail/tools/bootstrap")
	def movedPropertyFiles =
		file("$buildDir/classes/kotlin/main/com/avail/tools/bootstrap")
	def lang = System.getProperty("user.language")
	pathBootstrap.include "**/*_${lang}.properties"
	// This is a lie, but it ensures that this rule will not run until after the
	// Kotlin source is compiled.
	pathBootstrap.builtBy "compileKotlin"
	inputs.files pathBootstrap
	outputs.dir movedPropertyFiles

	from pathBootstrap
	into movedPropertyFiles

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Update the dependencies of "classes".
classes.dependsOn relocateGeneratedPropertyFiles

// Bootstrap Primitive_<lang>.properties for the current locale.
task generatePrimitiveNames(type: JavaExec) {
	group = 'bootstrap'
	mainClass.set('com.avail.tools.bootstrap.PrimitiveNamesGenerator')
	classpath = sourceSets.main.runtimeClasspath
	dependsOn classes
}

// Bootstrap ErrorCodeNames_<lang>.properties for the current locale.
task generateErrorCodeNames(type: JavaExec) {
	group = 'bootstrap'
	mainClass.set('com.avail.tools.bootstrap.ErrorCodeNamesGenerator')
	classpath = sourceSets.main.runtimeClasspath
	dependsOn classes
}

// Bootstrap ErrorCodeNames_<lang>.properties for the current locale.
task generateSpecialObjectNames(type: JavaExec) {
	group = 'bootstrap'
	mainClass.set('com.avail.tools.bootstrap.SpecialObjectNamesGenerator')
	classpath = sourceSets.main.runtimeClasspath
	dependsOn classes
}

// Generate all bootstrap .properties files for the current locale.
task generateAllNames {
	group = 'bootstrap'
	dependsOn generatePrimitiveNames
	dependsOn generateErrorCodeNames
	dependsOn generateSpecialObjectNames
}

// Generate the new bootstrap Avail modules for the current locale.
task internalGenerateBootstrap(type: JavaExec) {
	group = 'internal'
	mainClass.set('com.avail.tools.bootstrap.BootstrapGenerator')
	classpath = sourceSets.main.runtimeClasspath
	dependsOn classes
}

// Generate the new bootstrap Avail modules for the current locale and copy them
// to the appropriate location for distribution.
task generateBootstrap(type: Copy) {
	String source = "$projectDir/src/main/kotlin"
	String lang = System.getProperty("user.language")
	def pathBootstrap = fileTree(
		"$source/com/avail/tools/bootstrap/generated/$lang/Bootstrap.avail")
	inputs.files pathBootstrap

	String distro = "${rootProject.projectDir}/distro"
	def distroBootstrap =
		file("$distro/src/avail/Avail.avail/Foundation.avail/Bootstrap.avail")
	outputs.dir distroBootstrap

	group = 'bootstrap'
	dependsOn internalGenerateBootstrap

	from pathBootstrap
	into distroBootstrap

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Don't build any JAR files, since these are bootstrap tools only.
jar.enabled = false

// Generate documentation
dokkaGfm {
	// Outputting to documentation/docs/src-docs directly causes the contents of
	// the directory to be deleted. Moving the directory post generation is the
	// work around.
	doLast {
		ant.move file: "${buildDir}/dokka/avail-bootstrap",
			todir: "../documentation/docs/src_docs"
	}
}

dokkaHtml {
	outputDirectory = file "$buildDir/dokka"
}
