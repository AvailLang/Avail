#
# SpecialObjectNames_en.properties
# Copyright © 1993-2021, The Avail Foundation, LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: java.io.PrintWriter
# * Last Generated: 6/23/21 9:44 PM
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# any
specialObject1=any
specialObject1_type=
specialObject1_comment=\
/**\n\
\ * The practical abstract root of the Avail type lattice. '{'@code "any"} is the\n\
\ * second most senior type, inferior only to '{'@method "⊤"}. It includes every\n\
\ * value available to an Avail program, i.e., every Avail value except for the\n\
\ * unexposed special value nil.\n\
\ *\n\
\ * '{'@code "any"} is made extremely useful by the interaction of polymorphism\n\
\ * and semantic restrictions. Many algorithms can be codified once in terms of\n\
\ * '{'@code "any"} and then strengthened via a semantic restriction that\n\
\ * extrapolates a stronger result subtype from the static input types.\n\
\ *\n\
\ * '{'@code "any"} is the most general type that may appear in the following\n\
\ * contexts:\n\
\ *\n\
\ * <ul>\n\
\ * <li>As a parameter type of a function type.</li>\n\
\ * <li>As the read type of a variable type.</li>\n\
\ * <li>As a leading type or the default type of a tuple type.</li>\n\
\ * <li>As the element type of a set type.</li>\n\
\ * <li>As the key type or value type of a map type.</li>\n\
\ * <li>As the field type of an object type.</li>\n\
\ * <li>As the type parameter of a pojo type.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "⊤"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-any.html"\n\
\ */\n
# boolean
specialObject2=boolean
specialObject2_type=
specialObject2_comment=\
/**\n\
\ * The enumeration of the special atoms '{'@method "true"} and '{'@method "false"}.\n\
\ * All primitive interrogatives use classical (Boolean) bivalence and all stable\n\
\ * primitive interrogatives obey the three classical (Aristotelian) laws of\n\
\ * thought.\n\
\ *\n\
\ * Bivalent logic assigns either '{'@method "true"} or '{'@method "false"} as the\n\
\ * unique truth value of every proposition. A primitive interrogative, i.e.\n\
\ * '{'@method "boolean" "boolean-valued"} primitive, is stable iff it reliably answers\n\
\ * either '{'@method "true"} or '{'@method "false"} for a given set of arguments.\n\
\ *\n\
\ * The three classical laws of thought are:\n\
\ *\n\
\ * <ul>\n\
\ * <li><strong>The law of identity: P → P.</strong> For every stable primitive\n\
\ * interrogative '{'@code "prim_,_,_"}, then '{'@code "prim A, B, C = prim A, B, C"}.\n\
\ * </li>\n\
\ * <li><strong>The law of noncontradiction: ¬(P ∧ ¬P).</strong> For every\n\
\ * stable primitive interrogative '{'@code "prim_,_,_"}, then '{'@method\n\
\ * "(prim A, B, C ∧ ¬prim A, B, C) = false"}.</li>\n\
\ * <li><strong>The law of excluded middle: P ∨ ¬P.</strong> For every primitive\n\
\ * interrogative '{'@code "prim_,_,_"}, then '{'@code\n\
\ * "((prim A, B, C = true) ∨ (prim A, B, C = false)) = true"}.</li></ul>\n\
\ *\n\
\ * Note that values may be instances of many enumerations. This means that Avail\n\
\ * directly supports other logical systems, such as Kleene''s three-valued logic\n\
\ * of indeterminacy, whose truth values are '{'@code "true"}, '{'@code "false"}, \n\
\ * and '{'@code "unknown"}. Implementation of this system would proceed directly\n\
\ * from creation of an atom to represent '{'@code "unknown"} and the formation of\n\
\ * a new enumeration that contained the standard '{'@method "true"} and '{'@method\n\
\ * "false"} atoms and also the '{'@code "unknown"} atom. New logical operations\n\
\ * could then be written in terms of this new enumeration.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "atom"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"\n\
\ */\n
# character
specialObject3=character
specialObject3_type=
specialObject3_comment=\
/**\n\
\ * A character is a sign or symbol in the semiotic sense: an entity with\n\
\ * distinct identity that is nonetheless generally intended and understood to\n\
\ * represent something other than itself. The visual representation of a\n\
\ * character is a glyph. A character is necessarily distinct from how it is\n\
\ * written or printed. The same character will differ in any two handwritten\n\
\ * occurrences, even when the same person is responsible for the production of\n\
\ * both. Likewise the printed representation of a character will differ by font\n\
\ * or style. So a character has identity independent of any and all glyphs that\n\
\ * transcribe it.\n\
\ *\n\
\ * Avail is only concerned with character value, not meaning or transcription. A\n\
\ * character is always equal to itself and always unequal to another character.\n\
\ * Characters are immutable and possess but a single intrinsic property:\n\
\ * '{'@method "_''s⁇code point" Unicode code point}. Unicode is an international\n\
\ * standard for the codification of all widely used characters. A code point is\n\
\ * a numeric value that is uniquely associated with a character relative to some\n\
\ * system of codification. Thus a character''s Unicode code point singularly\n\
\ * identifies it within the Unicode scheme.\n\
\ *\n\
\ * A character literal is expressed as a cent sign '{'@code "¢"} (U+00A2) followed\n\
\ * by a single-character lexeme or length-one string literal. Avail character\n\
\ * literal notation is provided by the method '{'@method "¢…!"}. The\n\
\ * single-character form is sufficient for nearly every character, but the\n\
\ * string literal form must be employed when the desired character is a\n\
\ * quotation mark '{'@code "\\""} (U+0022), semicolon '{'@code ";"} (U+003B), or\n\
\ * nonprintable character.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"\n\
\ * @see "http://www.unicode.org/"\n\
\ * @see "http://www.unicode.org/standard/standard.html"\n\
\ */\n
# […]→⊤
specialObject4=function
specialObject4_type=[…]→⊤
specialObject4_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function.html"\n\
\ */\n
# ([…]→⊤)'s type
specialObject5=function meta
specialObject5_type=[…]→⊤'s type
specialObject5_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function.html"\n\
\ */\n
# ¢[…]→⊤
specialObject6=function implementation
specialObject6_type=¢[…]→⊤
specialObject6_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-function-implementation.html"\n\
\ */\n
# read ⊤/write ⊥
specialObject7=variable
specialObject7_type=read ⊤/write ⊥
specialObject7_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable.html"\n\
\ */\n
# (read ⊤/write ⊥)'s type
specialObject8=variable meta
specialObject8_type=(read ⊤/write ⊥)'s type
specialObject8_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype's type"\n\
\ * @sticky\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable.html"\n\
\ */\n
# $[…]→⊥
specialObject9=continuation
specialObject9_type=`$[…]→⊥
specialObject9_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-continuation.html"\n\
\ */\n
# ($[…]→⊥)'s type
specialObject10=continuation meta
specialObject10_type=(`$[…]→⊥)'s type
specialObject10_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-continuation.html"\n\
\ */\n
# atom
specialObject11=atom
specialObject11_type=
specialObject11_comment=\
/**\n\
\ * An '{'@code "atom"} is a mutable value associated with a module-allocated\n\
\ * name. For each name that appears in the '{'@code "Names"} section of a module''s\n\
\ * header, the compiler associates that name with a new atom. For each name that\n\
\ * appears in the '{'@code "Uses"} or '{'@code "Extends"} section of a module''s\n\
\ * header, the compiler associates that name with the atom introduced by the\n\
\ * module that named it. During compilation of a module, an atom may be\n\
\ * retrieved by presenting its name, a string, to the primitive method '{'@method\n\
\ * "atom for_"}. If the atom was neither introduced by the current module nor\n\
\ * imported from another module, then '{'@method "atom for_"} privately\n\
\ * introduces a new atom into the '{'@method "current module"}; a subsequent send\n\
\ * with the same argument within the context of the same module will produce the\n\
\ * same atom.\n\
\ *\n\
\ * In ordinary use, the primary asset of an atom is its distinction from every\n\
\ * other value, including an equivalently named atom that originated in a\n\
\ * different module. Consider the values '{'@method "true"} and '{'@method "false"}\n\
\ * from classical logic. The principal characteristic of each is its distinction\n\
\ * from the other. In other words, '{'@method "true"} and '{'@method "false"}\n\
\ * differ by identity rather than by some measurable quantity. In Avail, the\n\
\ * values '{'@method "true"} and '{'@method "false"} are special atoms; they are\n\
\ * issued by the virtual machine rather than some module. The type '{'@type\n\
\ * "boolean"} is simply the finite enumeration of these two atoms.\n\
\ *\n\
\ * In addition to a '{'@method "_''s⁇name" name} and an '{'@method "_''s⁇issuing\n\
\ * module" issuing module}, an atom also comprises a collection of bindings,\n\
\ * called properties. Since an atom has identity, it can '{'@method "_[_]:=_"\n\
\ * acquire new properties}, '{'@method "_[_]:=_" update existing properties}, and\n\
\ * '{'@method "Remove_[_]" lose properties altogether}. A property is an\n\
\ * association between another atom — the property key — and an arbitrary value\n\
\ * — the property value. The properties of an atom are not enumerable, thus\n\
\ * ensuring modular usage; an algorithm can only query or alter a property for\n\
\ * which it possesses the key.\n\
\ *\n\
\ * The type '{'@code "atom"} has every atom as an instance. atom is a complete\n\
\ * type. Though its properties are analogous to the bindings of a map or the\n\
\ * attributes of an object, '{'@code "atom"} does not require (or permit) type\n\
\ * parameters for the property key type or the property value type. These\n\
\ * limitations are a direct consequence of mutability.\n\
\ *\n\
\ * Note that special atoms cannot participate in the property mechanism. For\n\
\ * instance, the special atom true cannot be either the target or the property\n\
\ * key of a property interrogation. It can be a property value, however.\n\
\ *\n\
\ * @category "Primitives" "Types" "Atoms"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-atom.html"\n\
\ */\n
# double
specialObject12=double
specialObject12_type=
specialObject12_comment=\
/**\n\
\ * A double — that is, an IEEE 754 double-precision floating point number — is\n\
\ * an approximation of a real number. The representation uses 64 binary digits,\n\
\ * hereinafter bits, organized as 1 sign bit, 52 bits of mantissa, and 11 bits\n\
\ * of exponent. The sign bit distinguishes positive (sign bit = 0) and negative\n\
\ * (sign bit = 1) values. The mantissa encodes the significant binary digits of\n\
\ * the number. The exponent scales the mantissa by a particular power of 2.\n\
\ * Finite double values range from '{'@code "-1.79769313486231570e+308"} to\n\
\ * '{'@code "1.79769313486231570e+308"}. The closest to zero nonzero double values\n\
\ * are '{'@code "±4.94065645841246544e-324"}. Positive zero ('{'@code "0.0"}) and\n\
\ * negative zero ('{'@code "-0.0"}) are considered distinct. Infinities are\n\
\ * supported, but indicate an overflow of representational limits (rather than\n\
\ * '{'@code "±∞"}). Some encodings do not represent real values; such a value is a\n\
\ * not-a-number ('{'@code "NaN"}). No two differing '{'@code "NaN"} encodings are\n\
\ * considered equal. This is a departure from a strict interpretation of IEEE\n\
\ * 754.\n\
\ *\n\
\ * In Avail, a literal double begins with one or more decimal digits, contains a\n\
\ * full stop '{'@code "."} (U+002E) and fractional part, and optionally ends with\n\
\ * exponential notation — an '{'@code "E"} (U+0045) or '{'@code "e"} (U+0065)\n\
\ * followed by one or more decimal digits.\n\
\ *\n\
\ * Though '{'@code "double"} numerically subsumes '{'@type "float"}, they are\n\
\ * considered siblings because their values differ by internal representation.\n\
\ * '{'@code "double"} is not a supertype of '{'@type "float"}. No float value is\n\
\ * also a double value, and no double value is also a float value.\n\
\ *\n\
\ * @category "Primitives" "Types" "Numbers"\n\
\ * @type "{0}"\n\
\ * @supertype "number"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-double.html"\n\
\ */\n
# [-∞..∞]
specialObject13=extended integer
specialObject13_type=[-∞..∞]
specialObject13_comment=\
/**\n\
\ * An integer is a discrete number, i.e., it has no fractional part. As such,\n\
\ * integers are excellent for counting and labeling.\n\
\ *\n\
\ * The literal representation of an integer is a sequence of one or more decimal\n\
\ * digits. Negative integer literals are created using the method '{'@method\n\
\ * "-_"}, which defines a semantic restriction that strengthens the answer''s\n\
\ * type to an instance type whenever the argument''s value is precisely known.\n\
\ * '{'@method "∞"} and '{'@method "-∞"} are positive and negative infinity,\n\
\ * respectively.\n\
\ *\n\
\ * @category "Primitives" "Types" "Numbers"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"\n\
\ */\n
# (<(any)'s type…|>)'s type
specialObject14=type of tuple of type of any
specialObject14_type=<any's type…|>'s type
specialObject14_comment=\
/**\n\
\ * A tuple type whose default type is '{'@type "any meta" any''s type}.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# float
specialObject15=float
specialObject15_type=
specialObject15_comment=\
/**\n\
\ * A float — that is, an IEEE 754 single-precision floating point number — is an\n\
\ * approximation of a real number. The representation uses 32 bits, organized as\n\
\ * 1 sign bit, 23 bits of mantissa, and 8 bits of exponent. Finite float values\n\
\ * range from '{'@code "-3.40282347e+38"} to '{'@code "3.40282347e+38"}. The\n\
\ * closest to zero nonzero float values are '{'@code "±1.40239846e-45"}. Positive\n\
\ * zero ('{'@code "0.0"}) and negative zero ('{'@code "-0.0"}) are considered\n\
\ * distinct. Infinities are supported, but indicate an overflow of\n\
\ * representational limits (rather than '{'@code "±∞"}). Some encodings do not\n\
\ * represent real values; such a value is a not-a-number ('{'@code "NaN"}). No\n\
\ * two differing '{'@code "NaN"} encodings are considered equal. This is a\n\
\ * departure from a strict interpretation of IEEE 754.\n\
\ *\n\
\ * The float type is provided only for interoperation with the Java programming\n\
\ * language. Use of float values is generally discouraged; prefer double values\n\
\ * whenever possible. There is no syntax for specifying a literal float.\n\
\ * Instead, use the method '{'@method "_→float"} to convert a double value to a\n\
\ * float value.\n\
\ *\n\
\ * @category "Primitives" "Types" "Numbers"\n\
\ * @type "{0}"\n\
\ * @supertype "number"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-float.html"\n\
\ */\n
# number
specialObject16=number
specialObject16_type=
specialObject16_comment=\
/**\n\
\ * A number is an immutable mathematical object. Uses of numbers include\n\
\ * counting, annotating entities to distinguish them, and measuring the\n\
\ * magnitudes of quantities. Avail natively supports integers and two distinct\n\
\ * precisions of floating-point approximations of real numbers. '{'@type\n\
\ * "extended integer" Integers} are discrete, and thus excel at counting and\n\
\ * labeling. Real numbers form a continuum, and are therefore suitable for\n\
\ * taking measurements.\n\
\ *\n\
\ * @category "Primitives" "Types" "Numbers"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see '{'@type "double"}\n\
\ * @see '{'@type "extended integer"}\n\
\ * @see '{'@type "float"}\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-number.html"\n\
\ */\n
# (-∞..∞)
specialObject17=integer
specialObject17_type=(-∞..∞)
specialObject17_comment=\
/**\n\
\ * The type of all finite integers.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "extended integer"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"\n\
\ */\n
# ([-∞..∞])'s type
specialObject18=extended integer meta
specialObject18_type=[-∞..∞]'s type
specialObject18_comment=\
/**\n\
\ * Avail''s integral type specifies four parameters for completion:\n\
\ *\n\
\ * <ul>\n\
\ * <li>The lower bound is an integer which specifies the smallest allowed value.\n\
\ * The floor operation, '{'@method "⌊_⌋"}, answers the lower bound of an integral\n\
\ * type.</li>\n\
\ * <li>The lower bound inclusion indicator is a '{'@type "boolean"} value that\n\
\ * establishes whether the lower bound is a member of the integral type. When\n\
\ * this value is '{'@method "true"}, then the lower bound is included in the\n\
\ * type''s membership. When this value is '{'@method "false"}, then it is not so\n\
\ * included. The method '{'@method "⌊_⌋is inclusive"} answers the lower bound\n\
\ * inclusion indicator of an integral type.</li>\n\
\ * <li>The upper bound is an integer which specifies the largest allowed value.\n\
\ * The ceiling operation, '{'@method "⌈_⌉"}, answers the upper bound of an\n\
\ * integral type.</li>\n\
\ * <li>The upper bound inclusion indicator is a '{'@type "boolean"} value that\n\
\ * establishes whether the upper bound is a member of the integral type. When\n\
\ * this value is '{'@method "true"}, then the upper bound is included in the\n\
\ * type''s membership. When this value is '{'@method "false"}, then it is not so\n\
\ * included. The method '{'@method "⌈_⌉is inclusive"} answers the upper bound\n\
\ * inclusion indicator of an integral type.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see '{'@method "integer range from_(inclusive=_)to_(inclusive=_)"}\n\
\ * @see '{'@method "[_.._]"}\n\
\ * @see '{'@method "[_.._)"}\n\
\ * @see '{'@method "(_.._]"}\n\
\ * @see '{'@method "(_.._)"}\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"\n\
\ */\n
# (map)'s type
specialObject19=map meta
specialObject19_type={any→any|}'s type
specialObject19_comment=\
/**\n\
\ * The map type specifies three parameters for completion:\n\
\ * <ul>\n\
\ * <li>The key type specifies a type that includes every key of the domain. The\n\
\ * method '{'@method "_''s⁇key type"} answers the key type of a map type.</li>\n\
\ * <li>The value type specifies a type that includes every value of the\n\
\ * codomain. The method '{'@method "_''s⁇value type"} answers the value type of a\n\
\ * map type.</li>\n\
\ * <li>The cardinality restriction is an '{'@method "extended integer meta"\n\
\ * integral type} that specifies the range of sizes that describe instances. The\n\
\ * method '{'@method "`|`|_`|`|"} answers the cardinality restriction of a map\n\
\ * type. The floor operation, '{'@method "⌊_⌋"}, answers the lower bound of a\n\
\ * map type''s cardinality restriction. The ceiling operation, '{'@method "⌈_⌉"},\n\
\ * answers the upper bound of a map type''s cardinality restriction.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see '{'@method "'{'_→_`|_}"}\n\
\ * @see '{'@method "'{'_→_`|_.._}"}\n\
\ * @see '{'@method "'{'_→_`|_..}"}\n\
\ * @see '{'@method "'{'_→_`|.._}"}\n\
\ * @see '{'@method "'{'_→_`|}"}\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-map.html"\n\
\ */\n
# module
specialObject20=module
specialObject20_type=
specialObject20_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module.html"\n\
\ */\n
# <
#	1,
#	2,
#	3,
#	4,
#	5,
#	6,
#	7,
#	8,
#	9,
#	10,
#	11,
#	12,
#	13,
#	14,
#	15,
#	16,
#	17,
#	18,
#	19,
#	20,
#	21,
#	22,
#	23,
#	24,
#	25,
#	26,
#	30,
#	31,
#	32,
#	33,
#	34,
#	35,
#	36,
#	37,
#	38,
#	39,
#	40,
#	41,
#	42,
#	43,
#	44,
#	45,
#	46,
#	47,
#	48,
#	49,
#	50,
#	51,
#	53,
#	54,
#	55,
#	56,
#	57,
#	58,
#	59,
#	61,
#	62,
#	63,
#	64,
#	65,
#	66,
#	67,
#	68,
#	69,
#	70,
#	71,
#	72,
#	73,
#	74,
#	75,
#	76,
#	77,
#	78,
#	79,
#	80,
#	81,
#	82,
#	83,
#	84,
#	85,
#	86,
#	87,
#	88,
#	89,
#	90,
#	91,
#	92,
#	93,
#	94,
#	95,
#	96,
#	97,
#	98,
#	100,
#	101,
#	102,
#	103,
#	105,
#	106,
#	107,
#	108,
#	150,
#	200,
#	201,
#	202,
#	203,
#	204,
#	205,
#	500,
#	501,
#	502,
#	504,
#	505,
#	506,
#	507,
#	508>
specialObject21=VM error codes
specialObject21_type=<natural number…|>
specialObject21_comment=\
/**\n\
\ * Answer a '{'@type "tuple"} containing all of the error codes well-known to\n\
\ * the Avail virtual machine.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# object
specialObject22=object
specialObject22_type=
specialObject22_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-object.html"\n\
\ */\n
# (object)'s type
specialObject23=object meta
specialObject23_type=object's type
specialObject23_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-object.html"\n\
\ */\n
# exception
specialObject24=exception
specialObject24_type=
specialObject24_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "object"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-exception.html"\n\
\ */\n
# fiber→⊤
specialObject25=fiber
specialObject25_type=fiber→⊤
specialObject25_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "nontype"\n\
\ */\n
# set
specialObject26=set
specialObject26_type={any|}
specialObject26_comment=\
/**\n\
\ * A set is an immutable, finite, unordered collection of distinct, homogeneous\n\
\ * values, called members or elements. The number of elements is the cardinality\n\
\ * of the set. Breaking this down:\n\
\ *\n\
\ * <ul>\n\
\ * <li>Immutable means that the composition of a set is not subject to change.\n\
\ * No operations are, or can be, defined to modify a set in any way; only\n\
\ * operations that derive new sets from existing sets are expressible.</li>\n\
\ * <li>Finite means that the cardinality of a set is never the value '{'@method\n\
\ * "∞"}. To store a set in memory requires space proportional to its\n\
\ * cardinality, and memory is clearly always finite. Additional limits to the\n\
\ * practical cardinality of sets may be imposed by the implementation.</li>\n\
\ * <li>Unordered means that the members of a set do not occur in any particular\n\
\ * order. Any two sets with the same membership are therefore equal.</li>\n\
\ * <li>Distinct means that a member occurs only once in the membership of a set.\n\
\ * Thus a value is either a member of a set or it is not.</li>\n\
\ * <li>Homogeneous means that the members of a set universally conform to a\n\
\ * single most general type.</li>\n\
\ * </ul>\n\
\ *\n\
\ * A literal set is expressed as a left curly bracket '{'@code "'{'"} (U+007B),\n\
\ * then a list of members separated by commas '{'@code ","} (U+002C), and finally\n\
\ * a right curly bracket '{'@code "}"} (U+007D). The empty set is written as\n\
\ * '{'@method "∅"} (U+2205).\n\
\ *\n\
\ * The elements of a set need not be known statically. Sets are constructed with\n\
\ * the method '{'@method "'{'«_‡,»}"}; there is no special built-in syntax for\n\
\ * constructing sets. When the compiler can infer an instance type for each\n\
\ * argument expression of a particular send of this message, then the semantic\n\
\ * restriction is able to strengthen the result to an instance type, thereby\n\
\ * according it the same force as a literal understood primitively by the\n\
\ * compiler.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "nontype"\n\
\ * @see '{'@method "'{'«_‡,»}"}\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-set.html"\n\
\ */\n
# (set)'s type
specialObject27=set meta
specialObject27_type={any|}'s type
specialObject27_comment=\
/**\n\
\ * The set type specifies two parameters for completion:\n\
\ *\n\
\ * <ul>\n\
\ * <li>The member type (or element type) specifies a type that includes every\n\
\ * member. The method '{'@method "_''s⁇element|member type"} answers the member\n\
\ * type of a set type.</li>\n\
\ * <li>The cardinality restriction is an '{'@method "extended integer meta"\n\
\ * integral type} that specifies the range of sizes that describe instances. The\n\
\ * method '{'@method "`|`|_`|`|"} answers the cardinality restriction of a set\n\
\ * type. The floor operation, '{'@method "⌊_⌋"}, answers the lower bound of a set\n\
\ * type''s cardinality restriction. The ceiling operation, '{'@method "⌈_⌉"},\n\
\ * answers the upper bound of a set type''s cardinality restriction.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see '{'@method "'{'_|_}"}\n\
\ * @see '{'@method "'{'_|_.._}"}\n\
\ * @see '{'@method "'{'_|_..}"}\n\
\ * @see '{'@method "'{'_|}"}\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-set.html"\n\
\ */\n
# string
specialObject28=string
specialObject28_type=character*
specialObject28_comment=\
/**\n\
\ * A string represents text without respect to style or encoding. Naturally, the\n\
\ * content of a string consists of '{'@type "character"}s arrayed in a fixed\n\
\ * order.\n\
\ *\n\
\ * Like integer and double literals, string literals are understood directly by\n\
\ * the Avail compiler. A string literal begins with a quotation mark '{'@code\n\
\ * "\\""} (U+0022), continues with arbitrary Unicode characters optionally\n\
\ * interleaved with escape sequences, and ends with a quotation mark. The string\n\
\ * literal metacharacters are quotation mark and reverse solidus '{'@code "\\\\"}\n\
\ * (U+005C) — also called backslash. A reverse solidus alters the meaning of the\n\
\ * next character, called the escaped character:\n\
\ *\n\
\ * <ul>\n\
\ * <li>When the escaped character is reverse solidus or quotation mark, then its\n\
\ * special meaning as a metacharacter is disabled.</li>\n\
\ * <li>When the escaped character is '{'@code "t"} (U+0074), then the intended\n\
\ * character is character tabulation (U+0009), also called horizontal tab.</li>\n\
\ * </ul>\n\
\ * <li>When the escaped character is '{'@code "n"} (U+006E), then the intended\n\
\ * character is line feed (U+000A)</li>.\n\
\ * <li>When the escaped character is '{'@code "r"} (U+0072), then the intended\n\
\ * character is carriage return (U+000D).</li>\n\
\ * <li>When the escaped character is left parenthesis '{'@code "("} (U+0028),\n\
\ * then the compiler expects a sequence of hexadecimal numerals separated by\n\
\ * commas '{'@code ","} (U+002C) and finally a right parenthesis '{'@code ")"}\n\
\ * (U+0029). Each hexadecimal numeral must denote an integral value from\n\
\ * '{'@code "0"} to '{'@code "10FFFF"}<sub>16</sub> ('{'@code\n\
\ * "1114111"}<sub>10</sub>); the case of the hexadecimal digits '{'@code "A"}\n\
\ * through '{'@code "F"} does not matter. Each number represents the character\n\
\ * associated with the Unicode code point of the same value. The construct as a\n\
\ * whole then denotes a sequence of characters.</li>\n\
\ * <li>When the escaped character is line feed (U+000A), then the compiler\n\
\ * elides the line feed altogether. This permits a string literal to span\n\
\ * multiple lines without forcing its content to span multiple lines. Note that\n\
\ * an occurrence of carriage return (U+000D) after the reverse solidus, or even\n\
\ * the combination carriage return+line feed, is treated similarly; it is\n\
\ * stripped from the resulting string.</li>\n\
\ * <li>When the escaped character is vertical line '{'@code "|"} (U+007C), then\n\
\ * the compiler discards all whitespace from the beginning of the same line up\n\
\ * to the reverse solidus. This region is not permitted to contain characters\n\
\ * other than whitespace, in fact. This feature permits nice formatting of\n\
\ * multiline string literals within source code, and is particularly powerful in\n\
\ * conjunction with escaping of line feeds.</li>\n\
\ * </ul>\n\
\ *\n\
\ * The empty string is written as '{'@code "\\"\\""}. It is the same value as the\n\
\ * empty tuple, '{'@code "<>"}.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "tuple"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-string.html"\n\
\ */\n
# ⊥
specialObject29=⊥
specialObject29_type=⊥
specialObject29_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-bottom.html"\n\
\ */\n
# (⊥)'s type
specialObject30=⊥meta
specialObject30_type=⊥'s type
specialObject30_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# nontype
specialObject31=nontype
specialObject31_type=
specialObject31_comment=\
/**\n\
\ * Every value that is not itself a type is an instance of the primitive type\n\
\ * '{'@code "nontype"}. The subtypes of '{'@code "nontype"} are therefore those\n\
\ * types whose instances are not themselves types. Except for '{'@method "⊤"},\n\
\ * '{'@method "any"}, and '{'@method "type"}, every primitive type is a subtype of\n\
\ * '{'@code "nontype"}. It is a sibling of '{'@method "type"}, and every value is\n\
\ * either an instance of '{'@code "nontype"} or '{'@method "type"}.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "any"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-nontype.html"\n\
\ */\n
# tuple
specialObject32=tuple
specialObject32_type=any*
specialObject32_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-tuple.html"\n\
\ */\n
# (tuple)'s type
specialObject33=tuple meta
specialObject33_type=any*'s type
specialObject33_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @sticky\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-tuple.html"\n\
\ */\n
# (⊤)'s type
specialObject34=type
specialObject34_type=⊤'s type
specialObject34_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# ⊤
specialObject35=⊤
specialObject35_type=
specialObject35_comment=\
/**\n\
\ * The true abstract root of the Avail type lattice. It is pronounced "top" and\n\
\ * written as the down tack (⊤) character. Every Avail value is an instance\n\
\ * of '{'@code "⊤"}, and every Avail type is a subtype of '{'@code "⊤"}.\n\
\ *\n\
\ * '{'@code "⊤"} is distinct from '{'@method "any"} in that it includes exactly one\n\
\ * additional value: the special value '{'@code "nil"}. This value does not\n\
\ * satisfy any public protocol and is not available to an Avail programmer. It\n\
\ * is, however, implicitly returned from every procedure, i.e., function whose\n\
\ * return type is '{'@code "⊤"}. Thus '{'@code "nil"} is the value produced iff no\n\
\ * value is produced. The virtual machine uses '{'@code "nil"} to simplify\n\
\ * several core algorithms, but exposure of nil to an Avail programmer would not\n\
\ * yield a net good.\n\
\ *\n\
\ * '{'@code "⊤"} typically appears in Avail code in only a few select contexts:\n\
\ *\n\
\ * <ul>\n\
\ * <li>As the '{'@method "_''s⁇return type" return type} of a function type. In\n\
\ * this context, it signifies that the function does not produce a value, i.e.,\n\
\ * it produces the unexposed value '{'@code "nil"}.</li>\n\
\ * <li>As the '{'@method "_''s⁇return type" return type} of a continuation type. In\n\
\ * this context, it signifies that the continuation will not produce a value,\n\
\ * i.e., it produces the unexposed value '{'@code "nil"}.</li>\n\
\ * <li>As the '{'@method "_''s⁇read type" read type} of a variable type. In this\n\
\ * context, it signifies that no value may be read from the variable, i.e., the\n\
\ * variable is write-only.</li>\n\
\ * <li>As the idempotent initial value of an accumulator variable whose\n\
\ * intermediate and final results represent a chain of type intersections. (Note\n\
\ * that the type intersection of '{'@code "⊤"} with some type '{'@code "X"} is\n\
\ * always '{'@code "X"}.)</li>\n\
\ * <li>As the result of a semantic restriction on a procedure that serves only\n\
\ * to reject parses based on the static types of the arguments (but does not\n\
\ * strengthen the return type).</li>\n\
\ * <li>As the '{'@method "_''s⁇result type" result type} of a phrase. In this\n\
\ * context, it signifies that the phrase serves as a statement (and not merely\n\
\ * as an expression).</li>\n\
\ * </ul>\n\
\ *\n\
\ * A function whose declared return type is '{'@code "⊤"} is still permitted to\n\
\ * answer an actual (non-'{'@code "nil"}) value. This is consistent with the type\n\
\ * lattice, since every value is an instance of '{'@code "⊤"}. It is useful,\n\
\ * moreover, because a semantic restriction may strengthen the return type of a\n\
\ * '{'@code "⊤"}-valued function at a particular call site to a subtype of\n\
\ * '{'@code "⊤"}.\n\
\ *\n\
\ * '{'@code "⊤"} is expressly forbidden from occurring in most contexts, including\n\
\ * the following:\n\
\ *\n\
\ * <ul>\n\
\ * <li>As a parameter type of a function type.</li>\n\
\ * <li>As the write type of a variable type. This also implies that it cannot\n\
\ * be the type of an actual variable.</li>\n\
\ * <li>As a leading type or the default type of a tuple type.</li>\n\
\ * <li>As the element type of a set type.</li>\n\
\ * <li>As the key type or value type of a map type.</li>\n\
\ * <li>As the field type of an object type.</li>\n\
\ * <li>As the type parameter of a pojo type.</li>\n\
\ * </ul>\n\
\ *\n\
\ * Note that these prohibitions, when considered in aggregate, negate any\n\
\ * possible value that could be gleaned from exposing the special value '{'@code\n\
\ * "nil"} to an Avail program. They conspire together to ensure that nil could\n\
\ * never be retained by an Avail value. It may therefore only exist as a\n\
\ * temporary within a continuation, i.e., an item on the local stack of a\n\
\ * function call. A reflective query of a continuation''s temporaries that would\n\
\ * answer '{'@code "nil"} will instead produce a variable whose read type is\n\
\ * '{'@method "⊥"}.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-top.html"\n\
\ */\n
# [0..∞)
specialObject36=whole number
specialObject36_type=[0..∞)
specialObject36_comment=\
/**\n\
\ * The type of all counting numbers.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "extended integer"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"\n\
\ */\n
# [1..∞)
specialObject37=natural number
specialObject37_type=[1..∞)
specialObject37_comment=\
/**\n\
\ * The type of all positive numbers. This is also the type of all subscripts.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "extended integer"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-extended-integer.html"\n\
\ */\n
# [0..1114111]
specialObject38=code point
specialObject38_type=[0..1114111]
specialObject38_comment=\
/**\n\
\ * The type of all reserved Unicode code points.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "whole number"\n\
\ */\n
# map
specialObject39=map
specialObject39_type={any→any|}
specialObject39_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-map.html"\n\
\ */\n
# message bundle
specialObject40=message bundle
specialObject40_type=
specialObject40_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-message-bundle.html"\n\
\ */\n
# message bundle tree
specialObject41=message bundle tree
specialObject41_type=
specialObject41_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-message-bundle-tree.html"\n\
\ */\n
# method
specialObject42=method
specialObject42_type=
specialObject42_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-method.html"\n\
\ */\n
# definition
specialObject43=definition
specialObject43_type=
specialObject43_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "type"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-definition.html"\n\
\ */\n
# abstract definition
specialObject44=abstract definition
specialObject44_type=
specialObject44_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "definition"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-abstract-definition.html"\n\
\ */\n
# forward definition
specialObject45=forward definition
specialObject45_type=
specialObject45_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "definition"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-forward-definition.html"\n\
\ */\n
# method definition
specialObject46=method definition
specialObject46_type=
specialObject46_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "definition"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-method-definition.html"\n\
\ */\n
# macro definition
specialObject47=macro definition
specialObject47_type=
specialObject47_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "definition"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-macro-definition.html"\n\
\ */\n
# <[…]→⊤…|>
specialObject48=tuple of function
specialObject48_type=<[…]→⊤…|>
specialObject48_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# stack dump
specialObject49=stack dump key
specialObject49_type=atom
specialObject49_comment=\
/**\n\
\ * The '{'@code atom'}' under which the stack is captured within an \n\
\ * '{'@code exception'}' when it is raised.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @type "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# phrase⇒⊤
specialObject50=phrase
specialObject50_type=phrase⇒⊤
specialObject50_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "nontype"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-phrase.html"\n\
\ */\n
# sequence phrase⇒⊤
specialObject51=sequence phrase
specialObject51_type=sequence phrase⇒⊤
specialObject51_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-sequence-phrase.html"\n\
\ */\n
# expression phrase⇒⊤
specialObject52=expression phrase
specialObject52_type=expression phrase⇒⊤
specialObject52_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-expression-phrase.html"\n\
\ */\n
# assignment phrase⇒⊤
specialObject53=assignment phrase
specialObject53_type=assignment phrase⇒⊤
specialObject53_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-assignment-phrase.html"\n\
\ */\n
# block phrase⇒[…]→⊤
specialObject54=block phrase
specialObject54_type=block phrase⇒[…]→⊤
specialObject54_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-block-phrase.html"\n\
\ */\n
# literal phrase⇒any
specialObject55=literal phrase
specialObject55_type=literal phrase⇒any
specialObject55_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-literal-phrase.html"\n\
\ */\n
# reference phrase⇒read ⊤/write ⊥
specialObject56=variable reference phrase
specialObject56_type=reference phrase⇒variable
specialObject56_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable-reference-phrase.html"\n\
\ */\n
# send phrase⇒⊤
specialObject57=send phrase
specialObject57_type=send phrase⇒⊤
specialObject57_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-send-phrase.html"\n\
\ */\n
# (literal token⇒any)'s type
specialObject58=literal token meta
specialObject58_type=(literal token⇒any)'s type
specialObject58_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "token''s type"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-literal-token.html"\n\
\ */\n
# list phrase⇒tuple (subexpressions tuple type=<phrase⇒any…|>)
specialObject59=list phrase
specialObject59_type=list phrase⇒tuple
specialObject59_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-list-phrase.html"\n\
\ */\n
# variable use phrase⇒any
specialObject60=variable use phrase
specialObject60_type=variable use phrase⇒any
specialObject60_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "expression phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-variable-use-phrase.html"\n\
\ */\n
# declaration phrase⇒⊤
specialObject61=declaration phrase
specialObject61_type=declaration phrase⇒⊤
specialObject61_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-declaration-phrase.html"\n\
\ */\n
# argument phrase⇒⊤
specialObject62=argument phrase
specialObject62_type=argument phrase⇒⊤
specialObject62_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-argument-phrase.html"\n\
\ */\n
# label phrase⇒⊤
specialObject63=label phrase
specialObject63_type=label phrase⇒⊤
specialObject63_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-label-phrase.html"\n\
\ */\n
# local variable phrase⇒⊤
specialObject64=local variable phrase
specialObject64_type=local variable phrase⇒⊤
specialObject64_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-local-variable-phrase.html"\n\
\ */\n
# local constant phrase⇒⊤
specialObject65=local constant phrase
specialObject65_type=local constant phrase⇒⊤
specialObject65_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-local-constant-phrase.html"\n\
\ */\n
# module variable phrase⇒⊤
specialObject66=module variable phrase
specialObject66_type=module variable phrase⇒⊤
specialObject66_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module-variable-phrase.html"\n\
\ */\n
# module constant phrase⇒⊤
specialObject67=module constant phrase
specialObject67_type=module constant phrase⇒⊤
specialObject67_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-module-constant-phrase.html"\n\
\ */\n
# primitive failure reason phrase⇒⊤
specialObject68=primitive failure reason phrase
specialObject68_type=primitive failure reason phrase⇒⊤
specialObject68_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "declaration phrase"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-primitive-failure-reason-phrase.html"\n\
\ */\n
# (any)'s type
specialObject69=any meta
specialObject69_type=any's type
specialObject69_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "type"\n\
\ * @sticky\n\
\ */\n
# true
specialObject70=true
specialObject70_type=
specialObject70_comment=\
/**\n\
\ * The special atom that represents truth. '{'@method "true"} is an instance of\n\
\ * '{'@type "boolean"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"\n\
\ */\n
# false
specialObject71=false
specialObject71_type=
specialObject71_comment=\
/**\n\
\ * The special atom that represents falsehood. '{'@method "false"} is an instance\n\
\ * of '{'@type "boolean"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ * @see "http://www.availlang.org/about-avail/documentation/type-system/types-boolean.html"\n\
\ */\n
# <string…|>
specialObject72=tuple of string
specialObject72_type=string*
specialObject72_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <(⊤)'s type…|>
specialObject73=tuple of type
specialObject73_type=<⊤'s type…|>
specialObject73_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <{string|}…|>
specialObject74=tuple of set of string
specialObject74_type=<{string|}…|>
specialObject74_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {string|}
specialObject75=set of string
specialObject75_type={string|}
specialObject75_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [[1..∞)]→⊥
specialObject76=primitive failure function
specialObject76_type=[[1..∞)]→⊥
specialObject76_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# ∅
specialObject77=∅
specialObject77_type=
specialObject77_comment=\
/**\n\
\ * Answer the empty '{'@type "set"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# -∞
specialObject78=-∞
specialObject78_type=
specialObject78_comment=\
/**\n\
\ * Answer negative infinity.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# ∞
specialObject79=∞
specialObject79_type=
specialObject79_comment=\
/**\n\
\ * Answer positive infinity.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# java.lang.Object
specialObject80=pojo
specialObject80_type=java.lang.Object
specialObject80_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ * @supertype "nontype"\n\
\ */\n
# pojo ⊥
specialObject81=pojo⊥
specialObject81_type=pojo ⊥
specialObject81_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "pojo"\n\
\ */\n
# null ∈ pojo ⊥
specialObject82=Java null
specialObject82_type=⊥
specialObject82_comment=\
/**\n\
\ * Answer Java '{'@code "null"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# (pojo self)'s type
specialObject83=pojo self type
specialObject83_type=pojo self type
specialObject83_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "atom"\n\
\ */\n
# (java.lang.Object)'s type
specialObject84=pojo meta
specialObject84_type=java.lang.Object's type
specialObject84_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# (any[])'s type
specialObject85=pojo array meta
specialObject85_type=any[]'s type
specialObject85_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# […]→any
specialObject86=function returning any
specialObject86_type=[…]→any
specialObject86_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# any[]
specialObject87=pojo array
specialObject87_type=any[]
specialObject87_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# pojo self
specialObject88=pojo self
specialObject88_type=
specialObject88_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# java.lang.Throwable
specialObject89=pojo exception
specialObject89_type=java.lang.Throwable
specialObject89_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# []→⊤
specialObject90=nullary procedure
specialObject90_type=[]→⊤
specialObject90_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# []→boolean
specialObject91=predicate function
specialObject91_type=[]→boolean
specialObject91_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# ↑$[…]→⊥
specialObject92=continuation variable
specialObject92_type=↑`$[…]→⊥
specialObject92_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {atom→any|}
specialObject93=field map
specialObject93_type={atom→any|}
specialObject93_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {atom→(any)'s type|}
specialObject94=field type map
specialObject94_type={atom→any's type|}
specialObject94_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <<any…|2>…|>
specialObject95=key-value tuple
specialObject95_type=<<any…|2>…|>
specialObject95_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {}
specialObject96=empty map
specialObject96_type=
specialObject96_comment=\
/**\n\
\ * Answer the empty '{'@type "map"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "'{'}''s type"\n\
\ */\n
# {any→any|1..∞}
specialObject97=non-empty map
specialObject97_type={any→any|1..∞}
specialObject97_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# ([0..∞))'s type
specialObject98=whole number meta
specialObject98_type=[0..∞)'s type
specialObject98_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {any|1..∞}
specialObject99=non-empty set
specialObject99_type={any|1..∞}
specialObject99_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <tuple…|>
specialObject100=tuple of tuple
specialObject100_type=tuple*
specialObject100_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [0..15]
specialObject101=nybble
specialObject101_type=[0..15]
specialObject101_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <[0..15]…|>
specialObject102=tuple of nybble
specialObject102_type=<[0..15]…|>
specialObject102_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [0..65535]
specialObject103=unsigned short
specialObject103_type=[0..65535]
specialObject103_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <>
specialObject104=empty tuple
specialObject104_type=
specialObject104_comment=\
/**\n\
\ * Answer the empty '{'@type "tuple"}.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "<>''s type"\n\
\ */\n
# [⊥]→⊤
specialObject105=unary procedure
specialObject105_type=[⊥]→⊤
specialObject105_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# (0)'s type
specialObject106=type of zero
specialObject106_type=0's type
specialObject106_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# […]→(⊤)'s type
specialObject107=semantic restriction function
specialObject107_type=[…]→⊤'s type
specialObject107_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <[…]→(⊤)'s type…|>
specialObject108=tuple of semantic restriction function
specialObject108_type=<[…]→⊤'s type…|>
specialObject108_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# […]→phrase⇒⊤
specialObject109=macro function
specialObject109_type=[…]→phrase⇒⊤
specialObject109_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# (2)'s type
specialObject110=type of two
specialObject110_type=2's type
specialObject110_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# 2.718281828459045
specialObject111=Euler's number
specialObject111_type=
specialObject111_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "2.718281828459045d''s type"\n\
\ */\n
# (2.718281828459045)'s type
specialObject112=type of Euler number
specialObject112_type=2.718281828459045d's type
specialObject112_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# (phrase⇒⊤)'s type
specialObject113=phrase meta
specialObject113_type=(phrase⇒⊤)'s type
specialObject113_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {atom|}
specialObject114=set of atom
specialObject114_type={atom|}
specialObject114_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# token
specialObject115=token
specialObject115_type=
specialObject115_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "nontype"\n\
\ */\n
# literal token⇒any
specialObject116=literal token
specialObject116_type=literal token⇒any
specialObject116_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "token"\n\
\ */\n
# <(any)'s type…|>
specialObject117=tuple of any meta
specialObject117_type=<any's type…|>
specialObject117_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [0..∞]
specialObject118=nonnegative extended integer
specialObject118_type=[0..∞]
specialObject118_comment=\
/**\n\
\ * The type of all nonnegative integers.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <<atom, (any)'s type…|2>…|>
specialObject119=field type tuple
specialObject119_type=<<atom, any's type…|2>…|>
specialObject119_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <<atom, any…|2>…|>
specialObject120=field tuple
specialObject120_type=<<atom, any…|2>…|>
specialObject120_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <phrase⇒⊤…|>
specialObject121=phrase tuple
specialObject121_type=<phrase⇒⊤…|>
specialObject121_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <argument phrase⇒⊤…|>
specialObject122=argument tuple
specialObject122_type=<argument phrase⇒⊤…|>
specialObject122_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <declaration phrase⇒⊤…|>
specialObject123=declaration tuple
specialObject123_type=<declaration phrase⇒⊤…|>
specialObject123_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# read ⊤/write ⊥
specialObject124=write-only variable
specialObject124_type=read ⊤/write ⊥
specialObject124_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @supertype "variable"\n\
\ */\n
# <expression phrase⇒any…|>
specialObject125=tuple of expressions yielding any
specialObject125_type=<expression phrase⇒any…|>
specialObject125_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# expression phrase⇒any
specialObject126=expression yielding any
specialObject126_type=expression phrase⇒any
specialObject126_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [java.lang.Throwable]→⊥
specialObject127=pojo failure function
specialObject127_type=[java.lang.Throwable]→⊥
specialObject127_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <{atom|}…|>
specialObject128=tuple of set of atom
specialObject128_type=<{atom|}…|>
specialObject128_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# [0..255]
specialObject129=byte
specialObject129_type=[0..255]
specialObject129_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <<(any)'s type…|>…|>
specialObject130=tuple of tuple of any meta
specialObject130_type=<<any's type…|>…|>
specialObject130_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# read [-∞..∞]/write ⊥
specialObject131=readable extended integer variable
specialObject131_type=read [-∞..∞]/write ⊥
specialObject131_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# (fiber→⊤)'s type
specialObject132=fiber meta
specialObject132_type=(fiber→⊤)'s type
specialObject132_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <character…|1..∞>
specialObject133=nonempty string
specialObject133_type=character+
specialObject133_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {exception|}
specialObject134=set of exception
specialObject134_type={exception|}
specialObject134_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {string|1..∞}
specialObject135=nonempty set of string
specialObject135_type={string|1..∞}
specialObject135_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# {atom|1..∞}
specialObject136=nonempty set of atom
specialObject136_type={atom|1..∞}
specialObject136_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <any…|1..∞>
specialObject137=nonempty tuple
specialObject137_type=any+
specialObject137_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <(-∞..∞)…|>
specialObject138=tuple of integer
specialObject138_type=<(-∞..∞)…|>
specialObject138_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# <any…|2..∞>
specialObject139=two or more tuple
specialObject139_type=<any…|2..∞>
specialObject139_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# first of sequence phrase⇒⊤
specialObject140=first of sequence phrase
specialObject140_type=first of sequence phrase⇒⊤
specialObject140_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{0}"\n\
\ * @alias "{1}"\n\
\ */\n
# permuted list phrase⇒tuple (subexpressions tuple type=<phrase⇒any…|>)
specialObject141=permuted list phrase
specialObject141_type=permuted list phrase⇒tuple
specialObject141_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# super cast phrase⇒any
specialObject142=super cast phrase
specialObject142_type=super cast phrase⇒any
specialObject142_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# Compiler client data
specialObject143=parse map key
specialObject143_type=atom
specialObject143_comment=\
/**\n\
\ * The name of the fiber global through which parsing information is\n\
\ * communicated to and from the compiler.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# Compilation scope
specialObject144=scope map key
specialObject144_type=atom
specialObject144_comment=\
/**\n\
\ * The key within the client data fiber global that holds a map of all\n\
\ * declarations that are currently in scope during compilation.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# All tokens
specialObject145=all tokens key
specialObject145_type=atom
specialObject145_comment=\
/**\n\
\ * The key within the client data fiber global that holds the tuple of tokens\n\
\ * that contributed to the current macro whose body is running.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# [-2147483648..2147483647]
specialObject146=int32
specialObject146_type=[-2147483648..2147483647]
specialObject146_comment=\
/**\n\
\ * Signed 32-bit integers.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [-9223372036854775808..9223372036854775807]
specialObject147=int64
specialObject147_type=[-9223372036854775808..9223372036854775807]
specialObject147_comment=\
/**\n\
\ * Signed 64-bit integers.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ * @supertype "phrase"\n\
\ */\n
# statement phrase⇒⊤
specialObject148=statement phrase
specialObject148_type=statement phrase⇒⊤
specialObject148_comment=\
/**\n\
\ * The type of all statement phrases.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# Compilation scope stack
specialObject149=scope stack key
specialObject149_type=atom
specialObject149_comment=\
/**\n\
\ * The key within the client data fiber global that holds a tuple of maps which\n\
\ * are previously pushed compilation scopes.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# expression as statement phrase⇒⊤
specialObject150=expression as statement phrase
specialObject150_type=expression as statement phrase⇒⊤
specialObject150_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ * @supertype "statement phrase"\n\
\ */\n
# <[1..∞)…|1..∞>
specialObject151=permutation tuple
specialObject151_type=<[1..∞)…|1..∞>
specialObject151_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# <definition…|>
specialObject152=tuple of definition
specialObject152_type=<definition…|>
specialObject152_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# {string→atom|}
specialObject153=map from string to atom
specialObject153_type={string→atom|}
specialObject153_comment=\
/**\n\
\ * TODO: Special object description goes here.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# Macro bundle
specialObject154=macro bundle key
specialObject154_type=atom
specialObject154_comment=\
/**\n\
\ * The key within the client data fiber global that holds the bundle for which\n\
\ * a send is undergoing macro substitution.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# explicit subclassing
specialObject155=explicit subclassing key
specialObject155_type=atom
specialObject155_comment=\
/**\n\
\ * An atom property key that indicates the atom is for explicit subclassing of\n\
\ * object types.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# read map/write ⊥
specialObject156=map variable
specialObject156_type=read map/write ⊥
specialObject156_comment=\
/**\n\
\ * The type of variables that must contain a map.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [character]→boolean
specialObject157=lexer filter function
specialObject157_type=[character]→boolean
specialObject157_comment=\
/**\n\
\ * The function type for lexer filters.  If a lexer filter function is passed a\n\
\ * character and it returns true, that lexer body will be called whenever that\n\
\ * character is encountered during lexical scanning.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [string, [1..2147483647], [1..268435455]]→{<token…|1..∞>|}
specialObject158=lexer body function
specialObject158_type=[string, [1..∞), [1..∞)]→{<token…|1..∞>|}
specialObject158_comment=\
/**\n\
\ * The function type for lexer bodies.  A lexer body has access to the source\n\
\ * code being scanned, the position at which to start, and the line number at\n\
\ * the initial position.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# Static tokens
specialObject159=static tokens key
specialObject159_type=atom
specialObject159_comment=\
/**\n\
\ * The key within the client data fiber global that holds a tuple of tokens,\n\
\ * corresponding to parts of the method name, that contributed to the current\n\
\ * macro whose prefix function or body is running.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# end of file
specialObject160=end of file
specialObject160_type=atom
specialObject160_comment=\
/**\n\
\ * An atom that designates the end-of-file token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# keyword
specialObject161=keyword
specialObject161_type=atom
specialObject161_comment=\
/**\n\
\ * An atom that designates the keyword token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# literal
specialObject162=literal
specialObject162_type=atom
specialObject162_comment=\
/**\n\
\ * An atom that designates the literal token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# operator
specialObject163=operator
specialObject163_type=atom
specialObject163_comment=\
/**\n\
\ * An atom that designates the operator token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# comment
specialObject164=comment
specialObject164_type=atom
specialObject164_comment=\
/**\n\
\ * An atom that designates the comment token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# whitespace
specialObject165=whitespace
specialObject165_type=atom
specialObject165_comment=\
/**\n\
\ * An atom that designates the whitespace token type.\n\
\ *\n\
\ * @category "Primitives" "Constants"\n\
\ * @method "{0}"\n\
\ * @returns "{0}''s type"\n\
\ */\n
# [0..2147483647]
specialObject166=source position
specialObject166_type=[0..2147483647]
specialObject166_comment=\
/**\n\
\ * The type of the character position within an Avail source module.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [0..268435455]
specialObject167=source line number
specialObject167_type=[0..268435455]
specialObject167_comment=\
/**\n\
\ * The type of the line number within an Avail source module.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [1..4]
specialObject168=parse rejection level
specialObject168_type=[1..4]
specialObject168_comment=\
/**\n\
\ * The type for parse rejection levels, currently [1..4].\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# [0..31]
specialObject169=character type number
specialObject169_type=[0..31]
specialObject169_comment=\
/**\n\
\ * An integer indicating the nature of some Unicode code point.  For details,\n\
\ * see '{'@code "java.lang.Character.getType(int)"}.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# $[…]→⊤
specialObject170=continuation returning top
specialObject170_type=$[…]→⊤
specialObject170_comment=\
/**\n\
\ * The continuation type for continuations based on ⊤-valued functions.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# <¢[0-9]ᵀ…|1..∞>
specialObject171=non-empty string of digits
specialObject171_type=¢[0-9]ᵀ+
specialObject171_comment=\
/**\n\
\ * The type for non-empty strings composed entirely of digit characters.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
# <<send phrase⇒⊤…|0..1>, string…|2>
specialObject172=optional send phrase and report string
specialObject172_type=<(send phrase→⊤)?, string…|2>
specialObject172_comment=\
/**\n\
\ * The 2-element tuple type where the first element is itself a tuple of zero\n\
\ * or one occurrences of send phrase, and the second element is a (possibly\n\
\ * empty) string.\n\
\ *\n\
\ * @category "Primitives" "Types"\n\
\ * @type "{1}"\n\
\ * @alias "{0}"\n\
\ */\n
