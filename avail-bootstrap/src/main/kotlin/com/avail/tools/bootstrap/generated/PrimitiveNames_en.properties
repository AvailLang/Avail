#
# PrimitiveNames_en.properties
# Copyright © 1993-2021, The Avail Foundation, LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of the contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

#
# GENERATED FILE
# * Generator: java.io.PrintWriter
# * Last Generated: 7/28/21 4:55 PM
#
# Property assignments, BUT NOT THE COPYRIGHT OR THIS NOTICE, may safely be
# modified manually.
#

# AtomGetProperty : _=2
P_AtomGetProperty=_[_]
P_AtomGetProperty_1=anAtom
P_AtomGetProperty_2=key
P_AtomGetProperty_comment=\
/**\n\
\ * Assuming that '{'@param "{1}"} has a property whose key is '{'@param\n\
\ * "{2}"}, then answer the property value associated with the '{'@param\n\
\ * "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An atom.\n\
\ * @param "{2}" "{4}"\n\
\ *        The property key.\n\
\ * @returns "{5}"\n\
\ *    The property value bound to the key.\n\
\ * @raises "{6}"\n\
\ */\n
# AtomHasProperty : _=2
P_AtomHasProperty=_∈_
P_AtomHasProperty_1=key
P_AtomHasProperty_2=anAtom
P_AtomHasProperty_comment=\
/**\n\
\ * Does '{'@param "{2}"} have a property whose key is '{'@param "{1}"}?\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The property key.\n\
\ * @param "{2}" "{4}"\n\
\ *        An atom.\n\
\ * @returns "{5}"\n\
\ *    `true` if '{'@param "{2}"} has a property whose key is '{'@param\n\
\ *    "{1}"}, `false` otherwise.\n\
\ * @raises "{6}"\n\
\ */\n
# AtomIsSpecial : _=1
P_AtomIsSpecial=_is special
P_AtomIsSpecial_1=anAtom
P_AtomIsSpecial_comment=\
/**\n\
\ * Is the specified '{'@type "atom"} special, i.e., well-known to the Avail\n\
\ * implementation?\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An arbitrary '{'@type "atom"}.\n\
\ * @returns "{3}"\n\
\ *    '{'@method "true"} if '{'@param "{1}"} is special, '{'@method "false"}\n\
\ *    otherwise.\n\
\ */\n
# AtomIssuingModule : _=1
P_AtomIssuingModule=_'s⁇issuing module
P_AtomIssuingModule_1=anAtom
P_AtomIssuingModule_comment=\
/**\n\
\ * Answer the module that issued the specified atom.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An atom.\n\
\ * @returns "{3}"\n\
\ *    The requested module.\n\
\ * @raises "{4}"\n\
\ */\n
# AtomName : _=1
P_AtomName=_'s⁇name
P_AtomName_1=anAtom
P_AtomName_comment=\
/**\n\
\ * Answer the debug name of the specified atom.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An atom.\n\
\ * @returns "{3}"\n\
\ *    The argument''s debug name.\n\
\ */\n
# AtomRemoveProperty : _=2
P_AtomRemoveProperty=Remove_[_]
P_AtomRemoveProperty_1=anAtom
P_AtomRemoveProperty_2=key
P_AtomRemoveProperty_comment=\
/**\n\
\ * Remove from '{'@param "{1}"} the property whose key is '{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An atom.\n\
\ * @param "{2}" "{4}"\n\
\ *        A property key.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# AtomSetProperty : _=3
P_AtomSetProperty=_[_]:=_
P_AtomSetProperty_1=anAtom
P_AtomSetProperty_2=key
P_AtomSetProperty_3=value
P_AtomSetProperty_comment=\
/**\n\
\ * For '{'@param "{1}"}, establish a property binding from '{'@param\n\
\ * "{2}"} to '{'@param "{3}"}. Any previous property binding for '{'@param\n\
\ * "{2}"} is replaced.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        An atom.\n\
\ * @param "{2}" "{5}"\n\
\ *        The property key.\n\
\ * @param "{3}" "{6}"\n\
\ *        The property value.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# CreateAtom : _=1
P_CreateAtom=new atom named_
P_CreateAtom_1=debugName
P_CreateAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A name to associate with the atom for debugging purposes. This name\n\
\ *        does not participate in atom comparison.\n\
\ * @returns "{3}"\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive.\n\
\ * @raises "{4}"\n\
\ */\n
# CreateExplicitSubclassAtom : _=1
P_CreateExplicitSubclassAtom=new explicit subclass atom named_
P_CreateExplicitSubclassAtom_1=debugName
P_CreateExplicitSubclassAtom_comment=\
/**\n\
\ * Construct and answer a new atom for use as a field key in an object or\n\
\ * object type. This field key''s sole purpose is to differentiate the object\n\
\ * type from any existing object types. Associate with the atom the supplied\n\
\ * string, which should be a name used for debugging purposes only. Atoms have\n\
\ * identity and all atoms are distinct, regardless of whether their debug names\n\
\ * are equal.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A name to associate with the atom for debugging purposes. This name\n\
\ *        does not participate in atom comparison.\n\
\ * @returns "{3}"\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive, and marked for use as an explicit subclass\n\
\ *    field key in a new object type.\n\
\ * @raises "{4}"\n\
\ */\n
# IsCanonicalMessage : _=1
P_IsCanonicalMessage=_is a valid message
P_IsCanonicalMessage_1=name
P_IsCanonicalMessage_comment=\
/**\n\
\ * Is '{'@param "{1}"} a valid message? Do not attempt to look up a method\n\
\ * associated with this name. Simply verify that '{'@param "{1}"} is a viable\n\
\ * name of a method.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The name in question.\n\
\ * @returns "{3}"\n\
\ *    '{'@method "true"} if the argument is a valid message, '{'@method "false"}\n\
\ *    otherwise.\n\
\ */\n
# IsUnambiguousName : _=1
P_IsUnambiguousName=_is unambiguous
P_IsUnambiguousName_1=name
P_IsUnambiguousName_comment=\
/**\n\
\ * Is '{'@param "{1}"} unambiguous in the '{'@method "current module"}?\n\
\ *\n\
\ * @category "Primitives" "Name Resolution"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The name in question.\n\
\ * @returns "{3}"\n\
\ *    '{'@method "true"} if the argument is unambiguous, '{'@method "false"}\n\
\ *    otherwise.\n\
\ * @raises "{4}"\n\
\ */\n
# LookupAtomsForName : _=1
P_LookupAtomsForName=all atoms for_
P_LookupAtomsForName_1=name
P_LookupAtomsForName_comment=\
/**\n\
\ * Answer all atoms referenced by the specified name in the module currently\n\
\ * undergoing compilation. If this name already refers to atoms in scope,\n\
\ * i.e., either ones 1) imported through the "Uses" or "Extends" sections of the\n\
\ * current module''s header, 2) introduced by the "Names" section of the\n\
\ * current module''s header, or 3) introduced by dynamic publication then, answer\n\
\ * these atoms. Otherwise, answer an empty set.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Name Resolution" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The name which should be resolved locally.\n\
\ * @returns "{3}"\n\
\ *    The set of all locally visible atoms that match the argument.\n\
\ * @raises "{4}"\n\
\ */\n
# SpecialObject : _=1
P_SpecialObject=
P_SpecialObject_1=
P_SpecialObject_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# BootstrapLexerKeywordBody : _=3
P_BootstrapLexerKeywordBody=
P_BootstrapLexerKeywordBody_1=
P_BootstrapLexerKeywordBody_2=
P_BootstrapLexerKeywordBody_3=
P_BootstrapLexerKeywordBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerKeywordFilter : _=1
P_BootstrapLexerKeywordFilter=
P_BootstrapLexerKeywordFilter_1=
P_BootstrapLexerKeywordFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerOperatorBody : _=3
P_BootstrapLexerOperatorBody=
P_BootstrapLexerOperatorBody_1=
P_BootstrapLexerOperatorBody_2=
P_BootstrapLexerOperatorBody_3=
P_BootstrapLexerOperatorBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerOperatorFilter : _=1
P_BootstrapLexerOperatorFilter=
P_BootstrapLexerOperatorFilter_1=
P_BootstrapLexerOperatorFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerSlashStarCommentBody : _=3
P_BootstrapLexerSlashStarCommentBody=
P_BootstrapLexerSlashStarCommentBody_1=
P_BootstrapLexerSlashStarCommentBody_2=
P_BootstrapLexerSlashStarCommentBody_3=
P_BootstrapLexerSlashStarCommentBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerSlashStarCommentFilter : _=1
P_BootstrapLexerSlashStarCommentFilter=
P_BootstrapLexerSlashStarCommentFilter_1=
P_BootstrapLexerSlashStarCommentFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerStringBody : _=3
P_BootstrapLexerStringBody=
P_BootstrapLexerStringBody_1=
P_BootstrapLexerStringBody_2=
P_BootstrapLexerStringBody_3=
P_BootstrapLexerStringBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerStringFilter : _=1
P_BootstrapLexerStringFilter=
P_BootstrapLexerStringFilter_1=
P_BootstrapLexerStringFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerWhitespaceBody : _=3
P_BootstrapLexerWhitespaceBody=
P_BootstrapLexerWhitespaceBody_1=
P_BootstrapLexerWhitespaceBody_2=
P_BootstrapLexerWhitespaceBody_3=
P_BootstrapLexerWhitespaceBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerWhitespaceFilter : _=1
P_BootstrapLexerWhitespaceFilter=
P_BootstrapLexerWhitespaceFilter_1=
P_BootstrapLexerWhitespaceFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerWholeNumberBody : _=3
P_BootstrapLexerWholeNumberBody=
P_BootstrapLexerWholeNumberBody_1=
P_BootstrapLexerWholeNumberBody_2=
P_BootstrapLexerWholeNumberBody_3=
P_BootstrapLexerWholeNumberBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLexerWholeNumberFilter : _=1
P_BootstrapLexerWholeNumberFilter=
P_BootstrapLexerWholeNumberFilter_1=
P_BootstrapLexerWholeNumberFilter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapAssignmentStatementMacro : _=2
P_BootstrapAssignmentStatementMacro=
P_BootstrapAssignmentStatementMacro_1=
P_BootstrapAssignmentStatementMacro_2=
P_BootstrapAssignmentStatementMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapBlockMacro : _=7
P_BootstrapBlockMacro=
P_BootstrapBlockMacro_1=
P_BootstrapBlockMacro_2=
P_BootstrapBlockMacro_3=
P_BootstrapBlockMacro_4=
P_BootstrapBlockMacro_5=
P_BootstrapBlockMacro_6=
P_BootstrapBlockMacro_7=
P_BootstrapBlockMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{8}"\n\
\ *        TODO\n\
\ * @param "{2}" "{9}"\n\
\ *        TODO\n\
\ * @param "{3}" "{10}"\n\
\ *        TODO\n\
\ * @param "{4}" "{11}"\n\
\ *        TODO\n\
\ * @param "{5}" "{12}"\n\
\ *        TODO\n\
\ * @param "{6}" "{13}"\n\
\ *        TODO\n\
\ * @param "{7}" "{14}"\n\
\ *        TODO\n\
\ * @returns "{15}"\n\
\ *    TODO\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ */\n
# BootstrapConstantDeclarationMacro : _=2
P_BootstrapConstantDeclarationMacro=
P_BootstrapConstantDeclarationMacro_1=
P_BootstrapConstantDeclarationMacro_2=
P_BootstrapConstantDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapDefineSpecialObjectMacro : _=2
P_BootstrapDefineSpecialObjectMacro=
P_BootstrapDefineSpecialObjectMacro_1=
P_BootstrapDefineSpecialObjectMacro_2=
P_BootstrapDefineSpecialObjectMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapInitializingVariableDeclarationMacro : _=3
P_BootstrapInitializingVariableDeclarationMacro=
P_BootstrapInitializingVariableDeclarationMacro_1=
P_BootstrapInitializingVariableDeclarationMacro_2=
P_BootstrapInitializingVariableDeclarationMacro_3=
P_BootstrapInitializingVariableDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapLiteral : _=1
P_BootstrapLiteral=
P_BootstrapLiteral_1=
P_BootstrapLiteral_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapPrefixBlockArgument : _=1
P_BootstrapPrefixBlockArgument=
P_BootstrapPrefixBlockArgument_1=
P_BootstrapPrefixBlockArgument_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# BootstrapPrefixEndOfBlockBody : _=5
P_BootstrapPrefixEndOfBlockBody=
P_BootstrapPrefixEndOfBlockBody_1=
P_BootstrapPrefixEndOfBlockBody_2=
P_BootstrapPrefixEndOfBlockBody_3=
P_BootstrapPrefixEndOfBlockBody_4=
P_BootstrapPrefixEndOfBlockBody_5=
P_BootstrapPrefixEndOfBlockBody_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# BootstrapPrefixLabelDeclaration : _=3
P_BootstrapPrefixLabelDeclaration=
P_BootstrapPrefixLabelDeclaration_1=
P_BootstrapPrefixLabelDeclaration_2=
P_BootstrapPrefixLabelDeclaration_3=
P_BootstrapPrefixLabelDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# BootstrapPrefixPostStatement : _=4
P_BootstrapPrefixPostStatement=
P_BootstrapPrefixPostStatement_1=
P_BootstrapPrefixPostStatement_2=
P_BootstrapPrefixPostStatement_3=
P_BootstrapPrefixPostStatement_4=
P_BootstrapPrefixPostStatement_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        TODO\n\
\ * @param "{2}" "{6}"\n\
\ *        TODO\n\
\ * @param "{3}" "{7}"\n\
\ *        TODO\n\
\ * @param "{4}" "{8}"\n\
\ *        TODO\n\
\ * @returns "{9}"\n\
\ *    TODO\n\
\ * @raises "{10}"\n\
\ */\n
# BootstrapPrefixPrimitiveDeclaration : _=2
P_BootstrapPrefixPrimitiveDeclaration=
P_BootstrapPrefixPrimitiveDeclaration_1=
P_BootstrapPrefixPrimitiveDeclaration_2=
P_BootstrapPrefixPrimitiveDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapPrefixStartOfBlock : _=0
P_BootstrapPrefixStartOfBlock=
P_BootstrapPrefixStartOfBlock_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapSendAsStatementMacro : _=1
P_BootstrapSendAsStatementMacro=
P_BootstrapSendAsStatementMacro_1=
P_BootstrapSendAsStatementMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapSuperCastMacro : _=2
P_BootstrapSuperCastMacro=
P_BootstrapSuperCastMacro_1=
P_BootstrapSuperCastMacro_2=
P_BootstrapSuperCastMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BootstrapVariableDeclarationMacro : _=2
P_BootstrapVariableDeclarationMacro=
P_BootstrapVariableDeclarationMacro_1=
P_BootstrapVariableDeclarationMacro_2=
P_BootstrapVariableDeclarationMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# BootstrapVariableUseMacro : _=1
P_BootstrapVariableUseMacro=
P_BootstrapVariableUseMacro_1=
P_BootstrapVariableUseMacro_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# CharacterCodePoint : _=1
P_CharacterCodePoint=_'s⁇code point
P_CharacterCodePoint_1=aCharacter
P_CharacterCodePoint_comment=\
/**\n\
\ * Answer the argument''s Unicode code point.\n\
\ *\n\
\ * @category "Primitives" "Integers" "Unicode" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A character.\n\
\ * @returns "{3}"\n\
\ *    The Unicode code point that encodes the argument.\n\
\ */\n
# CharacterFromCodePoint : _=1
P_CharacterFromCodePoint=_→character
P_CharacterFromCodePoint_1=codePoint
P_CharacterFromCodePoint_comment=\
/**\n\
\ * Answer the argument as a character.\n\
\ *\n\
\ * @category "Primitives" "Integers" "Unicode" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A Unicode code point.\n\
\ * @returns "{3}"\n\
\ *    The character encoded by the argument.\n\
\ */\n
# CharacterType : _=1
P_CharacterType=_'s⁇character type number
P_CharacterType_1=aCharacter
P_CharacterType_comment=\
/**\n\
\ * Answer the character type of the given character.  The character type is an\n\
\ * integer in the range [0..31], corresponding to\n\
\ * '{'@code "java.lang.Character.getType(int)"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The character to categorize.\n\
\ * @returns "{3}"\n\
\ *    The type of character that was provided, encoded as a value in [0..31].\n\
\ */\n
# AcceptParsing : _=0
P_AcceptParsing=Immediately accept parse
P_AcceptParsing_comment=\
/**\n\
\ * Accept the current attempt at parsing an expression.  This can be used by\n\
\ * semantic restrictions and macro prefix functions to allow early exits.  In\n\
\ * addition, it allows semantic restriction bodies to be bottom-typed,\n\
\ * indicating that it <em>cannot</em> strengthen the expression type, allowing\n\
\ * detection of methods that are always ⊤-valued, avoiding the search for\n\
\ * invocations of them as ordinary subexpressions.  This should improve both\n\
\ * parsing speed and the diagnostic quality of parse errors.\n\
\ *\n\
\ * This method may only be invoked from the body of a semantic restriction\n\
\ * function: it should only be invoked by the Avail compiler, never by a\n\
\ * semantically valid Avail program.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    Ends the current fiber immediately (or after safely unwinding to the base\n\
\ *    stack frame after exceptions are installed), and does not return.\n\
\ * @raises "{2}"\n\
\ */\n
# CurrentMacroName : _=0
P_CurrentMacroName=current macro name
P_CurrentMacroName_comment=\
/**\n\
\ * Answer the atom for the message bundle of the send phrase being evaluated as\n\
\ * a macro.  Fail if a macro is not being evaluated by the current fiber.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The atom of the send phrase undergoing macro expansion.\n\
\ * @raises "{2}"\n\
\ *    If a macro is not being evaluated by the current fiber.\n\
\ */\n
# GenerateFunctionForBlock : _=1
P_GenerateFunctionForBlock=_→function
P_GenerateFunctionForBlock_1=aBlock
P_GenerateFunctionForBlock_comment=\
/**\n\
\ * Generate and answer a function from the specified block.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Functions" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block. Note that the block is treated as a top-level construct, so\n\
\ *        it must not refer to any outer variable declarations.\n\
\ * @returns "{3}"\n\
\ *    The requested function.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# RejectParsing : _=2
P_RejectParsing=Immediately reject parse«silently|weakly|moderately|strongly⁇»!,expected:_
P_RejectParsing_1=level
P_RejectParsing_2=expected
P_RejectParsing_comment=\
/**\n\
\ * Reject the current parse. This causes the compiler to reject the\n\
\ * interpretation of the program text that resulted in execution of the code\n\
\ * that invoked this method. The argument is a description of the parse\n\
\ * rejection, but in positive terms that primarily assert what the caller was\n\
\ * expecting (on the compiler''s behalf). It is, of course, also useful to state\n\
\ * what was actually discovered.\n\
\ *\n\
\ * Note that the Avail compiler attempts, in parallel, many different parses of\n\
\ * a statement. If the only parses syntactically accepted by the compiler are\n\
\ * semantically rejected by callers of this method, then and only then is the\n\
\ * statement deemed invalid and the arguments of such calls emitted by the\n\
\ * compiler as error messages to assist the programmer in correcting the\n\
\ * rejected statement.\n\
\ *\n\
\ * This method may only be invoked from the body of a macro function or a\n\
\ * semantic restriction function: it should only be invoked by the Avail\n\
\ * compiler, never by a semantically valid Avail program.\n\
\ *\n\
\ * Also note that this mechanism bypasses exceptions, so this should only be\n\
\ * used as the primitive function supplied to an invocation of\n\
\ * "unwind fiber and run_with_".  This extra wrapping has no effect prior to\n\
\ * bootstrapping exceptions, but it applies retroactively after the bootstrap.\n\
\ *\n\
\ * @category "Primitives" "Semantic Restrictions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The notification level that controls under what circumstances the text\n\
\ *        should be presented as a compilation error.  The values are:\n\
\ *            1=silently, which is never displayed,\n\
\ *            2=weakly, which is only displayed if there is nothing >2,\n\
\ *            3=moderately, which is only displayed if there is nothing >3, and\n\
\ *            4=strongly, which is always displayed, as long as parsing has not\n\
\ *              proceeded too far beyond this position.\n\
\ * @param "{2}" "{4}"\n\
\ *        A description of the cause of rejection, worded to sound good\n\
\ *        after '{'@code "Expected..."}.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# ContinuationCaller : _=1
P_ContinuationCaller=_'s⁇caller
P_ContinuationCaller_1=aContinuation
P_ContinuationCaller_comment=\
/**\n\
\ * Construct and answer a variable that holds the caller of the specified\n\
\ * continuation. This variable will be unassigned if the continuation has no\n\
\ * caller.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Variables" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation.\n\
\ * @returns "{3}"\n\
\ *    A variable that, if assigned, holds the argument''s caller. If unassigned,\n\
\ *    then the argument has no caller.\n\
\ */\n
# ContinuationFunction : _=1
P_ContinuationFunction=_'s⁇function
P_ContinuationFunction_1=aContinuation
P_ContinuationFunction_comment=\
/**\n\
\ * Answer the current function of the specified continuation.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s current function. This is the function whose execution\n\
\ *    will be resumed if the continuation is resumed.\n\
\ */\n
# ContinuationPC : _=1
P_ContinuationPC=_'s⁇program counter
P_ContinuationPC_1=aContinuation
P_ContinuationPC_comment=\
/**\n\
\ * Answer the program counter of the specified continuation. Using the current\n\
\ * function''s tuple of Level One nybblecodes, this is the index of the next\n\
\ * instruction to be performed (if the continuation is resumed).\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s Level One program counter.\n\
\ */\n
# ContinuationStackData : _=1
P_ContinuationStackData=_'s⁇stack
P_ContinuationStackData_1=aContinuation
P_ContinuationStackData_comment=\
/**\n\
\ * Answer the stack of the specified continuation. This tuple contains the\n\
\ * arguments, local variables, and temporaries. Any null values, forbidden to\n\
\ * leak through into observable Avail macrostate, are replaced with an\n\
\ * unassigned variable whose containment type is ⊥. Note that such a variable\n\
\ * cannot be constructed either syntactically nor through a variable\n\
\ * construction primitive.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s stack.\n\
\ */\n
# ContinuationStackPointer : _=1
P_ContinuationStackPointer=_'s⁇stack pointer
P_ContinuationStackPointer_1=aContinuation
P_ContinuationStackPointer_comment=\
/**\n\
\ * Answer the stack pointer of the specified continuation. This is the index of\n\
\ * the top of the local stack. For an empty stack, this value equals the size of\n\
\ * the stack plus one. The stack grows downward.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s stack pointer.\n\
\ */\n
# ContinuationTypeToFunctionType : _=1
P_ContinuationTypeToFunctionType=_'s⁇function type
P_ContinuationTypeToFunctionType_1=continuationType
P_ContinuationTypeToFunctionType_comment=\
/**\n\
\ * Answer the type of the function represented by the specified continuation.\n\
\ *\n\
\ * @category "Primitives" "Types" "Continuations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A continuation type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s current function''s type.\n\
\ */\n
# CreateContinuation : _=5
P_CreateContinuation=$_@pc=_stack=_[_]caller=_
P_CreateContinuation_1=aFunction
P_CreateContinuation_2=programCounter
P_CreateContinuation_3=stack
P_CreateContinuation_4=stackPointer
P_CreateContinuation_5=caller
P_CreateContinuation_comment=\
/**\n\
\ * Construct and answer a continuation whose current function, Level One\n\
\ * program counter, local stack, local stack pointer, and calling continuation\n\
\ * are specified by the arguments.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        The new continuation''s current function.\n\
\ * @param "{2}" "{7}"\n\
\ *        @param "{1}"''s program counter. This is the index of the\n\
\ *        next Level One instruction to execute when the new continuation is\n\
\ *        resumed.\n\
\ * @param "{3}" "{8}"\n\
\ *        @param "{1}"''s stack. This tuple contains the arguments, local\n\
\ *        variables, and temporaries.\n\
\ * @param "{4}" "{9}"\n\
\ *        @param "{1}"''s stack pointer. This is the index of the\n\
\ *        top of the stack.\n\
\ * @param "{5}" "{10}"\n\
\ *        A variable holding the new continuation''s calling continuation.\n\
\ *        If the variable is unassigned, then create a root continuation (i.e.\n\
\ *        one without a caller).\n\
\ * @returns "{11}"\n\
\ *    The requested continuation.\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# FunctionTypeToContinuationType : _=1
P_FunctionTypeToContinuationType=$_
P_FunctionTypeToContinuationType_1=functionType
P_FunctionTypeToContinuationType_comment=\
/**\n\
\ * Compute and answer a continuation type capable of representing a current\n\
\ * function of the specified type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Continuations" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function type.\n\
\ * @returns "{3}"\n\
\ *    The requested continuation type.\n\
\ */\n
# CatchException : _=3
P_CatchException=
P_CatchException_1=
P_CatchException_2=
P_CatchException_3=
P_CatchException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# ExceptionStackDump : _=1
P_ExceptionStackDump=
P_ExceptionStackDump_1=
P_ExceptionStackDump_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# ExitContinuationIf : _=2
P_ExitContinuationIf=Exit_if_
P_ExitContinuationIf_1=aContinuation
P_ExitContinuationIf_2=condition
P_ExitContinuationIf_comment=\
/**\n\
\ * If the provided boolean is true, exit the ⊤-producing continuation. Execution\n\
\ * proceeds as though the continuation had just returned normally. The current\n\
\ * continuation (in which this primitive was invoked) is completely replaced by\n\
\ * the specified continuation''s resumed caller.  If the provided boolean is\n\
\ * false, do nothing.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The continuation to exit.\n\
\ * @param "{2}" "{4}"\n\
\ *        Whether to exit.\n\
\ * @raises "{5}"\n\
\ */\n
# ExitContinuationWithResultIf : _=3
P_ExitContinuationWithResultIf=Exit_with_if_
P_ExitContinuationWithResultIf_1=aContinuation
P_ExitContinuationWithResultIf_2=value
P_ExitContinuationWithResultIf_3=condition
P_ExitContinuationWithResultIf_comment=\
/**\n\
\ * If the provided boolean is true, exit the continuation and answer the\n\
\ * specified value to the continuation''s caller. Execution proceeds as though\n\
\ * the continuation had just returned from its current function with the\n\
\ * supplied value. The current continuation (in which this primitive was\n\
\ * invoked) is completely replaced by the specified continuation''s resumed\n\
\ * caller.  If the provided boolean is false, do nothing.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The continuation to exit.\n\
\ * @param "{2}" "{5}"\n\
\ *         The value with which to exit '{'@param "{1}"'}'.\n\
\ * @param "{3}" "{6}"\n\
\ *        Whether to exit.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ *         If the value to return isn''t strong enough for the continuation.\n\
\ */\n
# IfFalseThenElse : _=3
P_IfFalseThenElse=
P_IfFalseThenElse_1=
P_IfFalseThenElse_2=
P_IfFalseThenElse_3=
P_IfFalseThenElse_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# IfTrueThenElse : _=3
P_IfTrueThenElse=
P_IfTrueThenElse_1=
P_IfTrueThenElse_2=
P_IfTrueThenElse_3=
P_IfTrueThenElse_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# InvokeWithTuple : _=2
P_InvokeWithTuple=Invoke|invoke_with_
P_InvokeWithTuple_1=aFunction
P_InvokeWithTuple_2=arguments
P_InvokeWithTuple_comment=\
/**\n\
\ * Invoke the function with the given arguments. Answer its result.\n\
\ *\n\
\ * @category "Primitives" "Functions" "Function Application"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A function.\n\
\ * @param "{2}" "{4}"\n\
\ *        The tuple of arguments.\n\
\ * @returns "{5}"\n\
\ *    The value produced by applying the arguments to the function.\n\
\ * @raises "exception" ("{6}")\n\
\ *         Since the function''s implementation is arbitrary, it can raise any\n\
\ *         exception.\n\
\ */\n
# MarkGuardVariable : _=2
P_MarkGuardVariable=
P_MarkGuardVariable_1=
P_MarkGuardVariable_2=
P_MarkGuardVariable_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ */\n
# MarkNearestCatch : _=1
P_MarkNearestCatch=
P_MarkNearestCatch_1=
P_MarkNearestCatch_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# RaiseException : _=1
P_RaiseException=
P_RaiseException_1=
P_RaiseException_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# RestartContinuation : _=1
P_RestartContinuation=Restart_
P_RestartContinuation_1=aContinuation
P_RestartContinuation_comment=\
/**\n\
\ * Restart the continuation with its original arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with its original arguments. The current continuation (in which\n\
\ * this primitive was invoked) is completely replaced by the restarted\n\
\ * continuation.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The continuation to restart.\n\
\ * @returns "{3}"\n\
\ */\n
# RestartContinuationWithArguments : _=2
P_RestartContinuationWithArguments=Restart_with_
P_RestartContinuationWithArguments_1=aContinuation
P_RestartContinuationWithArguments_2=arguments
P_RestartContinuationWithArguments_comment=\
/**\n\
\ * Restart the continuation with the specified arguments. Execution proceeds as\n\
\ * though the continuation''s caller had just invoked the continuation''s current\n\
\ * function with the given arguments instead of the original arguments. The\n\
\ * current continuation (in which this primitive was invoked) is completely\n\
\ * replaced by the restarted continuation.\n\
\ *\n\
\ * @category "Primitives" "Continuations" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The continuation to restart.\n\
\ * @param "{2}" "{4}"\n\
\ *        The new arguments with which to restart '{'@param "{1}"}.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# ShortCircuitHelper : _=2
P_ShortCircuitHelper=
P_ShortCircuitHelper_1=ignored
P_ShortCircuitHelper_2=function
P_ShortCircuitHelper_comment=\
/**\n\
\ * Evaluate the second argument, a zero-argument function. This is useful for\n\
\ * short-circuit evaluation of fundamental boolean operations.  It has the\n\
\ * advantage that an intermediate stack frame does not have to be created for\n\
\ * the function evaluation.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A value to be ignored.\n\
\ * @param "{2}" "{4}"\n\
\ *        The function to always invoke.\n\
\ * @returns "{5}"\n\
\ *    The result of the function evaluation.\n\
\ */\n
# AsDouble : _=1
P_AsDouble=_→double
P_AsDouble_1=aNumeric
P_AsDouble_comment=\
/**\n\
\ * Compute and answer the numeric argument as a double-precision floating point\n\
\ * number.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A number.\n\
\ * @returns "{3}"\n\
\ *    A '{'@type "double"} whose value approximates the argument.\n\
\ */\n
# ConstructDoubleFromParts : _=3
P_ConstructDoubleFromParts=
P_ConstructDoubleFromParts_1=
P_ConstructDoubleFromParts_2=
P_ConstructDoubleFromParts_3=
P_ConstructDoubleFromParts_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ */\n
# DoubleCeiling : _=1
P_DoubleCeiling=⌈_⌉
P_DoubleCeiling_1=x
P_DoubleCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral double-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A double-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    If the `0` is ±∞ or not-a-number, then '{'@param "{1}"}, otherwise the ceiling of\n\
\ *    '{'@param "{1}"}.\n\
\ */\n
# DoubleExp : _=2
P_DoubleExp=_^_
P_DoubleExp_1=eulerNumber
P_DoubleExp_2=x
P_DoubleExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^'{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        Euler''s number.\n\
\ * @param "{2}" "{4}"\n\
\ *        The exponent.\n\
\ * @returns "{5}"\n\
\ *    An approximation of e^'{'@param "{2}"}.\n\
\ */\n
# DoubleFloor : _=1
P_DoubleFloor=⌊_⌋
P_DoubleFloor_1=x
P_DoubleFloor_comment=\
/**\n\
\ * Compute and answer the largest integral double-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of '{'@param\n\
\ * "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A double-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    If the `0` is ±∞ or not-a-number, then '{'@param "{1}"}, otherwise the\n\
\ *    floor of '{'@param "{1}"}.\n\
\ */\n
# DoubleFromLongBits : _=1
P_DoubleFromLongBits=_reinterpreted as double
P_DoubleFromLongBits_1=anInt64
P_DoubleFromLongBits_comment=\
/**\n\
\ * Reinterpret the 64-bit signed integer as the bit pattern of an IEEE-754\n\
\ * double-precision floating point number.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A 64-bit signed integer.\n\
\ * @returns "{3}"\n\
\ *    The double having the specified bit representation.\n\
\ */\n
# DoubleFromParts : _=4
P_DoubleFromParts=
P_DoubleFromParts_1=wholePart
P_DoubleFromParts_2=fractionPart
P_DoubleFromParts_3=exponentSign
P_DoubleFromParts_4=exponentPart
P_DoubleFromParts_comment=\
/**\n\
\ * Given non-empty digit strings for a floating point number's whole number part,\n\
\ * fractional part, and exponent, and a boolean that's true for a positive\n\
\ * exponent and false for a negative exponent, construct the corresponding double.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The digits before the decimal point.\n\
\ * @param "{2}" "{6}"\n\
\ *        The digits immediately after the decimal point.\n\
\ * @param "{3}" "{7}"\n\
\ *        A boolean indicating a positive exponent.\n\
\ * @param "{4}" "{8}"\n\
\ *        The digits of the exponent.\n\
\ * @returns "{9}"\n\
\ *    The non-negative double constructed from the given digits.\n\
\ */\n
# DoubleLn : _=1
P_DoubleLn=ln_
P_DoubleLn_1=x
P_DoubleLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A double-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    An approximation of ln '{'@param "{1}"}.\n\
\ */\n
# DoubleModulus : _=2
P_DoubleModulus=_mod_
P_DoubleModulus_1=dividend
P_DoubleModulus_2=divisor
P_DoubleModulus_comment=\
/**\n\
\ * Compute and answer an approximation of '{'@param "{1}"} modulo '{'@param "{2}"}, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The dividend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The divisor.\n\
\ * @returns "{5}"\n\
\ *    An approximation of `0` mod '{'@param "{2}"}.\n\
\ */\n
# DoubleTimesTwoPower : _=3
P_DoubleTimesTwoPower=_⨉_^_
P_DoubleTimesTwoPower_1=a
P_DoubleTimesTwoPower_2=two
P_DoubleTimesTwoPower_3=b
P_DoubleTimesTwoPower_comment=\
/**\n\
\ * Compute and answer '{'@param "{1}"}⨉(2^'{'@param "{2}"}) without loss of\n\
\ * precision or intermediate overflow. This scales '{'@param "{1}"} by a power\n\
\ * of two (`2`).\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A single-precision floating point number.\n\
\ * @param "{2}" "{5}"\n\
\ *        The number two (`2`).\n\
\ * @param "{3}" "{6}"\n\
\ *        The scaling factor.\n\
\ * @returns "{7}"\n\
\ *    The requested value.\n\
\ */\n
# DoubleToLongBits : _=1
P_DoubleToLongBits=_reinterpreted as bits
P_DoubleToLongBits_1=aDouble
P_DoubleToLongBits_comment=\
/**\n\
\ * Treat the IEEE-754 double-precision floating point number''s representation as\n\
\ * a 64 bit sequence, and answer the (signed) integer having those bits.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The double to reinterpret.\n\
\ * @returns "{3}"\n\
\ *    The double''s bit representation as a signed 64-bit integer.\n\
\ */\n
# DoubleTruncatedAsInteger : _=1
P_DoubleTruncatedAsInteger=_→extended integer
P_DoubleTruncatedAsInteger_1=aDouble
P_DoubleTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A double-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    The requested value.\n\
\ * @raises "{4}"\n\
\ */\n
# AttemptJoinFiber : _=1
P_AttemptJoinFiber=Attempt to join_
P_AttemptJoinFiber_1=aFiber
P_AttemptJoinFiber_comment=\
/**\n\
\ * Attempt to join the specified fiber. If the fiber has already terminated,\n\
\ * then return immediately; otherwise, arrange to unpark the current fiber when\n\
\ * the specified fiber terminates and park the current fiber.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Synchronization" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ */\n
# CanRejectParse : _=0
P_CanRejectParse=current fiber can reject a parse
P_CanRejectParse_comment=\
/**\n\
\ * Ascertain whether the current fiber can reject an ongoing parse.\n\
\ *\n\
\ * @category "Primitives" "Concurrency"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    `true` if the current fiber can reject a parse, `false`\n\
\ *    otherwise.\n\
\ */\n
# CreateFiberHeritableAtom : _=1
P_CreateFiberHeritableAtom=new⁇heritable«fiber-local»⁇atom named_
P_CreateFiberHeritableAtom_1=debugName
P_CreateFiberHeritableAtom_comment=\
/**\n\
\ * Construct and answer a new atom. Associate with the atom the supplied string,\n\
\ * which should be a name used for debugging purposes only. Atoms have identity\n\
\ * and all atoms are distinct, regardless of whether their debug names are\n\
\ * equal. When this atom occurs as a key within a fiber''s environment, any new\n\
\ * fibers created by this fiber will also include this key and the associated\n\
\ * value at creation time.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Concurrency" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A name to associate with the atom for debugging purposes.\n\
\ *       This name does not participate in atom comparison.\n\
\ * @returns "{3}"\n\
\ *    A new atom, distinct from every other atom answered by a different\n\
\ *    invocation of this primitive, that represents a heritable fiber-local\n\
\ *    variable.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# CreateFiberType : _=1
P_CreateFiberType=fiber→_
P_CreateFiberType_1=resultType
P_CreateFiberType_comment=\
/**\n\
\ * Construct and answer a fiber type whose result type is '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Types" "Concurrency"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A type.\n\
\ * @returns "{3}"\n\
\ *    The requested fiber type.\n\
\ */\n
# CurrentFiber : _=0
P_CurrentFiber=current fiber
P_CurrentFiber_comment=\
/**\n\
\ * Answer the current fiber.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The current fiber.\n\
\ */\n
# DelayedFork : _=4
P_DelayedFork=in_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_
P_DelayedFork_1=delayMillis
P_DelayedFork_2=aFunction
P_DelayedFork_3=arguments
P_DelayedFork_4=priority
P_DelayedFork_comment=\
/**\n\
\ * When at least the specified number of milliseconds have elapsed, fork a new\n\
\ * fiber at the specified priority. The new fiber will invoke the given function\n\
\ * with the supplied arguments. A best effort will be made to start the fiber as\n\
\ * soon as the delay has expired, but no real-time guarantees are made.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Time" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The minimum number of milliseconds to delay the start of the new\n\
\ *       fiber.\n\
\ * @param "{2}" "{6}"\n\
\ *        A function.\n\
\ * @param "{3}" "{7}"\n\
\ *        The arguments to the function.\n\
\ * @param "{4}" "{8}"\n\
\ *        The priority of the new fiber.\n\
\ * @returns "{9}"\n\
\ *    The new fiber.\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# DelayedForkOrphan : _=4
P_DelayedForkOrphan=In_millisecond|milliseconds,⁇invoke_with_,⁇forked at priority_
P_DelayedForkOrphan_1=delayMillis
P_DelayedForkOrphan_2=aFunction
P_DelayedForkOrphan_3=arguments
P_DelayedForkOrphan_4=priority
P_DelayedForkOrphan_comment=\
/**\n\
\ * When at least the specified number of milliseconds have elapsed, fork a new\n\
\ * fiber at the specified priority. The new fiber will invoke the given function\n\
\ * with the supplied arguments. A best effort will be made to start the fiber as\n\
\ * soon as the delay has expired, but no real-time guarantees are made.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Time" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The minimum number of milliseconds to delay the start of the new\n\
\ *       fiber.\n\
\ * @param "{2}" "{6}"\n\
\ *        A function.\n\
\ * @param "{3}" "{7}"\n\
\ *        The arguments to the function.\n\
\ * @param "{4}" "{8}"\n\
\ *        The priority of the new fiber.\n\
\ * @returns "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# FiberName : _=1
P_FiberName=_'s⁇name
P_FiberName_1=aFiber
P_FiberName_comment=\
/**\n\
\ * Answer the name of the specified fiber.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ *    The fiber''s name.\n\
\ */\n
# FiberResult : _=1
P_FiberResult=_'s⁇result
P_FiberResult_1=aFiber
P_FiberResult_comment=\
/**\n\
\ * Answer the result of running the specified fiber to successful completion.\n\
\ * This method may only be called safely after an affirmative answer from\n\
\ * `_has result`.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ *    The result yielded by the specified fiber. This is the value produced by\n\
\ *    the fiber''s outermost continuation, i.e., its base function.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FiberTypeResultType : _=1
P_FiberTypeResultType=_'s⁇result type
P_FiberTypeResultType_1=fiberType
P_FiberTypeResultType_comment=\
/**\n\
\ * Answer the result type of the specified fiber type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s result type.\n\
\ */\n
# Fork : _=3
P_Fork=invoke_with_,⁇forked at priority_
P_Fork_1=aFunction
P_Fork_2=arguments
P_Fork_3=priority
P_Fork_comment=\
/**\n\
\ * Fork a new fiber at the specified priority. The new fiber will invoke the\n\
\ * given function with the supplied arguments.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A function.\n\
\ * @param "{2}" "{5}"\n\
\ *        The arguments to the function.\n\
\ * @param "{3}" "{6}"\n\
\ *        The priority of the new fiber.\n\
\ * @returns "{7}"\n\
\ *    The new fiber.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# ForkOrphan : _=3
P_ForkOrphan=Invoke_with_,⁇forked at priority_
P_ForkOrphan_1=aFunction
P_ForkOrphan_2=arguments
P_ForkOrphan_3=priority
P_ForkOrphan_comment=\
/**\n\
\ * Fork a new fiber at the specified priority. The new fiber will invoke the\n\
\ * given function with the supplied arguments.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A function.\n\
\ * @param "{2}" "{5}"\n\
\ *        The arguments to the function.\n\
\ * @param "{3}" "{6}"\n\
\ *        The priority of the new fiber.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# GetContinuationOfOtherFiber : _=1
P_GetContinuationOfOtherFiber=
P_GetContinuationOfOtherFiber_1=
P_GetContinuationOfOtherFiber_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# GetFiberPriority : _=1
P_GetFiberPriority=_'s⁇priority
P_GetFiberPriority_1=aFiber
P_GetFiberPriority_comment=\
/**\n\
\ * Extract the priority of a fiber. A fiber with higher priority may receive a\n\
\ * larger share of the available CPU time than one with a low priority.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The fiber from which to extract the priority.\n\
\ * @returns "{3}"\n\
\ *    A whole number representing the priority of the fiber.\n\
\ */\n
# HasResult : _=1
P_HasResult=_has result
P_HasResult_1=aFiber
P_HasResult_comment=\
/**\n\
\ * Does the specified fiber have a result ready?\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ *    `true` if the fiber has terminated and produced a result, `false`\n\
\ *    otherwise.\n\
\ */\n
# HasTerminated : _=1
P_HasTerminated=_has terminated
P_HasTerminated_1=aFiber
P_HasTerminated_comment=\
/**\n\
\ * Has the specified fiber terminated?\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ *    `true` if the fiber has terminated, `false` otherwise.\n\
\ */\n
# IsFiberVariable : _=1
P_IsFiberVariable=_∈current fiber
P_IsFiberVariable_1=key
P_IsFiberVariable_comment=\
/**\n\
\ * Does the current fiber''s environment have a value bound to '{'@param "{1}"}? This\n\
\ * effectively ascertains whether a fiber-local variable exists for the\n\
\ * specified fiber.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The key whose existence should be queried.\n\
\ * @returns "{3}"\n\
\ *    `true` if the current fiber binds a value to '{'@param "{1}"}, `false`\n\
\ *    otherwise.\n\
\ * @raises "{4}"\n\
\ */\n
# IsTerminationRequested : _=0
P_IsTerminationRequested=termination requested
P_IsTerminationRequested_comment=\
/**\n\
\ * Has termination of the current fiber been requested? Answer the current value\n\
\ * of the appropriate interrupt request flag and simultaneously clear it.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    `true` if termination of the current fiber has been requested, `false`\n\
\ *    otherwise.\n\
\ */\n
# LookupFiberVariable : _=1
P_LookupFiberVariable=current fiber[_]
P_LookupFiberVariable_1=key
P_LookupFiberVariable_comment=\
/**\n\
\ * Answer the value bound to '{'@param "{1}"} in the current fiber''s environment. Since\n\
\ * the fiber''s environment essentially contains fiber-local variables (i.e.\n\
\ * bindings from atoms to arbitrary values), this operation effectively reads a\n\
\ * fiber-local variable.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The key whose value should be obtained.\n\
\ * @returns "{3}"\n\
\ *    The value bound to '{'@param "{1}"} within the current fiber''s environment.\n\
\ * @raises "{4}"\n\
\ */\n
# ParkCurrentFiber : _=0
P_ParkCurrentFiber=Park current fiber
P_ParkCurrentFiber_comment=\
/**\n\
\ * Attempt to acquire the permit associated with the current fiber. If the\n\
\ * permit is available, then consume it and return immediately. If the permit is\n\
\ * not available, then park the current fiber. A fiber suspended in this fashion\n\
\ * may be resumed only by calling `Unpark_`. A newly unparked fiber should\n\
\ * always recheck the basis for its having parked, to see if it should park\n\
\ * again. Low-level synchronization mechanisms may require the ability to\n\
\ * spuriously unpark in order to ensure correctness.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Synchronization" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ */\n
# RemoveFiberVariable : _=1
P_RemoveFiberVariable=Remove current fiber[_]
P_RemoveFiberVariable_1=key
P_RemoveFiberVariable_comment=\
/**\n\
\ * Remove the binding indicated by '{'@param "{1}"} from the current fiber''s\n\
\ * environment.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The key whose binding should be removed.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# RequestTermination : _=1
P_RequestTermination=Request termination of_
P_RequestTermination_1=victim
P_RequestTermination_comment=\
/**\n\
\ * Request termination of the specified fiber, unparking the fiber at the same\n\
\ * time. Termination is consensual only; cooperation of the fiber is required to\n\
\ * affect actual termination.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ */\n
# SetFiberName : _=2
P_SetFiberName=_'s⁇name:=_
P_SetFiberName_1=aFiber
P_SetFiberName_2=name
P_SetFiberName_comment=\
/**\n\
\ * Set the name of the specified fiber.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A fiber.\n\
\ * @param "{2}" "{4}"\n\
\ *        The fiber''s new name.\n\
\ * @returns "{5}"\n\
\ */\n
# SetFiberPriority : _=2
P_SetFiberPriority=_'s⁇priority:=_
P_SetFiberPriority_1=aFiber
P_SetFiberPriority_2=priority
P_SetFiberPriority_comment=\
/**\n\
\ * Modify the priority of a fiber. A fiber with higher priority may receive a\n\
\ * larger share of the available CPU time than one with a low priority.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The fiber to prioritize.\n\
\ * @param "{2}" "{4}"\n\
\ *        The new priority.\n\
\ * @returns "{5}"\n\
\ */\n
# SetFiberVariable : _=2
P_SetFiberVariable=current fiber[_]:=_
P_SetFiberVariable_1=key
P_SetFiberVariable_2=value
P_SetFiberVariable_comment=\
/**\n\
\ * Set the value bound to '{'@param "{1}"} in the current fiber''s environment,\n\
\ * overwriting any previous value. Since the fiber''s environment essentially\n\
\ * contains fiber-local variables (i.e. bindings from atoms to arbitrary\n\
\ * values), this operation effectively writes a fiber-local variable.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The key whose value should be (over)written.\n\
\ * @param "{2}" "{4}"\n\
\ *        The new value.\n\
\ * @returns "{5}"\n\
\ */\n
# Sleep : _=1
P_Sleep=Sleep for_millisecond|milliseconds
P_Sleep_1=delayMillis
P_Sleep_comment=\
/**\n\
\ * Cause the current fiber to sleep for the specified number of milliseconds.\n\
\ * The fiber will sleep for at least the specified amount of time, and a best\n\
\ * effort will be made to awaken the fiber as soon as the delay has expired.\n\
\ * No real-time guarantees are made.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Time" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The minimum number of milliseconds to sleep.\n\
\ * @returns "{3}"\n\
\ */\n
# TerminateCurrentFiber : _=0
P_TerminateCurrentFiber=Terminate current fiber
P_TerminateCurrentFiber_comment=\
/**\n\
\ * Terminate the current fiber.\n\
\ *\n\
\ * @category "Primitives" "Bootstrap" "Concurrency"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ */\n
# UnparkFiber : _=1
P_UnparkFiber=Unpark_
P_UnparkFiber_1=aFiber
P_UnparkFiber_comment=\
/**\n\
\ * Unpark the specified fiber. If the permit associated with the fiber is\n\
\ * available, then simply continue. If the permit is not available, then restore\n\
\ * the permit and schedule resumption of the fiber. A newly unparked fiber\n\
\ * should always recheck the basis for its having parked, to see if it should\n\
\ * park again. Low-level synchronization mechanisms may require the ability to\n\
\ * spuriously unpark in order to ensure correctness.\n\
\ *\n\
\ * @category "Primitives" "Concurrency" "Synchronization" "Control Structures"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A fiber.\n\
\ * @returns "{3}"\n\
\ */\n
# Yield : _=0
P_Yield=Yield current fiber
P_Yield_comment=\
/**\n\
\ * Yield the current fiber. That is, give up the fiber''s time slice so that\n\
\ * other processes of higher or equal priority may run.\n\
\ *\n\
\ * @category "Primitives" "Concurrency"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ */\n
# CreateDirectory : _=5
P_CreateDirectory=
P_CreateDirectory_1=
P_CreateDirectory_2=
P_CreateDirectory_3=
P_CreateDirectory_4=
P_CreateDirectory_5=
P_CreateDirectory_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ */\n
# CurrentWorkingDirectory : _=0
P_CurrentWorkingDirectory=
P_CurrentWorkingDirectory_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ */\n
# FileAbsolutePath : _=1
P_FileAbsolutePath=
P_FileAbsolutePath_1=
P_FileAbsolutePath_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# FileCanExecute : _=1
P_FileCanExecute=
P_FileCanExecute_1=
P_FileCanExecute_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileCanRead : _=1
P_FileCanRead=
P_FileCanRead_1=
P_FileCanRead_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileCanWrite : _=1
P_FileCanWrite=
P_FileCanWrite_1=
P_FileCanWrite_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileClose : _=1
P_FileClose=
P_FileClose_1=
P_FileClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# FileCopy : _=5
P_FileCopy=
P_FileCopy_1=
P_FileCopy_2=
P_FileCopy_3=
P_FileCopy_4=
P_FileCopy_5=
P_FileCopy_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ */\n
# FileExists : _=2
P_FileExists=
P_FileExists_1=
P_FileExists_2=
P_FileExists_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# FileGetAlignment : _=1
P_FileGetAlignment=
P_FileGetAlignment_1=
P_FileGetAlignment_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# FileGetGroup : _=2
P_FileGetGroup=
P_FileGetGroup_1=
P_FileGetGroup_2=
P_FileGetGroup_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# FileGetOwner : _=2
P_FileGetOwner=
P_FileGetOwner_1=
P_FileGetOwner_2=
P_FileGetOwner_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# FileGetPermissions : _=2
P_FileGetPermissions=
P_FileGetPermissions_1=
P_FileGetPermissions_2=
P_FileGetPermissions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# FileIsAbsolute : _=1
P_FileIsAbsolute=
P_FileIsAbsolute_1=
P_FileIsAbsolute_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# FileMetadata : _=2
P_FileMetadata=
P_FileMetadata_1=
P_FileMetadata_2=
P_FileMetadata_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# FileMove : _=3
P_FileMove=
P_FileMove_1=
P_FileMove_2=
P_FileMove_3=
P_FileMove_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ */\n
# FileOpen : _=4
P_FileOpen=
P_FileOpen_1=
P_FileOpen_2=
P_FileOpen_3=
P_FileOpen_4=
P_FileOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ */\n
# FilePathConcatenation : _=1
P_FilePathConcatenation=
P_FilePathConcatenation_1=
P_FilePathConcatenation_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# FilePathSplit : _=1
P_FilePathSplit=
P_FilePathSplit_1=
P_FilePathSplit_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# FileRead : _=6
P_FileRead=
P_FileRead_1=
P_FileRead_2=
P_FileRead_3=
P_FileRead_4=
P_FileRead_5=
P_FileRead_6=
P_FileRead_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# FileRealPath : _=2
P_FileRealPath=
P_FileRealPath_1=
P_FileRealPath_2=
P_FileRealPath_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# FileRefresh : _=1
P_FileRefresh=
P_FileRefresh_1=
P_FileRefresh_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileRename : _=6
P_FileRename=
P_FileRename_1=
P_FileRename_2=
P_FileRename_3=
P_FileRename_4=
P_FileRename_5=
P_FileRename_6=
P_FileRename_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# FileSetGroup : _=3
P_FileSetGroup=
P_FileSetGroup_1=
P_FileSetGroup_2=
P_FileSetGroup_3=
P_FileSetGroup_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# FileSetOwner : _=3
P_FileSetOwner=
P_FileSetOwner_1=
P_FileSetOwner_2=
P_FileSetOwner_3=
P_FileSetOwner_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# FileSetPermissions : _=3
P_FileSetPermissions=
P_FileSetPermissions_1=
P_FileSetPermissions_2=
P_FileSetPermissions_3=
P_FileSetPermissions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# FileSize : _=1
P_FileSize=
P_FileSize_1=
P_FileSize_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileSync : _=4
P_FileSync=
P_FileSync_1=
P_FileSync_2=
P_FileSync_3=
P_FileSync_4=
P_FileSync_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# FileTruncate : _=5
P_FileTruncate=
P_FileTruncate_1=
P_FileTruncate_2=
P_FileTruncate_3=
P_FileTruncate_4=
P_FileTruncate_5=
P_FileTruncate_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ */\n
# FileUnlink : _=4
P_FileUnlink=
P_FileUnlink_1=
P_FileUnlink_2=
P_FileUnlink_3=
P_FileUnlink_4=
P_FileUnlink_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        TODO\n\
\ * @param "{2}" "{6}"\n\
\ *        TODO\n\
\ * @param "{3}" "{7}"\n\
\ *        TODO\n\
\ * @param "{4}" "{8}"\n\
\ *        TODO\n\
\ * @returns "{9}"\n\
\ *    TODO\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ */\n
# FileWrite : _=6
P_FileWrite=
P_FileWrite_1=
P_FileWrite_2=
P_FileWrite_3=
P_FileWrite_4=
P_FileWrite_5=
P_FileWrite_6=
P_FileWrite_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# FilesAreSame : _=2
P_FilesAreSame=
P_FilesAreSame_1=
P_FilesAreSame_2=
P_FilesAreSame_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# AsFloat : _=1
P_AsFloat=_→float
P_AsFloat_1=aNumber
P_AsFloat_comment=\
/**\n\
\ * Compute and answer the numeric argument as a single-precision floating point\n\
\ * number.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A number.\n\
\ * @returns "{3}"\n\
\ *    A '{'@type "float"} whose value approximates the argument.\n\
\ */\n
# FloatCeiling : _=1
P_FloatCeiling=⌈_⌉
P_FloatCeiling_1=x
P_FloatCeiling_comment=\
/**\n\
\ * Compute and answer the smallest integral single-precision floating point\n\
\ * number greater than or equal to the argument, i.e., the ceiling of '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A single-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    If the `0` is ±∞ or not-a-number, then '{'@param "{1}"}, otherwise the\n\
\ *    ceiling of '{'@param "{1}"}.\n\
\ */\n
# FloatExp : _=2
P_FloatExp=_^_
P_FloatExp_1=eulerNumber
P_FloatExp_2=x
P_FloatExp_comment=\
/**\n\
\ * Compute and answer an approximation of the natural exponential function for\n\
\ * the given exponent, i.e., e^'{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        Euler''s number.\n\
\ * @param "{2}" "{4}"\n\
\ *        The exponent.\n\
\ * @returns "{5}"\n\
\ *    An approximation of e^'{'@param "{2}"}.\n\
\ */\n
# FloatFloor : _=1
P_FloatFloor=⌊_⌋
P_FloatFloor_1=x
P_FloatFloor_comment=\
/**\n\
\ * Compute and answer the largest integral single-precision floating point\n\
\ * number less than or equal to the argument, i.e., the floor of '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A single-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    If the `0` is ±∞ or not-a-number, then '{'@param "{1}"}, otherwise the\n\
\ *    floor of '{'@param "{1}"}.\n\
\ */\n
# FloatFromIntBits : _=1
P_FloatFromIntBits=_reinterpreted as float
P_FloatFromIntBits_1=anInt32
P_FloatFromIntBits_comment=\
/**\n\
\ * Reinterpret the 32-bit signed integer as the bit pattern of an IEEE-754\n\
\ * floating point number.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A 32-bit signed integer.\n\
\ * @returns "{3}"\n\
\ *    The single-precision float having the specified bit representation.\n\
\ */\n
# FloatLn : _=1
P_FloatLn=ln_
P_FloatLn_1=x
P_FloatLn_comment=\
/**\n\
\ * Compute and answer an approximation of the natural logarithm of the argument,\n\
\ * i.e., ln '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A single-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    An approximation of ln '{'@param "{1}"}.\n\
\ */\n
# FloatModulus : _=2
P_FloatModulus=_mod_
P_FloatModulus_1=dividend
P_FloatModulus_2=divisor
P_FloatModulus_comment=\
/**\n\
\ * Compute and answer an approximation of '{'@param "{1}"} modulo '{'@param "{2}"}, i.e. the\n\
\ * remainder produced by dividing the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The dividend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The divisor.\n\
\ * @returns "{5}"\n\
\ *    An approximation of '{'@param "{1}"} mod '{'@param "{2}"}.\n\
\ */\n
# FloatTimesTwoPower : _=3
P_FloatTimesTwoPower=_⨉_^_
P_FloatTimesTwoPower_1=a
P_FloatTimesTwoPower_2=two
P_FloatTimesTwoPower_3=b
P_FloatTimesTwoPower_comment=\
/**\n\
\ * Compute and answer '{'@param "{1}"}⨉(2^'{'@param "{3}"}) without loss of precision or\n\
\ * intermediate overflow. This scales '{'@param "{1}"} by a power of two (`2`).\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A single-precision floating point number.\n\
\ * @param "{2}" "{5}"\n\
\ *        The number two (`2`).\n\
\ * @param "{3}" "{6}"\n\
\ *        The scaling factor.\n\
\ * @returns "{7}"\n\
\ *    The requested value.\n\
\ */\n
# FloatToIntBits : _=1
P_FloatToIntBits=_reinterpreted as bits
P_FloatToIntBits_1=aFloat
P_FloatToIntBits_comment=\
/**\n\
\ * Treat the IEEE-754 single-precision float''s representation as a 32 bit\n\
\ * sequence, and answer the (signed) integer having those bits.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The float to reinterpret.\n\
\ * @returns "{3}"\n\
\ *    The float''s bit representation as a signed 32-bit integer.\n\
\ */\n
# FloatTruncatedAsInteger : _=1
P_FloatTruncatedAsInteger=_→extended integer
P_FloatTruncatedAsInteger_1=aFloat
P_FloatTruncatedAsInteger_comment=\
/**\n\
\ * Compute and answer an `extended integer` by rounding the argument toward\n\
\ * zero (`0`).\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A single-precision floating point number.\n\
\ * @returns "{3}"\n\
\ *    The requested value.\n\
\ * @raises "{4}"\n\
\ */\n
# CreateFunction : _=2
P_CreateFunction=function from_and_
P_CreateFunction_1=implementation
P_CreateFunction_2=outerVariables
P_CreateFunction_comment=\
/**\n\
\ * Construct and answer a function given the specified function implementation\n\
\ * and tuple of captured variables.\n\
\ *\n\
\ * @category "Primitives" "Functions" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The compiled code that describes the algorithm.\n\
\ * @param "{2}" "{4}"\n\
\ *        The tuple of outer variables.\n\
\ * @returns "{5}"\n\
\ *    The requested function.\n\
\ * @raises "{6}"\n\
\ */\n
# CreateFunctionType : _=2
P_CreateFunctionType=function accepting_and returning_
P_CreateFunctionType_1=parameterTypes
P_CreateFunctionType_2=returnType
P_CreateFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified parameter types and\n\
\ * return type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Functions" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The parameter types.\n\
\ * @param "{2}" "{4}"\n\
\ *        The return type.\n\
\ * @returns "{5}"\n\
\ *    The requested function type. Instances of this type accept arguments\n\
\ *    whose types conform to the parameter types and whose return value\n\
\ *    conforms to the return type.\n\
\ */\n
# CreateGeneralFunctionType : _=1
P_CreateGeneralFunctionType=[`…]→_
P_CreateGeneralFunctionType_1=returnType
P_CreateGeneralFunctionType_comment=\
/**\n\
\ * Construct and answer a function type with the specified return type.\n\
\ * Instances of this type include any function that returns a value of the\n\
\ * specified return type, irrespective of the number or types of its parameters.\n\
\ *\n\
\ * @category "Primitives" "Types" "Functions" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A type.\n\
\ * @returns "{3}"\n\
\ *    The requested function type. Instances of this type answer values of the\n\
\ *    specified return type.\n\
\ */\n
# CreateStubFunction : _=2
P_CreateStubFunction=new_applying_
P_CreateStubFunction_1=aFunctionType
P_CreateStubFunction_2=functionToApply
P_CreateStubFunction_comment=\
/**\n\
\ * Construct and answer a function that is an instance of '{'@param "{1}"}\n\
\ * and applies '{'@param "{2}"} when itself applied with the appropriate\n\
\ * number and types of arguments. The new function answers whatever\n\
\ * '{'@param "{2}"} answers.\n\
\ *\n\
\ * @category "Primitives" "Functions" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The desired function type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The function that the new function will apply when itself applied with\n\
\ *        the correct number and types of arguments.\n\
\ * @returns "{5}"\n\
\ *    The requested function.\n\
\ */\n
# DecompileFunction : _=1
P_DecompileFunction=_→block phrase
P_DecompileFunction_1=aFunction
P_DecompileFunction_comment=\
/**\n\
\ * Compute and answer a block phrase that represents the decompilation of the\n\
\ * specified function. Outer variables are treated as literals.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Functions" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function.\n\
\ * @returns "{3}"\n\
\ *    A block phrase.\n\
\ */\n
# FunctionMessage : _=1
P_FunctionMessage=_'s⁇message
P_FunctionMessage_1=aFunction
P_FunctionMessage_comment=\
/**\n\
\ * Answer the message associated with the '{'@type "function"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A '{'@type "function"}.\n\
\ * @returns "{3}"\n\
\ *    The name of the message associated with '{'@param "{0}"}.\n\
\ */\n
# OuterVariables : _=1
P_OuterVariables=_'s⁇outer variables
P_OuterVariables_1=aFunction
P_OuterVariables_comment=\
/**\n\
\ * Answer all variables captured by the specified function. For functions\n\
\ * compiled directly from source code (i.e. the vast majority of them), these\n\
\ * variables are lexically captured.\n\
\ *\n\
\ * @category "Primitives" "Functions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function.\n\
\ * @returns "{3}"\n\
\ *    The argument''s outer variables.\n\
\ */\n
# ParamTypeAt : _=2
P_ParamTypeAt=_[_]
P_ParamTypeAt_1=functionType
P_ParamTypeAt_2=index
P_ParamTypeAt_comment=\
/**\n\
\ * Answer the '{'@param "{2}"}-th parameter type of the specified function type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Functions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A function type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The one-based index of the desired parameter type.\n\
\ * @returns "{5}"\n\
\ *    The '{'@param "{2}"}-th parameter type of the argument.\n\
\ * @raises "{6}"\n\
\ */\n
# ParamsType : _=1
P_ParamsType=_'s⁇parameters'type
P_ParamsType_1=functionType
P_ParamsType_comment=\
/**\n\
\ * Answer a tuple type that describes the parameter types of the specified\n\
\ * function type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Functions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function type.\n\
\ * @returns "{3}"\n\
\ *    A fixed-size tuple type whose element types correspond to the parameter\n\
\ *    types of the argument.\n\
\ */\n
# ReturnType : _=1
P_ReturnType=_'s⁇return type
P_ReturnType_1=functionType
P_ReturnType_comment=\
/**\n\
\ * Answer the return type of the specified function type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Functions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function type.\n\
\ * @returns "{3}"\n\
\ *    The return type of the argument.\n\
\ */\n
# AdjustDebugSetting : _=1
P_AdjustDebugSetting=
P_AdjustDebugSetting_1=
P_AdjustDebugSetting_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# Assert : _=2
P_Assert=Assert:_(_)
P_Assert_1=predicate
P_Assert_2=message
P_Assert_comment=\
/**\n\
\ * Early assertion mechanism. This is obsolete once exceptions are available.\n\
\ * Raise a special exception in the virtual machine that may be trapped to\n\
\ * facilitate debugging. This exception will provided access to '{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Bootstrap" "Assertions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A boolean, usually derived from a more complex predicate expression.\n\
\ * @param "{2}" "{4}"\n\
\ *        Text describing the assertion failure, ignored unless '{'@param\n\
\ *        "{1}"} is `false`.\n\
\ * @returns "{5}"\n\
\ */\n
# BreakPoint : _=0
P_BreakPoint=Breakpoint
P_BreakPoint_comment=\
/**\n\
\ * Cause the Avail virtual machine to raise an\n\
\ * `org.availlang.exceptions.AvailBreakpointException` that a Java debugger\n\
\ * can trap upon raise.\n\
\ *\n\
\ * This method exists to facilitate debugging of the Avail virtual machine, and\n\
\ * will be withdrawn once the implementation is considered sufficiently stable.\n\
\ *\n\
\ * @category "Primitives" "Bootstrap"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ */\n
# ComputeDigest : _=2
P_ComputeDigest=
P_ComputeDigest_1=
P_ComputeDigest_2=
P_ComputeDigest_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ */\n
# CreateUUIDByteTuple : _=0
P_CreateUUIDByteTuple=
P_CreateUUIDByteTuple_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ */\n
# CurrentTimeMilliseconds : _=0
P_CurrentTimeMilliseconds=milliseconds since the Epoch
P_CurrentTimeMilliseconds_comment=\
/**\n\
\ * Answer the number of milliseconds which have elapsed since midnight\n\
\ * Coordinated Universal Time (UTC) of Thursday, January 1, 1970 (i.e. the Unix\n\
\ * Epoch).\n\
\ *\n\
\ * @category "Primitives" "Time" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The current time as the number of milliseconds which have elapsed since\n\
\ *    the Unix Epoch.\n\
\ */\n
# CurrentTimeNanoseconds : _=0
P_CurrentTimeNanoseconds=high-precision timer value
P_CurrentTimeNanoseconds_comment=\
/**\n\
\ * Answer the current value of the high-precision timer. The answer has\n\
\ * nanosecond precision, but not necessarily nanosecond resolution; the actual\n\
\ * resolution is implementation-dependent. The high-precision timer does not\n\
\ * have a fixed reference frame, so it should generally only be used to measure\n\
\ * the time elapsed between two invocations.\n\
\ *\n\
\ * @category "Primitives" "Time" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The current value of the high-precision timer, in nanoseconds.\n\
\ */\n
# Deserialize : _=2
P_Deserialize=
P_Deserialize_1=
P_Deserialize_2=
P_Deserialize_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# EmergencyExit : _=1
P_EmergencyExit=Crash:_
P_EmergencyExit_1=value
P_EmergencyExit_comment=\
/**\n\
\ * Crash the current fiber. Use the specified value to provide contextual\n\
\ * debugging information.\n\
\ *\n\
\ * This method must not leak beyond the bootstrap package. Termination of\n\
\ * fibers is dangerous because it avoids cleaning up active continuations and\n\
\ * ergo promotes deadlock (by failing to relinquish held locks). Only\n\
\ * cooperative termination, e.g. interrupt queues, is supported in ordinary\n\
\ * system or application code. This method is provided only for early detection\n\
\ * of serious failures in bootstrap code. Real failures in system code outside\n\
\ * of the bootstrap package use Avail''s usual exception handling machinery.\n\
\ *\n\
\ * @category "Primitives" "Bootstrap" "Exceptions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A value, provided to establish context for debugging.\n\
\ * @returns "{3}"\n\
\ */\n
# EnvironmentMap : _=0
P_EnvironmentMap=
P_EnvironmentMap_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ */\n
# Equality : _=2
P_Equality=_=_
P_Equality_1=
P_Equality_2=
P_Equality_comment=\
/**\n\
\ * Are the arguments equal?\n\
\ *\n\
\ * @category "Primitives" "Mathematics" "Relations"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A value.\n\
\ * @param "{2}" "{4}"\n\
\ *        A value.\n\
\ * @returns "{5}"\n\
\ *    `true` if the arguments are equal, `false` otherwise.\n\
\ */\n
# Hash : _=1
P_Hash=_'s⁇hash
P_Hash_1=value
P_Hash_comment=\
/**\n\
\ * Answer the hash value of '{'@param "{1}"}. The hash values of equal values\n\
\ * are always themselves equal. The hash values of differing values will tend\n\
\ * to differ, but the pigeonhole principle means that hashing a larger key space\n\
\ * into a smaller hash space will lead to occasional collisions.\n\
\ *\n\
\ * The actual hash value is currently an instance of '{'@type "[-2^31..2^31)"},\n\
\ * but the weaker type is used to facilitate forward migration to larger hash\n\
\ * spaces.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An arbitrary value.\n\
\ * @returns "{3}"\n\
\ *    The hash value of the argument.\n\
\ */\n
# IsPrimitiveDefined : _=1
P_IsPrimitiveDefined=_is a primitive
P_IsPrimitiveDefined_1=primitiveName
P_IsPrimitiveDefined_comment=\
/**\n\
\ * Does the argument denote a valid primitive?\n\
\ *\n\
\ * @category "Primitives" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A potential primitive name.\n\
\ * @returns "{3}"\n\
\ *    `true` if the argument denotes a valid primitive, `false` otherwise.\n\
\ */\n
# MarkStandardInputStream : _=1
P_MarkStandardInputStream=Mark for_character|characters of read ahead
P_MarkStandardInputStream_1=count
P_MarkStandardInputStream_comment=\
/**\n\
\ * Mark the standard input stream to allow at least '{'@param "{1}"}\n\
\ * characters of read ahead.\n\
\ *\n\
\ * @category "Primitives" "Standard IO"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The requested number of characters of read ahead.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ */\n
# PrintToConsole : _=1
P_PrintToConsole=Print:_
P_PrintToConsole_1=text
P_PrintToConsole_comment=\
/**\n\
\ * Print the argument to the application''s standard output stream.\n\
\ *\n\
\ * @category "Primitives" "Standard IO" "Synchronous IO"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A string.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ */\n
# PrintToErrorConsole : _=1
P_PrintToErrorConsole=Error:_
P_PrintToErrorConsole_1=text
P_PrintToErrorConsole_comment=\
/**\n\
\ * Print the argument to the application''s standard error stream.\n\
\ *\n\
\ * @category "Primitives" "Standard IO" "Synchronous IO"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A string.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ */\n
# ReadFromStandardInput : _=0
P_ReadFromStandardInput=next character
P_ReadFromStandardInput_comment=\
/**\n\
\ * Read the next character from the standard input stream.\n\
\ *\n\
\ * @category "Primitives" "Standard IO" "Synchronous IO"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The next character from the standard input stream.\n\
\ * @raises "{2}"\n\
\ */\n
# ResetStandardInputStream : _=0
P_ResetStandardInputStream=Reset to mark
P_ResetStandardInputStream_comment=\
/**\n\
\ * Reset the standard input stream to the previously set mark.\n\
\ *\n\
\ * @category "Primitives" "Standard IO"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ * @raises "{2}"\n\
\ */\n
# Serialize : _=1
P_Serialize=
P_Serialize_1=
P_Serialize_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# ToJSON : _=1
P_ToJSON=_→JSON
P_ToJSON_1=value
P_ToJSON_comment=\
/**\n\
\ * Render the argument into JSON.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An arbitrary value.\n\
\ * @returns "{3}"\n\
\ *    A string containing the JSON representation of '{'@param "{1}"}.\n\
\ */\n
# ToString : _=1
P_ToString=primitive description of_
P_ToString_1=value
P_ToString_comment=\
/**\n\
\ * Produce a primitive description of the argument. This description is\n\
\ * mechanically constructed by the Avail virtual machine. It may not contain\n\
\ * appropriately localized text, and is intended to provide\n\
\ * implementation-specific information that serves only to assist the\n\
\ * Avail virtual machine developers in debugging the implementation.\n\
\ *\n\
\ * @category "Primitives" "Stringification"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A value.\n\
\ * @returns "{3}"\n\
\ *    A mechanically constructed, possibly non-localized,\n\
\ *    implementation-specific description of the argument.\n\
\ */\n
# GetRaiseJavaExceptionInAvailFunction : _=0
P_GetRaiseJavaExceptionInAvailFunction=
P_GetRaiseJavaExceptionInAvailFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ */\n
# InstallBaseFrameFunction : _=1
P_InstallBaseFrameFunction=
P_InstallBaseFrameFunction_1=
P_InstallBaseFrameFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# SetImplicitObserveFunction : _=1
P_SetImplicitObserveFunction=
P_SetImplicitObserveFunction_1=
P_SetImplicitObserveFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# SetInvalidMessageSendFunction : _=1
P_SetInvalidMessageSendFunction=
P_SetInvalidMessageSendFunction_1=
P_SetInvalidMessageSendFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# SetRaiseJavaExceptionInAvailFunction : _=1
P_SetRaiseJavaExceptionInAvailFunction=
P_SetRaiseJavaExceptionInAvailFunction_1=
P_SetRaiseJavaExceptionInAvailFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# SetResultDisagreedWithExpectedTypeFunction : _=1
P_SetResultDisagreedWithExpectedTypeFunction=
P_SetResultDisagreedWithExpectedTypeFunction_1=
P_SetResultDisagreedWithExpectedTypeFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# SetUnassignedVariableAccessFunction : _=1
P_SetUnassignedVariableAccessFunction=
P_SetUnassignedVariableAccessFunction_1=
P_SetUnassignedVariableAccessFunction_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BitShiftLeft : _=2
P_BitShiftLeft=_<<_
P_BitShiftLeft_1=baseInteger
P_BitShiftLeft_2=shiftFactor
P_BitShiftLeft_comment=\
/**\n\
\ * Shift '{'@param "{1}"} to the left by '{'@param "{2}"} bits. If\n\
\ * '{'@param "{1}"} is negative then treat it as a right shift of the\n\
\ * corresponding positive amount.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An integer to shift.\n\
\ * @param "{2}" "{4}"\n\
\ *        How many bits to shift left (or right if negative).\n\
\ * @returns "{5}"\n\
\ *    ⌊{0} × 2<sup>{1}</sup>⌋\n\
\ * @raises "{6}"\n\
\ */\n
# BitShiftRight : _=2
P_BitShiftRight=_>>_
P_BitShiftRight_1=baseInteger
P_BitShiftRight_2=shiftFactor
P_BitShiftRight_comment=\
/**\n\
\ * Shift '{'@param "{1}"} to the right by '{'@param "{2}"} bits. If\n\
\ * '{'@param "{1}"} is negative then treat it as a left shift of the\n\
\ * corresponding positive amount.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An integer to shift.\n\
\ * @param "{2}" "{4}"\n\
\ *        How many bits to shift right (or left if negative).\n\
\ * @returns "{5}"\n\
\ *    ⌊{0} ÷ 2<sup>{1}</sup>⌋\n\
\ * @raises "{6}"\n\
\ */\n
# BitShiftWithTruncation : _=3
P_BitShiftWithTruncation=_<<_keeping_bits
P_BitShiftWithTruncation_1=baseInteger
P_BitShiftWithTruncation_2=shiftFactor
P_BitShiftWithTruncation_3=truncationBits
P_BitShiftWithTruncation_comment=\
/**\n\
\ * Shift '{'@param "{1}"} to the left by '{'@param "{2}"} bits (treating\n\
\ * a negative factor as a right shift), then truncate the result to the bottom\n\
\ * '{'@param "{3}"} bits by zeroing the rest.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A non-negative integer to shift and mask.\n\
\ * @param "{2}" "{5}"\n\
\ *        How many bit positions to shift left by (negative for a right shift).\n\
\ * @param "{3}" "{6}"\n\
\ *        The number of low-order bits to preserve after the shift (must\n\
\ *        be ≥ 0).\n\
\ * @returns "{7}"\n\
\ *    ⌊{0} × 2<sup>{1}</sup>⌋ mod 2<sup>{2}</sup>\n\
\ * @raises "{8}"\n\
\ */\n
# BitwiseAnd : _=2
P_BitwiseAnd=_bit∧_
P_BitwiseAnd_1=
P_BitwiseAnd_2=
P_BitwiseAnd_comment=\
/**\n\
\ * Compute and answer the bitwise '{'@code "AND"} of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An integer.\n\
\ * @param "{2}" "{4}"\n\
\ *        An integer.\n\
\ * @returns "{5}"\n\
\ *    The bitwise AND of '{'@param "{1}"} and '{'@param "{2}"}.\n\
\ */\n
# BitwiseOr : _=2
P_BitwiseOr=_bit∨_
P_BitwiseOr_1=
P_BitwiseOr_2=
P_BitwiseOr_comment=\
/**\n\
\ * Compute and answer the bitwise '{'@code "OR"} of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An integer.\n\
\ * @param "{2}" "{4}"\n\
\ *        An integer.\n\
\ * @returns "{5}"\n\
\ *    The bitwise OR of '{'@param "{1}"} and '{'@param "{2}"}.\n\
\ */\n
# BitwiseXor : _=2
P_BitwiseXor=_bit⊕_
P_BitwiseXor_1=
P_BitwiseXor_2=
P_BitwiseXor_comment=\
/**\n\
\ * Compute and answer the bitwise '{'@code "XOR"} of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Integers" "Mathematics" "Bits"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An integer.\n\
\ * @param "{2}" "{4}"\n\
\ *        An integer.\n\
\ * @returns "{5}"\n\
\ *    The bitwise XOR of '{'@param "{1}"} and '{'@param "{2}"}.\n\
\ */\n
# CreateIntegerRange : _=4
P_CreateIntegerRange=integer range from_(inclusive=_)to_(inclusive=_)
P_CreateIntegerRange_1=lowerBound
P_CreateIntegerRange_2=lowerBoundInclusive
P_CreateIntegerRange_3=upperBound
P_CreateIntegerRange_4=upperBoundInclusive
P_CreateIntegerRange_comment=\
/**\n\
\ * Construct and answer an integral range type whose lower bound is '{'@param "{1}"}\n\
\ * and whose upper bound is '{'@param "{3}"}.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Types" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The lower bound.\n\
\ * @param "{2}" "{6}"\n\
\ *        `true` if the lower bound should be adjudged inclusive, `false`\n\
\ *        otherwise.\n\
\ * @param "{3}" "{7}"\n\
\ *        The upper bound.\n\
\ * @param "{4}" "{8}"\n\
\ *        `true` if the upper bound should be adjudged inclusive, `false`\n\
\ *        otherwise.\n\
\ * @returns "{9}"\n\
\ *    The requested integral range type.\n\
\ */\n
# LowerBound : _=1
P_LowerBound=_'s⁇genuine lower bound
P_LowerBound_1=range
P_LowerBound_comment=\
/**\n\
\ * Answer the lower bound of the specified integral range type.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An integral range type.\n\
\ * @returns "{3}"\n\
\ *    The lower bound of the argument.\n\
\ */\n
# UpperBound : _=1
P_UpperBound=_'s⁇genuine upper bound
P_UpperBound_1=range
P_UpperBound_comment=\
/**\n\
\ * Answer the upper bound of the specified integral range type.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An integral range type.\n\
\ * @returns "{3}"\n\
\ *    The upper bound of the argument.\n\
\ */\n
# CreateMap : _=1
P_CreateMap=_→map
P_CreateMap_1=bindings
P_CreateMap_comment=\
/**\n\
\ * Construct and answer a map from the supplied tuple of bindings.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of bindings. Each element of the argument is a\n\
\ *       2-tuple that represents a binding. The first element of each 2-tuple is\n\
\ *       a key, the second element is the value that should be bound to that key\n\
\ *       in the resultant map.\n\
\ * @returns "{3}"\n\
\ *    The requested map.\n\
\ */\n
# CreateMapType : _=3
P_CreateMapType={_→_`|_}
P_CreateMapType_1=keyType
P_CreateMapType_2=valueType
P_CreateMapType_3=cardinalityType
P_CreateMapType_comment=\
/**\n\
\ * Construct and answer a map type with the specified key type, value type, and\n\
\ * range of cardinalities.\n\
\ *\n\
\ * @category "Primitives" "Types" "Maps" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A type to which all keys of instances must conform.\n\
\ * @param "{2}" "{5}"\n\
\ *        A type to which all values of instances must conform.\n\
\ * @param "{3}" "{6}"\n\
\ *        The range of cardinalities to which all instances must\n\
\ *       conform.\n\
\ * @returns "{7}"\n\
\ *    The requested map type.\n\
\ */\n
# KeyInMap : _=2
P_KeyInMap=_∈_
P_KeyInMap_1=key
P_KeyInMap_2=aMap
P_KeyInMap_comment=\
/**\n\
\ * Is '{'@param "{1}"} a member of the set of keys of '{'@param "{2}"}?\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The key whose membership should be queried.\n\
\ * @param "{2}" "{4}"\n\
\ *        A map.\n\
\ * @returns "{5}"\n\
\ *    `true` if '{'@param "{1}"} if a key of '{'@param "{2}"}, `false`\n\
\ *    otherwise.\n\
\ */\n
# MapAtKey : _=2
P_MapAtKey=_[_]
P_MapAtKey_1=aMap
P_MapAtKey_2=key
P_MapAtKey_comment=\
/**\n\
\ * Answer the value bound to '{'@param "{1}"} in '{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A map.\n\
\ * @param "{2}" "{4}"\n\
\ *        The key whose bound value should be obtained.\n\
\ * @returns "{5}"\n\
\ *    The value bound to '{'@param "{2}"} in '{'@param "{1}"}.\n\
\ * @raises "{6}"\n\
\ */\n
# MapBindings : _=1
P_MapBindings=_'s⁇bindings
P_MapBindings_1=aMapType
P_MapBindings_comment=\
/**\n\
\ * Answer a tuple containing the bindings of the specified map. A binding is a\n\
\ * 2-tuple of key and value.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map.\n\
\ * @returns "{3}"\n\
\ *    The argument''s bindings.\n\
\ */\n
# MapKeysAsSet : _=1
P_MapKeysAsSet=_'s⁇keys
P_MapKeysAsSet_1=aMap
P_MapKeysAsSet_comment=\
/**\n\
\ * Answer the set of keys of the specified map.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map.\n\
\ * @returns "{3}"\n\
\ *    The argument''s keys.\n\
\ */\n
# MapReplaceRangeNAryKey : _=5
P_MapReplaceRangeNAryKey=_«[_]»[_.._]→_
P_MapReplaceRangeNAryKey_1=aMap
P_MapReplaceRangeNAryKey_2=pathTuple
P_MapReplaceRangeNAryKey_3=sliceStartIndex
P_MapReplaceRangeNAryKey_4=sliceEndIndex
P_MapReplaceRangeNAryKey_5=newValues
P_MapReplaceRangeNAryKey_comment=\
/**\n\
\ * Given a multi-level data structure where the outermost later is a map, the\n\
\ * intervening layers are maps or tuples, and the innermost target reached by\n\
\ * the provided path is a tuple, answer a variant of the data structure such\n\
\ * that the indicated slice of the innermost target has been replaced with the\n\
\ * provided tuple. The replacement tuple can differ in size from the slice.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        The target map.\n\
\ * @param "{2}" "{7}"\n\
\ *        The tuple providing the path to follow to reach the location\n\
\ *        to be updated.\n\
\ * @param "{3}" "{8}"\n\
\ *        The start index of the tuple slice to be replaced.\n\
\ * @param "{4}" "{9}"\n\
\ *        The end index of the tuple slice to be replaced.\n\
\ * @param "{5}" "{10}"\n\
\ *        The tuple containing the replacement values.\n\
\ * @returns "{11}"\n\
\ *    a new map with the new values installed at the proposed locations.\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ */\n
# MapReplacingKey : _=3
P_MapReplacingKey=_+_→_
P_MapReplacingKey_1=aMap
P_MapReplacingKey_2=key
P_MapReplacingKey_3=value
P_MapReplacingKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it contains a binding from\n\
\ * '{'@param "{2}"} to '{'@param "{3}"}; any value previously bound to\n\
\ * '{'@param "{2}"} is "forgotten" in the new map.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A map.\n\
\ * @param "{2}" "{5}"\n\
\ *        A key.\n\
\ * @param "{3}" "{6}"\n\
\ *        The new value for the key.\n\
\ * @returns "{7}"\n\
\ *    The requested map.\n\
\ */\n
# MapReplacingNAryKey : _=3
P_MapReplacingNAryKey=_«[_]»→_
P_MapReplacingNAryKey_1=aMap
P_MapReplacingNAryKey_2=pathTuple
P_MapReplacingNAryKey_3=newValue
P_MapReplacingNAryKey_comment=\
/**\n\
\ * Replace the value at the location indicated by the path tuple of the target\n\
\ * map with the new value. If the replacement value type differs from the\n\
\ * type of the value at the replacement location, the answered map will have a\n\
\ * different type than the original source map.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The target map.\n\
\ * @param "{2}" "{5}"\n\
\ *        The tuple providing the path to follow to reach the location\n\
\ *        to be updated.\n\
\ * @param "{3}" "{6}"\n\
\ *        The replacement value.\n\
\ * @returns "{7}"\n\
\ *    a new map with the new value installed at the proposed location\n\
\ * @raises "{8}"\n\
\ *    If an index in the {2} attempts to access an index that is greater\n\
\ *    than the size of the targeted tuple within {1}.\n\
\ * @raises "{9}"\n\
\ *    If an index in the {2}, that is not the final index where the\n\
\ *    replacement is made, attempts to access a value as if it were a\n\
\ *    map or a tuple but the value at that location is neither.\n\
\ * @raises "{10}"\n\
\ *    If an index in the {2} attempts to access a map in {1} with a key\n\
\ *    not in the map.\n\
\ */\n
# MapSize : _=1
P_MapSize=`|_`|
P_MapSize_1=aMap
P_MapSize_comment=\
/**\n\
\ * Answer the cardinality of the specified map.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality.\n\
\ */\n
# MapTypeKeyType : _=1
P_MapTypeKeyType=_'s⁇key type
P_MapTypeKeyType_1=aMapType
P_MapTypeKeyType_comment=\
/**\n\
\ * Answer the most specific type to which the keys of all instances must\n\
\ * conform.\n\
\ *\n\
\ * @category "Primitives" "Types" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s key type.\n\
\ */\n
# MapTypeSizes : _=1
P_MapTypeSizes=`|`|_`|`|
P_MapTypeSizes_1=aMapType
P_MapTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * map type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# MapTypeValueType : _=1
P_MapTypeValueType=_'s⁇value type
P_MapTypeValueType_1=aMapType
P_MapTypeValueType_comment=\
/**\n\
\ * Answer the most specific type to which the values of all instances must\n\
\ * conform.\n\
\ *\n\
\ * @category "Primitives" "Types" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s value type.\n\
\ */\n
# MapValuesAsTuple : _=1
P_MapValuesAsTuple=_'s⁇values
P_MapValuesAsTuple_1=aMapType
P_MapValuesAsTuple_comment=\
/**\n\
\ * Answer a tuple containing the values of the specified map. The values are\n\
\ * arranged in no particular order.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map.\n\
\ * @returns "{3}"\n\
\ *    The argument''s values.\n\
\ */\n
# MapWithoutKey : _=2
P_MapWithoutKey=_-_
P_MapWithoutKey_1=aMap
P_MapWithoutKey_2=key
P_MapWithoutKey_comment=\
/**\n\
\ * Construct and answer a map that is based on the supplied map. The answer\n\
\ * (potentially) differs from the argument in that it does not contain a\n\
\ * binding for '{'@param "{2}"}; any such previous binding is "forgotten" in the new map.\n\
\ *\n\
\ * @category "Primitives" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A map.\n\
\ * @param "{2}" "{4}"\n\
\ *        A key whose binding should be omitted.\n\
\ * @returns "{5}"\n\
\ *    The requested map.\n\
\ */\n
# AbstractMethodDeclaration : _=2
P_AbstractMethodDeclaration=Abstract method_is_
P_AbstractMethodDeclaration_1=methodName
P_AbstractMethodDeclaration_2=aFunctionType
P_AbstractMethodDeclaration_comment=\
/**\n\
\ * Declare an abstract method with the specified name and signature. A concrete\n\
\ * definition is one whose parameter types and return type are strictly more\n\
\ * specific than the corresponding types of the abstract signature.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the abstract method to declare.\n\
\ * @param "{2}" "{4}"\n\
\ *        The signature.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ * @raises "{30}"\n\
\ */\n
# AbstractMethodDeclarationForAtom : _=2
P_AbstractMethodDeclarationForAtom=Abstract method_is_
P_AbstractMethodDeclarationForAtom_1=methodName
P_AbstractMethodDeclarationForAtom_2=signature
P_AbstractMethodDeclarationForAtom_comment=\
/**\n\
\ * Declare an abstract method with the specified name and signature. A concrete\n\
\ * definition is one whose parameter types and return type are strictly more\n\
\ * specific than the corresponding types of the abstract signature.\n\
\ *\n\
\ * Only extend the grammar of the current module if the atom was introduced by\n\
\ * the current module.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The atom that uniquely names the abstract method to declare.\n\
\ * @param "{2}" "{4}"\n\
\ *        The signature.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ */\n
# AddSemanticRestriction : _=2
P_AddSemanticRestriction=Semantic restriction_is_
P_AddSemanticRestriction_1=methodName
P_AddSemanticRestriction_2=restriction
P_AddSemanticRestriction_comment=\
/**\n\
\ * Define the specified semantic restriction. Henceforth whenever the method\n\
\ * named by '{'@param "{1}"} is invoked with arguments accepted by '{'@param "{2}"},\n\
\ * then apply '{'@param "{2}"} with the most specific available types of the actual\n\
\ * arguments. This is determined by the compiler at the method''s call site.\n\
\ *\n\
\ * A semantic restriction has two responsibilities. First, it may reject a\n\
\ * method invocation on any appropriate semantic grounds by calling\n\
\ * `Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_`. Second,\n\
\ * it may strengthen the type of value produced at the call site by answering\n\
\ * a subtype of the method''s declared return type.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @category "Semantic Restrictions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method to which the semantic restriction applies.\n\
\ * @param "{2}" "{4}"\n\
\ *        The restriction function.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ */\n
# AddSemanticRestrictionForAtom : _=2
P_AddSemanticRestrictionForAtom=Semantic restriction_is_
P_AddSemanticRestrictionForAtom_1=methodName
P_AddSemanticRestrictionForAtom_2=restriction
P_AddSemanticRestrictionForAtom_comment=\
/**\n\
\ * Define the specified semantic restriction. Henceforth whenever the method\n\
\ * named by '{'@param "{1}"} is invoked with arguments accepted by\n\
\ * '{'@param "{2}"}, then apply '{'@param "{2}"} with the most specific\n\
\ * available types of the actual arguments. This is determined by the compiler\n\
\ * at the method''s call site.\n\
\ *\n\
\ * A semantic restriction has two responsibilities. First, it may reject a\n\
\ * method invocation on any appropriate semantic grounds by calling\n\
\ * `Reject parse«silently|weakly|moderately|strongly⁇»!,expected:_`. Second, it\n\
\ * may strengthen the type of value produced at the call site by answering a\n\
\ * subtype of the method''s declared return type.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Constructors" "Mutators"\n\
\ * @category "Semantic Restrictions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method to which the semantic restriction applies.\n\
\ * @param "{2}" "{4}"\n\
\ *        The restriction function.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# Alias : _=2
P_Alias=Alias_to_
P_Alias_1=newName
P_Alias_2=oldAtom
P_Alias_comment=\
/**\n\
\ * Alias '{'@param "{1}"} to '{'@param "{2}"}. This has the same effect\n\
\ * as import renaming, but behaves dynamically.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A '{'@type "string"} that represents the alias.\n\
\ * @param "{2}" "{4}"\n\
\ *        An '{'@type "atom"} that represents the original name.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ */\n
# BundleHasDefinitionForArgumentTypes : _=2
P_BundleHasDefinitionForArgumentTypes=_has definition for_
P_BundleHasDefinitionForArgumentTypes_1=methodName
P_BundleHasDefinitionForArgumentTypes_2=parameterTypes
P_BundleHasDefinitionForArgumentTypes_comment=\
/**\n\
\ * Does the method whose bundle has the specified name have a unique definition\n\
\ * for the given tuple of parameter types?\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A method name (an atom).\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of parameter types. This must agree in length with the number\n\
\ *        of parameters expected by the method.\n\
\ * @returns "{5}"\n\
\ *    `true` if '{'@param "{1}"} has a unique definition for the specified\n\
\ *    parameter types, `false` otherwise.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# BundleHasRestrictions : _=1
P_BundleHasRestrictions=
P_BundleHasRestrictions_1=
P_BundleHasRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BundleMessageParts : _=1
P_BundleMessageParts=
P_BundleMessageParts_1=
P_BundleMessageParts_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BundleParametersCount : _=1
P_BundleParametersCount=`|_'s⁇parameters`|
P_BundleParametersCount_1=aMessageBundle
P_BundleParametersCount_comment=\
/**\n\
\ * Answer the number of parameters required by the specified method.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A method.\n\
\ * @returns "{3}"\n\
\ *    The number of parameters required by the specified method.\n\
\ */\n
# BundleRestrictions : _=1
P_BundleRestrictions=
P_BundleRestrictions_1=
P_BundleRestrictions_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# BundleSignatures : _=1
P_BundleSignatures=
P_BundleSignatures_1=
P_BundleSignatures_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# CopyMacros : _=2
P_CopyMacros=Copy macros from_to_
P_CopyMacros_1=sourceAtom
P_CopyMacros_2=targetAtom
P_CopyMacros_comment=\
/**\n\
\ * Copy all macros defined for the first '{'@type bundle} into the second\n\
\ * '{'@type bundle}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The '{'@type bundle} already containing macros.\n\
\ * @param "{2}" "{4}"\n\
\ *        The '{'type bundle} in which to add new macros.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ * @raises "{30}"\n\
\ */\n
# DefinitionBodySignature : _=1
P_DefinitionBodySignature=_'s⁇function type
P_DefinitionBodySignature_1=aDefinition
P_DefinitionBodySignature_comment=\
/**\n\
\ * Answer the specified definition''s function type.\n\
\ *\n\
\ * @category "Primitives" "Definitions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        Any definition (method, macro, abstract, forward).\n\
\ * @returns "{3}"\n\
\ *    The requested function type.\n\
\ */\n
# DefinitionForArgumentTypes : _=2
P_DefinitionForArgumentTypes=method definition of_for_
P_DefinitionForArgumentTypes_1=methodName
P_DefinitionForArgumentTypes_2=parameterTypes
P_DefinitionForArgumentTypes_comment=\
/**\n\
\ * Lookup a definition of the method with the given name, given the\n\
\ * tuple of parameter types.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Name Resolution"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of parameter types. This must agree in length with the number\n\
\ *        of parameters expected by the method.\n\
\ * @returns "{5}"\n\
\ *    The unique definition of '{'@param "{1}"} that best accords with the\n\
\ *    specified parameter types.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# DescribeNoncanonicalMessage : _=1
P_DescribeNoncanonicalMessage=non-canonical problem with_
P_DescribeNoncanonicalMessage_1=messageName
P_DescribeNoncanonicalMessage_comment=\
/**\n\
\ * Describe why the given proposed message name is invalid.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The proposed message name.\n\
\ * @returns "{3}"\n\
\ *    A string describing the malformation of the proposed message name, or the\n\
\ *    empty string if it is well-formed.\n\
\ */\n
# ExistsMethodWithName : _=1
P_ExistsMethodWithName=method exists named_
P_ExistsMethodWithName_1=trueName
P_ExistsMethodWithName_comment=\
/**\n\
\ * Is there a method bound to the specified name?\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An atom.\n\
\ * @returns "{3}"\n\
\ *    `true` if '{'@param "{1}"} names a method, `false` otherwise.\n\
\ */\n
# ForwardMethodDeclaration : _=2
P_ForwardMethodDeclaration=Forward method_is_
P_ForwardMethodDeclaration_1=methodName
P_ForwardMethodDeclaration_2=aFunctionType
P_ForwardMethodDeclaration_comment=\
/**\n\
\ * Declare the intention to locally define a method with the specified name and\n\
\ * signature. If no such method is defined before compilation of the containing\n\
\ * module completes, then the compiler will emit an appropriate error message.\n\
\ *\n\
\ * Recursive methods must be forward declared. Mutually recursive methods must\n\
\ * forward declare all but the lexically first participant in the recursion.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method to forward declare.\n\
\ * @param "{2}" "{4}"\n\
\ *        The signature.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ * @raises "{30}"\n\
\ */\n
# ForwardMethodDeclarationForAtom : _=2
P_ForwardMethodDeclarationForAtom=
P_ForwardMethodDeclarationForAtom_1=
P_ForwardMethodDeclarationForAtom_2=
P_ForwardMethodDeclarationForAtom_comment=\
/**\n\
\ * Declare the intention to locally define a method with the specified name and\n\
\ * signature. If no such method is defined before compilation of the containing\n\
\ * module completes, then the compiler will emit an appropriate error message.\n\
\ *\n\
\ * Recursive methods must be forward declared. Mutually recursive methods must\n\
\ * forward declare all but the lexically first participant in the recursion.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method to forward declare.\n\
\ * @param "{2}" "{4}"\n\
\ *        The signature.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# GrammaticalRestriction : _=2
P_GrammaticalRestriction=Grammatical restriction_is_
P_GrammaticalRestriction_1=methodsToRestrict
P_GrammaticalRestriction_2=exclusions
P_GrammaticalRestriction_comment=\
/**\n\
\ * Define the indicated grammatical restrictions. Each method name in\n\
\ * '{'@param "{1}"} must accept the same number of arguments, though not\n\
\ * necessarily the same types (or the same order of types). Each element `e` of\n\
\ * '{'@param "{2}"}, itself a set of method names, corresponds to an argument\n\
\ * position `n` of any method name in '{'@param "{1}"}. The compiler rejects\n\
\ * parses of source text that invoke methods named in `e` when they occur\n\
\ * grammatically at argument position `n` of an invocation of any method named\n\
\ * in '{'@param "{1}"}.\n\
\ *\n\
\ * Note that "argument position" corresponds to a blank, not to a top-level\n\
\ * repeating sequence (indicated by guillemet notation).\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set of method names, each of which should be restricted.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of sets of method names. The method names in the `n`-th set\n\
\ *        are restricted from occurring grammatically at the `n`-th argument\n\
\ *        position of any invocation of a method named in '{'@param "{1}"}.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# GrammaticalRestrictionFromAtoms : _=2
P_GrammaticalRestrictionFromAtoms=Grammatical restriction_is_
P_GrammaticalRestrictionFromAtoms_1=methodsToRestrict
P_GrammaticalRestrictionFromAtoms_2=exclusions
P_GrammaticalRestrictionFromAtoms_comment=\
/**\n\
\ * Define the indicated grammatical restrictions. Each method name in\n\
\ * '{'@param "{1}"} must accept the same number of arguments, though not\n\
\ * necessarily the same types (or the same order of types). Each element `e` of\n\
\ * '{'@param "{2}"}, itself a set of method names, corresponds to an argument\n\
\ * position `n` of any method name in '{'@param "{1}"}. The compiler rejects\n\
\ * parses of source text that invoke methods named in `e` when they occur\n\
\ * grammatically at argument position `n` of an invocation of any method named\n\
\ * in '{'@param "{1}"}.\n\
\ *\n\
\ * Note that "argument position" corresponds to a blank, not to a top-level\n\
\ * repeating sequence (indicated by guillemet notation).\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set of method names, each of which should be restricted.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of sets of method names. The method names in the\n\
\ *       `n`-th set are restricted from occurring grammatically at the `n`-th\n\
\ *       argument position of any invocation of a method named in\n\
\ *       '{'@param "{1}"}.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ */\n
# MessageBundleName : _=1
P_MessageBundleName=_'s⁇atom
P_MessageBundleName_1=aMessageBundle
P_MessageBundleName_comment=\
/**\n\
\ * Answer the atom that uniquely identifies the specified message bundle.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A message bundle for some method.\n\
\ * @returns "{3}"\n\
\ *    The requested atom.\n\
\ */\n
# MethodDeclarationFromAtom : _=2
P_MethodDeclarationFromAtom=
P_MethodDeclarationFromAtom_1=
P_MethodDeclarationFromAtom_2=
P_MethodDeclarationFromAtom_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# MethodDefinitionBody : _=1
P_MethodDefinitionBody=_'s⁇function
P_MethodDefinitionBody_1=aDefinition
P_MethodDefinitionBody_comment=\
/**\n\
\ * Answer the specified method definition''s function.\n\
\ *\n\
\ * @category "Primitives" "Definitions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A method definition.\n\
\ * @returns "{3}"\n\
\ *    The requested function.\n\
\ */\n
# MethodDefinitions : _=1
P_MethodDefinitions=_'s⁇definitions
P_MethodDefinitions_1=aMethod
P_MethodDefinitions_comment=\
/**\n\
\ * Answer the '{'@type "definition"}s of the specified '{'@type "method"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An arbitrary '{'@type "method"}.\n\
\ * @returns "{3}"\n\
\ *    A '{'@type "tuple"} of '{'@type "definition"}s.\n\
\ */\n
# MethodFromName : _=1
P_MethodFromName=method for_
P_MethodFromName_1=anAtom
P_MethodFromName_comment=\
/**\n\
\ * Answer the method uniquely named by the specified atom.\n\
\ *\n\
\ * @category "Primitives" "Atoms" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An atom.\n\
\ * @returns "{3}"\n\
\ *    The requested method.\n\
\ * @raises "{4}"\n\
\ */\n
# MethodNameContainsGroups : _=1
P_MethodNameContainsGroups=message_contains groups
P_MethodNameContainsGroups_1=methodName
P_MethodNameContainsGroups_comment=\
/**\n\
\ * Does the specified message contain any lexical groups?\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A method name.\n\
\ * @returns "{3}"\n\
\ *    `true` if the specified message contains lexical groups, or `false`\n\
\ *    otherwise.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ */\n
# MethodNameParametersCount : _=1
P_MethodNameParametersCount=`|message_'s⁇parameters`|
P_MethodNameParametersCount_1=methodName
P_MethodNameParametersCount_comment=\
/**\n\
\ * Compute and answer the number of parameters required by a valid send of a\n\
\ * message '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A method name.\n\
\ * @returns "{3}"\n\
\ *    The number of parameters required to send the specified message.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ */\n
# SealMethod : _=2
P_SealMethod=Seal method_at_
P_SealMethod_1=methodName
P_SealMethod_2=signature
P_SealMethod_comment=\
/**\n\
\ * Seal the named method at the specified signature. No further definitions\n\
\ * may be added at or below this signature. This facility is provided to secure\n\
\ * methods against dangerous, unscrupulous, or confusing extensions.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the method to seal.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of parameter types. This is the signature at which the\n\
\ *       seal will be placed.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# SealMethodByAtom : _=2
P_SealMethodByAtom=Seal method_at_
P_SealMethodByAtom_1=methodName
P_SealMethodByAtom_2=signature
P_SealMethodByAtom_comment=\
/**\n\
\ * Seal the named method at the specified signature. No further definitions\n\
\ * may be added at or below this signature. This facility is provided to secure\n\
\ * methods against dangerous, unscrupulous, or confusing extensions.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The atom that uniquely designates the method to seal.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple of parameter types. This is the signature at which the seal\n\
\ *        will be placed.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ */\n
# SealMethodsAtExistingDefinitions : _=1
P_SealMethodsAtExistingDefinitions=Seal method|methods_at existing definitions
P_SealMethodsAtExistingDefinitions_1=methodNames
P_SealMethodsAtExistingDefinitions_comment=\
/**\n\
\ * Seal the each method named by an element of `methodNames` at each of its\n\
\ * existing abstract and method definitions. Ignore any macros.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A set of atoms that serve as method names.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# Seals : _=1
P_Seals=_'s⁇seals
P_Seals_1=aMethod
P_Seals_comment=\
/**\n\
\ * Answer all seals applied to the specified method.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A method.\n\
\ * @returns "{3}"\n\
\ *    A tuple comprising the seals applied to '{'@param "{1}"}.\n\
\ */\n
# SemanticRestrictions : _=2
P_SemanticRestrictions=semantic restrictions for_given_
P_SemanticRestrictions_1=aMethod
P_SemanticRestrictions_2=arguments
P_SemanticRestrictions_comment=\
/**\n\
\ * Compute and answer the semantic restrictions that would run at a call site\n\
\ * of '{'@param "{1}"} applied with the specified tuple of arguments.\n\
\ *\n\
\ * @category "Primitives" "Methods" "Semantic Restrictions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A method.\n\
\ * @param "{2}" "{4}"\n\
\ *        The tuple of arguments that should be used to filter the semantic\n\
\ *        restrictions.\n\
\ * @returns "{5}"\n\
\ *    The requested semantic restrictions.\n\
\ * @raises "{6}"\n\
\ */\n
# SimpleLexerDefinitionForAtom : _=3
P_SimpleLexerDefinitionForAtom=Lexer_when_is_
P_SimpleLexerDefinitionForAtom_1=lexerName
P_SimpleLexerDefinitionForAtom_2=filterFunction
P_SimpleLexerDefinitionForAtom_3=bodyFunction
P_SimpleLexerDefinitionForAtom_comment=\
/**\n\
\ * Define a new lexer.  When it''s imported into a module, it will attempt\n\
\ * lexical scanning.  Its filter function is used to classify which lexers\n\
\ * should run when a particular character is encountered, and its body attempts\n\
\ * to produce tokens in that circumstance.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The atom that names the lexer.\n\
\ * @param "{2}" "{5}"\n\
\ *        The filter function of the lexer.\n\
\ * @param "{3}" "{6}"\n\
\ *        The body of the lexer.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# SimpleMacroDeclaration : _=3
P_SimpleMacroDeclaration=Macro_is«_,»_
P_SimpleMacroDeclaration_1=macroName
P_SimpleMacroDeclaration_2=prefixFunctions
P_SimpleMacroDeclaration_3=body
P_SimpleMacroDeclaration_comment=\
/**\n\
\ * Define a macro with the specified name and body. A macro is a method invoked\n\
\ * directly by the compiler as a consequence of parsing a sequence of tokens.\n\
\ * The arguments of a macro are phrases that structurally represent the\n\
\ * corresponding lexical expressions. The result of a macro is a phrase that\n\
\ * completely replaces the macro invocation; the compiler proceeds as if it had\n\
\ * built this phrase from the original tokens instead of the macro\n\
\ * invocation phrase.\n\
\ *\n\
\ * If a macro name contains the section sign (§), it must have a prefix function\n\
\ * for each occurrence of that character in the name.  The prefix function will\n\
\ * be invoked each time that character is "reached" in the method name while\n\
\ * parsing a potential call site, giving the macro the opportunity to alter the\n\
\ * current variable scope and other parsing state.\n\
\ *\n\
\ * Macro definitions are parametric by parameter types. They participate in\n\
\ * multiply polymorphic dispatch just as do methods.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The name of the macro to define.\n\
\ * @param "{2}" "{5}"\n\
\ *        A tuple of zero or more prefix functions.\n\
\ * @param "{3}" "{6}"\n\
\ *        The function that implements the macro.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ * @raises "{30}"\n\
\ * @raises "{31}"\n\
\ * @raises "{32}"\n\
\ * @raises "{33}"\n\
\ * @raises "{34}"\n\
\ * @raises "{35}"\n\
\ * @raises "{36}"\n\
\ */\n
# SimpleMacroDefinitionForAtom : _=3
P_SimpleMacroDefinitionForAtom=Macro_is«_,»_
P_SimpleMacroDefinitionForAtom_1=macroName
P_SimpleMacroDefinitionForAtom_2=prefixFunctions
P_SimpleMacroDefinitionForAtom_3=body
P_SimpleMacroDefinitionForAtom_comment=\
/**\n\
\ * Define a macro with the specified name and body. A macro is a method invoked\n\
\ * directly by the compiler as a consequence of parsing a sequence of tokens.\n\
\ * The arguments of a macro are phrases that structurally represent the\n\
\ * corresponding lexical expressions. The result of a macro is a phrase that\n\
\ * completely replaces the macro invocation; the compiler proceeds as if it had\n\
\ * built this phrase from the original tokens instead of the macro\n\
\ * invocation phrase.\n\
\ *\n\
\ * If a macro name contains the section sign (§), it must have a prefix function\n\
\ * for each occurrence of that character in the name.  The prefix function will\n\
\ * be invoked each time that character is "reached" in the method name while\n\
\ * parsing a potential call site, giving the macro the opportunity to alter the\n\
\ * current variable scope and other parsing state.\n\
\ *\n\
\ * Macro definitions are parametric by parameter types. They participate in\n\
\ * multiply polymorphic dispatch just as do methods.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Methods" "Constructors" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The name of the macro to define.\n\
\ * @param "{2}" "{5}"\n\
\ *        A tuple of zero or more prefix functions.\n\
\ * @param "{3}" "{6}"\n\
\ *        The function that implements the macro.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ * @raises "{30}"\n\
\ * @raises "{31}"\n\
\ * @raises "{32}"\n\
\ * @raises "{33}"\n\
\ * @raises "{34}"\n\
\ * @raises "{35}"\n\
\ */\n
# SimpleMethodDeclaration : _=2
P_SimpleMethodDeclaration=
P_SimpleMethodDeclaration_1=
P_SimpleMethodDeclaration_2=
P_SimpleMethodDeclaration_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ */\n
# AddUnloadFunction : _=1
P_AddUnloadFunction=After the current module is unloaded,⁇do_
P_AddUnloadFunction_1=aFunction
P_AddUnloadFunction_comment=\
/**\n\
\ * Register the given function for callback after the module undergoing\n\
\ * compilation has been unloaded.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The post-unload function.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ */\n
# CloseModule : _=1
P_CloseModule=Close module_
P_CloseModule_1=aModule
P_CloseModule_comment=\
/**\n\
\ * Close the specified anonymous '{'@type "module"}, thereby preventing the\n\
\ * performance of any new side effects upon it.\n\
\ *\n\
\ * @category "Primitives" "Modules"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The module to close.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ *    If '{'@param "{1}"} is already closed.\n\
\ */\n
# CreateAnonymousModule : _=1
P_CreateAnonymousModule=new anonymous module importing_
P_CreateAnonymousModule_1=allImports
P_CreateAnonymousModule_comment=\
/**\n\
\ * Create an anonymous '{'@type "module"} that privately imports only and exactly\n\
\ * the supplied '{'@type "set"} of '{'@type "atom" atoms}.\n\
\ *\n\
\ * @category "Primitives" "Modules"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        Every atom to be imported privately by the new module.\n\
\ * @returns "{3}"\n\
\ *    The new module.\n\
\ */\n
# CurrentModule : _=0
P_CurrentModule=current module
P_CurrentModule_comment=\
/**\n\
\ * Answer the module currently undergoing compilation.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The module currently undergoing compilation.\n\
\ * @raises "{2}"\n\
\ */\n
# Entries : _=1
P_Entries=_'s⁇entry points
P_Entries_1=aModule
P_Entries_comment=\
/**\n\
\ * Answer the entry points introduced by the specified module.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A module.\n\
\ * @returns "{3}"\n\
\ *    A set containing the entry point names introduced by '{'@param "{1}"}\n\
\ */\n
# ExportedNames : _=0
P_ExportedNames=current module's exported names
P_ExportedNames_comment=\
/**\n\
\ * Answer the set of all atoms exported by the current module.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Queries"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The set of atoms exported by the current module.\n\
\ * @raises "{2}"\n\
\ */\n
# HasNewName : _=2
P_HasNewName=_has public name_
P_HasNewName_1=aModule
P_HasNewName_2=aString
P_HasNewName_comment=\
/**\n\
\ * Determine whether the provided module defines an atom with the given name.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The module to examine.\n\
\ * @param "{2}" "{4}"\n\
\ *        The name to look for in the module''s new names.\n\
\ * @returns "{5}"\n\
\ *    Whether the name was defined in the module.\n\
\ */\n
# IsModuleOpen : _=1
P_IsModuleOpen=_is open for side effects
P_IsModuleOpen_1=aModule
P_IsModuleOpen_comment=\
/**\n\
\ * Determine whether the '{'@type "{2}"} is still open to the performance of\n\
\ * further side effects upon it.\n\
\ *\n\
\ * @category "Primitives" "Modules"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The module to query for openness.\n\
\ * @returns "{3}"\n\
\ *    '{'@method "true"} if '{'@param "{1}"} is open, '{'@method "false"} otherwise.\n\
\ */\n
# LookupModule : _=0
P_LookupModule=
P_LookupModule_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ * @raises "{2}"\n\
\ */\n
# LookupName : _=1
P_LookupName=atom for_
P_LookupName_1=localName
P_LookupName_comment=\
/**\n\
\ * Answer the atom referenced by the specified name in the module currently\n\
\ * undergoing compilation. If this name already refers to an atom in scope,\n\
\ * i.e., either one 1) imported through the "Uses" or "Extends" sections of the\n\
\ * current module''s header, 2) introduced by the "Names" section of the\n\
\ * current module''s header, or 3) introduced by dynamic publication then answer\n\
\ * this atom. Otherwise, privately introduce a new atom.\n\
\ *\n\
\ * @category "Primitives" "Name Resolution" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The name by which this atom is known locally.\n\
\ * @returns "{3}"\n\
\ *    The requested atom.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# ModuleName : _=1
P_ModuleName=_'s⁇name
P_ModuleName_1=aModule
P_ModuleName_comment=\
/**\n\
\ * Answer the fully qualified name of the specified module.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A module.\n\
\ * @returns "{3}"\n\
\ *    The fully qualified name of '{'@param "{1}"}.\n\
\ */\n
# NewNames : _=1
P_NewNames=_'s⁇public names
P_NewNames_1=aModule
P_NewNames_comment=\
/**\n\
\ * Answer the public names introduced by the specified module.  This is a map\n\
\ * from string to atom.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A module.\n\
\ * @returns "{3}"\n\
\ *    A map containing the public names introduced by '{'@param "{1}"}.\n\
\ */\n
# PublishName : _=1
P_PublishName=Export_as a new name
P_PublishName_1=newName
P_PublishName_comment=\
/**\n\
\ * Dynamically introduce '{'@param "{1}"} as a public name. This has the same\n\
\ * effect as listing in the "Names" section of the current module, i.e., the\n\
\ * module currently undergoing compilation. This facilitates code generation in\n\
\ * some circumstances. This operation may only be invoked during compilation,\n\
\ * i.e., as the result of parsing or executing a top-level statement.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Name Resolution" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The name that should be introduced.\n\
\ * @returns "{3}"\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# VisibleAtoms : _=0
P_VisibleAtoms=current module's visible names
P_VisibleAtoms_comment=\
/**\n\
\ * Answer every grammatical '{'@type "atom"} visible within the '{'@method\n\
\ * "current module"}.\n\
\ *\n\
\ * @category "Primitives" "Modules" "Atoms"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    The '{'@type "set"} of visible '{'@type "atom"}s.\n\
\ * @raises "{2}"\n\
\ */\n
# Addition : _=2
P_Addition=_+_
P_Addition_1=augend
P_Addition_2=addend
P_Addition_comment=\
/**\n\
\ * Compute and answer the sum of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The augend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The addend.\n\
\ * @returns "{5}"\n\
\ *    The sum of the augend and the addend.\n\
\ * @raises "{6}"\n\
\ */\n
# Division : _=2
P_Division=_÷_
P_Division_1=dividend
P_Division_2=divisor
P_Division_comment=\
/**\n\
\ * Compute and answer the quotient of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The dividend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The divisor.\n\
\ * @returns "{5}"\n\
\ *    The quotient of the dividend and the divisor.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# LessOrEqual : _=2
P_LessOrEqual=_≤_
P_LessOrEqual_1=
P_LessOrEqual_2=
P_LessOrEqual_comment=\
/**\n\
\ * Is the first argument less than or equal to the second argument?\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics" "Relations"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A number.\n\
\ * @param "{2}" "{4}"\n\
\ *        A number.\n\
\ * @returns "{5}"\n\
\ *    `true` if the first argument is less than or equal to the second\n\
\ *    argument, `false` otherwise.\n\
\ */\n
# LessThan : _=2
P_LessThan=_<_
P_LessThan_1=
P_LessThan_2=
P_LessThan_comment=\
/**\n\
\ * Is the first argument strictly less than the second argument?\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics" "Relations"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A number.\n\
\ * @param "{2}" "{4}"\n\
\ *        A number.\n\
\ * @returns "{5}"\n\
\ *    `true` if the first argument is strictly less than the second argument,\n\
\ *    `false` otherwise.\n\
\ */\n
# Multiplication : _=2
P_Multiplication=_×_
P_Multiplication_1=multiplicand
P_Multiplication_2=multiplier
P_Multiplication_comment=\
/**\n\
\ * Compute and answer the product of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The multiplicand.\n\
\ * @param "{2}" "{4}"\n\
\ *        The multiplier.\n\
\ * @returns "{5}"\n\
\ *    The product of the multiplicand and the multiplier.\n\
\ * @raises "{6}"\n\
\ */\n
# Subtraction : _=2
P_Subtraction=_-_
P_Subtraction_1=minuend
P_Subtraction_2=subtrahend
P_Subtraction_comment=\
/**\n\
\ * Compute and answer the difference of the arguments.\n\
\ *\n\
\ * @category "Primitives" "Numbers" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The minuend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The subtrahend.\n\
\ * @returns "{5}"\n\
\ *    The difference of the minuend and the subtrahend.\n\
\ * @raises "{6}"\n\
\ */\n
# CreateObjectFieldGetter : _=2
P_CreateObjectFieldGetter=
P_CreateObjectFieldGetter_1=
P_CreateObjectFieldGetter_2=
P_CreateObjectFieldGetter_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# GetObjectField : _=2
P_GetObjectField=_[_]
P_GetObjectField_1=object
P_GetObjectField_2=field
P_GetObjectField_comment=\
/**\n\
\ * Extract a field''s value from an object.\n\
\ *\n\
\ * @category "Primitives" "Objects" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An object.\n\
\ * @param "{2}" "{4}"\n\
\ *        The field for which to extract the value.\n\
\ * @returns "{5}"\n\
\ *    The field''s value.\n\
\ * @raises "{6}"\n\
\ */\n
# GetObjectTypeField : _=2
P_GetObjectTypeField=_[_]
P_GetObjectTypeField_1=objectType
P_GetObjectTypeField_2=field
P_GetObjectTypeField_comment=\
/**\n\
\ * Extract a field''s type from an object type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An object type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The field for which to extract the type.\n\
\ * @returns "{5}"\n\
\ *    The field''s constraining type.\n\
\ * @raises "{6}"\n\
\ */\n
# MapToObject : _=1
P_MapToObject=_→object
P_MapToObject_1=fieldsToValues
P_MapToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied map.\n\
\ *\n\
\ * @category "Primitives" "Objects" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map whose keys are the fields of the new object and whose values are\n\
\ *        the corresponding field values.\n\
\ * @returns "{3}"\n\
\ *    The requested object.\n\
\ */\n
# MapToObjectType : _=1
P_MapToObjectType=_→object type
P_MapToObjectType_1=fieldsToTypes
P_MapToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied map.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Maps" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A map whose keys are the fields of the new object and whose values are\n\
\ *        the corresponding field types.\n\
\ * @returns "{3}"\n\
\ *    The requested object type.\n\
\ */\n
# ObjectToMap : _=1
P_ObjectToMap=_→map
P_ObjectToMap_1=anObject
P_ObjectToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object.\n\
\ *\n\
\ * @category "Primitives" "Objects" "Maps" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An object whose fields should be the keys of the new map and whose\n\
\ *        values are the corresponding values.\n\
\ * @returns "{3}"\n\
\ *    The requested map.\n\
\ */\n
# ObjectToTuple : _=1
P_ObjectToTuple=_→tuple
P_ObjectToTuple_1=anObject
P_ObjectToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Objects" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An object.\n\
\ * @returns "{3}"\n\
\ *    A tuple that represents the composition of the object. Its elements are\n\
\ *    2-tuples. Each 2-tuple''s first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is associated value.\n\
\ */\n
# ObjectTypeToMap : _=1
P_ObjectTypeToMap=_→map
P_ObjectTypeToMap_1=anObjectType
P_ObjectTypeToMap_comment=\
/**\n\
\ * Construct and answer a map based on the supplied object type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Maps" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An object type whose fields should be the keys of the new map and\n\
\ *        whose values are the corresponding values.\n\
\ * @returns "{3}"\n\
\ *    The requested map.\n\
\ * @raises "{4}"\n\
\ */\n
# ObjectTypeToTuple : _=1
P_ObjectTypeToTuple=_→tuple
P_ObjectTypeToTuple_1=anObjectType
P_ObjectTypeToTuple_comment=\
/**\n\
\ * Construct and answer a tuple based on the supplied object type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Objects" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An object type.\n\
\ * @returns "{3}"\n\
\ *    A tuple that represents the composition of the object type. Its elements\n\
\ *    are 2-tuples. Each 2-tuple''s first element is an atom (i.e., the field\n\
\ *    identifier) and its second element is the value type permitted by the\n\
\ *    field.\n\
\ * @raises "{4}"\n\
\ */\n
# RecordNewTypeName : _=2
P_RecordNewTypeName=_'s⁇name:=_
P_RecordNewTypeName_1=anObjectType
P_RecordNewTypeName_2=name
P_RecordNewTypeName_comment=\
/**\n\
\ * For the purpose of debugging, bind a name to an object type. This name will\n\
\ * be used for subtypes that do not bind a more specific name to describe their\n\
\ * own subtypes.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An object type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The name that should be bound to the object type. This will replace\n\
\ *        a previously bound name.\n\
\ * @returns "{5}"\n\
\ */\n
# RemoveTypeName : _=2
P_RemoveTypeName=Unname_from_
P_RemoveTypeName_1=name
P_RemoveTypeName_2=anObjectType
P_RemoveTypeName_comment=\
/**\n\
\ * Unbind the specified name from the specified object type.  This undoes the\n\
\ * action of '{'@method "_''s⁇name:=_"}, generally as an unloading action for a\n\
\ * '{'@type "module"}.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name that should no longer be bound to the object type.\n\
\ * @param "{2}" "{4}"\n\
\ *        An object type.\n\
\ * @returns "{5}"\n\
\ */\n
# TupleToObject : _=1
P_TupleToObject=_→object
P_TupleToObject_1=fieldAssignments
P_TupleToObject_comment=\
/**\n\
\ * Construct and answer an object based on the supplied tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Objects" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple whose elements are 2-tuples. Each 2-tuple''s first element is\n\
\ *        an atom (i.e., the field identifier) and its second element is\n\
\ *        associated value.\n\
\ * @returns "{3}"\n\
\ *    The requested object.\n\
\ */\n
# TupleToObjectType : _=1
P_TupleToObjectType=_→object type
P_TupleToObjectType_1=fieldDefinitions
P_TupleToObjectType_comment=\
/**\n\
\ * Construct and answer an object type based on the supplied tuple.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Objects" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple whose elements are 2-tuples. Each 2-tuple''s first element is\n\
\ *        an atom (i.e., the field identifier) and its second element is the\n\
\ *        value type permitted by the field.\n\
\ * @returns "{3}"\n\
\ *    The requested object type.\n\
\ */\n
# TypeNames : _=1
P_TypeNames=_'s⁇names
P_TypeNames_1=anObjectType
P_TypeNames_comment=\
/**\n\
\ * Answer the set of locally most-specific names bound to the specified object\n\
\ * type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Objects" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An object type.\n\
\ * @returns "{3}"\n\
\ *    The set of locally most-specific names bound to the specified object\n\
\ *    type.\n\
\ */\n
# AssignmentTarget : _=1
P_AssignmentTarget=_'s⁇target
P_AssignmentTarget_1=anAssignment
P_AssignmentTarget_comment=\
/**\n\
\ * Answer the specified assignment''s target variable.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An assignment.\n\
\ * @returns "{3}"\n\
\ *    The assignment''s target variable.\n\
\ */\n
# AssignmentValue : _=1
P_AssignmentValue=_'s⁇value
P_AssignmentValue_1=anAssignment
P_AssignmentValue_comment=\
/**\n\
\ * Answer the specified assignment''s value expression.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An assignment.\n\
\ * @returns "{3}"\n\
\ *    The assignment''s value expression.\n\
\ */\n
# BlockArguments : _=1
P_BlockArguments=_'s⁇arguments
P_BlockArguments_1=aBlock
P_BlockArguments_comment=\
/**\n\
\ * Answer the arguments of the specified block.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block.\n\
\ * @returns "{3}"\n\
\ *    A tuple of argument declarations.\n\
\ */\n
# BlockDeclaredExceptions : _=1
P_BlockDeclaredExceptions=_'s⁇declared exceptions
P_BlockDeclaredExceptions_1=aBlock
P_BlockDeclaredExceptions_comment=\
/**\n\
\ * Answer the declared exceptions of the specified block.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block.\n\
\ * @returns "{3}"\n\
\ *    The block''s set of declared exceptions.\n\
\ */\n
# BlockNeededVariables : _=1
P_BlockNeededVariables=_'s⁇outer variables
P_BlockNeededVariables_1=aBlock
P_BlockNeededVariables_comment=\
/**\n\
\ * Answer the specified block''s outer variables.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block.\n\
\ * @returns "{3}"\n\
\ *    A tuple of declarations of outer variables required to complete the\n\
\ *    meaning of the block.\n\
\ */\n
# BlockReturnType : _=1
P_BlockReturnType=_'s⁇return type
P_BlockReturnType_1=aBlock
P_BlockReturnType_comment=\
/**\n\
\ * Answer the return type of the specified block.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block.\n\
\ * @returns "{3}"\n\
\ *    The block''s return type.\n\
\ */\n
# BlockStatements : _=1
P_BlockStatements=_'s⁇statements
P_BlockStatements_1=aBlock
P_BlockStatements_comment=\
/**\n\
\ * Answer the statements of the specified block.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A block.\n\
\ * @returns "{3}"\n\
\ *    A tuple of statements. These are either assignments, declarations, labels,\n\
\ *    sequences, or ⊤-valued sends.\n\
\ */\n
# CreateArgumentDeclaration : _=2
P_CreateArgumentDeclaration=arg`«_:_`»
P_CreateArgumentDeclaration_1=name
P_CreateArgumentDeclaration_2=declaredType
P_CreateArgumentDeclaration_comment=\
/**\n\
\ * Construct and answer an argument declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the new constant.\n\
\ * @param "{2}" "{4}"\n\
\ *        The declared type of the named constant.\n\
\ * @returns "{5}"\n\
\ *    The requested argument declaration.\n\
\ */\n
# CreateAssignmentExpression : _=2
P_CreateAssignmentExpression=`«(_:=_)`»
P_CreateAssignmentExpression_1=variableUse
P_CreateAssignmentExpression_2=valueExpression
P_CreateAssignmentExpression_comment=\
/**\n\
\ * Construct and answer an assignment expression.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A variable use expression.\n\
\ * @param "{2}" "{4}"\n\
\ *        An expression.\n\
\ * @returns "{5}"\n\
\ *    An expression that describes assigning to the variable indicated by\n\
\ *    '{'@param "{1}"} the result of running '{'@param "{2}"}. The result\n\
\ *    yields the same answer as '{'@param "{2}"}.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CreateAssignmentStatement : _=2
P_CreateAssignmentStatement=`«_:=_`»
P_CreateAssignmentStatement_1=variableUse
P_CreateAssignmentStatement_2=valueExpression
P_CreateAssignmentStatement_comment=\
/**\n\
\ * Construct and answer an assignment statement.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A variable use expression.\n\
\ * @param "{2}" "{4}"\n\
\ *        An expression.\n\
\ * @returns "{5}"\n\
\ *    A statement that describes assigning to the variable indicated by\n\
\ *    '{'@param "{1}"} the result of running '{'@param "{2}"}.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CreateBlockExpression : _=5
P_CreateBlockExpression=`«[_`|Primitive__]:_^_`»
P_CreateBlockExpression_1=argumentDeclarations
P_CreateBlockExpression_2=primitiveName
P_CreateBlockExpression_3=statements
P_CreateBlockExpression_4=returnType
P_CreateBlockExpression_5=exceptions
P_CreateBlockExpression_comment=\
/**\n\
\ * Construct and answer a block from the specified tuple of argument\n\
\ * declarations, primitive linkage number, tuple of statements, return type, and\n\
\ * set of declared exceptions.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        A tuple of argument declarations.\n\
\ * @param "{2}" "{7}"\n\
\ *        The primitive linkage number, or 0 for no primitive linkage.\n\
\ * @param "{3}" "{8}"\n\
\ *        A tuple of statements. Each element except for the last must be an\n\
\ *        assignment, declaration, label, sequence, or ⊤-valued send.\n\
\ * @param "{4}" "{9}"\n\
\ *        The return type.\n\
\ * @param "{5}" "{10}"\n\
\ *        The set of exceptions that may be raised.\n\
\ * @returns "{11}"\n\
\ *    The requested block.\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# CreateExpressionAsStatementPhrase : _=1
P_CreateExpressionAsStatementPhrase=_→statement phrase
P_CreateExpressionAsStatementPhrase_1=expr
P_CreateExpressionAsStatementPhrase_comment=\
/**\n\
\ * Convert the '{'@type "{2}"} into a\n\
\ * '{'@type "{3}"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An '{'@type "{2}"}.\n\
\ * @returns "{3}"\n\
\ *    The wrapping '{'@type "{3}"}.\n\
\ */\n
# CreateFirstOfSequenceOfStatements : _=1
P_CreateFirstOfSequenceOfStatements=first-of-seq`«_`»
P_CreateFirstOfSequenceOfStatements_1=statements
P_CreateFirstOfSequenceOfStatements_comment=\
/**\n\
\ * Construct and answer a first-of-sequence phrase from the specified tuple of\n\
\ * statements.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of statements.\n\
\ * @returns "{3}"\n\
\ *    The requested first-of-sequence phrase.\n\
\ * @raises "{4}"\n\
\ */\n
# CreateInitializingVariableDeclaration : _=3
P_CreateInitializingVariableDeclaration=`«_:_:=_`»
P_CreateInitializingVariableDeclaration_1=name
P_CreateInitializingVariableDeclaration_2=declaredType
P_CreateInitializingVariableDeclaration_3=initializer
P_CreateInitializingVariableDeclaration_comment=\
/**\n\
\ * Construct and answer an initialized local variable declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The name of the new variable.\n\
\ * @param "{2}" "{5}"\n\
\ *        The declared type of the named variable.\n\
\ * @param "{3}" "{6}"\n\
\ *        The initialization expression.\n\
\ * @returns "{7}"\n\
\ *    The requested initialized local variable declaration.\n\
\ */\n
# CreateLabelDeclaration : _=2
P_CreateLabelDeclaration=`«$_:_`»
P_CreateLabelDeclaration_1=name
P_CreateLabelDeclaration_2=declaredType
P_CreateLabelDeclaration_comment=\
/**\n\
\ * Construct and answer a label declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the new constant.\n\
\ * @param "{2}" "{4}"\n\
\ *        The declared type of the named constant.\n\
\ * @returns "{5}"\n\
\ *    The requested label declaration.\n\
\ */\n
# CreateListExpression : _=1
P_CreateListExpression=_→list phrase
P_CreateListExpression_1=aTuple
P_CreateListExpression_comment=\
/**\n\
\ * Construct and answer a list from the specified tuple of expressions.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of expressions.\n\
\ * @returns "{3}"\n\
\ *    The requested list.\n\
\ */\n
# CreateLiteralExpression : _=1
P_CreateLiteralExpression=_→literal phrase
P_CreateLiteralExpression_1=aLiteralToken
P_CreateLiteralExpression_comment=\
/**\n\
\ * Construct and answer a literal expression.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A literal token.\n\
\ * @returns "{3}"\n\
\ *    The requested literal expression.\n\
\ */\n
# CreateLiteralToken : _=4
P_CreateLiteralToken=``_``(_)@_:_
P_CreateLiteralToken_1=value
P_CreateLiteralToken_2=lexeme
P_CreateLiteralToken_3=start
P_CreateLiteralToken_4=line
P_CreateLiteralToken_comment=\
/**\n\
\ * Construct and answer a literal token.\n\
\ *\n\
\ * @category "Primitives" "Tokens" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The value of the literal.\n\
\ * @param "{2}" "{6}"\n\
\ *        The source text of the literal.\n\
\ * @param "{3}" "{7}"\n\
\ *        The one-based starting character position of the literal. A '{'@code 0}\n\
\ *        indicates that the character position is unknown or meaningless.\n\
\ * @param "{4}" "{8}"\n\
\ *        The one-based line number of the literal. A '{'@code 0}\n\
\ *        indicates that the line number is unknown or meaningless.\n\
\ * @returns "{9}"\n\
\ *    The requested literal token.\n\
\ */\n
# CreateLiteralTokenType : _=1
P_CreateLiteralTokenType=literal token⇒_
P_CreateLiteralTokenType_1=literalValue
P_CreateLiteralTokenType_comment=\
/**\n\
\ * Construct a suitably parameterized literal token type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The literal value''s type\n\
\ * @returns "{3}"\n\
\ *    A literal token type.\n\
\ */\n
# CreateLocalConstantDeclaration : _=2
P_CreateLocalConstantDeclaration=`«_::=_`»
P_CreateLocalConstantDeclaration_1=name
P_CreateLocalConstantDeclaration_2=expression
P_CreateLocalConstantDeclaration_comment=\
/**\n\
\ * Construct and answer a local constant declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the new constant.\n\
\ * @param "{2}" "{4}"\n\
\ *        The initialization expression for the new constant.\n\
\ * @returns "{5}"\n\
\ *    The requested local constant declaration.\n\
\ */\n
# CreateModuleVariableDeclaration : _=2
P_CreateModuleVariableDeclaration=`«module variable_(_)`»
P_CreateModuleVariableDeclaration_1=aVariable
P_CreateModuleVariableDeclaration_2=aToken
P_CreateModuleVariableDeclaration_comment=\
/**\n\
\ * Answer a module variable declaration based on the given variable and token.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    A module variable declaration phrase.\n\
\ */\n
# CreatePermutedListPhrase : _=2
P_CreatePermutedListPhrase=_permuted by_
P_CreatePermutedListPhrase_1=list
P_CreatePermutedListPhrase_2=permutation
P_CreatePermutedListPhrase_comment=\
/**\n\
\ * Construct and answer a '{'@type "permuted list phrase"} given the specified\n\
\ * '{'@type "list phrase"} and permutation '{'@type "tuple"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The '{'@type "list phrase"} whose subexpressions should be permuted.\n\
\ * @param "{2}" "{4}"\n\
\ *        The permutation imposed by the resultant '{'@type\n\
\ *        "permuted list phrase"}. This is a '{'@type "tuple"} of target indices,\n\
\ *        index by source index.\n\
\ * @returns "{5}"\n\
\ *    The requested '{'@type "permuted list phrase"}.\n\
\ * @raises "{6}"\n\
\ */\n
# CreatePhraseType : _=2
P_CreatePhraseType=_⇒_
P_CreatePhraseType_1=aPhrase
P_CreatePhraseType_2=semanticType
P_CreatePhraseType_comment=\
/**\n\
\ * Construct and answer a phrase type with the specified semantic type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A phrase type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The semantic type of values producible by phrases that are instances\n\
\ *        of the answer.\n\
\ * @returns "{5}"\n\
\ *    The requested phrase type.\n\
\ * @raises "{6}"\n\
\ */\n
# CreatePrimitiveFailureVariableDeclaration : _=2
P_CreatePrimitiveFailureVariableDeclaration=primfail`«_:_`»
P_CreatePrimitiveFailureVariableDeclaration_1=name
P_CreatePrimitiveFailureVariableDeclaration_2=declaredType
P_CreatePrimitiveFailureVariableDeclaration_comment=\
/**\n\
\ * Construct and answer a primitive failure local constant declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the new constant.\n\
\ * @param "{2}" "{4}"\n\
\ *        The declared type of the named constant.\n\
\ * @returns "{5}"\n\
\ *    The requested primitive failure local constant declaration.\n\
\ */\n
# CreateReferenceExpression : _=1
P_CreateReferenceExpression=`«`↑_`»
P_CreateReferenceExpression_1=variableUse
P_CreateReferenceExpression_comment=\
/**\n\
\ * Construct and answer a value reference expression.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable use expression.\n\
\ * @returns "{3}"\n\
\ *    A variable reference expression that answers the variable described by\n\
\ *    '{'@param "{1}"}.\n\
\ * @raises "{4}"\n\
\ */\n
# CreateRestrictedSendExpression : _=3
P_CreateRestrictedSendExpression=restricted report and send_with_:_
P_CreateRestrictedSendExpression_1=message
P_CreateRestrictedSendExpression_2=args
P_CreateRestrictedSendExpression_3=basicReturnType
P_CreateRestrictedSendExpression_comment=\
/**\n\
\ * Create a send phrase from the supplied message name (atom), list phrase of\n\
\ * arguments, and return type.  Strengthen the return type based on the\n\
\ * applicable method definitions.  Also launch a fiber for each applicable\n\
\ * semantic restriction and strengthen the return type with their eventual\n\
\ * results.\n\
\ *\n\
\ * If any semantic restrictions reject parsing, collect the failure messages\n\
\ * into an aggregate message.  Answer a tuple where the first element is either\n\
\ * an empty tuple or a tuple containing the send phrase, and where the second\n\
\ * element is either the report from rejecting semantic restrictions or the\n\
\ * empty string.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The atom that names the method to be invoked by the send phrase.\n\
\ * @param "{2}" "{5}"\n\
\ *        The list phrase of phrases that are supplied as arguments of the send\n\
\ *        phrase.\n\
\ * @param "{3}" "{6}"\n\
\ *        The return type of the send phrase, prior to strengthening by\n\
\ *        applicable method definitions and semantic restrictions.\n\
\ * @returns "{7}"\n\
\ *        A pair of the optional restricted send phrase and report string.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ * @raises "{29}"\n\
\ */\n
# CreateSendExpression : _=3
P_CreateSendExpression=send_with_:_
P_CreateSendExpression_1=messageName
P_CreateSendExpression_2=argumentsList
P_CreateSendExpression_3=returnType
P_CreateSendExpression_comment=\
/**\n\
\ * Construct and answer a message send. '{'@param "{1}"} must be an atom which has\n\
\ * a message bundle.  The number and types of the argument expressions must\n\
\ * satisfy at least one of the method''s existing definitions.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The name of the method to be invoked.\n\
\ * @param "{2}" "{5}"\n\
\ *        The list phrase containing the argument expressions, corresponding\n\
\ *        left-to-right with the arguments of the method.\n\
\ * @param "{3}" "{6}"\n\
\ *        The expected (strengthened) return type of the method send.\n\
\ * @returns "{7}"\n\
\ *    The requested message send.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ */\n
# CreateSequenceOfStatements : _=1
P_CreateSequenceOfStatements=seq`«_`»
P_CreateSequenceOfStatements_1=statements
P_CreateSequenceOfStatements_comment=\
/**\n\
\ * Construct and answer a sequence from the specified tuple of statements.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of statements.\n\
\ * @returns "{3}"\n\
\ *    The requested sequence.\n\
\ * @raises "{4}"\n\
\ */\n
# CreateSuperCastExpression : _=2
P_CreateSuperCastExpression=`«supercast(_::_)`»
P_CreateSuperCastExpression_1=baseExpression
P_CreateSuperCastExpression_2=lookupType
P_CreateSuperCastExpression_comment=\
/**\n\
\ * Construct a supercast phrase.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The base phrase that produces the argument to be passed in a call.\n\
\ * @param "{2}" "{4}"\n\
\ *        The type to use to lookup this argument rather than its actual type.\n\
\ * @returns "{5}"\n\
\ *    A supercast phrase.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# CreateToken : _=4
P_CreateToken=
P_CreateToken_1=
P_CreateToken_2=
P_CreateToken_3=
P_CreateToken_4=
P_CreateToken_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        TODO\n\
\ * @param "{2}" "{6}"\n\
\ *        TODO\n\
\ * @param "{3}" "{7}"\n\
\ *        TODO\n\
\ * @param "{4}" "{8}"\n\
\ *        TODO\n\
\ * @returns "{9}"\n\
\ *    TODO\n\
\ */\n
# CreateTokenType : _=1
P_CreateTokenType=
P_CreateTokenType_1=
P_CreateTokenType_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# CreateVariableExpression : _=2
P_CreateVariableExpression=`«_:_`»
P_CreateVariableExpression_1=name
P_CreateVariableExpression_2=declaredType
P_CreateVariableExpression_comment=\
/**\n\
\ * Construct and answer a local variable declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The name of the new variable.\n\
\ * @param "{2}" "{4}"\n\
\ *        The declared type of the named variable.\n\
\ * @returns "{5}"\n\
\ *    The requested local variable declaration.\n\
\ */\n
# CreateVariableUse : _=2
P_CreateVariableUse=`«↓_`»(_)
P_CreateVariableUse_1=aDeclaration
P_CreateVariableUse_2=aToken
P_CreateVariableUse_comment=\
/**\n\
\ * Create a variable use expression from the specified token and declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The declaration that created the referenced entity.\n\
\ * @param "{2}" "{4}"\n\
\ *        A token that names the entity at the point of use.\n\
\ * @returns "{5}"\n\
\ *    The requested variable use expression.\n\
\ */\n
# DeclarationInitializingExpression : _=2
P_DeclarationInitializingExpression=
P_DeclarationInitializingExpression_1=
P_DeclarationInitializingExpression_2=
P_DeclarationInitializingExpression_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ */\n
# DeclarationToken : _=1
P_DeclarationToken=_'s⁇token
P_DeclarationToken_1=aDeclaration
P_DeclarationToken_comment=\
/**\n\
\ * Answer the token that names the entity introduced by the specified\n\
\ * declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A declaration.\n\
\ * @returns "{3}"\n\
\ *    The requested token.\n\
\ */\n
# DeclarationType : _=1
P_DeclarationType=_'s⁇declared type
P_DeclarationType_1=aDeclaration
P_DeclarationType_comment=\
/**\n\
\ * Answer the declared type of the entity introduced by the specified\n\
\ * declaration.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A declaration.\n\
\ * @returns "{3}"\n\
\ *    The requested type.\n\
\ */\n
# ExpressionAsStatementExpression : _=1
P_ExpressionAsStatementExpression=_'s⁇expression
P_ExpressionAsStatementExpression_1=stmt
P_ExpressionAsStatementExpression_comment=\
/**\n\
\ * Answer the '{'@type "{3}"} wrapped by the '{'@type\n\
\ * "{2}"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An '{'@type "{2}"}.\n\
\ * @returns "{3}"\n\
\ *    The wrapped '{'@type "{3}"}.\n\
\ */\n
# FirstOfSequenceStatements : _=1
P_FirstOfSequenceStatements=_'s⁇statements
P_FirstOfSequenceStatements_1=aFirstOfSequence
P_FirstOfSequenceStatements_comment=\
/**\n\
\ * Answer the tuple of statements that constitute the specified\n\
\ * first-of-sequence.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A first-of-sequence.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple of statements.\n\
\ */\n
# ListExpressions : _=1
P_ListExpressions=_'s⁇expressions
P_ListExpressions_1=aList
P_ListExpressions_comment=\
/**\n\
\ * Answer the tuple of expressions that constitute the specified list.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A list.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple of expressions.\n\
\ */\n
# LiteralExpressionToken : _=1
P_LiteralExpressionToken=_'s⁇token
P_LiteralExpressionToken_1=aLiteral
P_LiteralExpressionToken_comment=\
/**\n\
\ * Answer the specified literal expression''s defining token.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A literal expression.\n\
\ * @returns "{3}"\n\
\ *    The requested literal token.\n\
\ */\n
# LiteralTokenTypeValueType : _=1
P_LiteralTokenTypeValueType=_'s⁇value type
P_LiteralTokenTypeValueType_1=literalTokenType
P_LiteralTokenTypeValueType_comment=\
/**\n\
\ * Extract this literal token type''s value type. That''s the type of value\n\
\ * that a conforming literal token can produce.\n\
\ *\n\
\ * @category "Primitives" "Types" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The literal token type.\n\
\ * @returns "{3}"\n\
\ *    The type of value that such a literal token can produce.\n\
\ */\n
# LiteralTokenValue : _=1
P_LiteralTokenValue=_'s⁇value
P_LiteralTokenValue_1=aLiteralToken
P_LiteralTokenValue_comment=\
/**\n\
\ * Answer the literal value associated with the specified token.\n\
\ *\n\
\ * @category "Primitives" "Tokens" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A literal token.\n\
\ * @returns "{3}"\n\
\ *    The literal value produced by '{'@param "{1}"}.\n\
\ */\n
# PermutedListList : _=1
P_PermutedListList=_'s⁇list
P_PermutedListList_1=permuted
P_PermutedListList_comment=\
/**\n\
\ * Answer the '{'@type "list phrase"} wrapped by the specified '{'@type\n\
\ * "permuted list phrase"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A '{'@type "permuted list phrase"}.\n\
\ * @returns "{3}"\n\
\ *    The '{'@type "list phrase"} permuted by '{'@param "{1}"}.\n\
\ */\n
# PermutedListPermutation : _=1
P_PermutedListPermutation=_'s⁇permutation
P_PermutedListPermutation_1=permuted
P_PermutedListPermutation_comment=\
/**\n\
\ * Answer the permutation '{'@type "tuple"} for the specified '{'@type\n\
\ * "permuted list phrase"}.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A '{'@type "permuted list phrase"}.\n\
\ * @returns "{3}"\n\
\ *    The permutation '{'@type "tuple"}. This comprises the target indices,\n\
\ *    indexed by source index.\n\
\ */\n
# PhraseExpressionType : _=1
P_PhraseExpressionType=_'s⁇semantic type
P_PhraseExpressionType_1=phrase
P_PhraseExpressionType_comment=\
/**\n\
\ * Answer the semantic type of the specified phrase. This is the type of value\n\
\ * produced when the content of the phrase is evaluated (by the compiler and/or\n\
\ * runtime).\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A phrase.\n\
\ * @returns "{3}"\n\
\ *    A type that describes all values producible by evaluations of the\n\
\ *    argument.\n\
\ */\n
# PhraseTypeExpressionType : _=1
P_PhraseTypeExpressionType=_'s⁇semantic type
P_PhraseTypeExpressionType_1=phraseType
P_PhraseTypeExpressionType_comment=\
/**\n\
\ * Answer the semantic type of the specified phrase type.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A phrase type.\n\
\ * @returns "{3}"\n\
\ *    The requested semantic type.\n\
\ */\n
# ReferenceTarget : _=1
P_ReferenceTarget=`«↓_`»
P_ReferenceTarget_1=aReference
P_ReferenceTarget_comment=\
/**\n\
\ * Answer the specified variable reference''s referent.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable reference.\n\
\ * @returns "{3}"\n\
\ *    The variable use referenced by the argument.\n\
\ */\n
# SendArgumentsList : _=1
P_SendArgumentsList=_'s⁇arguments
P_SendArgumentsList_1=aSend
P_SendArgumentsList_comment=\
/**\n\
\ * Answer the specified message send''s list of argument expressions.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A message send.\n\
\ * @returns "{3}"\n\
\ *    The requested list of argument expressions.\n\
\ */\n
# SendMethod : _=1
P_SendMethod=_'s⁇method
P_SendMethod_1=aSend
P_SendMethod_comment=\
/**\n\
\ * Answer the target method of the specified message send.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A message send.\n\
\ * @returns "{3}"\n\
\ *    The requested method.\n\
\ */\n
# SendReturnType : _=1
P_SendReturnType=_'s⁇return type
P_SendReturnType_1=aSend
P_SendReturnType_comment=\
/**\n\
\ * Answer the specified message send''s expected return type.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A message send.\n\
\ * @returns "{3}"\n\
\ *    The requested type.\n\
\ */\n
# SequenceStatements : _=1
P_SequenceStatements=_'s⁇statements
P_SequenceStatements_1=aSequence
P_SequenceStatements_comment=\
/**\n\
\ * Answer the tuple of statements that constitute the specified sequence.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A sequence.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple of statements.\n\
\ */\n
# SetStyleFunction : _=2
P_SetStyleFunction=Style_with_
P_SetStyleFunction_1=definition
P_SetStyleFunction_2=function
P_SetStyleFunction_comment=\
/**\n\
\ * Associate a styler function with this definition. The styling mechanism is\n\
\ * applied to each top-level phrase of a module to style its tokens. Of the\n\
\ * definitions that have stylers from visible modules, choose the most specific\n\
\ * definition, then choose the styler from most specific module within that set.\n\
\ * If there is no most specific definition or module, a special conflict style\n\
\ * will be produced instead, to indicate this conflict.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The definition for which invocations should be styled.\n\
\ * @param "{2}" "{4}"\n\
\ *        The function that applies the styling.\n\
\ * @returns "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ * @raises "{19}"\n\
\ * @raises "{20}"\n\
\ * @raises "{21}"\n\
\ * @raises "{22}"\n\
\ * @raises "{23}"\n\
\ * @raises "{24}"\n\
\ * @raises "{25}"\n\
\ * @raises "{26}"\n\
\ * @raises "{27}"\n\
\ * @raises "{28}"\n\
\ */\n
# SuperCastExpression : _=1
P_SuperCastExpression=_'s⁇expression
P_SuperCastExpression_1=aSupercast
P_SuperCastExpression_comment=\
/**\n\
\ * Answer a supercast''s base expression.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The supercast from which to extract the base expression\n\
\ * @returns "{3}"\n\
\ *    The supercast''s base expression, which provides the actual argument value\n\
\ *    to a message send.\n\
\ */\n
# SuperCastLookupType : _=1
P_SuperCastLookupType=_'s⁇lookup type
P_SuperCastLookupType_1=aSupercast
P_SuperCastLookupType_comment=\
/**\n\
\ * Answer a supercast''s lookup type, the type to be used for method lookup.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The supercast from which to extract the lookup type.\n\
\ * @returns "{3}"\n\
\ *    The type that the supercast uses during method lookup.\n\
\ */\n
# TokenClassifier : _=1
P_TokenClassifier=
P_TokenClassifier_1=
P_TokenClassifier_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ */\n
# TokenLexeme : _=1
P_TokenLexeme=_'s⁇lexeme
P_TokenLexeme_1=aToken
P_TokenLexeme_comment=\
/**\n\
\ * Answer the lexeme of the specified token. This is the source text that\n\
\ * produced the token.\n\
\ *\n\
\ * @category "Primitives" "Tokens" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A token.\n\
\ * @returns "{3}"\n\
\ *    The source text of '{'@param "{1}"}.\n\
\ */\n
# TokenLineNumber : _=1
P_TokenLineNumber=_'s⁇line number
P_TokenLineNumber_1=aToken
P_TokenLineNumber_comment=\
/**\n\
\ * Answer the one-based line number of the specified token within the module\n\
\ * that supplied it.\n\
\ *\n\
\ * @category "Primitives" "Tokens" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A token.\n\
\ * @returns "{3}"\n\
\ *    The one-based line number of '{'@param "{1}"}.\n\
\ */\n
# TokenStart : _=1
P_TokenStart=_'s⁇starting position
P_TokenStart_1=aToken
P_TokenStart_comment=\
/**\n\
\ * Answer the zero-based starting position of the specified token within the\n\
\ * module that supplied it.\n\
\ *\n\
\ * @category "Primitives" "Tokens" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A token.\n\
\ * @returns "{3}"\n\
\ *    The zero-based starting position of '{'@param "{1}"}.\n\
\ */\n
# VariableUseDeclaration : _=1
P_VariableUseDeclaration=_'s⁇declaration
P_VariableUseDeclaration_1=use
P_VariableUseDeclaration_comment=\
/**\n\
\ * Answer the declaration that introduced the entity referenced by the specified\n\
\ * variable use expression.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable use expression.\n\
\ * @returns "{3}"\n\
\ *    The requested declaration.\n\
\ */\n
# VariableUseToken : _=1
P_VariableUseToken=_'s⁇token
P_VariableUseToken_1=use
P_VariableUseToken_comment=\
/**\n\
\ * Answer the specified variable use expression''s token.\n\
\ *\n\
\ * @category "Primitives" "Phrases" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable use expression.\n\
\ * @returns "{3}"\n\
\ *    The token that names the referenced entity at the point of use.\n\
\ */\n
# BindPojoInstanceField : _=2
P_BindPojoInstanceField=_'s⁇_field
P_BindPojoInstanceField_1=aPojo
P_BindPojoInstanceField_2=fieldName
P_BindPojoInstanceField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the instance field uniquely specified by the given pojo and field\n\
\ * name.\n\
\ *\n\
\ * @category "Primitives" "Variables" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The pojo whose instance field should be bound to the answered\n\
\ *        variable.\n\
\ * @param "{2}" "{4}"\n\
\ *        The name of the desired field.\n\
\ * @returns "{5}"\n\
\ *    A variable bound to the specified instance field.\n\
\ * @raises "{6}"\n\
\ */\n
# BindPojoStaticField : _=2
P_BindPojoStaticField=_'s⁇_field
P_BindPojoStaticField_1=aPojoType
P_BindPojoStaticField_2=fieldName
P_BindPojoStaticField_comment=\
/**\n\
\ * Construct and answer a variable that, when read or written, will pass\n\
\ * through to the static field specified by the given pojo type and field\n\
\ * name.\n\
\ *\n\
\ * @category "Primitives" "Variables" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A pojo type whose static field should be bound to the answered\n\
\ *        variable.\n\
\ * @param "{2}" "{4}"\n\
\ *        The name of the desired field.\n\
\ * @returns "{5}"\n\
\ *    A variable bound to the specified static field.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CreatePojoArray : _=2
P_CreatePojoArray=new_[_]
P_CreatePojoArray_1=elementType
P_CreatePojoArray_2=length
P_CreatePojoArray_comment=\
/**\n\
\ * Compute and answer a pojo array with the specified element type and length.\n\
\ *\n\
\ * @category "Primitives" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The element type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The number of elements.\n\
\ * @returns "{5}"\n\
\ *    A new pojo array that can store and answer '{'@param "{2}"} elements conforming\n\
\ *    to '{'@param "{1}"}.\n\
\ */\n
# CreatePojoArrayType : _=2
P_CreatePojoArrayType=_[_]
P_CreatePojoArrayType_1=elementType
P_CreatePojoArrayType_2=cardinalityRequirement
P_CreatePojoArrayType_comment=\
/**\n\
\ * Construct and answer a pojo array type whose element type is '{'@param "{1}"}\n\
\ * and whose cardinality requirement is '{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Types" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The type of the elements of instances.\n\
\ * @param "{2}" "{4}"\n\
\ *        The range of sizes of instances.\n\
\ * @returns "{5}"\n\
\ *    The requested pojo array type.\n\
\ */\n
# CreatePojoConstructorFunction : _=2
P_CreatePojoConstructorFunction=constructor of_,⁇parameterized by_
P_CreatePojoConstructorFunction_1=aPojoType
P_CreatePojoConstructorFunction_2=parameterTypes
P_CreatePojoConstructorFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, constructs a new pojo of\n\
\ * the specified type.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java constructor,\n\
\ * if any, that accepts the specified number and types of arguments. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective constructor lookup and invocation, the following marshaling\n\
\ * rules are applied:\n\
\ *\n\
\ * <ul>\n\
\ * <li>'{'@type "Java byte"} is marshaled to '{'@code "java.lang.Byte.TYPE"}.</li>\n\
\ * <li>'{'@type "Java short"} is marshaled to '{'@code "java.lang.Short.TYPE"}.</li>\n\
\ * <li>'{'@type "Java int"} is marshaled to '{'@code "java.lang.Integer.TYPE"}.</li>\n\
\ * <li>'{'@type "Java long"} is marshaled to '{'@code "java.lang.Long.TYPE"}.</li>\n\
\ * <li>'{'@type "boolean"} is marshaled to '{'@code "java.lang.Boolean.TYPE"}.</li>\n\
\ * <li>'{'@type "Java char"} is marshaled to '{'@code "java.lang.Character.TYPE"}.</li>\n\
\ * <li>'{'@type "float"} is marshaled to '{'@code "java.lang.Float.TYPE"}.</li>\n\
\ * <li>'{'@type "double"} is marshaled to '{'@code "java.lang.Double.TYPE"}.</li>\n\
\ * <li>'{'@type "string"} is marshaled to '{'@code "java.lang.String"}.</li>\n\
\ * <li>'{'@method "_[_]"} is marshaled to '{'@code\n\
\ *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>\n\
\ * <li>'{'@method "_parameterized by_"} is marshaled to the reflected Java class\n\
\ *     or interface.</li>\n\
\ * <li>All other values are marshaled to\n\
\ *     '{'@code "com.avail.descriptor.representation.AvailObject"}.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Functions" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A pojo type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The parameter types accepted by the desired constructor.\n\
\ * @returns "{5}"\n\
\ *    The requested constructor invocation function.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# CreatePojoInstanceMethodFunction : _=3
P_CreatePojoInstanceMethodFunction=method_._,⁇parameterized by_
P_CreatePojoInstanceMethodFunction_1=aPojoType
P_CreatePojoInstanceMethodFunction_2=methodName
P_CreatePojoInstanceMethodFunction_3=parameterTypes
P_CreatePojoInstanceMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * instance method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. The receiver is specified as the first argument. To\n\
\ * establish type conformance between Avail types and Java types for the purpose\n\
\ * of reflective method lookup and invocation, the following marshaling rules\n\
\ * are applied:\n\
\ *\n\
\ * <ul>\n\
\ * <li>'{'@type "Java byte"} is marshaled to '{'@code "java.lang.Byte.TYPE"}.</li>\n\
\ * <li>'{'@type "Java short"} is marshaled to '{'@code "java.lang.Short.TYPE"}.</li>\n\
\ * <li>'{'@type "Java int"} is marshaled to '{'@code "java.lang.Integer.TYPE"}.</li>\n\
\ * <li>'{'@type "Java long"} is marshaled to '{'@code "java.lang.Long.TYPE"}.</li>\n\
\ * <li>'{'@type "boolean"} is marshaled to '{'@code "java.lang.Boolean.TYPE"}.</li>\n\
\ * <li>'{'@type "Java char"} is marshaled to '{'@code "java.lang.Character.TYPE"}.</li>\n\
\ * <li>'{'@type "float"} is marshaled to '{'@code "java.lang.Float.TYPE"}.</li>\n\
\ * <li>'{'@type "double"} is marshaled to '{'@code "java.lang.Double.TYPE"}.</li>\n\
\ * <li>'{'@type "string"} is marshaled to '{'@code "java.lang.String"}.</li>\n\
\ * <li>'{'@method "_[_]"} is marshaled to '{'@code\n\
\ *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>\n\
\ * <li>'{'@method "_parameterized by_"} is marshaled to the reflected Java class\n\
\ *     or interface.</li>\n\
\ * <li>All other values are marshaled to\n\
\ *     '{'@code "com.avail.descriptor.representation.AvailObject"}.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Functions" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A pojo type.\n\
\ * @param "{2}" "{5}"\n\
\ *        The name of the desired method.\n\
\ * @param "{3}" "{6}"\n\
\ *        The parameter types accepted by the desired method.\n\
\ * @returns "{7}"\n\
\ *    The requested instance method invocation function.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# CreatePojoStaticMethodFunction : _=3
P_CreatePojoStaticMethodFunction=static method_._,⁇parameterized by_
P_CreatePojoStaticMethodFunction_1=aPojoType
P_CreatePojoStaticMethodFunction_2=methodName
P_CreatePojoStaticMethodFunction_3=parameterTypes
P_CreatePojoStaticMethodFunction_comment=\
/**\n\
\ * Construct and answer a function that, when applied with arguments\n\
\ * corresponding to the specified parameter types, invokes a particular\n\
\ * static method.\n\
\ *\n\
\ * The answered function adapts a reflective invocation of the Java method,\n\
\ * if any, that has the specified name and accepts the specified number and\n\
\ * types of arguments. To establish type conformance between Avail types and\n\
\ * Java types for the purpose of reflective method lookup and invocation, the\n\
\ * following marshaling rules are applied:\n\
\ *\n\
\ * <ul>\n\
\ * <li>'{'@type "Java byte"} is marshaled to '{'@code "java.lang.Byte.TYPE"}.</li>\n\
\ * <li>'{'@type "Java short"} is marshaled to '{'@code "java.lang.Short.TYPE"}.</li>\n\
\ * <li>'{'@type "Java int"} is marshaled to '{'@code "java.lang.Integer.TYPE"}.</li>\n\
\ * <li>'{'@type "Java long"} is marshaled to '{'@code "java.lang.Long.TYPE"}.</li>\n\
\ * <li>'{'@type "boolean"} is marshaled to '{'@code "java.lang.Boolean.TYPE"}.</li>\n\
\ * <li>'{'@type "Java char"} is marshaled to '{'@code "java.lang.Character.TYPE"}.</li>\n\
\ * <li>'{'@type "float"} is marshaled to '{'@code "java.lang.Float.TYPE"}.</li>\n\
\ * <li>'{'@type "double"} is marshaled to '{'@code "java.lang.Double.TYPE"}.</li>\n\
\ * <li>'{'@type "string"} is marshaled to '{'@code "java.lang.String"}.</li>\n\
\ * <li>'{'@method "_[_]"} is marshaled to '{'@code\n\
\ *     "java.lang.reflect.Array.newInstance().getClass()"}.</li>\n\
\ * <li>'{'@method "_parameterized by_"} is marshaled to the reflected Java class\n\
\ *     or interface.</li>\n\
\ * <li>All other values are marshaled to\n\
\ *     '{'@code "com.avail.descriptor.representation.AvailObject"}.</li>\n\
\ * </ul>\n\
\ *\n\
\ * @category "Primitives" "Functions" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A pojo type.\n\
\ * @param "{2}" "{5}"\n\
\ *        The name of the desired method.\n\
\ * @param "{3}" "{6}"\n\
\ *        The parameter types accepted by the desired method.\n\
\ * @returns "{7}"\n\
\ *    The requested static method invocation function.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# CreatePojoType : _=2
P_CreatePojoType=_parameterized by_
P_CreatePojoType_1=javaName
P_CreatePojoType_2=typeParameters
P_CreatePojoType_comment=\
/**\n\
\ * Construct and answer a fully parameterized pojo type.\n\
\ *\n\
\ * @category "Primitives" "Types" "POJO" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The fully qualified name of the Java class or interface.\n\
\ * @param "{2}" "{4}"\n\
\ *        The type arguments. The cardinality of this tuple must agree with the\n\
\ *        number of type parameters required by the Java class or interface.\n\
\ * @returns "{5}"\n\
\ *    The requested pojo type.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CreateTupleFromPojoArray : _=1
P_CreateTupleFromPojoArray=_→tuple
P_CreateTupleFromPojoArray_1=aPojoArray
P_CreateTupleFromPojoArray_comment=\
/**\n\
\ * Construct and answer a tuple whose elements are sourced from the specified\n\
\ * pojo array.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "POJO" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A pojo array.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple.\n\
\ */\n
# PojoArrayGet : _=2
P_PojoArrayGet=_[_]
P_PojoArrayGet_1=anArray
P_PojoArrayGet_2=index
P_PojoArrayGet_comment=\
/**\n\
\ * Answer the '{'@param "{2}"}-th element of the specified pojo array.\n\
\ *\n\
\ * @category "Primitives" "POJO" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A pojo array.\n\
\ * @param "{2}" "{4}"\n\
\ *        A one-based index into the pojo array.\n\
\ * @returns "{5}"\n\
\ *    The '{'@param "{2}"}-th element of '{'@param "{1}"}.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# PojoArrayLength : _=1
P_PojoArrayLength=`|_`|
P_PojoArrayLength_1=anArray
P_PojoArrayLength_comment=\
/**\n\
\ * Answer the number of elements contained by the specified pojo array.\n\
\ *\n\
\ * @category "Primitives" "POJO" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A pojo array.\n\
\ * @returns "{3}"\n\
\ *    The size of the argument.\n\
\ */\n
# PojoArraySet : _=3
P_PojoArraySet=_[_]:=_
P_PojoArraySet_1=anArray
P_PojoArraySet_2=index
P_PojoArraySet_3=value
P_PojoArraySet_comment=\
/**\n\
\ * Mutate the specified pojo array such that its '{'@param "{2}"}-th element is\n\
\ * overwritten by '{'@param "{3}"}.\n\
\ *\n\
\ * @category "Primitives" "POJO" "Mutators"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A pojo array.\n\
\ * @param "{2}" "{5}"\n\
\ *        A one-based index into the pojo array.\n\
\ * @param "{3}" "{6}"\n\
\ *        The value that should be written into the pojo array.\n\
\ * @returns "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ */\n
# PojoArrayTypeContentType : _=1
P_PojoArrayTypeContentType=_'s⁇element type
P_PojoArrayTypeContentType_1=pojoArrayType
P_PojoArrayTypeContentType_comment=\
/**\n\
\ * Answer the element type of the specified pojo array type.\n\
\ *\n\
\ * @category "Primitives" "Types" "POJO" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A pojo array type.\n\
\ * @returns "{3}"\n\
\ *    The element type of '{'@param "{1}"}.\n\
\ */\n
# PojoArrayTypeSizes : _=1
P_PojoArrayTypeSizes=`|`|_`|`|
P_PojoArrayTypeSizes_1=pojoArrayType
P_PojoArrayTypeSizes_comment=\
/**\n\
\ * Answer the cardinality restriction of the specified pojo array type.\n\
\ *\n\
\ * @category "Primitives" "Types" "POJO" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A pojo array type.\n\
\ * @returns "{3}"\n\
\ *    The cardinality restriction of '{'@param "{1}"}.\n\
\ */\n
# ExecuteAttachedExternalProcess : _=6
P_ExecuteAttachedExternalProcess=
P_ExecuteAttachedExternalProcess_1=
P_ExecuteAttachedExternalProcess_2=
P_ExecuteAttachedExternalProcess_3=
P_ExecuteAttachedExternalProcess_4=
P_ExecuteAttachedExternalProcess_5=
P_ExecuteAttachedExternalProcess_6=
P_ExecuteAttachedExternalProcess_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ */\n
# ExecuteDetachedExternalProcess : _=6
P_ExecuteDetachedExternalProcess=
P_ExecuteDetachedExternalProcess_1=
P_ExecuteDetachedExternalProcess_2=
P_ExecuteDetachedExternalProcess_3=
P_ExecuteDetachedExternalProcess_4=
P_ExecuteDetachedExternalProcess_5=
P_ExecuteDetachedExternalProcess_6=
P_ExecuteDetachedExternalProcess_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @param "{3}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CompiledCodeFunctionType : _=1
P_CompiledCodeFunctionType=_'s⁇function type
P_CompiledCodeFunctionType_1=aFunctionImplementation
P_CompiledCodeFunctionType_comment=\
/**\n\
\ * Answer the function type of any function that could close the specified\n\
\ * function implementation.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s function type.\n\
\ */\n
# CompiledCodeLiterals : _=1
P_CompiledCodeLiterals=_'s⁇literals
P_CompiledCodeLiterals_1=aFunctionImplementation
P_CompiledCodeLiterals_comment=\
/**\n\
\ * Answer the literals that support a function implementation''s algorithm.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    A tuple containing the argument''s supporting literals.\n\
\ */\n
# CompiledCodeNumArgs : _=1
P_CompiledCodeNumArgs=_'s⁇arity
P_CompiledCodeNumArgs_1=aFunctionImplementation
P_CompiledCodeNumArgs_comment=\
/**\n\
\ * Answer the arity of a function implementation. This is the number of\n\
\ * parameters accepted by the function implementation.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s arity.\n\
\ */\n
# CompiledCodeNumLocals : _=1
P_CompiledCodeNumLocals=`|_'s⁇local variables`|
P_CompiledCodeNumLocals_1=aFunctionImplementation
P_CompiledCodeNumLocals_comment=\
/**\n\
\ * Answer the number of local variables used by a function implementation.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The number of locals used by the argument.\n\
\ */\n
# CompiledCodeNumOuters : _=1
P_CompiledCodeNumOuters=`|_'s⁇outer variables`|
P_CompiledCodeNumOuters_1=aFunctionImplementation
P_CompiledCodeNumOuters_comment=\
/**\n\
\ * Answer the number of outer variables used by a function implementation.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The number of outers used by the argument.\n\
\ */\n
# CompiledCodeNumStackSlots : _=1
P_CompiledCodeNumStackSlots=_'s⁇maximum stack depth
P_CompiledCodeNumStackSlots_1=aFunctionImplementation
P_CompiledCodeNumStackSlots_comment=\
/**\n\
\ * Answer the maximum stack depth of a function implementation. This does not\n\
\ * account for arguments and local variables (which occupy the "bottom" stack\n\
\ * slots).\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s maximum stack depth.\n\
\ */\n
# CompiledCodeNybbles : _=1
P_CompiledCodeNybbles=_'s⁇nybblecodes
P_CompiledCodeNybbles_1=aFunctionImplementation
P_CompiledCodeNybbles_comment=\
/**\n\
\ * Answer the Level One instructions that describe a function implementation''s\n\
\ * algorithm as a tuple of nybblecodes.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s nybblecodes.\n\
\ */\n
# CompiledCodeOfFunction : _=1
P_CompiledCodeOfFunction=_'s⁇implementation
P_CompiledCodeOfFunction_1=aFunction
P_CompiledCodeOfFunction_comment=\
/**\n\
\ * Answer the implementation of the specified function. A function''s\n\
\ * implementation comprises its nybblecodes, its literals, its primitive\n\
\ * linkage (if any), its function type, and various statistics.\n\
\ *\n\
\ * @category "Primitives" "Functions" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function.\n\
\ * @returns "{3}"\n\
\ *    The argument''s implementation.\n\
\ */\n
# CompiledCodePrimitiveName : _=1
P_CompiledCodePrimitiveName=_'s⁇primitive name
P_CompiledCodePrimitiveName_1=aFunctionImplementation
P_CompiledCodePrimitiveName_comment=\
/**\n\
\ * Answer the name of the primitive linked to the specified function\n\
\ * implementation. If the function implementation does not have\n\
\ * primitive linkage, then answer the empty string.\n\
\ *\n\
\ * @category "Primitives" "Function Implementations" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A function implementation.\n\
\ * @returns "{3}"\n\
\ *    The argument''s primitive name, or the empty string if the argument does\n\
\ *    not have primitive linkage.\n\
\ */\n
# SetCompiledCodeName : _=2
P_SetCompiledCodeName=Set name of function implementation_to_
P_SetCompiledCodeName_1=rawFunction
P_SetCompiledCodeName_2=name
P_SetCompiledCodeName_comment=\
/**\n\
\ * Set the descriptive name of the given function implementation.  This value is\n\
\ * presented in stack traces and other symbolic circumstances.  This\n\
\ * automatically sets the names of the sub-functions in a systematic way.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The function implementation to name.\n\
\ * @param "{2}" "{4}"\n\
\ *        A string used to name the function implementation.\n\
\ * @returns "{5}"\n\
\ */\n
# CreateSetType : _=2
P_CreateSetType={_`|_}
P_CreateSetType_1=elementType
P_CreateSetType_2=cardinalityType
P_CreateSetType_comment=\
/**\n\
\ * Construct and answer a set type with the specified element type and range of\n\
\ * cardinalities.\n\
\ *\n\
\ * @category "Primitives" "Types" "Sets" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The element type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The range of allowed cardinalities.\n\
\ * @returns "{5}"\n\
\ *    The requested set type. Instances have elements that conform to\n\
\ *    '{'@param "{1}"} and cardinalities that conform to '{'@param\n\
\ *    "{2}"}.\n\
\ */\n
# ElementInSet : _=2
P_ElementInSet=_∈_
P_ElementInSet_1=element
P_ElementInSet_2=aSet
P_ElementInSet_comment=\
/**\n\
\ * Is '{'@param "{1}"} an element of '{'@param "{2}"}?\n\
\ *\n\
\ * @category "Primitives" "Sets" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        An arbitrary value.\n\
\ * @param "{2}" "{4}"\n\
\ *        A set.\n\
\ * @returns "{5}"\n\
\ *    `true` if '{'@param "{1}"} is an element of '{'@param "{2}"}, `false`\n\
\ *    otherwise.\n\
\ */\n
# SetDifference : _=2
P_SetDifference=_\\\\_
P_SetDifference_1=minuend
P_SetDifference_2=subtrahend
P_SetDifference_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of '{'@param "{1}"} and\n\
\ * '{'@param "{2}"} (also the relative complement of '{'@param "{2}"} in '{'@param "{1}"}).\n\
\ * This is a set that contains only those elements present in '{'@param "{1}"}\n\
\ * but not in '{'@param "{2}"}.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The minuend.\n\
\ * @param "{2}" "{4}"\n\
\ *        The subtrahend.\n\
\ * @returns "{5}"\n\
\ *    The asymmetric set difference of '{'@param "{1}"} and '{'@param "{2}"}.\n\
\ */\n
# SetIntersection : _=2
P_SetIntersection=_∩_
P_SetIntersection_1=
P_SetIntersection_2=
P_SetIntersection_comment=\
/**\n\
\ * Compute and answer the set intersection of the arguments. This is a set that\n\
\ * contains only those elements present in each set.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set.\n\
\ * @param "{2}" "{4}"\n\
\ *        A set.\n\
\ * @returns "{5}"\n\
\ *    The set intersection of the arguments.\n\
\ */\n
# SetIsSubset : _=2
P_SetIsSubset=_⊆_
P_SetIsSubset_1=
P_SetIsSubset_2=
P_SetIsSubset_comment=\
/**\n\
\ * Is '{'@param "{1}"} a subset of or equal to '{'@param "{2}"}?\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics" "Relations"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set.\n\
\ * @param "{2}" "{4}"\n\
\ *        A set.\n\
\ * @returns "{5}"\n\
\ *    `true` if '{'@param "{1}"} is a subset of or equal to '{'@param "{2}"},\n\
\ *    `false` otherwise.\n\
\ */\n
# SetSize : _=1
P_SetSize=`|_`|
P_SetSize_1=aSet
P_SetSize_comment=\
/**\n\
\ * Answer the cardinality of the specified set.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A set.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality.\n\
\ */\n
# SetToTuple : _=1
P_SetToTuple=_→tuple
P_SetToTuple_1=aSet
P_SetToTuple_comment=\
/**\n\
\ * Construct and answer a tuple that arbitrarily orders the elements of the\n\
\ * specified set. The conversion is unstable, and thus different calls given\n\
\ * the same argument may produce different orderings.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Tuples" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A set.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple.\n\
\ */\n
# SetTypeElementType : _=1
P_SetTypeElementType=_'s⁇element|member type
P_SetTypeElementType_1=aSetType
P_SetTypeElementType_comment=\
/**\n\
\ * Answer the element type of the specified set type. This is the most specific\n\
\ * type to which all elements of instances must conform.\n\
\ *\n\
\ * @category "Primitives" "Types" "Sets" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A set type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s element type.\n\
\ */\n
# SetTypeSizes : _=1
P_SetTypeSizes=`|`|_`|`|
P_SetTypeSizes_1=aSetType
P_SetTypeSizes_comment=\
/**\n\
\ * Answer the acceptable range of cardinalities for instances of the specified\n\
\ * set type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Sets" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A set type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# SetUnion : _=2
P_SetUnion=_∪_
P_SetUnion_1=
P_SetUnion_2=
P_SetUnion_comment=\
/**\n\
\ * Compute and answer the set union of the arguments. This is a set that\n\
\ * contains the elements of both sets.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set.\n\
\ * @param "{2}" "{4}"\n\
\ *        A set.\n\
\ * @returns "{5}"\n\
\ *    The set union of the arguments.\n\
\ */\n
# SetWith : _=2
P_SetWith=_+_
P_SetWith_1=aSet
P_SetWith_2=newElement
P_SetWith_comment=\
/**\n\
\ * Compute and answer the set union of the specified set and a set containing\n\
\ * the supplied element.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set.\n\
\ * @param "{2}" "{4}"\n\
\ *        The element that must be present in the resultant set.\n\
\ * @returns "{5}"\n\
\ *    A set that contains the same elements as '{'@param "{1}"} but also\n\
\ *    contains '{'@param "{2}"}.\n\
\ */\n
# SetWithout : _=2
P_SetWithout=_-_
P_SetWithout_1=aSet
P_SetWithout_2=oldElement
P_SetWithout_comment=\
/**\n\
\ * Compute and answer the asymmetric set difference of the specified set and a\n\
\ * set containing the supplied element.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A set.\n\
\ * @param "{2}" "{4}"\n\
\ *        The element that must not be present in the resultant set.\n\
\ * @returns "{5}"\n\
\ *    A set that contains the same elements as '{'@param "{1}"} except that\n\
\ *    it does not contain '{'@param "{2}"}.\n\
\ */\n
# TupleToSet : _=1
P_TupleToSet=_→set
P_TupleToSet_1=aTuple
P_TupleToSet_comment=\
/**\n\
\ * Construct and answer a set that uniquely (by definition) contains the same\n\
\ * elements as the specified tuple.\n\
\ *\n\
\ * @category "Primitives" "Sets" "Tuples" "Conversions"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple.\n\
\ * @returns "{3}"\n\
\ *    The requested set.\n\
\ */\n
# ServerSocketAccept : _=5
P_ServerSocketAccept=
P_ServerSocketAccept_1=
P_ServerSocketAccept_2=
P_ServerSocketAccept_3=
P_ServerSocketAccept_4=
P_ServerSocketAccept_5=
P_ServerSocketAccept_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ */\n
# ServerSocketAddress : _=1
P_ServerSocketAddress=
P_ServerSocketAddress_1=
P_ServerSocketAddress_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# ServerSocketClose : _=1
P_ServerSocketClose=
P_ServerSocketClose_1=
P_ServerSocketClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# ServerSocketIPv4Bind : _=4
P_ServerSocketIPv4Bind=
P_ServerSocketIPv4Bind_1=
P_ServerSocketIPv4Bind_2=
P_ServerSocketIPv4Bind_3=
P_ServerSocketIPv4Bind_4=
P_ServerSocketIPv4Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        TODO\n\
\ * @param "{2}" "{6}"\n\
\ *        TODO\n\
\ * @param "{3}" "{7}"\n\
\ *        TODO\n\
\ * @param "{4}" "{8}"\n\
\ *        TODO\n\
\ * @returns "{9}"\n\
\ *    TODO\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# ServerSocketIPv6Bind : _=4
P_ServerSocketIPv6Bind=
P_ServerSocketIPv6Bind_1=
P_ServerSocketIPv6Bind_2=
P_ServerSocketIPv6Bind_3=
P_ServerSocketIPv6Bind_4=
P_ServerSocketIPv6Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        TODO\n\
\ * @param "{2}" "{6}"\n\
\ *        TODO\n\
\ * @param "{3}" "{7}"\n\
\ *        TODO\n\
\ * @param "{4}" "{8}"\n\
\ *        TODO\n\
\ * @returns "{9}"\n\
\ *    TODO\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# ServerSocketOpen : _=1
P_ServerSocketOpen=
P_ServerSocketOpen_1=
P_ServerSocketOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# ServerSocketSetOption : _=2
P_ServerSocketSetOption=
P_ServerSocketSetOption_1=
P_ServerSocketSetOption_2=
P_ServerSocketSetOption_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# SocketClose : _=1
P_SocketClose=
P_SocketClose_1=
P_SocketClose_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# SocketIPv4Bind : _=3
P_SocketIPv4Bind=
P_SocketIPv4Bind_1=
P_SocketIPv4Bind_2=
P_SocketIPv4Bind_3=
P_SocketIPv4Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# SocketIPv4Connect : _=6
P_SocketIPv4Connect=
P_SocketIPv4Connect_1=
P_SocketIPv4Connect_2=
P_SocketIPv4Connect_3=
P_SocketIPv4Connect_4=
P_SocketIPv4Connect_5=
P_SocketIPv4Connect_6=
P_SocketIPv4Connect_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{7}"\n\
\ *        TODO\n\
\ * @param "{2}" "{8}"\n\
\ *        TODO\n\
\ * @param "{3}" "{9}"\n\
\ *        TODO\n\
\ * @param "{4}" "{10}"\n\
\ *        TODO\n\
\ * @param "{5}" "{11}"\n\
\ *        TODO\n\
\ * @param "{6}" "{12}"\n\
\ *        TODO\n\
\ * @returns "{13}"\n\
\ *    TODO\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ */\n
# SocketIPv6Bind : _=3
P_SocketIPv6Bind=
P_SocketIPv6Bind_1=
P_SocketIPv6Bind_2=
P_SocketIPv6Bind_3=
P_SocketIPv6Bind_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# SocketIPv6Connect : _=6
P_SocketIPv6Connect=
P_SocketIPv6Connect_1=
P_SocketIPv6Connect_2=
P_SocketIPv6Connect_3=
P_SocketIPv6Connect_4=
P_SocketIPv6Connect_5=
P_SocketIPv6Connect_6=
P_SocketIPv6Connect_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{7}"\n\
\ *        TODO\n\
\ * @param "{2}" "{8}"\n\
\ *        TODO\n\
\ * @param "{3}" "{9}"\n\
\ *        TODO\n\
\ * @param "{4}" "{10}"\n\
\ *        TODO\n\
\ * @param "{5}" "{11}"\n\
\ *        TODO\n\
\ * @param "{6}" "{12}"\n\
\ *        TODO\n\
\ * @returns "{13}"\n\
\ *    TODO\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ * @raises "{16}"\n\
\ * @raises "{17}"\n\
\ * @raises "{18}"\n\
\ */\n
# SocketLocalPeer : _=1
P_SocketLocalPeer=
P_SocketLocalPeer_1=
P_SocketLocalPeer_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# SocketOpen : _=1
P_SocketOpen=
P_SocketOpen_1=
P_SocketOpen_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ */\n
# SocketRead : _=5
P_SocketRead=
P_SocketRead_1=
P_SocketRead_2=
P_SocketRead_3=
P_SocketRead_4=
P_SocketRead_5=
P_SocketRead_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ */\n
# SocketRemotePeer : _=1
P_SocketRemotePeer=
P_SocketRemotePeer_1=
P_SocketRemotePeer_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# SocketSetOption : _=2
P_SocketSetOption=
P_SocketSetOption_1=
P_SocketSetOption_2=
P_SocketSetOption_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# SocketShutdownInput : _=1
P_SocketShutdownInput=
P_SocketShutdownInput_1=
P_SocketShutdownInput_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# SocketShutdownOutput : _=1
P_SocketShutdownOutput=
P_SocketShutdownOutput_1=
P_SocketShutdownOutput_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ */\n
# SocketWrite : _=5
P_SocketWrite=
P_SocketWrite_1=
P_SocketWrite_2=
P_SocketWrite_3=
P_SocketWrite_4=
P_SocketWrite_5=
P_SocketWrite_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        TODO\n\
\ * @param "{2}" "{7}"\n\
\ *        TODO\n\
\ * @param "{3}" "{8}"\n\
\ *        TODO\n\
\ * @param "{4}" "{9}"\n\
\ *        TODO\n\
\ * @param "{5}" "{10}"\n\
\ *        TODO\n\
\ * @returns "{11}"\n\
\ *    TODO\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ */\n
# ConcatenateTuples : _=1
P_ConcatenateTuples=concatenate_
P_ConcatenateTuples_1=tupleOfTuples
P_ConcatenateTuples_comment=\
/**\n\
\ * Construct and answer a tuple that is the left-to-right concatenation of all\n\
\ * elements (i.e. tuples) of the specified tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of tuples.\n\
\ * @returns "{3}"\n\
\ *    The requested tuple.\n\
\ */\n
# CreateTupleType : _=3
P_CreateTupleType=<_,_`…`|_>
P_CreateTupleType_1=leadingTypes
P_CreateTupleType_2=defaultType
P_CreateTupleType_3=cardinalityType
P_CreateTupleType_comment=\
/**\n\
\ * Construct and answer a tuple type with the specified leading element types,\n\
\ * default element type, and range of cardinalities.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The leading types.\n\
\ * @param "{2}" "{5}"\n\
\ *        The default type.\n\
\ * @param "{3}" "{6}"\n\
\ *        The range of allowed cardinalities.\n\
\ * @returns "{7}"\n\
\ *    The requested tuple type.\n\
\ */\n
# ExtractSubtuple : _=3
P_ExtractSubtuple=_[_.._]
P_ExtractSubtuple_1=aTuple
P_ExtractSubtuple_2=sliceStart
P_ExtractSubtuple_3=sliceEnd
P_ExtractSubtuple_comment=\
/**\n\
\ * Construct and answer a slice (i.e. subtuple) of the specified tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Transformers" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A tuple.\n\
\ * @param "{2}" "{5}"\n\
\ *        The one-based start index (inclusive) of the desired slice.\n\
\ * @param "{3}" "{6}"\n\
\ *        The one-based end index (inclusive) of the desired slice.\n\
\ * @returns "{7}"\n\
\ *    The requested tuple.\n\
\ * @raises "{8}"\n\
\ */\n
# IntegerIntervalTuple : _=3
P_IntegerIntervalTuple=_to_by_
P_IntegerIntervalTuple_1=start
P_IntegerIntervalTuple_2=end
P_IntegerIntervalTuple_3=delta
P_IntegerIntervalTuple_comment=\
/**\n\
\ * Construct and answer an integer interval tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The first value in the tuple.\n\
\ * @param "{2}" "{5}"\n\
\ *        The last allowed value in the tuple. This value will only be the\n\
\ *        last value in the tuple if the difference between the first and last\n\
\ *        values is a multiple of the step size.\n\
\ * @param "{3}" "{6}"\n\
\ *        The step size of the interval, which must not be zero.\n\
\ * @returns "{7}"\n\
\ *    The requested tuple.\n\
\ * @raises "{8}"\n\
\ *    If '{'@param "{3}"} is zero.\n\
\ */\n
# RepeatedElementTuple : _=2
P_RepeatedElementTuple=_occurrences⁇of_
P_RepeatedElementTuple_1=count
P_RepeatedElementTuple_2=value
P_RepeatedElementTuple_comment=\
/**\n\
\ * Construct and answer a tuple whose elements are each '{'@param "value"}.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The number of elements in the resulting tuple.\n\
\ * @param "{2}" "{4}"\n\
\ *        The repeated value.\n\
\ * @returns "{5}"\n\
\ *    A tuple containing '{'@param "{1}"} occurrences of '{'@param "{2}"}.\n\
\ * @raises "{6}"\n\
\ */\n
# ReverseTuple : _=1
P_ReverseTuple=_reversed
P_ReverseTuple_1=aTuple
P_ReverseTuple_comment=\
/**\n\
\ * Reverses the order of the given tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple.\n\
\ * @returns "{3}"\n\
\ *    A tuple that is the reverse of the original tuple\n\
\ */\n
# TupleAppend : _=2
P_TupleAppend=
P_TupleAppend_1=
P_TupleAppend_2=
P_TupleAppend_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n
# TupleAt : _=2
P_TupleAt=_[_]
P_TupleAt_1=aTuple
P_TupleAt_2=index
P_TupleAt_comment=\
/**\n\
\ * Answer the '{'@param "{2}"}-th element of '{'@param "{1}"}.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A tuple.\n\
\ * @param "{2}" "{4}"\n\
\ *        The one-based index of the desired element.\n\
\ * @returns "{5}"\n\
\ *    The requested element.\n\
\ * @raises "{6}"\n\
\ */\n
# TupleReplaceAt : _=3
P_TupleReplaceAt=_[_]→_
P_TupleReplaceAt_1=aTuple
P_TupleReplaceAt_2=index
P_TupleReplaceAt_3=value
P_TupleReplaceAt_comment=\
/**\n\
\ * Construct and answer a tuple based on the one provided but such that its\n\
\ * '{'@param "{2}"}-th element is '{'@param "{3}"}.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A tuple.\n\
\ * @param "{2}" "{5}"\n\
\ *        The one-based index of the element that should (potentially) differ\n\
\ *        in the resultant tuple.\n\
\ * @param "{3}" "{6}"\n\
\ *        The "replacement" value.\n\
\ * @returns "{7}"\n\
\ *    The requested tuple.\n\
\ * @raises "{8}"\n\
\ */\n
# TupleReplaceAtNAry : _=3
P_TupleReplaceAtNAry=_«[_]»→_
P_TupleReplaceAtNAry_1=aTuple
P_TupleReplaceAtNAry_2=pathTuple
P_TupleReplaceAtNAry_3=newValue
P_TupleReplaceAtNAry_comment=\
/**\n\
\ * Replace the value with a new value in the tuple at the location indicated\n\
\ * by the path tuple. If the replacement value type differs from the type of\n\
\ * the value at the replacement location, the answered tuple will have a\n\
\ * different type than the original source tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The target tuple.\n\
\ * @param "{2}" "{5}"\n\
\ *        The tuple providing the path to follow to reach the location\n\
\ *        to be updated.\n\
\ * @param "{3}" "{6}"\n\
\ *        The replacement value.\n\
\ * @returns "{7}"\n\
\ *    A new tuple with the new value installed at the proposed location.\n\
\ * @raises "{8}"\n\
\ *    If an index in the {2} attempts to access an index that is greater\n\
\ *    than the size of the targeted tuple within {1}.\n\
\ * @raises "{9}"\n\
\ *    If an index in the {2}, that is not the final index where the\n\
\ *    replacement is made, attempts to access a value as if it were a\n\
\ *    map or a tuple but the value at that location is neither.\n\
\ * @raises "{10}"\n\
\ *    If an index in the {2} attempts to access a map in {1} with a key\n\
\ *    not in the map.\n\
\ */\n
# TupleReplaceRange : _=4
P_TupleReplaceRange=_[_.._]→_
P_TupleReplaceRange_1=aTuple
P_TupleReplaceRange_2=startIndex
P_TupleReplaceRange_3=endIndex
P_TupleReplaceRange_4=replacementSubtuple
P_TupleReplaceRange_comment=\
/**\n\
\ * Given a tuple and range of indices, produce a new tuple that has that range\n\
\ * replaced by the given replacement tuple.  The replacement does not need to be\n\
\ * the same size as the range.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{5}"\n\
\ *        The basis tuple.\n\
\ * @param "{2}" "{6}"\n\
\ *        The inclusive start of the range to replace.  This may be as high as\n\
\ *        the tuple''s size plus one, to indicate the replacement should be\n\
\ *        appended.\n\
\ * @param "{3}" "{7}"\n\
\ *        The inclusive end of the range to replace.  This may be as low as one\n\
\ *        less than the start.\n\
\ * @param "{4}" "{8}"\n\
\ *        The replacement subtuple.\n\
\ * @returns "{9}"\n\
\ *    A tuple consisting of the first '{'@param "{2}"} - 1 elements of\n\
\ *    '{'@param "{1}"}, followed by the elements of\n\
\ *    '{'@param "{4}"}, followed by the elements of\n\
\ *    '{'@param "{1}"} starting at '{'@param "{3}"} + 1,\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# TupleReplaceRangeAtNary : _=5
P_TupleReplaceRangeAtNary=_«[_]»[_.._]→_
P_TupleReplaceRangeAtNary_1=aTuple
P_TupleReplaceRangeAtNary_2=pathTuple
P_TupleReplaceRangeAtNary_3=sliceStartIndex
P_TupleReplaceRangeAtNary_4=sliceEndIndex
P_TupleReplaceRangeAtNary_5=newValues
P_TupleReplaceRangeAtNary_comment=\
/**\n\
\ * Given a multi-level data structure where the outermost layer is a tuple, the\n\
\ * intervening layers are maps or tuples, and the innermost target reached by\n\
\ * the provided path is a tuple, answer a variant of the data structure such\n\
\ * that the indicated slice of the innermost target has been replaced with the\n\
\ * provided tuple. The replacement tuple can differ in size from the slice.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Maps" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{6}"\n\
\ *        The target tuple.\n\
\ * @param "{2}" "{7}"\n\
\ *        The tuple providing the path to follow to reach the location\n\
\ *        to be updated.\n\
\ * @param "{3}" "{8}"\n\
\ *        The start index of the tuple slice to be replaced.\n\
\ * @param "{4}" "{9}"\n\
\ *        The end index of the tuple slice to be replaced.\n\
\ * @param "{5}" "{10}"\n\
\ *        The tuple containing the replacement values.\n\
\ * @returns "{11}"\n\
\ *    a new tuple with the new values installed at the proposed locations.\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ * @raises "{14}"\n\
\ * @raises "{15}"\n\
\ */\n
# TupleSize : _=1
P_TupleSize=`|_`|
P_TupleSize_1=aTuple
P_TupleSize_comment=\
/**\n\
\ * Answer the cardinality of the specified tuple.\n\
\ *\n\
\ * @category "Primitives" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality.\n\
\ */\n
# TupleSwapElements : _=3
P_TupleSwapElements=_[_↔_]
P_TupleSwapElements_1=aTuple
P_TupleSwapElements_2=index1
P_TupleSwapElements_3=index2
P_TupleSwapElements_comment=\
/**\n\
\ * Produce a tuple like the given tuple, but with the elements at the given\n\
\ * indices interchanged.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The initial tuple.\n\
\ * @param "{2}" "{5}"\n\
\ *        An index into the tuple.\n\
\ * @param "{3}" "{6}"\n\
\ *        Another index into the tuple.\n\
\ * @returns "{7}"\n\
\ *    A tuple like the input, but with the specified indices swapped.\n\
\ * @raises "{8}"\n\
\ */\n
# TupleTypeAt : _=2
P_TupleTypeAt=_[_]
P_TupleTypeAt_1=aTupleType
P_TupleTypeAt_2=index
P_TupleTypeAt_comment=\
/**\n\
\ * Answer the element type of the '{'@param "{2}"}-th element of instances of the\n\
\ * specified type. If '{'@param "{2}"} is out of bounds, then answer\n\
\ * '{'@type "⊥"}.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A tuple type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The index of the desired element type.\n\
\ * @returns "{5}"\n\
\ *    The requested element type, or ⊥ if '{'@param "{2}"} is out of bounds.\n\
\ */\n
# TupleTypeAtThrough : _=3
P_TupleTypeAtThrough=∪_[_.._]
P_TupleTypeAtThrough_1=aTupleType
P_TupleTypeAtThrough_2=startIndex
P_TupleTypeAtThrough_3=endIndex
P_TupleTypeAtThrough_comment=\
/**\n\
\ * Compute and answer the type union of the indicated range of element types.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A tuple type.\n\
\ * @param "{2}" "{5}"\n\
\ *        The one-based index (inclusive) of the start of the range.\n\
\ * @param "{3}" "{6}"\n\
\ *        The one-based index (inclusive) of the end of the range.\n\
\ * @returns "{7}"\n\
\ *    The type union of all element types in the specified range.\n\
\ */\n
# TupleTypeConcatenate : _=2
P_TupleTypeConcatenate=_++_
P_TupleTypeConcatenate_1=
P_TupleTypeConcatenate_2=
P_TupleTypeConcatenate_comment=\
/**\n\
\ * Compute and answer the concatenation of the specified tuple types. This is\n\
\ * the most specific type that encompasses all possible concatenations of the\n\
\ * instances of the two types.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Transformers"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A tuple type.\n\
\ * @param "{2}" "{4}"\n\
\ *        A tuple type.\n\
\ * @returns "{5}"\n\
\ *    The requested tuple type.\n\
\ */\n
# TupleTypeDefaultType : _=1
P_TupleTypeDefaultType=_'s⁇default type
P_TupleTypeDefaultType_1=aTupleType
P_TupleTypeDefaultType_comment=\
/**\n\
\ * Answer the default element type of instances of the specified type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s default element type.\n\
\ */\n
# TupleTypeLeadingTypes : _=1
P_TupleTypeLeadingTypes=_'s⁇leading types
P_TupleTypeLeadingTypes_1=aTupleType
P_TupleTypeLeadingTypes_comment=\
/**\n\
\ * Answer a tuple containing the leading element types of instances of the\n\
\ * specified type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s leading element types.\n\
\ */\n
# TupleTypeSequenceOfTypes : _=3
P_TupleTypeSequenceOfTypes=_[_.._]
P_TupleTypeSequenceOfTypes_1=aTupleType
P_TupleTypeSequenceOfTypes_2=sliceStart
P_TupleTypeSequenceOfTypes_3=sliceEnd
P_TupleTypeSequenceOfTypes_comment=\
/**\n\
\ * Compute and answer a tuple containing the requested element types. Indices\n\
\ * that are out of bounds report '{'@type "⊥"} as their element type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A tuple type.\n\
\ * @param "{2}" "{5}"\n\
\ *        The one-based index (inclusive) of the start of the slice.\n\
\ * @param "{3}" "{6}"\n\
\ *        The one-based index (inclusive) of the end of the slice.\n\
\ * @returns "{7}"\n\
\ *    The requested slice of element types.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# TupleTypeSizes : _=1
P_TupleTypeSizes=`|`|_`|`|
P_TupleTypeSizes_1=aTupleType
P_TupleTypeSizes_comment=\
/**\n\
\ * Answer the range of allowed cardinalities of instances of the specified type.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple type.\n\
\ * @returns "{3}"\n\
\ *    The argument''s cardinality requirement.\n\
\ */\n
# UnionOfTupleOfTypes : _=1
P_UnionOfTupleOfTypes=∪_
P_UnionOfTupleOfTypes_1=tupleOfTypes
P_UnionOfTupleOfTypes_comment=\
/**\n\
\ * Compute and answer the type union of the elements of the given tuple of\n\
\ * types.\n\
\ *\n\
\ * @category "Primitives" "Types" "Tuples" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A tuple of types.\n\
\ * @returns "{3}"\n\
\ *    The type union of the elements of the argument.\n\
\ */\n
# CastInto : _=2
P_CastInto=
P_CastInto_1=
P_CastInto_2=
P_CastInto_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ */\n
# CastIntoElse : _=3
P_CastIntoElse=Cast|cast_into_else_
P_CastIntoElse_1=value
P_CastIntoElse_2=intoBlock
P_CastIntoElse_3=elseBlock
P_CastIntoElse_comment=\
/**\n\
\ * If '{'@param "{1}"} is type-compatible with the parameter expected by the\n\
\ * function '{'@param "{2}"}, then invoke it with that argument, otherwise\n\
\ * invoke '{'@param "{3}"} with no arguments.  Answer the result of\n\
\ * whichever function was evaluated (they may be ⊤-valued).\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        A value to type-test.\n\
\ * @param "{2}" "{5}"\n\
\ *        A function to invoke with the provided value if its type is\n\
\ *        compatible with the parameter type.\n\
\ * @param "{3}" "{6}"\n\
\ *        A zero-argument function to invoke if the value was not compatible\n\
\ *        with the first function''s parameter.\n\
\ * @returns "{7}"\n\
\ *    The value produced by whichever function ran.  May be ⊤-valued.\n\
\ */\n
# CreateEnumeration : _=1
P_CreateEnumeration=enumeration of_
P_CreateEnumeration_1=instances
P_CreateEnumeration_comment=\
/**\n\
\ * Construct and answer an enumeration whose instances are fully determined by\n\
\ * the membership of the specified set.\n\
\ *\n\
\ * @category "Primitives" "Types" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The complete set of instances of the enumeration.\n\
\ * @returns "{3}"\n\
\ *    The requested enumeration.\n\
\ */\n
# InstanceCount : _=1
P_InstanceCount=`|_`|
P_InstanceCount_1=aType
P_InstanceCount_comment=\
/**\n\
\ * Answer the number of instances of the specified type. This is `∞` for all\n\
\ * types except for enumerations.\n\
\ *\n\
\ * @category "Primitives" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A type.\n\
\ * @returns "{3}"\n\
\ *    The cardinality of the membership of the type.\n\
\ */\n
# Instances : _=1
P_Instances=_'s⁇instances
P_Instances_1=enum
P_Instances_comment=\
/**\n\
\ * Answer the instances of the enumeration.\n\
\ *\n\
\ * @category "Primitives" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An enumeration.\n\
\ * @returns "{3}"\n\
\ *    A set whose members are the instances of the enumeration.\n\
\ * @raises "{4}"\n\
\ */\n
# IsInstanceOf : _=2
P_IsInstanceOf=_∈_
P_IsInstanceOf_1=value
P_IsInstanceOf_2=aType
P_IsInstanceOf_comment=\
/**\n\
\ * Is '{'@param "{1}"} an instance of '{'@param "{2}"}?\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The value to test for membership in '{'@param "{2}"}.\n\
\ * @param "{2}" "{4}"\n\
\ *        The target type for the membership check.\n\
\ * @returns "{5}"\n\
\ *    '{'@method "true"} if '{'@param "{1}"} is an instance of '{'@param\n\
\ *    "{2}"}, '{'@method "false"} otherwise.\n\
\ */\n
# IsSubtypeOf : _=2
P_IsSubtypeOf=_⊆_
P_IsSubtypeOf_1=
P_IsSubtypeOf_2=
P_IsSubtypeOf_comment=\
/**\n\
\ * Is the first argument a subtype of the second argument? This does not\n\
\ * implement the proper subtype relation, so the first argument is considered\n\
\ * a subtype of the second argument also if it is equal to the second argument.\n\
\ *\n\
\ * @category "Primitives" "Types" "Mathematics" "Relations"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A type.\n\
\ * @param "{2}" "{4}"\n\
\ *        A type.\n\
\ * @returns "{5}"\n\
\ *    `true` if the first argument is a subtype of, or the same type as, the\n\
\ *    second argument, `false` otherwise.\n\
\ */\n
# Type : _=1
P_Type=_'s⁇type
P_Type_1=value
P_Type_comment=\
/**\n\
\ * Answer the precise instance type of the supplied value. This is the most\n\
\ * specific possible type that describes the value.\n\
\ *\n\
\ * @category "Primitives" "Types" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        An arbitrary value.\n\
\ * @returns "{3}"\n\
\ *    The precise instance type of the supplied value.\n\
\ */\n
# TypeIntersection : _=2
P_TypeIntersection=_∩_
P_TypeIntersection_1=
P_TypeIntersection_2=
P_TypeIntersection_comment=\
/**\n\
\ * Compute and answer the type intersection of the two types. This is the most\n\
\ * general type that is a subtype of both types.\n\
\ *\n\
\ * @category "Primitives" "Types" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A type.\n\
\ * @param "{2}" "{4}"\n\
\ *        A type.\n\
\ * @returns "{5}"\n\
\ *    The type intersection of the arguments.\n\
\ */\n
# TypeUnion : _=2
P_TypeUnion=_∪_
P_TypeUnion_1=
P_TypeUnion_2=
P_TypeUnion_comment=\
/**\n\
\ * Compute and answer the type union of the two types. This is the most\n\
\ * specific type that is a supertype of both types.\n\
\ *\n\
\ * @category "Primitives" "Types" "Mathematics"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        A type.\n\
\ * @param "{2}" "{4}"\n\
\ *        A type.\n\
\ * @returns "{5}"\n\
\ *    The type union of the arguments.\n\
\ */\n
# AddWriteReactor : _=3
P_AddWriteReactor=
P_AddWriteReactor_1=
P_AddWriteReactor_2=
P_AddWriteReactor_3=
P_AddWriteReactor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ */\n
# AtomicAddToMap : _=3
P_AtomicAddToMap=_[_]:=_
P_AtomicAddToMap_1=var
P_AtomicAddToMap_2=key
P_AtomicAddToMap_3=value
P_AtomicAddToMap_comment=\
/**\n\
\ * Atomically add or replace a key → value binding of the map within a variable.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        The variable containing a map.\n\
\ * @param "{2}" "{5}"\n\
\ *        The key to add or overwrite.\n\
\ * @param "{3}" "{6}"\n\
\ *        The value to store at that key.\n\
\ * @returns "{7}"\n\
\ *    Nothing.\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ */\n
# AtomicCompareAndSwap : _=3
P_AtomicCompareAndSwap=
P_AtomicCompareAndSwap_1=
P_AtomicCompareAndSwap_2=
P_AtomicCompareAndSwap_3=
P_AtomicCompareAndSwap_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{4}"\n\
\ *        TODO\n\
\ * @param "{2}" "{5}"\n\
\ *        TODO\n\
\ * @param "{3}" "{6}"\n\
\ *        TODO\n\
\ * @returns "{7}"\n\
\ *    TODO\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ * @raises "{13}"\n\
\ */\n
# AtomicFetchAndAdd : _=2
P_AtomicFetchAndAdd=
P_AtomicFetchAndAdd_1=
P_AtomicFetchAndAdd_2=
P_AtomicFetchAndAdd_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ * @raises "{12}"\n\
\ */\n
# AtomicGetAndSet : _=2
P_AtomicGetAndSet=
P_AtomicGetAndSet_1=
P_AtomicGetAndSet_2=
P_AtomicGetAndSet_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ * @raises "{11}"\n\
\ */\n
# AtomicRemoveFromMap : _=2
P_AtomicRemoveFromMap=_-=_
P_AtomicRemoveFromMap_1=var
P_AtomicRemoveFromMap_2=key
P_AtomicRemoveFromMap_comment=\
/**\n\
\ * Atomically remove a key from the map within a variable.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The variable containing a map.\n\
\ * @param "{2}" "{4}"\n\
\ *        The key to remove.\n\
\ * @returns "{5}"\n\
\ *    Nothing.\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# ClearValue : _=1
P_ClearValue=
P_ClearValue_1=
P_ClearValue_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# CreateInitializedVariable : _=2
P_CreateInitializedVariable=new`↑_initialized to_
P_CreateInitializedVariable_1=containmentType
P_CreateInitializedVariable_2=initialValue
P_CreateInitializedVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type,\n\
\ * after initializing it to the given value.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The containment type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The initial value to write into the new variable.\n\
\ * @returns "{5}"\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ * @raises "{6}"\n\
\ */\n
# CreateReadWriteVariableType : _=2
P_CreateReadWriteVariableType=read_/write_
P_CreateReadWriteVariableType_1=readType
P_CreateReadWriteVariableType_2=writeType
P_CreateReadWriteVariableType_comment=\
/**\n\
\ * Construct and answer a variable type from the specified read and write types.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Types" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The read type of the variable type.\n\
\ * @param "{2}" "{4}"\n\
\ *        The write type of the variable type.\n\
\ * @returns "{5}"\n\
\ *    The requested variable type.\n\
\ */\n
# CreateVariable : _=1
P_CreateVariable=new`↑_
P_CreateVariable_1=containmentType
P_CreateVariable_comment=\
/**\n\
\ * Construct and answer a new variable with the specified containment type.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The containment type.\n\
\ * @returns "{3}"\n\
\ *    A new variable capable of retrieving and storing values of the specified\n\
\ *    containment type.\n\
\ */\n
# CreateVariableType : _=1
P_CreateVariableType=`↑_
P_CreateVariableType_1=containmentType
P_CreateVariableType_comment=\
/**\n\
\ * Construct and answer a variable type with the specified containment type.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Types" "Constructors"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        The containment type.\n\
\ * @returns "{3}"\n\
\ *    The requested variable type.\n\
\ */\n
# DisableTraceVariableReadsBeforeWrites : _=2
P_DisableTraceVariableReadsBeforeWrites=
P_DisableTraceVariableReadsBeforeWrites_1=
P_DisableTraceVariableReadsBeforeWrites_2=
P_DisableTraceVariableReadsBeforeWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ */\n
# DisableTraceVariableWrites : _=0
P_DisableTraceVariableWrites=
P_DisableTraceVariableWrites_comment=\
/**\n\
\ * @method "{0}"\n\
\ *\n\
\ * @returns "{1}"\n\
\ * @raises "{2}"\n\
\ */\n
# GetClearing : _=1
P_GetClearing=
P_GetClearing_1=
P_GetClearing_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        TODO\n\
\ * @returns "{3}"\n\
\ *    TODO\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ */\n
# GetValue : _=1
P_GetValue=↓_
P_GetValue_1=var
P_GetValue_comment=\
/**\n\
\ * Answer the value contained within the specified variable.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable.\n\
\ * @returns "{3}"\n\
\ *    The value contained within the specified variable.\n\
\ * @raises "{4}"\n\
\ * @raises "{5}"\n\
\ */\n
# HasNoValue : _=1
P_HasNoValue=_↑is unassigned
P_HasNoValue_1=var
P_HasNoValue_comment=\
/**\n\
\ * Is the specified variable unassigned?\n\
\ *\n\
\ * @category "Primitives" "Variables" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable.\n\
\ * @returns "{3}"\n\
\ *    '{'@method "true"} if the variable does not contain a value, '{'@method\n\
\ *    "false"} otherwise.\n\
\ */\n
# KeyInVariableMap : _=2
P_KeyInVariableMap=_∈_
P_KeyInVariableMap_1=key
P_KeyInVariableMap_2=mapVariable
P_KeyInVariableMap_comment=\
/**\n\
\ * Answer whether the given key is present in the map in the given variable.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        The key to search for.\n\
\ * @param "{2}" "{4}"\n\
\ *        The variable holding a map whose keys are to be searched.\n\
\ * @returns "{5}"\n\
\ *    Whether the key is present in the variable''s map.\n\
\ * @raises "{6}"\n\
\ */\n
# RemoveWriteReactor : _=2
P_RemoveWriteReactor=
P_RemoveWriteReactor_1=
P_RemoveWriteReactor_2=
P_RemoveWriteReactor_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# SetValue : _=2
P_SetValue=
P_SetValue_1=
P_SetValue_2=
P_SetValue_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ * @raises "{8}"\n\
\ * @raises "{9}"\n\
\ * @raises "{10}"\n\
\ */\n
# Swap : _=2
P_Swap=
P_Swap_1=
P_Swap_2=
P_Swap_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{3}"\n\
\ *        TODO\n\
\ * @param "{2}" "{4}"\n\
\ *        TODO\n\
\ * @returns "{5}"\n\
\ *    TODO\n\
\ * @raises "{6}"\n\
\ * @raises "{7}"\n\
\ */\n
# TraceVariableReadsBeforeWrites : _=0
P_TraceVariableReadsBeforeWrites=
P_TraceVariableReadsBeforeWrites_comment=\
/**\n\
\ * TODO: Method description goes here.\n\
\ *\n\
\ * @category "Primitives"\n\
\ * @method "{0}"\n\
\ * @returns "{1}"\n\
\ *    TODO\n\
\ * @raises "{2}"\n\
\ */\n
# TraceVariableWrites : _=0
P_TraceVariableWrites=
P_TraceVariableWrites_comment=\
/**\n\
\ * @method "{0}"\n\
\ *\n\
\ * @returns "{1}"\n\
\ * @raises "{2}"\n\
\ */\n
# VariableReadType : _=1
P_VariableReadType=_'s⁇read type
P_VariableReadType_1=varType
P_VariableReadType_comment=\
/**\n\
\ * Answer the read type of the specified variable type. All values read from\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable type.\n\
\ * @returns "{3}"\n\
\ *    The most general type that describes values that can be read from\n\
\ *    instances of '{'@param "{1}"}.\n\
\ */\n
# VariableWriteType : _=1
P_VariableWriteType=_'s⁇write type
P_VariableWriteType_1=varType
P_VariableWriteType_comment=\
/**\n\
\ * Answer the write type of the specified variable type. All values written to\n\
\ * instances of the variable type are at least as specific as the answer.\n\
\ *\n\
\ * @category "Primitives" "Variables" "Types" "Queries"\n\
\ * @method "{0}"\n\
\ * @param "{1}" "{2}"\n\
\ *        A variable type.\n\
\ * @returns "{3}"\n\
\ *    The most general type that describes values that can be written to\n\
\ *    instances of '{'@param "{1}"}.\n\
\ */\n
